
STM32F103C8T6_Deneme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004efc  08004efc  00014efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fa8  08004fa8  0002014c  2**0
                  CONTENTS
  4 .ARM          00000000  08004fa8  08004fa8  0002014c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fa8  08004fa8  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fa8  08004fa8  00014fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fac  08004fac  00014fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08004fb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005dc  2000014c  080050fc  0002014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000728  080050fc  00020728  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020175  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cc35  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002090  00000000  00000000  0002cded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb0  00000000  00000000  0002ee80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009eb  00000000  00000000  0002fb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000183b1  00000000  00000000  0003051b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000107e5  00000000  00000000  000488cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a742  00000000  00000000  000590b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a98  00000000  00000000  000e37f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000e728c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000014c 	.word	0x2000014c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004ee4 	.word	0x08004ee4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000150 	.word	0x20000150
 800014c:	08004ee4 	.word	0x08004ee4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2f>:
 800072c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000730:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000734:	bf24      	itt	cs
 8000736:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800073a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800073e:	d90d      	bls.n	800075c <__aeabi_d2f+0x30>
 8000740:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000744:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000748:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800074c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000750:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000754:	bf08      	it	eq
 8000756:	f020 0001 	biceq.w	r0, r0, #1
 800075a:	4770      	bx	lr
 800075c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000760:	d121      	bne.n	80007a6 <__aeabi_d2f+0x7a>
 8000762:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000766:	bfbc      	itt	lt
 8000768:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800076c:	4770      	bxlt	lr
 800076e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000772:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000776:	f1c2 0218 	rsb	r2, r2, #24
 800077a:	f1c2 0c20 	rsb	ip, r2, #32
 800077e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000782:	fa20 f002 	lsr.w	r0, r0, r2
 8000786:	bf18      	it	ne
 8000788:	f040 0001 	orrne.w	r0, r0, #1
 800078c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000790:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000794:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000798:	ea40 000c 	orr.w	r0, r0, ip
 800079c:	fa23 f302 	lsr.w	r3, r3, r2
 80007a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007a4:	e7cc      	b.n	8000740 <__aeabi_d2f+0x14>
 80007a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007aa:	d107      	bne.n	80007bc <__aeabi_d2f+0x90>
 80007ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007b0:	bf1e      	ittt	ne
 80007b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007ba:	4770      	bxne	lr
 80007bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop

080007cc <Set_Time>:
};

// ----------------------------------------------

void Set_Time()
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0

	uint8_t Comma_Trig=0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	71fb      	strb	r3, [r7, #7]
	uint16_t syc=0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	80bb      	strh	r3, [r7, #4]
/*
	Time.hh = ((GPGGA_Data[7]-'0')*10+(uint8_t)GPGGA_Data[8]-'0')+3; //GMT +3
	Time.mm = (GPGGA_Data[9]-'0')*10+(uint8_t)GPGGA_Data[10]-'0';
	Time.ss = (GPGGA_Data[11]-'0')*10+(uint8_t)GPGGA_Data[12]-'0';
*/
	Get_GGA();
 80007da:	f000 fa41 	bl	8000c60 <Get_GGA>

	while(Comma_Trig<=0)//GPGGA_Data bufferındaki verilerin analizi ',' e göre yapılmıştır
 80007de:	e058      	b.n	8000892 <Set_Time+0xc6>
	{
		if(GPGGA_Data[syc]==',')
 80007e0:	88bb      	ldrh	r3, [r7, #4]
 80007e2:	4a30      	ldr	r2, [pc, #192]	; (80008a4 <Set_Time+0xd8>)
 80007e4:	5cd3      	ldrb	r3, [r2, r3]
 80007e6:	2b2c      	cmp	r3, #44	; 0x2c
 80007e8:	d150      	bne.n	800088c <Set_Time+0xc0>
		{
			if(GPGGA_Data[syc+1] == ',')//No data has received yet
 80007ea:	88bb      	ldrh	r3, [r7, #4]
 80007ec:	3301      	adds	r3, #1
 80007ee:	4a2d      	ldr	r2, [pc, #180]	; (80008a4 <Set_Time+0xd8>)
 80007f0:	5cd3      	ldrb	r3, [r2, r3]
 80007f2:	2b2c      	cmp	r3, #44	; 0x2c
 80007f4:	d109      	bne.n	800080a <Set_Time+0x3e>
			{
				Time.hh=0;
 80007f6:	4b2c      	ldr	r3, [pc, #176]	; (80008a8 <Set_Time+0xdc>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
				Time.mm=0;
 80007fc:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <Set_Time+0xdc>)
 80007fe:	2200      	movs	r2, #0
 8000800:	705a      	strb	r2, [r3, #1]
				Time.ss=0;
 8000802:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <Set_Time+0xdc>)
 8000804:	2200      	movs	r2, #0
 8000806:	709a      	strb	r2, [r3, #2]
 8000808:	e03e      	b.n	8000888 <Set_Time+0xbc>

			}

			else
			{
				Time.hh= ((GPGGA_Data[syc+1]-'0')*10+(uint8_t)GPGGA_Data[syc+2]-'0')+3;
 800080a:	88bb      	ldrh	r3, [r7, #4]
 800080c:	3301      	adds	r3, #1
 800080e:	4a25      	ldr	r2, [pc, #148]	; (80008a4 <Set_Time+0xd8>)
 8000810:	5cd3      	ldrb	r3, [r2, r3]
 8000812:	3b30      	subs	r3, #48	; 0x30
 8000814:	b2db      	uxtb	r3, r3
 8000816:	461a      	mov	r2, r3
 8000818:	0092      	lsls	r2, r2, #2
 800081a:	4413      	add	r3, r2
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	b2da      	uxtb	r2, r3
 8000820:	88bb      	ldrh	r3, [r7, #4]
 8000822:	3302      	adds	r3, #2
 8000824:	491f      	ldr	r1, [pc, #124]	; (80008a4 <Set_Time+0xd8>)
 8000826:	5ccb      	ldrb	r3, [r1, r3]
 8000828:	4413      	add	r3, r2
 800082a:	b2db      	uxtb	r3, r3
 800082c:	3b2d      	subs	r3, #45	; 0x2d
 800082e:	b2da      	uxtb	r2, r3
 8000830:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <Set_Time+0xdc>)
 8000832:	701a      	strb	r2, [r3, #0]
				Time.mm = (GPGGA_Data[syc+3]-'0')*10+(uint8_t)GPGGA_Data[syc+4]-'0';
 8000834:	88bb      	ldrh	r3, [r7, #4]
 8000836:	3303      	adds	r3, #3
 8000838:	4a1a      	ldr	r2, [pc, #104]	; (80008a4 <Set_Time+0xd8>)
 800083a:	5cd3      	ldrb	r3, [r2, r3]
 800083c:	3b30      	subs	r3, #48	; 0x30
 800083e:	b2db      	uxtb	r3, r3
 8000840:	461a      	mov	r2, r3
 8000842:	0092      	lsls	r2, r2, #2
 8000844:	4413      	add	r3, r2
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	b2da      	uxtb	r2, r3
 800084a:	88bb      	ldrh	r3, [r7, #4]
 800084c:	3304      	adds	r3, #4
 800084e:	4915      	ldr	r1, [pc, #84]	; (80008a4 <Set_Time+0xd8>)
 8000850:	5ccb      	ldrb	r3, [r1, r3]
 8000852:	4413      	add	r3, r2
 8000854:	b2db      	uxtb	r3, r3
 8000856:	3b30      	subs	r3, #48	; 0x30
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <Set_Time+0xdc>)
 800085c:	705a      	strb	r2, [r3, #1]
				Time.ss = (GPGGA_Data[syc+5]-'0')*10+(uint8_t)GPGGA_Data[syc+6]-'0';
 800085e:	88bb      	ldrh	r3, [r7, #4]
 8000860:	3305      	adds	r3, #5
 8000862:	4a10      	ldr	r2, [pc, #64]	; (80008a4 <Set_Time+0xd8>)
 8000864:	5cd3      	ldrb	r3, [r2, r3]
 8000866:	3b30      	subs	r3, #48	; 0x30
 8000868:	b2db      	uxtb	r3, r3
 800086a:	461a      	mov	r2, r3
 800086c:	0092      	lsls	r2, r2, #2
 800086e:	4413      	add	r3, r2
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	b2da      	uxtb	r2, r3
 8000874:	88bb      	ldrh	r3, [r7, #4]
 8000876:	3306      	adds	r3, #6
 8000878:	490a      	ldr	r1, [pc, #40]	; (80008a4 <Set_Time+0xd8>)
 800087a:	5ccb      	ldrb	r3, [r1, r3]
 800087c:	4413      	add	r3, r2
 800087e:	b2db      	uxtb	r3, r3
 8000880:	3b30      	subs	r3, #48	; 0x30
 8000882:	b2da      	uxtb	r2, r3
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <Set_Time+0xdc>)
 8000886:	709a      	strb	r2, [r3, #2]
			}

			Comma_Trig=1;
 8000888:	2301      	movs	r3, #1
 800088a:	71fb      	strb	r3, [r7, #7]
		}

		syc++;
 800088c:	88bb      	ldrh	r3, [r7, #4]
 800088e:	3301      	adds	r3, #1
 8000890:	80bb      	strh	r3, [r7, #4]
	while(Comma_Trig<=0)//GPGGA_Data bufferındaki verilerin analizi ',' e göre yapılmıştır
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d0a3      	beq.n	80007e0 <Set_Time+0x14>
	}

}
 8000898:	bf00      	nop
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200001cc 	.word	0x200001cc
 80008a8:	20000234 	.word	0x20000234

080008ac <Send_Time>:
void Send_Time()
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	SIM800l_Send_Data(Time.mm);
 80008b0:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <Send_Time+0x14>)
 80008b2:	785b      	ldrb	r3, [r3, #1]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 fbbd 	bl	8001034 <SIM800l_Send_Data>
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000234 	.word	0x20000234
 80008c4:	00000000 	.word	0x00000000

080008c8 <Set_Location>:
void Set_Location()
{
 80008c8:	b5b0      	push	{r4, r5, r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
	struct Coordinate Coord;


	Coord.latitude= (GPGGA_Data[17]-'0')*10 + (GPGGA_Data[18]-'0')*1 + (GPGGA_Data[19]-'0')*0.1 + (GPGGA_Data[20]-'0')*0.01 + (GPGGA_Data[21]-'0')*0.001 + (GPGGA_Data[22]-'0')*0.0001 + (GPGGA_Data[23]-'0')*0.00001 + (GPGGA_Data[24]-'0')*0.000001 + (GPGGA_Data[25]-'0')*0.0000001 + (GPGGA_Data[26]-'0')*0.00000001;
 80008ce:	4bdc      	ldr	r3, [pc, #880]	; (8000c40 <Set_Location+0x378>)
 80008d0:	7c5b      	ldrb	r3, [r3, #17]
 80008d2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80008d6:	4613      	mov	r3, r2
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	4413      	add	r3, r2
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	461a      	mov	r2, r3
 80008e0:	4bd7      	ldr	r3, [pc, #860]	; (8000c40 <Set_Location+0x378>)
 80008e2:	7c9b      	ldrb	r3, [r3, #18]
 80008e4:	3b30      	subs	r3, #48	; 0x30
 80008e6:	4413      	add	r3, r2
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff feb5 	bl	8000658 <__aeabi_i2d>
 80008ee:	4604      	mov	r4, r0
 80008f0:	460d      	mov	r5, r1
 80008f2:	4bd3      	ldr	r3, [pc, #844]	; (8000c40 <Set_Location+0x378>)
 80008f4:	7cdb      	ldrb	r3, [r3, #19]
 80008f6:	3b30      	subs	r3, #48	; 0x30
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fead 	bl	8000658 <__aeabi_i2d>
 80008fe:	a3c0      	add	r3, pc, #768	; (adr r3, 8000c00 <Set_Location+0x338>)
 8000900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000904:	f7ff fc2c 	bl	8000160 <__aeabi_dmul>
 8000908:	4602      	mov	r2, r0
 800090a:	460b      	mov	r3, r1
 800090c:	4620      	mov	r0, r4
 800090e:	4629      	mov	r1, r5
 8000910:	f7ff fd56 	bl	80003c0 <__adddf3>
 8000914:	4602      	mov	r2, r0
 8000916:	460b      	mov	r3, r1
 8000918:	4614      	mov	r4, r2
 800091a:	461d      	mov	r5, r3
 800091c:	4bc8      	ldr	r3, [pc, #800]	; (8000c40 <Set_Location+0x378>)
 800091e:	7d1b      	ldrb	r3, [r3, #20]
 8000920:	3b30      	subs	r3, #48	; 0x30
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fe98 	bl	8000658 <__aeabi_i2d>
 8000928:	a3b7      	add	r3, pc, #732	; (adr r3, 8000c08 <Set_Location+0x340>)
 800092a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800092e:	f7ff fc17 	bl	8000160 <__aeabi_dmul>
 8000932:	4602      	mov	r2, r0
 8000934:	460b      	mov	r3, r1
 8000936:	4620      	mov	r0, r4
 8000938:	4629      	mov	r1, r5
 800093a:	f7ff fd41 	bl	80003c0 <__adddf3>
 800093e:	4602      	mov	r2, r0
 8000940:	460b      	mov	r3, r1
 8000942:	4614      	mov	r4, r2
 8000944:	461d      	mov	r5, r3
 8000946:	4bbe      	ldr	r3, [pc, #760]	; (8000c40 <Set_Location+0x378>)
 8000948:	7d5b      	ldrb	r3, [r3, #21]
 800094a:	3b30      	subs	r3, #48	; 0x30
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fe83 	bl	8000658 <__aeabi_i2d>
 8000952:	a3af      	add	r3, pc, #700	; (adr r3, 8000c10 <Set_Location+0x348>)
 8000954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000958:	f7ff fc02 	bl	8000160 <__aeabi_dmul>
 800095c:	4602      	mov	r2, r0
 800095e:	460b      	mov	r3, r1
 8000960:	4620      	mov	r0, r4
 8000962:	4629      	mov	r1, r5
 8000964:	f7ff fd2c 	bl	80003c0 <__adddf3>
 8000968:	4602      	mov	r2, r0
 800096a:	460b      	mov	r3, r1
 800096c:	4614      	mov	r4, r2
 800096e:	461d      	mov	r5, r3
 8000970:	4bb3      	ldr	r3, [pc, #716]	; (8000c40 <Set_Location+0x378>)
 8000972:	7d9b      	ldrb	r3, [r3, #22]
 8000974:	3b30      	subs	r3, #48	; 0x30
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fe6e 	bl	8000658 <__aeabi_i2d>
 800097c:	a3a6      	add	r3, pc, #664	; (adr r3, 8000c18 <Set_Location+0x350>)
 800097e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000982:	f7ff fbed 	bl	8000160 <__aeabi_dmul>
 8000986:	4602      	mov	r2, r0
 8000988:	460b      	mov	r3, r1
 800098a:	4620      	mov	r0, r4
 800098c:	4629      	mov	r1, r5
 800098e:	f7ff fd17 	bl	80003c0 <__adddf3>
 8000992:	4602      	mov	r2, r0
 8000994:	460b      	mov	r3, r1
 8000996:	4614      	mov	r4, r2
 8000998:	461d      	mov	r5, r3
 800099a:	4ba9      	ldr	r3, [pc, #676]	; (8000c40 <Set_Location+0x378>)
 800099c:	7ddb      	ldrb	r3, [r3, #23]
 800099e:	3b30      	subs	r3, #48	; 0x30
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fe59 	bl	8000658 <__aeabi_i2d>
 80009a6:	a39e      	add	r3, pc, #632	; (adr r3, 8000c20 <Set_Location+0x358>)
 80009a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009ac:	f7ff fbd8 	bl	8000160 <__aeabi_dmul>
 80009b0:	4602      	mov	r2, r0
 80009b2:	460b      	mov	r3, r1
 80009b4:	4620      	mov	r0, r4
 80009b6:	4629      	mov	r1, r5
 80009b8:	f7ff fd02 	bl	80003c0 <__adddf3>
 80009bc:	4602      	mov	r2, r0
 80009be:	460b      	mov	r3, r1
 80009c0:	4614      	mov	r4, r2
 80009c2:	461d      	mov	r5, r3
 80009c4:	4b9e      	ldr	r3, [pc, #632]	; (8000c40 <Set_Location+0x378>)
 80009c6:	7e1b      	ldrb	r3, [r3, #24]
 80009c8:	3b30      	subs	r3, #48	; 0x30
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fe44 	bl	8000658 <__aeabi_i2d>
 80009d0:	a395      	add	r3, pc, #596	; (adr r3, 8000c28 <Set_Location+0x360>)
 80009d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009d6:	f7ff fbc3 	bl	8000160 <__aeabi_dmul>
 80009da:	4602      	mov	r2, r0
 80009dc:	460b      	mov	r3, r1
 80009de:	4620      	mov	r0, r4
 80009e0:	4629      	mov	r1, r5
 80009e2:	f7ff fced 	bl	80003c0 <__adddf3>
 80009e6:	4602      	mov	r2, r0
 80009e8:	460b      	mov	r3, r1
 80009ea:	4614      	mov	r4, r2
 80009ec:	461d      	mov	r5, r3
 80009ee:	4b94      	ldr	r3, [pc, #592]	; (8000c40 <Set_Location+0x378>)
 80009f0:	7e5b      	ldrb	r3, [r3, #25]
 80009f2:	3b30      	subs	r3, #48	; 0x30
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fe2f 	bl	8000658 <__aeabi_i2d>
 80009fa:	a38d      	add	r3, pc, #564	; (adr r3, 8000c30 <Set_Location+0x368>)
 80009fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a00:	f7ff fbae 	bl	8000160 <__aeabi_dmul>
 8000a04:	4602      	mov	r2, r0
 8000a06:	460b      	mov	r3, r1
 8000a08:	4620      	mov	r0, r4
 8000a0a:	4629      	mov	r1, r5
 8000a0c:	f7ff fcd8 	bl	80003c0 <__adddf3>
 8000a10:	4602      	mov	r2, r0
 8000a12:	460b      	mov	r3, r1
 8000a14:	4614      	mov	r4, r2
 8000a16:	461d      	mov	r5, r3
 8000a18:	4b89      	ldr	r3, [pc, #548]	; (8000c40 <Set_Location+0x378>)
 8000a1a:	7e9b      	ldrb	r3, [r3, #26]
 8000a1c:	3b30      	subs	r3, #48	; 0x30
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fe1a 	bl	8000658 <__aeabi_i2d>
 8000a24:	a384      	add	r3, pc, #528	; (adr r3, 8000c38 <Set_Location+0x370>)
 8000a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a2a:	f7ff fb99 	bl	8000160 <__aeabi_dmul>
 8000a2e:	4602      	mov	r2, r0
 8000a30:	460b      	mov	r3, r1
 8000a32:	4620      	mov	r0, r4
 8000a34:	4629      	mov	r1, r5
 8000a36:	f7ff fcc3 	bl	80003c0 <__adddf3>
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	f7ff fe73 	bl	800072c <__aeabi_d2f>
 8000a46:	4603      	mov	r3, r0
 8000a48:	603b      	str	r3, [r7, #0]
	Coord.L_hemisphere=GPGGA_Data[28];
 8000a4a:	4b7d      	ldr	r3, [pc, #500]	; (8000c40 <Set_Location+0x378>)
 8000a4c:	7f1b      	ldrb	r3, [r3, #28]
 8000a4e:	713b      	strb	r3, [r7, #4]
	Coord.longitude= (GPGGA_Data[31]-'0')*10 + (GPGGA_Data[32]-'0')*1 + (GPGGA_Data[33]-'0')*0.1 + (GPGGA_Data[34]-'0')*0.01 + (GPGGA_Data[35]-'0')*0.001 + (GPGGA_Data[36]-'0')*0.0001 + (GPGGA_Data[37]-'0')*0.00001 + (GPGGA_Data[38]-'0')*0.000001 + (GPGGA_Data[39]-'0')*0.0000001 + (GPGGA_Data-'0')[40]*0.00000001;
 8000a50:	4b7b      	ldr	r3, [pc, #492]	; (8000c40 <Set_Location+0x378>)
 8000a52:	7fdb      	ldrb	r3, [r3, #31]
 8000a54:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000a58:	4613      	mov	r3, r2
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	4413      	add	r3, r2
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b77      	ldr	r3, [pc, #476]	; (8000c40 <Set_Location+0x378>)
 8000a64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a68:	3b30      	subs	r3, #48	; 0x30
 8000a6a:	4413      	add	r3, r2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fdf3 	bl	8000658 <__aeabi_i2d>
 8000a72:	4604      	mov	r4, r0
 8000a74:	460d      	mov	r5, r1
 8000a76:	4b72      	ldr	r3, [pc, #456]	; (8000c40 <Set_Location+0x378>)
 8000a78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a7c:	3b30      	subs	r3, #48	; 0x30
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fdea 	bl	8000658 <__aeabi_i2d>
 8000a84:	a35e      	add	r3, pc, #376	; (adr r3, 8000c00 <Set_Location+0x338>)
 8000a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a8a:	f7ff fb69 	bl	8000160 <__aeabi_dmul>
 8000a8e:	4602      	mov	r2, r0
 8000a90:	460b      	mov	r3, r1
 8000a92:	4620      	mov	r0, r4
 8000a94:	4629      	mov	r1, r5
 8000a96:	f7ff fc93 	bl	80003c0 <__adddf3>
 8000a9a:	4602      	mov	r2, r0
 8000a9c:	460b      	mov	r3, r1
 8000a9e:	4614      	mov	r4, r2
 8000aa0:	461d      	mov	r5, r3
 8000aa2:	4b67      	ldr	r3, [pc, #412]	; (8000c40 <Set_Location+0x378>)
 8000aa4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000aa8:	3b30      	subs	r3, #48	; 0x30
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fdd4 	bl	8000658 <__aeabi_i2d>
 8000ab0:	a355      	add	r3, pc, #340	; (adr r3, 8000c08 <Set_Location+0x340>)
 8000ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ab6:	f7ff fb53 	bl	8000160 <__aeabi_dmul>
 8000aba:	4602      	mov	r2, r0
 8000abc:	460b      	mov	r3, r1
 8000abe:	4620      	mov	r0, r4
 8000ac0:	4629      	mov	r1, r5
 8000ac2:	f7ff fc7d 	bl	80003c0 <__adddf3>
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	460b      	mov	r3, r1
 8000aca:	4614      	mov	r4, r2
 8000acc:	461d      	mov	r5, r3
 8000ace:	4b5c      	ldr	r3, [pc, #368]	; (8000c40 <Set_Location+0x378>)
 8000ad0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000ad4:	3b30      	subs	r3, #48	; 0x30
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fdbe 	bl	8000658 <__aeabi_i2d>
 8000adc:	a34c      	add	r3, pc, #304	; (adr r3, 8000c10 <Set_Location+0x348>)
 8000ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ae2:	f7ff fb3d 	bl	8000160 <__aeabi_dmul>
 8000ae6:	4602      	mov	r2, r0
 8000ae8:	460b      	mov	r3, r1
 8000aea:	4620      	mov	r0, r4
 8000aec:	4629      	mov	r1, r5
 8000aee:	f7ff fc67 	bl	80003c0 <__adddf3>
 8000af2:	4602      	mov	r2, r0
 8000af4:	460b      	mov	r3, r1
 8000af6:	4614      	mov	r4, r2
 8000af8:	461d      	mov	r5, r3
 8000afa:	4b51      	ldr	r3, [pc, #324]	; (8000c40 <Set_Location+0x378>)
 8000afc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b00:	3b30      	subs	r3, #48	; 0x30
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fda8 	bl	8000658 <__aeabi_i2d>
 8000b08:	a343      	add	r3, pc, #268	; (adr r3, 8000c18 <Set_Location+0x350>)
 8000b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b0e:	f7ff fb27 	bl	8000160 <__aeabi_dmul>
 8000b12:	4602      	mov	r2, r0
 8000b14:	460b      	mov	r3, r1
 8000b16:	4620      	mov	r0, r4
 8000b18:	4629      	mov	r1, r5
 8000b1a:	f7ff fc51 	bl	80003c0 <__adddf3>
 8000b1e:	4602      	mov	r2, r0
 8000b20:	460b      	mov	r3, r1
 8000b22:	4614      	mov	r4, r2
 8000b24:	461d      	mov	r5, r3
 8000b26:	4b46      	ldr	r3, [pc, #280]	; (8000c40 <Set_Location+0x378>)
 8000b28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000b2c:	3b30      	subs	r3, #48	; 0x30
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fd92 	bl	8000658 <__aeabi_i2d>
 8000b34:	a33a      	add	r3, pc, #232	; (adr r3, 8000c20 <Set_Location+0x358>)
 8000b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b3a:	f7ff fb11 	bl	8000160 <__aeabi_dmul>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	460b      	mov	r3, r1
 8000b42:	4620      	mov	r0, r4
 8000b44:	4629      	mov	r1, r5
 8000b46:	f7ff fc3b 	bl	80003c0 <__adddf3>
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	4614      	mov	r4, r2
 8000b50:	461d      	mov	r5, r3
 8000b52:	4b3b      	ldr	r3, [pc, #236]	; (8000c40 <Set_Location+0x378>)
 8000b54:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000b58:	3b30      	subs	r3, #48	; 0x30
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff fd7c 	bl	8000658 <__aeabi_i2d>
 8000b60:	a331      	add	r3, pc, #196	; (adr r3, 8000c28 <Set_Location+0x360>)
 8000b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b66:	f7ff fafb 	bl	8000160 <__aeabi_dmul>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	4620      	mov	r0, r4
 8000b70:	4629      	mov	r1, r5
 8000b72:	f7ff fc25 	bl	80003c0 <__adddf3>
 8000b76:	4602      	mov	r2, r0
 8000b78:	460b      	mov	r3, r1
 8000b7a:	4614      	mov	r4, r2
 8000b7c:	461d      	mov	r5, r3
 8000b7e:	4b30      	ldr	r3, [pc, #192]	; (8000c40 <Set_Location+0x378>)
 8000b80:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000b84:	3b30      	subs	r3, #48	; 0x30
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fd66 	bl	8000658 <__aeabi_i2d>
 8000b8c:	a328      	add	r3, pc, #160	; (adr r3, 8000c30 <Set_Location+0x368>)
 8000b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b92:	f7ff fae5 	bl	8000160 <__aeabi_dmul>
 8000b96:	4602      	mov	r2, r0
 8000b98:	460b      	mov	r3, r1
 8000b9a:	4620      	mov	r0, r4
 8000b9c:	4629      	mov	r1, r5
 8000b9e:	f7ff fc0f 	bl	80003c0 <__adddf3>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	4614      	mov	r4, r2
 8000ba8:	461d      	mov	r5, r3
 8000baa:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <Set_Location+0x378>)
 8000bac:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fd51 	bl	8000658 <__aeabi_i2d>
 8000bb6:	a320      	add	r3, pc, #128	; (adr r3, 8000c38 <Set_Location+0x370>)
 8000bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bbc:	f7ff fad0 	bl	8000160 <__aeabi_dmul>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	4620      	mov	r0, r4
 8000bc6:	4629      	mov	r1, r5
 8000bc8:	f7ff fbfa 	bl	80003c0 <__adddf3>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	460b      	mov	r3, r1
 8000bd0:	4610      	mov	r0, r2
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	f7ff fdaa 	bl	800072c <__aeabi_d2f>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	60bb      	str	r3, [r7, #8]
	Coord.T_hemisphere = GPGGA_Data[42];
 8000bdc:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <Set_Location+0x378>)
 8000bde:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000be2:	733b      	strb	r3, [r7, #12]

	if(Coord.L_hemisphere == 'N' || Coord.L_hemisphere == 'S' && Coord.T_hemisphere == 'E'  || Coord.T_hemisphere == 'W')
 8000be4:	793b      	ldrb	r3, [r7, #4]
 8000be6:	2b4e      	cmp	r3, #78	; 0x4e
 8000be8:	d02c      	beq.n	8000c44 <Set_Location+0x37c>
 8000bea:	793b      	ldrb	r3, [r7, #4]
 8000bec:	2b53      	cmp	r3, #83	; 0x53
 8000bee:	d102      	bne.n	8000bf6 <Set_Location+0x32e>
 8000bf0:	7b3b      	ldrb	r3, [r7, #12]
 8000bf2:	2b45      	cmp	r3, #69	; 0x45
 8000bf4:	d026      	beq.n	8000c44 <Set_Location+0x37c>
 8000bf6:	7b3b      	ldrb	r3, [r7, #12]
 8000bf8:	2b57      	cmp	r3, #87	; 0x57
 8000bfa:	d127      	bne.n	8000c4c <Set_Location+0x384>
 8000bfc:	e022      	b.n	8000c44 <Set_Location+0x37c>
 8000bfe:	bf00      	nop
 8000c00:	9999999a 	.word	0x9999999a
 8000c04:	3fb99999 	.word	0x3fb99999
 8000c08:	47ae147b 	.word	0x47ae147b
 8000c0c:	3f847ae1 	.word	0x3f847ae1
 8000c10:	d2f1a9fc 	.word	0xd2f1a9fc
 8000c14:	3f50624d 	.word	0x3f50624d
 8000c18:	eb1c432d 	.word	0xeb1c432d
 8000c1c:	3f1a36e2 	.word	0x3f1a36e2
 8000c20:	88e368f1 	.word	0x88e368f1
 8000c24:	3ee4f8b5 	.word	0x3ee4f8b5
 8000c28:	a0b5ed8d 	.word	0xa0b5ed8d
 8000c2c:	3eb0c6f7 	.word	0x3eb0c6f7
 8000c30:	9abcaf48 	.word	0x9abcaf48
 8000c34:	3e7ad7f2 	.word	0x3e7ad7f2
 8000c38:	e2308c3a 	.word	0xe2308c3a
 8000c3c:	3e45798e 	.word	0x3e45798e
 8000c40:	200001cc 	.word	0x200001cc
	{
		GPS_Connection_Stat = true;
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <Set_Location+0x394>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	701a      	strb	r2, [r3, #0]
 8000c4a:	e003      	b.n	8000c54 <Set_Location+0x38c>
	}
	else GPS_Connection_Stat = false;
 8000c4c:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <Set_Location+0x394>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	701a      	strb	r2, [r3, #0]
}
 8000c52:	bf00      	nop
 8000c54:	bf00      	nop
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c5c:	20000230 	.word	0x20000230

08000c60 <Get_GGA>:
	Reorder_data(Sp_finder(GPRMC),GPRMC);

}

void Get_GGA()//GLOBAL POSITIONING SYSTEM FIX DATA
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	//HAL_UART_Receive(&huart2,(uint8_t*)Buffer,500, 1000);
	Reorder_data(Sp_finder(GPGGA),GPGGA);
 8000c64:	2002      	movs	r0, #2
 8000c66:	f000 f807 	bl	8000c78 <Sp_finder>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f890 	bl	8000d94 <Reorder_data>
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <Sp_finder>:

uint16_t Sp_finder(uint8_t s_case)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
	switch(s_case)
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	2b05      	cmp	r3, #5
 8000c86:	d87b      	bhi.n	8000d80 <Sp_finder+0x108>
 8000c88:	a201      	add	r2, pc, #4	; (adr r2, 8000c90 <Sp_finder+0x18>)
 8000c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8e:	bf00      	nop
 8000c90:	08000ca9 	.word	0x08000ca9
 8000c94:	08000d81 	.word	0x08000d81
 8000c98:	08000d15 	.word	0x08000d15
 8000c9c:	08000d81 	.word	0x08000d81
 8000ca0:	08000d81 	.word	0x08000d81
 8000ca4:	08000d81 	.word	0x08000d81
	{

		case 0:  //GPRMC
			for(int i=0;i<500;i++)
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	e02d      	b.n	8000d0a <Sp_finder+0x92>
			{
				if(Buffer[i]== '$')
 8000cae:	4a37      	ldr	r2, [pc, #220]	; (8000d8c <Sp_finder+0x114>)
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	2b24      	cmp	r3, #36	; 0x24
 8000cb8:	d124      	bne.n	8000d04 <Sp_finder+0x8c>
				{
					if(Buffer[i+1]== 'G')
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	4a33      	ldr	r2, [pc, #204]	; (8000d8c <Sp_finder+0x114>)
 8000cc0:	5cd3      	ldrb	r3, [r2, r3]
 8000cc2:	2b47      	cmp	r3, #71	; 0x47
 8000cc4:	d11e      	bne.n	8000d04 <Sp_finder+0x8c>
					{
						if(Buffer[i+2]== 'P')
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	3302      	adds	r3, #2
 8000cca:	4a30      	ldr	r2, [pc, #192]	; (8000d8c <Sp_finder+0x114>)
 8000ccc:	5cd3      	ldrb	r3, [r2, r3]
 8000cce:	2b50      	cmp	r3, #80	; 0x50
 8000cd0:	d118      	bne.n	8000d04 <Sp_finder+0x8c>
						{
							if(Buffer[i+3]== 'R')
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	3303      	adds	r3, #3
 8000cd6:	4a2d      	ldr	r2, [pc, #180]	; (8000d8c <Sp_finder+0x114>)
 8000cd8:	5cd3      	ldrb	r3, [r2, r3]
 8000cda:	2b52      	cmp	r3, #82	; 0x52
 8000cdc:	d112      	bne.n	8000d04 <Sp_finder+0x8c>
							{
								if(Buffer[i+4]== 'M')
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	4a2a      	ldr	r2, [pc, #168]	; (8000d8c <Sp_finder+0x114>)
 8000ce4:	5cd3      	ldrb	r3, [r2, r3]
 8000ce6:	2b4d      	cmp	r3, #77	; 0x4d
 8000ce8:	d10c      	bne.n	8000d04 <Sp_finder+0x8c>
								{
									if(Buffer[i+5]== 'C')
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	3305      	adds	r3, #5
 8000cee:	4a27      	ldr	r2, [pc, #156]	; (8000d8c <Sp_finder+0x114>)
 8000cf0:	5cd3      	ldrb	r3, [r2, r3]
 8000cf2:	2b43      	cmp	r3, #67	; 0x43
 8000cf4:	d106      	bne.n	8000d04 <Sp_finder+0x8c>
									{
										Strting_point=i;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	4b25      	ldr	r3, [pc, #148]	; (8000d90 <Sp_finder+0x118>)
 8000cfc:	801a      	strh	r2, [r3, #0]
										return (uint16_t)i;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	e03e      	b.n	8000d82 <Sp_finder+0x10a>
			for(int i=0;i<500;i++)
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	3301      	adds	r3, #1
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d10:	dbcd      	blt.n	8000cae <Sp_finder+0x36>
							}
						}
					}
				}
			}
			break;
 8000d12:	e036      	b.n	8000d82 <Sp_finder+0x10a>

			return;
			break;

		case 2://GPGGA
			for(int i=0;i<500;i++)
 8000d14:	2300      	movs	r3, #0
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	e02d      	b.n	8000d76 <Sp_finder+0xfe>
			{
				if(Buffer[i]== '$')
 8000d1a:	4a1c      	ldr	r2, [pc, #112]	; (8000d8c <Sp_finder+0x114>)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	4413      	add	r3, r2
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b24      	cmp	r3, #36	; 0x24
 8000d24:	d124      	bne.n	8000d70 <Sp_finder+0xf8>
				{
					if(Buffer[i+1]== 'G')
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	4a18      	ldr	r2, [pc, #96]	; (8000d8c <Sp_finder+0x114>)
 8000d2c:	5cd3      	ldrb	r3, [r2, r3]
 8000d2e:	2b47      	cmp	r3, #71	; 0x47
 8000d30:	d11e      	bne.n	8000d70 <Sp_finder+0xf8>
					{
						if(Buffer[i+2]== 'P')
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	3302      	adds	r3, #2
 8000d36:	4a15      	ldr	r2, [pc, #84]	; (8000d8c <Sp_finder+0x114>)
 8000d38:	5cd3      	ldrb	r3, [r2, r3]
 8000d3a:	2b50      	cmp	r3, #80	; 0x50
 8000d3c:	d118      	bne.n	8000d70 <Sp_finder+0xf8>
						{
							if(Buffer[i+3]== 'G')
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	3303      	adds	r3, #3
 8000d42:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <Sp_finder+0x114>)
 8000d44:	5cd3      	ldrb	r3, [r2, r3]
 8000d46:	2b47      	cmp	r3, #71	; 0x47
 8000d48:	d112      	bne.n	8000d70 <Sp_finder+0xf8>
							{
								if(Buffer[i+4]== 'G')
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	4a0f      	ldr	r2, [pc, #60]	; (8000d8c <Sp_finder+0x114>)
 8000d50:	5cd3      	ldrb	r3, [r2, r3]
 8000d52:	2b47      	cmp	r3, #71	; 0x47
 8000d54:	d10c      	bne.n	8000d70 <Sp_finder+0xf8>
								{
									if(Buffer[i+5]== 'A')
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	3305      	adds	r3, #5
 8000d5a:	4a0c      	ldr	r2, [pc, #48]	; (8000d8c <Sp_finder+0x114>)
 8000d5c:	5cd3      	ldrb	r3, [r2, r3]
 8000d5e:	2b41      	cmp	r3, #65	; 0x41
 8000d60:	d106      	bne.n	8000d70 <Sp_finder+0xf8>
									{
										Strting_point=i;
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <Sp_finder+0x118>)
 8000d68:	801a      	strh	r2, [r3, #0]
										return (uint16_t)i;
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	e008      	b.n	8000d82 <Sp_finder+0x10a>
			for(int i=0;i<500;i++)
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	3301      	adds	r3, #1
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d7c:	dbcd      	blt.n	8000d1a <Sp_finder+0xa2>
							}
						}
					}
				}
			}
			return;
 8000d7e:	e000      	b.n	8000d82 <Sp_finder+0x10a>

			return;
			break;

		default:
			return;
 8000d80:	bf00      	nop
			break;

	}

}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	200003e4 	.word	0x200003e4
 8000d90:	20000244 	.word	0x20000244

08000d94 <Reorder_data>:

void Reorder_data(uint16_t sp,uint8_t s_case)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	460a      	mov	r2, r1
 8000d9e:	80fb      	strh	r3, [r7, #6]
 8000da0:	4613      	mov	r3, r2
 8000da2:	717b      	strb	r3, [r7, #5]
	uint16_t syc=0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	81fb      	strh	r3, [r7, #14]
	while(Buffer[syc]!='\r'&& Buffer[syc+1]!='\n')
 8000da8:	e027      	b.n	8000dfa <Reorder_data+0x66>
	{

		syc++;
 8000daa:	89fb      	ldrh	r3, [r7, #14]
 8000dac:	3301      	adds	r3, #1
 8000dae:	81fb      	strh	r3, [r7, #14]
		sp++;
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	3301      	adds	r3, #1
 8000db4:	80fb      	strh	r3, [r7, #6]

		switch(s_case)
 8000db6:	797b      	ldrb	r3, [r7, #5]
 8000db8:	2b05      	cmp	r3, #5
 8000dba:	d81d      	bhi.n	8000df8 <Reorder_data+0x64>
 8000dbc:	a201      	add	r2, pc, #4	; (adr r2, 8000dc4 <Reorder_data+0x30>)
 8000dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc2:	bf00      	nop
 8000dc4:	08000ddd 	.word	0x08000ddd
 8000dc8:	08000dfb 	.word	0x08000dfb
 8000dcc:	08000deb 	.word	0x08000deb
 8000dd0:	08000dfb 	.word	0x08000dfb
 8000dd4:	08000dfb 	.word	0x08000dfb
 8000dd8:	08000dfb 	.word	0x08000dfb
		{

			case 0:
				GPRMC_Data[syc]=Buffer[sp];
 8000ddc:	88fa      	ldrh	r2, [r7, #6]
 8000dde:	89fb      	ldrh	r3, [r7, #14]
 8000de0:	490e      	ldr	r1, [pc, #56]	; (8000e1c <Reorder_data+0x88>)
 8000de2:	5c89      	ldrb	r1, [r1, r2]
 8000de4:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <Reorder_data+0x8c>)
 8000de6:	54d1      	strb	r1, [r2, r3]
				break;
 8000de8:	e007      	b.n	8000dfa <Reorder_data+0x66>


				break;

			case 2:
				GPGGA_Data[syc]=Buffer[sp];
 8000dea:	88fa      	ldrh	r2, [r7, #6]
 8000dec:	89fb      	ldrh	r3, [r7, #14]
 8000dee:	490b      	ldr	r1, [pc, #44]	; (8000e1c <Reorder_data+0x88>)
 8000df0:	5c89      	ldrb	r1, [r1, r2]
 8000df2:	4a0c      	ldr	r2, [pc, #48]	; (8000e24 <Reorder_data+0x90>)
 8000df4:	54d1      	strb	r1, [r2, r3]

				break;
 8000df6:	e000      	b.n	8000dfa <Reorder_data+0x66>

				break;

			default:

				break;
 8000df8:	bf00      	nop
	while(Buffer[syc]!='\r'&& Buffer[syc+1]!='\n')
 8000dfa:	89fb      	ldrh	r3, [r7, #14]
 8000dfc:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <Reorder_data+0x88>)
 8000dfe:	5cd3      	ldrb	r3, [r2, r3]
 8000e00:	2b0d      	cmp	r3, #13
 8000e02:	d005      	beq.n	8000e10 <Reorder_data+0x7c>
 8000e04:	89fb      	ldrh	r3, [r7, #14]
 8000e06:	3301      	adds	r3, #1
 8000e08:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <Reorder_data+0x88>)
 8000e0a:	5cd3      	ldrb	r3, [r2, r3]
 8000e0c:	2b0a      	cmp	r3, #10
 8000e0e:	d1cc      	bne.n	8000daa <Reorder_data+0x16>

		}

	}
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	200003e4 	.word	0x200003e4
 8000e20:	20000168 	.word	0x20000168
 8000e24:	200001cc 	.word	0x200001cc

08000e28 <SIM800_Init>:
	return ans;
}


void SIM800_Init()//HER BİR KOMUT İÇİN KONTROL MEKANİZMASI EKLENECEK
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT+CIPSHUT --
 8000e2c:	4876      	ldr	r0, [pc, #472]	; (8001008 <SIM800_Init+0x1e0>)
 8000e2e:	f7ff f98f 	bl	8000150 <strlen>
 8000e32:	4603      	mov	r3, r0
 8000e34:	461a      	mov	r2, r3
 8000e36:	2100      	movs	r1, #0
 8000e38:	4873      	ldr	r0, [pc, #460]	; (8001008 <SIM800_Init+0x1e0>)
 8000e3a:	f003 fbc1 	bl	80045c0 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command5,strlen(Command5),1000);
 8000e3e:	4873      	ldr	r0, [pc, #460]	; (800100c <SIM800_Init+0x1e4>)
 8000e40:	f7ff f986 	bl	8000150 <strlen>
 8000e44:	4603      	mov	r3, r0
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4c:	496f      	ldr	r1, [pc, #444]	; (800100c <SIM800_Init+0x1e4>)
 8000e4e:	4870      	ldr	r0, [pc, #448]	; (8001010 <SIM800_Init+0x1e8>)
 8000e50:	f002 fb80 	bl	8003554 <HAL_UART_Transmit>
	HAL_Delay(750);
 8000e54:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000e58:	f000 fd94 	bl	8001984 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT -- iletişim var
 8000e5c:	486a      	ldr	r0, [pc, #424]	; (8001008 <SIM800_Init+0x1e0>)
 8000e5e:	f7ff f977 	bl	8000150 <strlen>
 8000e62:	4603      	mov	r3, r0
 8000e64:	461a      	mov	r2, r3
 8000e66:	2100      	movs	r1, #0
 8000e68:	4867      	ldr	r0, [pc, #412]	; (8001008 <SIM800_Init+0x1e0>)
 8000e6a:	f003 fba9 	bl	80045c0 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command1,strlen(Command1),100);
 8000e6e:	4869      	ldr	r0, [pc, #420]	; (8001014 <SIM800_Init+0x1ec>)
 8000e70:	f7ff f96e 	bl	8000150 <strlen>
 8000e74:	4603      	mov	r3, r0
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	2364      	movs	r3, #100	; 0x64
 8000e7a:	4966      	ldr	r1, [pc, #408]	; (8001014 <SIM800_Init+0x1ec>)
 8000e7c:	4864      	ldr	r0, [pc, #400]	; (8001010 <SIM800_Init+0x1e8>)
 8000e7e:	f002 fb69 	bl	8003554 <HAL_UART_Transmit>
	HAL_Delay(750);
 8000e82:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000e86:	f000 fd7d 	bl	8001984 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT+CPIN? -- ready ise pin kodu istemiyor
 8000e8a:	485f      	ldr	r0, [pc, #380]	; (8001008 <SIM800_Init+0x1e0>)
 8000e8c:	f7ff f960 	bl	8000150 <strlen>
 8000e90:	4603      	mov	r3, r0
 8000e92:	461a      	mov	r2, r3
 8000e94:	2100      	movs	r1, #0
 8000e96:	485c      	ldr	r0, [pc, #368]	; (8001008 <SIM800_Init+0x1e0>)
 8000e98:	f003 fb92 	bl	80045c0 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command2,strlen(Command2),100);
 8000e9c:	485e      	ldr	r0, [pc, #376]	; (8001018 <SIM800_Init+0x1f0>)
 8000e9e:	f7ff f957 	bl	8000150 <strlen>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	2364      	movs	r3, #100	; 0x64
 8000ea8:	495b      	ldr	r1, [pc, #364]	; (8001018 <SIM800_Init+0x1f0>)
 8000eaa:	4859      	ldr	r0, [pc, #356]	; (8001010 <SIM800_Init+0x1e8>)
 8000eac:	f002 fb52 	bl	8003554 <HAL_UART_Transmit>
	HAL_Delay(750);
 8000eb0:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000eb4:	f000 fd66 	bl	8001984 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT+CREG? --Ağ kayıtlı mı
 8000eb8:	4853      	ldr	r0, [pc, #332]	; (8001008 <SIM800_Init+0x1e0>)
 8000eba:	f7ff f949 	bl	8000150 <strlen>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4850      	ldr	r0, [pc, #320]	; (8001008 <SIM800_Init+0x1e0>)
 8000ec6:	f003 fb7b 	bl	80045c0 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command3,strlen(Command3),100);
 8000eca:	4854      	ldr	r0, [pc, #336]	; (800101c <SIM800_Init+0x1f4>)
 8000ecc:	f7ff f940 	bl	8000150 <strlen>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	2364      	movs	r3, #100	; 0x64
 8000ed6:	4951      	ldr	r1, [pc, #324]	; (800101c <SIM800_Init+0x1f4>)
 8000ed8:	484d      	ldr	r0, [pc, #308]	; (8001010 <SIM800_Init+0x1e8>)
 8000eda:	f002 fb3b 	bl	8003554 <HAL_UART_Transmit>
	HAL_Delay(750);
 8000ede:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000ee2:	f000 fd4f 	bl	8001984 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT+CGATT? --internet bağlası (GPRS) var mı yok mu?
 8000ee6:	4848      	ldr	r0, [pc, #288]	; (8001008 <SIM800_Init+0x1e0>)
 8000ee8:	f7ff f932 	bl	8000150 <strlen>
 8000eec:	4603      	mov	r3, r0
 8000eee:	461a      	mov	r2, r3
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4845      	ldr	r0, [pc, #276]	; (8001008 <SIM800_Init+0x1e0>)
 8000ef4:	f003 fb64 	bl	80045c0 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command4,strlen(Command4),1000);
 8000ef8:	4849      	ldr	r0, [pc, #292]	; (8001020 <SIM800_Init+0x1f8>)
 8000efa:	f7ff f929 	bl	8000150 <strlen>
 8000efe:	4603      	mov	r3, r0
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f06:	4946      	ldr	r1, [pc, #280]	; (8001020 <SIM800_Init+0x1f8>)
 8000f08:	4841      	ldr	r0, [pc, #260]	; (8001010 <SIM800_Init+0x1e8>)
 8000f0a:	f002 fb23 	bl	8003554 <HAL_UART_Transmit>
	HAL_Delay(750);
 8000f0e:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000f12:	f000 fd37 	bl	8001984 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT+CIPSHUT --
 8000f16:	483c      	ldr	r0, [pc, #240]	; (8001008 <SIM800_Init+0x1e0>)
 8000f18:	f7ff f91a 	bl	8000150 <strlen>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	461a      	mov	r2, r3
 8000f20:	2100      	movs	r1, #0
 8000f22:	4839      	ldr	r0, [pc, #228]	; (8001008 <SIM800_Init+0x1e0>)
 8000f24:	f003 fb4c 	bl	80045c0 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command5,strlen(Command5),1000);
 8000f28:	4838      	ldr	r0, [pc, #224]	; (800100c <SIM800_Init+0x1e4>)
 8000f2a:	f7ff f911 	bl	8000150 <strlen>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	4935      	ldr	r1, [pc, #212]	; (800100c <SIM800_Init+0x1e4>)
 8000f38:	4835      	ldr	r0, [pc, #212]	; (8001010 <SIM800_Init+0x1e8>)
 8000f3a:	f002 fb0b 	bl	8003554 <HAL_UART_Transmit>
	HAL_Delay(750);
 8000f3e:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000f42:	f000 fd1f 	bl	8001984 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT+CIPSTATUS
 8000f46:	4830      	ldr	r0, [pc, #192]	; (8001008 <SIM800_Init+0x1e0>)
 8000f48:	f7ff f902 	bl	8000150 <strlen>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	2100      	movs	r1, #0
 8000f52:	482d      	ldr	r0, [pc, #180]	; (8001008 <SIM800_Init+0x1e0>)
 8000f54:	f003 fb34 	bl	80045c0 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command6,strlen(Command6),1000);
 8000f58:	4832      	ldr	r0, [pc, #200]	; (8001024 <SIM800_Init+0x1fc>)
 8000f5a:	f7ff f8f9 	bl	8000150 <strlen>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f66:	492f      	ldr	r1, [pc, #188]	; (8001024 <SIM800_Init+0x1fc>)
 8000f68:	4829      	ldr	r0, [pc, #164]	; (8001010 <SIM800_Init+0x1e8>)
 8000f6a:	f002 faf3 	bl	8003554 <HAL_UART_Transmit>
	HAL_Delay(750);
 8000f6e:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000f72:	f000 fd07 	bl	8001984 <HAL_Delay>


	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT+CIPMUX=0 --çoklu bağlantı modu devre dışı
 8000f76:	4824      	ldr	r0, [pc, #144]	; (8001008 <SIM800_Init+0x1e0>)
 8000f78:	f7ff f8ea 	bl	8000150 <strlen>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	461a      	mov	r2, r3
 8000f80:	2100      	movs	r1, #0
 8000f82:	4821      	ldr	r0, [pc, #132]	; (8001008 <SIM800_Init+0x1e0>)
 8000f84:	f003 fb1c 	bl	80045c0 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command7,strlen(Command7),100);
 8000f88:	4827      	ldr	r0, [pc, #156]	; (8001028 <SIM800_Init+0x200>)
 8000f8a:	f7ff f8e1 	bl	8000150 <strlen>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	2364      	movs	r3, #100	; 0x64
 8000f94:	4924      	ldr	r1, [pc, #144]	; (8001028 <SIM800_Init+0x200>)
 8000f96:	481e      	ldr	r0, [pc, #120]	; (8001010 <SIM800_Init+0x1e8>)
 8000f98:	f002 fadc 	bl	8003554 <HAL_UART_Transmit>
	HAL_Delay(750);
 8000f9c:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000fa0:	f000 fcf0 	bl	8001984 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT+CSTT=\"internet\" -- vodafone apn ayarı
 8000fa4:	4818      	ldr	r0, [pc, #96]	; (8001008 <SIM800_Init+0x1e0>)
 8000fa6:	f7ff f8d3 	bl	8000150 <strlen>
 8000faa:	4603      	mov	r3, r0
 8000fac:	461a      	mov	r2, r3
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4815      	ldr	r0, [pc, #84]	; (8001008 <SIM800_Init+0x1e0>)
 8000fb2:	f003 fb05 	bl	80045c0 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command8,strlen(Command8),1000);
 8000fb6:	481d      	ldr	r0, [pc, #116]	; (800102c <SIM800_Init+0x204>)
 8000fb8:	f7ff f8ca 	bl	8000150 <strlen>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc4:	4919      	ldr	r1, [pc, #100]	; (800102c <SIM800_Init+0x204>)
 8000fc6:	4812      	ldr	r0, [pc, #72]	; (8001010 <SIM800_Init+0x1e8>)
 8000fc8:	f002 fac4 	bl	8003554 <HAL_UART_Transmit>
	HAL_Delay(750);
 8000fcc:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000fd0:	f000 fcd8 	bl	8001984 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT+CIICR -- GPRS Bağlantısı kurulmaya çalışılır.Başaralı bir şekilde kurulduğunda modül IP adresi alır.
 8000fd4:	480c      	ldr	r0, [pc, #48]	; (8001008 <SIM800_Init+0x1e0>)
 8000fd6:	f7ff f8bb 	bl	8000150 <strlen>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	461a      	mov	r2, r3
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4809      	ldr	r0, [pc, #36]	; (8001008 <SIM800_Init+0x1e0>)
 8000fe2:	f003 faed 	bl	80045c0 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command9,strlen(Command9),1000);
 8000fe6:	4812      	ldr	r0, [pc, #72]	; (8001030 <SIM800_Init+0x208>)
 8000fe8:	f7ff f8b2 	bl	8000150 <strlen>
 8000fec:	4603      	mov	r3, r0
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff4:	490e      	ldr	r1, [pc, #56]	; (8001030 <SIM800_Init+0x208>)
 8000ff6:	4806      	ldr	r0, [pc, #24]	; (8001010 <SIM800_Init+0x1e8>)
 8000ff8:	f002 faac 	bl	8003554 <HAL_UART_Transmit>
	HAL_Delay(750);
 8000ffc:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001000:	f000 fcc0 	bl	8001984 <HAL_Delay>




}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000364 	.word	0x20000364
 800100c:	2000002c 	.word	0x2000002c
 8001010:	20000290 	.word	0x20000290
 8001014:	20000000 	.word	0x20000000
 8001018:	20000008 	.word	0x20000008
 800101c:	20000014 	.word	0x20000014
 8001020:	20000020 	.word	0x20000020
 8001024:	2000003c 	.word	0x2000003c
 8001028:	2000004c 	.word	0x2000004c
 800102c:	2000005c 	.word	0x2000005c
 8001030:	20000074 	.word	0x20000074

08001034 <SIM800l_Send_Data>:


void SIM800l_Send_Data(int val)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b0a0      	sub	sp, #128	; 0x80
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT+CIFSR --
 800103c:	485a      	ldr	r0, [pc, #360]	; (80011a8 <SIM800l_Send_Data+0x174>)
 800103e:	f7ff f887 	bl	8000150 <strlen>
 8001042:	4603      	mov	r3, r0
 8001044:	461a      	mov	r2, r3
 8001046:	2100      	movs	r1, #0
 8001048:	4857      	ldr	r0, [pc, #348]	; (80011a8 <SIM800l_Send_Data+0x174>)
 800104a:	f003 fab9 	bl	80045c0 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command10,strlen(Command10),1000);
 800104e:	4857      	ldr	r0, [pc, #348]	; (80011ac <SIM800l_Send_Data+0x178>)
 8001050:	f7ff f87e 	bl	8000150 <strlen>
 8001054:	4603      	mov	r3, r0
 8001056:	b29a      	uxth	r2, r3
 8001058:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105c:	4953      	ldr	r1, [pc, #332]	; (80011ac <SIM800l_Send_Data+0x178>)
 800105e:	4854      	ldr	r0, [pc, #336]	; (80011b0 <SIM800l_Send_Data+0x17c>)
 8001060:	f002 fa78 	bl	8003554 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001064:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001068:	f000 fc8c 	bl	8001984 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT+CIPSPRT=0 --Seri port iletişimini devre dışı bırakır.Cihaz yalnızca AT komutları ile yönlendirilir.
 800106c:	484e      	ldr	r0, [pc, #312]	; (80011a8 <SIM800l_Send_Data+0x174>)
 800106e:	f7ff f86f 	bl	8000150 <strlen>
 8001072:	4603      	mov	r3, r0
 8001074:	461a      	mov	r2, r3
 8001076:	2100      	movs	r1, #0
 8001078:	484b      	ldr	r0, [pc, #300]	; (80011a8 <SIM800l_Send_Data+0x174>)
 800107a:	f003 faa1 	bl	80045c0 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command11,strlen(Command11),1000);
 800107e:	484d      	ldr	r0, [pc, #308]	; (80011b4 <SIM800l_Send_Data+0x180>)
 8001080:	f7ff f866 	bl	8000150 <strlen>
 8001084:	4603      	mov	r3, r0
 8001086:	b29a      	uxth	r2, r3
 8001088:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108c:	4949      	ldr	r1, [pc, #292]	; (80011b4 <SIM800l_Send_Data+0x180>)
 800108e:	4848      	ldr	r0, [pc, #288]	; (80011b0 <SIM800l_Send_Data+0x17c>)
 8001090:	f002 fa60 	bl	8003554 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001094:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001098:	f000 fc74 	bl	8001984 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",\"80\"\r\n
 800109c:	4842      	ldr	r0, [pc, #264]	; (80011a8 <SIM800l_Send_Data+0x174>)
 800109e:	f7ff f857 	bl	8000150 <strlen>
 80010a2:	4603      	mov	r3, r0
 80010a4:	461a      	mov	r2, r3
 80010a6:	2100      	movs	r1, #0
 80010a8:	483f      	ldr	r0, [pc, #252]	; (80011a8 <SIM800l_Send_Data+0x174>)
 80010aa:	f003 fa89 	bl	80045c0 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command12,strlen(Command12),1000);
 80010ae:	4842      	ldr	r0, [pc, #264]	; (80011b8 <SIM800l_Send_Data+0x184>)
 80010b0:	f7ff f84e 	bl	8000150 <strlen>
 80010b4:	4603      	mov	r3, r0
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010bc:	493e      	ldr	r1, [pc, #248]	; (80011b8 <SIM800l_Send_Data+0x184>)
 80010be:	483c      	ldr	r0, [pc, #240]	; (80011b0 <SIM800l_Send_Data+0x17c>)
 80010c0:	f002 fa48 	bl	8003554 <HAL_UART_Transmit>
	HAL_Delay(1500);//
 80010c4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80010c8:	f000 fc5c 	bl	8001984 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT+CIPSEND
 80010cc:	4836      	ldr	r0, [pc, #216]	; (80011a8 <SIM800l_Send_Data+0x174>)
 80010ce:	f7ff f83f 	bl	8000150 <strlen>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	2100      	movs	r1, #0
 80010d8:	4833      	ldr	r0, [pc, #204]	; (80011a8 <SIM800l_Send_Data+0x174>)
 80010da:	f003 fa71 	bl	80045c0 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command13,strlen(Command13),1000);
 80010de:	4837      	ldr	r0, [pc, #220]	; (80011bc <SIM800l_Send_Data+0x188>)
 80010e0:	f7ff f836 	bl	8000150 <strlen>
 80010e4:	4603      	mov	r3, r0
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ec:	4933      	ldr	r1, [pc, #204]	; (80011bc <SIM800l_Send_Data+0x188>)
 80010ee:	4830      	ldr	r0, [pc, #192]	; (80011b0 <SIM800l_Send_Data+0x17c>)
 80010f0:	f002 fa30 	bl	8003554 <HAL_UART_Transmit>
	HAL_Delay(1500);
 80010f4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80010f8:	f000 fc44 	bl	8001984 <HAL_Delay>

	char buffer[120];
	sprintf(buffer,"GET https://api.thingspeak.com/update?api_key=I7HHP47YNWI8PSM8&field1=%d\r\n",val);
 80010fc:	f107 0308 	add.w	r3, r7, #8
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	492f      	ldr	r1, [pc, #188]	; (80011c0 <SIM800l_Send_Data+0x18c>)
 8001104:	4618      	mov	r0, r3
 8001106:	f003 fa3b 	bl	8004580 <siprintf>


	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//
 800110a:	4827      	ldr	r0, [pc, #156]	; (80011a8 <SIM800l_Send_Data+0x174>)
 800110c:	f7ff f820 	bl	8000150 <strlen>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	2100      	movs	r1, #0
 8001116:	4824      	ldr	r0, [pc, #144]	; (80011a8 <SIM800l_Send_Data+0x174>)
 8001118:	f003 fa52 	bl	80045c0 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)buffer,strlen(buffer),1000);
 800111c:	f107 0308 	add.w	r3, r7, #8
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff f815 	bl	8000150 <strlen>
 8001126:	4603      	mov	r3, r0
 8001128:	b29a      	uxth	r2, r3
 800112a:	f107 0108 	add.w	r1, r7, #8
 800112e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001132:	481f      	ldr	r0, [pc, #124]	; (80011b0 <SIM800l_Send_Data+0x17c>)
 8001134:	f002 fa0e 	bl	8003554 <HAL_UART_Transmit>
	HAL_Delay(1500);
 8001138:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800113c:	f000 fc22 	bl	8001984 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//
 8001140:	4819      	ldr	r0, [pc, #100]	; (80011a8 <SIM800l_Send_Data+0x174>)
 8001142:	f7ff f805 	bl	8000150 <strlen>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	2100      	movs	r1, #0
 800114c:	4816      	ldr	r0, [pc, #88]	; (80011a8 <SIM800l_Send_Data+0x174>)
 800114e:	f003 fa37 	bl	80045c0 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command15,strlen(Command15),1000);
 8001152:	481c      	ldr	r0, [pc, #112]	; (80011c4 <SIM800l_Send_Data+0x190>)
 8001154:	f7fe fffc 	bl	8000150 <strlen>
 8001158:	4603      	mov	r3, r0
 800115a:	b29a      	uxth	r2, r3
 800115c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001160:	4918      	ldr	r1, [pc, #96]	; (80011c4 <SIM800l_Send_Data+0x190>)
 8001162:	4813      	ldr	r0, [pc, #76]	; (80011b0 <SIM800l_Send_Data+0x17c>)
 8001164:	f002 f9f6 	bl	8003554 <HAL_UART_Transmit>
	HAL_Delay(1500);
 8001168:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800116c:	f000 fc0a 	bl	8001984 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//
 8001170:	480d      	ldr	r0, [pc, #52]	; (80011a8 <SIM800l_Send_Data+0x174>)
 8001172:	f7fe ffed 	bl	8000150 <strlen>
 8001176:	4603      	mov	r3, r0
 8001178:	461a      	mov	r2, r3
 800117a:	2100      	movs	r1, #0
 800117c:	480a      	ldr	r0, [pc, #40]	; (80011a8 <SIM800l_Send_Data+0x174>)
 800117e:	f003 fa1f 	bl	80045c0 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command16,strlen(Command16),1000);
 8001182:	4811      	ldr	r0, [pc, #68]	; (80011c8 <SIM800l_Send_Data+0x194>)
 8001184:	f7fe ffe4 	bl	8000150 <strlen>
 8001188:	4603      	mov	r3, r0
 800118a:	b29a      	uxth	r2, r3
 800118c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001190:	490d      	ldr	r1, [pc, #52]	; (80011c8 <SIM800l_Send_Data+0x194>)
 8001192:	4807      	ldr	r0, [pc, #28]	; (80011b0 <SIM800l_Send_Data+0x17c>)
 8001194:	f002 f9de 	bl	8003554 <HAL_UART_Transmit>
	HAL_Delay(750);
 8001198:	f240 20ee 	movw	r0, #750	; 0x2ee
 800119c:	f000 fbf2 	bl	8001984 <HAL_Delay>

}
 80011a0:	bf00      	nop
 80011a2:	3780      	adds	r7, #128	; 0x80
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000364 	.word	0x20000364
 80011ac:	20000080 	.word	0x20000080
 80011b0:	20000290 	.word	0x20000290
 80011b4:	2000008c 	.word	0x2000008c
 80011b8:	2000009c 	.word	0x2000009c
 80011bc:	200000cc 	.word	0x200000cc
 80011c0:	08004efc 	.word	0x08004efc
 80011c4:	200000dc 	.word	0x200000dc
 80011c8:	200000e0 	.word	0x200000e0

080011cc <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	//if(htim->Instance == htim1.Instance)
	if(htim == &htim1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a08      	ldr	r2, [pc, #32]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d108      	bne.n	80011ee <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		HAL_GPIO_TogglePin(Blink_GPIO_Port,Blink_Pin);
 80011dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e0:	4806      	ldr	r0, [pc, #24]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80011e2:	f001 f93f 	bl	8002464 <HAL_GPIO_TogglePin>
		Set_Time();
 80011e6:	f7ff faf1 	bl	80007cc <Set_Time>
		Set_Location();
 80011ea:	f7ff fb6d 	bl	80008c8 <Set_Location>

	}
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000248 	.word	0x20000248
 80011fc:	40011000 	.word	0x40011000

08001200 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
	{

	}
	HAL_UART_Receive_IT(&huart1, RxBuffer,20);
 8001208:	2214      	movs	r2, #20
 800120a:	4904      	ldr	r1, [pc, #16]	; (800121c <HAL_UART_RxCpltCallback+0x1c>)
 800120c:	4804      	ldr	r0, [pc, #16]	; (8001220 <HAL_UART_RxCpltCallback+0x20>)
 800120e:	f002 fa24 	bl	800365a <HAL_UART_Receive_IT>

}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000364 	.word	0x20000364
 8001220:	20000290 	.word	0x20000290

08001224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001228:	f000 fb4a 	bl	80018c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800122c:	f000 f836 	bl	800129c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001230:	f000 f93e 	bl	80014b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001234:	f000 f91e 	bl	8001474 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001238:	f000 f8c8 	bl	80013cc <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800123c:	f000 f874 	bl	8001328 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001240:	f000 f8ee 	bl	8001420 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, Buffer, 500);
 8001244:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001248:	490e      	ldr	r1, [pc, #56]	; (8001284 <main+0x60>)
 800124a:	480f      	ldr	r0, [pc, #60]	; (8001288 <main+0x64>)
 800124c:	f002 fa2a 	bl	80036a4 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart1, RxBuffer,20);
 8001250:	2214      	movs	r2, #20
 8001252:	490e      	ldr	r1, [pc, #56]	; (800128c <main+0x68>)
 8001254:	480e      	ldr	r0, [pc, #56]	; (8001290 <main+0x6c>)
 8001256:	f002 fa00 	bl	800365a <HAL_UART_Receive_IT>
  SIM800_Init();
 800125a:	f7ff fde5 	bl	8000e28 <SIM800_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 800125e:	480d      	ldr	r0, [pc, #52]	; (8001294 <main+0x70>)
 8001260:	f001 fd7a 	bl	8002d58 <HAL_TIM_Base_Start_IT>

  memset(Data,0,100);
 8001264:	2264      	movs	r2, #100	; 0x64
 8001266:	2100      	movs	r1, #0
 8001268:	480b      	ldr	r0, [pc, #44]	; (8001298 <main+0x74>)
 800126a:	f003 f9a9 	bl	80045c0 <memset>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 800126e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001272:	f000 fb87 	bl	8001984 <HAL_Delay>
	/* for(int i=0;i<10;i++)
	  {
		  SIM800l_Send_Data(i);
		  HAL_Delay(1250);
	  }*/
      HAL_Delay(2000);
 8001276:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800127a:	f000 fb83 	bl	8001984 <HAL_Delay>
      //test4();
	  Send_Time();
 800127e:	f7ff fb15 	bl	80008ac <Send_Time>
	  HAL_Delay(1000);
 8001282:	e7f4      	b.n	800126e <main+0x4a>
 8001284:	200003e4 	.word	0x200003e4
 8001288:	200002d8 	.word	0x200002d8
 800128c:	20000364 	.word	0x20000364
 8001290:	20000290 	.word	0x20000290
 8001294:	20000248 	.word	0x20000248
 8001298:	20000380 	.word	0x20000380

0800129c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b090      	sub	sp, #64	; 0x40
 80012a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a2:	f107 0318 	add.w	r3, r7, #24
 80012a6:	2228      	movs	r2, #40	; 0x28
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f003 f988 	bl	80045c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012be:	2301      	movs	r3, #1
 80012c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012cc:	2301      	movs	r3, #1
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d0:	2302      	movs	r3, #2
 80012d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012da:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e0:	f107 0318 	add.w	r3, r7, #24
 80012e4:	4618      	mov	r0, r3
 80012e6:	f001 f8d7 	bl	8002498 <HAL_RCC_OscConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80012f0:	f000 f92a 	bl	8001548 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f4:	230f      	movs	r3, #15
 80012f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f8:	2302      	movs	r3, #2
 80012fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001304:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	2102      	movs	r1, #2
 800130e:	4618      	mov	r0, r3
 8001310:	f001 fb44 	bl	800299c <HAL_RCC_ClockConfig>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800131a:	f000 f915 	bl	8001548 <Error_Handler>
  }
}
 800131e:	bf00      	nop
 8001320:	3740      	adds	r7, #64	; 0x40
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133c:	463b      	mov	r3, r7
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001344:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <MX_TIM1_Init+0x9c>)
 8001346:	4a20      	ldr	r2, [pc, #128]	; (80013c8 <MX_TIM1_Init+0xa0>)
 8001348:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 800134a:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <MX_TIM1_Init+0x9c>)
 800134c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001350:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <MX_TIM1_Init+0x9c>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8001358:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <MX_TIM1_Init+0x9c>)
 800135a:	f242 720f 	movw	r2, #9999	; 0x270f
 800135e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_TIM1_Init+0x9c>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <MX_TIM1_Init+0x9c>)
 8001368:	2200      	movs	r2, #0
 800136a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136c:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <MX_TIM1_Init+0x9c>)
 800136e:	2200      	movs	r2, #0
 8001370:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001372:	4814      	ldr	r0, [pc, #80]	; (80013c4 <MX_TIM1_Init+0x9c>)
 8001374:	f001 fca0 	bl	8002cb8 <HAL_TIM_Base_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800137e:	f000 f8e3 	bl	8001548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001386:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001388:	f107 0308 	add.w	r3, r7, #8
 800138c:	4619      	mov	r1, r3
 800138e:	480d      	ldr	r0, [pc, #52]	; (80013c4 <MX_TIM1_Init+0x9c>)
 8001390:	f001 fe3c 	bl	800300c <HAL_TIM_ConfigClockSource>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800139a:	f000 f8d5 	bl	8001548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013a6:	463b      	mov	r3, r7
 80013a8:	4619      	mov	r1, r3
 80013aa:	4806      	ldr	r0, [pc, #24]	; (80013c4 <MX_TIM1_Init+0x9c>)
 80013ac:	f002 f812 	bl	80033d4 <HAL_TIMEx_MasterConfigSynchronization>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80013b6:	f000 f8c7 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000248 	.word	0x20000248
 80013c8:	40012c00 	.word	0x40012c00

080013cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013d2:	4a12      	ldr	r2, [pc, #72]	; (800141c <MX_USART1_UART_Init+0x50>)
 80013d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013f2:	220c      	movs	r2, #12
 80013f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001402:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 8001404:	f002 f856 	bl	80034b4 <HAL_UART_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800140e:	f000 f89b 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000290 	.word	0x20000290
 800141c:	40013800 	.word	0x40013800

08001420 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <MX_USART2_UART_Init+0x4c>)
 8001426:	4a12      	ldr	r2, [pc, #72]	; (8001470 <MX_USART2_UART_Init+0x50>)
 8001428:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <MX_USART2_UART_Init+0x4c>)
 800142c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001430:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001432:	4b0e      	ldr	r3, [pc, #56]	; (800146c <MX_USART2_UART_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <MX_USART2_UART_Init+0x4c>)
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <MX_USART2_UART_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <MX_USART2_UART_Init+0x4c>)
 8001446:	220c      	movs	r2, #12
 8001448:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144a:	4b08      	ldr	r3, [pc, #32]	; (800146c <MX_USART2_UART_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <MX_USART2_UART_Init+0x4c>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001456:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_USART2_UART_Init+0x4c>)
 8001458:	f002 f82c 	bl	80034b4 <HAL_UART_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001462:	f000 f871 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200002d8 	.word	0x200002d8
 8001470:	40004400 	.word	0x40004400

08001474 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <MX_DMA_Init+0x38>)
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	4a0b      	ldr	r2, [pc, #44]	; (80014ac <MX_DMA_Init+0x38>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6153      	str	r3, [r2, #20]
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <MX_DMA_Init+0x38>)
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2100      	movs	r1, #0
 8001496:	2010      	movs	r0, #16
 8001498:	f000 fb6f 	bl	8001b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800149c:	2010      	movs	r0, #16
 800149e:	f000 fb88 	bl	8001bb2 <HAL_NVIC_EnableIRQ>

}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000

080014b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b6:	f107 0310 	add.w	r3, r7, #16
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c4:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <MX_GPIO_Init+0x90>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	4a1d      	ldr	r2, [pc, #116]	; (8001540 <MX_GPIO_Init+0x90>)
 80014ca:	f043 0310 	orr.w	r3, r3, #16
 80014ce:	6193      	str	r3, [r2, #24]
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <MX_GPIO_Init+0x90>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f003 0310 	and.w	r3, r3, #16
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014dc:	4b18      	ldr	r3, [pc, #96]	; (8001540 <MX_GPIO_Init+0x90>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	4a17      	ldr	r2, [pc, #92]	; (8001540 <MX_GPIO_Init+0x90>)
 80014e2:	f043 0320 	orr.w	r3, r3, #32
 80014e6:	6193      	str	r3, [r2, #24]
 80014e8:	4b15      	ldr	r3, [pc, #84]	; (8001540 <MX_GPIO_Init+0x90>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f003 0320 	and.w	r3, r3, #32
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <MX_GPIO_Init+0x90>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	4a11      	ldr	r2, [pc, #68]	; (8001540 <MX_GPIO_Init+0x90>)
 80014fa:	f043 0304 	orr.w	r3, r3, #4
 80014fe:	6193      	str	r3, [r2, #24]
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <MX_GPIO_Init+0x90>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Blink_GPIO_Port, Blink_Pin, GPIO_PIN_RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001512:	480c      	ldr	r0, [pc, #48]	; (8001544 <MX_GPIO_Init+0x94>)
 8001514:	f000 ff8e 	bl	8002434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blink_Pin */
  GPIO_InitStruct.Pin = Blink_Pin;
 8001518:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800151c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151e:	2301      	movs	r3, #1
 8001520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2302      	movs	r3, #2
 8001528:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Blink_GPIO_Port, &GPIO_InitStruct);
 800152a:	f107 0310 	add.w	r3, r7, #16
 800152e:	4619      	mov	r1, r3
 8001530:	4804      	ldr	r0, [pc, #16]	; (8001544 <MX_GPIO_Init+0x94>)
 8001532:	f000 fdfb 	bl	800212c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001536:	bf00      	nop
 8001538:	3720      	adds	r7, #32
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40021000 	.word	0x40021000
 8001544:	40011000 	.word	0x40011000

08001548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800154c:	b672      	cpsid	i
}
 800154e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001550:	e7fe      	b.n	8001550 <Error_Handler+0x8>
	...

08001554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_MspInit+0x5c>)
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <HAL_MspInit+0x5c>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6193      	str	r3, [r2, #24]
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_MspInit+0x5c>)
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <HAL_MspInit+0x5c>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	4a0e      	ldr	r2, [pc, #56]	; (80015b0 <HAL_MspInit+0x5c>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157c:	61d3      	str	r3, [r2, #28]
 800157e:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <HAL_MspInit+0x5c>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800158a:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <HAL_MspInit+0x60>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	4a04      	ldr	r2, [pc, #16]	; (80015b4 <HAL_MspInit+0x60>)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a6:	bf00      	nop
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40010000 	.word	0x40010000

080015b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0d      	ldr	r2, [pc, #52]	; (80015fc <HAL_TIM_Base_MspInit+0x44>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d113      	bne.n	80015f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015ca:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <HAL_TIM_Base_MspInit+0x48>)
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	4a0c      	ldr	r2, [pc, #48]	; (8001600 <HAL_TIM_Base_MspInit+0x48>)
 80015d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015d4:	6193      	str	r3, [r2, #24]
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <HAL_TIM_Base_MspInit+0x48>)
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 1, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2101      	movs	r1, #1
 80015e6:	2019      	movs	r0, #25
 80015e8:	f000 fac7 	bl	8001b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80015ec:	2019      	movs	r0, #25
 80015ee:	f000 fae0 	bl	8001bb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40012c00 	.word	0x40012c00
 8001600:	40021000 	.word	0x40021000

08001604 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0318 	add.w	r3, r7, #24
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a4e      	ldr	r2, [pc, #312]	; (8001758 <HAL_UART_MspInit+0x154>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d13a      	bne.n	800169a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001624:	4b4d      	ldr	r3, [pc, #308]	; (800175c <HAL_UART_MspInit+0x158>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a4c      	ldr	r2, [pc, #304]	; (800175c <HAL_UART_MspInit+0x158>)
 800162a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800162e:	6193      	str	r3, [r2, #24]
 8001630:	4b4a      	ldr	r3, [pc, #296]	; (800175c <HAL_UART_MspInit+0x158>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163c:	4b47      	ldr	r3, [pc, #284]	; (800175c <HAL_UART_MspInit+0x158>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a46      	ldr	r2, [pc, #280]	; (800175c <HAL_UART_MspInit+0x158>)
 8001642:	f043 0304 	orr.w	r3, r3, #4
 8001646:	6193      	str	r3, [r2, #24]
 8001648:	4b44      	ldr	r3, [pc, #272]	; (800175c <HAL_UART_MspInit+0x158>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800165e:	2303      	movs	r3, #3
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001662:	f107 0318 	add.w	r3, r7, #24
 8001666:	4619      	mov	r1, r3
 8001668:	483d      	ldr	r0, [pc, #244]	; (8001760 <HAL_UART_MspInit+0x15c>)
 800166a:	f000 fd5f 	bl	800212c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800166e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167c:	f107 0318 	add.w	r3, r7, #24
 8001680:	4619      	mov	r1, r3
 8001682:	4837      	ldr	r0, [pc, #220]	; (8001760 <HAL_UART_MspInit+0x15c>)
 8001684:	f000 fd52 	bl	800212c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001688:	2200      	movs	r2, #0
 800168a:	2100      	movs	r1, #0
 800168c:	2025      	movs	r0, #37	; 0x25
 800168e:	f000 fa74 	bl	8001b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001692:	2025      	movs	r0, #37	; 0x25
 8001694:	f000 fa8d 	bl	8001bb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001698:	e05a      	b.n	8001750 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a31      	ldr	r2, [pc, #196]	; (8001764 <HAL_UART_MspInit+0x160>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d155      	bne.n	8001750 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016a4:	4b2d      	ldr	r3, [pc, #180]	; (800175c <HAL_UART_MspInit+0x158>)
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	4a2c      	ldr	r2, [pc, #176]	; (800175c <HAL_UART_MspInit+0x158>)
 80016aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ae:	61d3      	str	r3, [r2, #28]
 80016b0:	4b2a      	ldr	r3, [pc, #168]	; (800175c <HAL_UART_MspInit+0x158>)
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016bc:	4b27      	ldr	r3, [pc, #156]	; (800175c <HAL_UART_MspInit+0x158>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	4a26      	ldr	r2, [pc, #152]	; (800175c <HAL_UART_MspInit+0x158>)
 80016c2:	f043 0304 	orr.w	r3, r3, #4
 80016c6:	6193      	str	r3, [r2, #24]
 80016c8:	4b24      	ldr	r3, [pc, #144]	; (800175c <HAL_UART_MspInit+0x158>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016d4:	2304      	movs	r3, #4
 80016d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016dc:	2303      	movs	r3, #3
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	f107 0318 	add.w	r3, r7, #24
 80016e4:	4619      	mov	r1, r3
 80016e6:	481e      	ldr	r0, [pc, #120]	; (8001760 <HAL_UART_MspInit+0x15c>)
 80016e8:	f000 fd20 	bl	800212c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016ec:	2308      	movs	r3, #8
 80016ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	f107 0318 	add.w	r3, r7, #24
 80016fc:	4619      	mov	r1, r3
 80016fe:	4818      	ldr	r0, [pc, #96]	; (8001760 <HAL_UART_MspInit+0x15c>)
 8001700:	f000 fd14 	bl	800212c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001704:	4b18      	ldr	r3, [pc, #96]	; (8001768 <HAL_UART_MspInit+0x164>)
 8001706:	4a19      	ldr	r2, [pc, #100]	; (800176c <HAL_UART_MspInit+0x168>)
 8001708:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800170a:	4b17      	ldr	r3, [pc, #92]	; (8001768 <HAL_UART_MspInit+0x164>)
 800170c:	2200      	movs	r2, #0
 800170e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001710:	4b15      	ldr	r3, [pc, #84]	; (8001768 <HAL_UART_MspInit+0x164>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001716:	4b14      	ldr	r3, [pc, #80]	; (8001768 <HAL_UART_MspInit+0x164>)
 8001718:	2280      	movs	r2, #128	; 0x80
 800171a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <HAL_UART_MspInit+0x164>)
 800171e:	2200      	movs	r2, #0
 8001720:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001722:	4b11      	ldr	r3, [pc, #68]	; (8001768 <HAL_UART_MspInit+0x164>)
 8001724:	2200      	movs	r2, #0
 8001726:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <HAL_UART_MspInit+0x164>)
 800172a:	2220      	movs	r2, #32
 800172c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <HAL_UART_MspInit+0x164>)
 8001730:	2200      	movs	r2, #0
 8001732:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001734:	480c      	ldr	r0, [pc, #48]	; (8001768 <HAL_UART_MspInit+0x164>)
 8001736:	f000 fa57 	bl	8001be8 <HAL_DMA_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <HAL_UART_MspInit+0x140>
      Error_Handler();
 8001740:	f7ff ff02 	bl	8001548 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a08      	ldr	r2, [pc, #32]	; (8001768 <HAL_UART_MspInit+0x164>)
 8001748:	63da      	str	r2, [r3, #60]	; 0x3c
 800174a:	4a07      	ldr	r2, [pc, #28]	; (8001768 <HAL_UART_MspInit+0x164>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001750:	bf00      	nop
 8001752:	3728      	adds	r7, #40	; 0x28
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40013800 	.word	0x40013800
 800175c:	40021000 	.word	0x40021000
 8001760:	40010800 	.word	0x40010800
 8001764:	40004400 	.word	0x40004400
 8001768:	20000320 	.word	0x20000320
 800176c:	4002006c 	.word	0x4002006c

08001770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <NMI_Handler+0x4>

08001776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <HardFault_Handler+0x4>

0800177c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <MemManage_Handler+0x4>

08001782 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <BusFault_Handler+0x4>

08001788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <UsageFault_Handler+0x4>

0800178e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr

0800179a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr

080017b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b6:	f000 f8c9 	bl	800194c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <DMA1_Channel6_IRQHandler+0x10>)
 80017c6:	f000 fb7d 	bl	8001ec4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000320 	.word	0x20000320

080017d4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <TIM1_UP_IRQHandler+0x10>)
 80017da:	f001 fb0f 	bl	8002dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000248 	.word	0x20000248

080017e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <USART1_IRQHandler+0x10>)
 80017ee:	f001 ff7f 	bl	80036f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000290 	.word	0x20000290

080017fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001804:	4a14      	ldr	r2, [pc, #80]	; (8001858 <_sbrk+0x5c>)
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <_sbrk+0x60>)
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001810:	4b13      	ldr	r3, [pc, #76]	; (8001860 <_sbrk+0x64>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d102      	bne.n	800181e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <_sbrk+0x64>)
 800181a:	4a12      	ldr	r2, [pc, #72]	; (8001864 <_sbrk+0x68>)
 800181c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <_sbrk+0x64>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	429a      	cmp	r2, r3
 800182a:	d207      	bcs.n	800183c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800182c:	f002 fed0 	bl	80045d0 <__errno>
 8001830:	4603      	mov	r3, r0
 8001832:	220c      	movs	r2, #12
 8001834:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
 800183a:	e009      	b.n	8001850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <_sbrk+0x64>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001842:	4b07      	ldr	r3, [pc, #28]	; (8001860 <_sbrk+0x64>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	4a05      	ldr	r2, [pc, #20]	; (8001860 <_sbrk+0x64>)
 800184c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800184e:	68fb      	ldr	r3, [r7, #12]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20005000 	.word	0x20005000
 800185c:	00000400 	.word	0x00000400
 8001860:	200005d8 	.word	0x200005d8
 8001864:	20000728 	.word	0x20000728

08001868 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001874:	f7ff fff8 	bl	8001868 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001878:	480b      	ldr	r0, [pc, #44]	; (80018a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800187a:	490c      	ldr	r1, [pc, #48]	; (80018ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800187c:	4a0c      	ldr	r2, [pc, #48]	; (80018b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001880:	e002      	b.n	8001888 <LoopCopyDataInit>

08001882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001886:	3304      	adds	r3, #4

08001888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800188c:	d3f9      	bcc.n	8001882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188e:	4a09      	ldr	r2, [pc, #36]	; (80018b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001890:	4c09      	ldr	r4, [pc, #36]	; (80018b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001894:	e001      	b.n	800189a <LoopFillZerobss>

08001896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001898:	3204      	adds	r2, #4

0800189a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800189c:	d3fb      	bcc.n	8001896 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800189e:	f002 fe9d 	bl	80045dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018a2:	f7ff fcbf 	bl	8001224 <main>
  bx lr
 80018a6:	4770      	bx	lr
  ldr r0, =_sdata
 80018a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ac:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 80018b0:	08004fb0 	.word	0x08004fb0
  ldr r2, =_sbss
 80018b4:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 80018b8:	20000728 	.word	0x20000728

080018bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018bc:	e7fe      	b.n	80018bc <ADC1_2_IRQHandler>
	...

080018c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <HAL_Init+0x28>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a07      	ldr	r2, [pc, #28]	; (80018e8 <HAL_Init+0x28>)
 80018ca:	f043 0310 	orr.w	r3, r3, #16
 80018ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d0:	2003      	movs	r0, #3
 80018d2:	f000 f947 	bl	8001b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018d6:	200f      	movs	r0, #15
 80018d8:	f000 f808 	bl	80018ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018dc:	f7ff fe3a 	bl	8001554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40022000 	.word	0x40022000

080018ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_InitTick+0x54>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b12      	ldr	r3, [pc, #72]	; (8001944 <HAL_InitTick+0x58>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	4619      	mov	r1, r3
 80018fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001902:	fbb3 f3f1 	udiv	r3, r3, r1
 8001906:	fbb2 f3f3 	udiv	r3, r2, r3
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f95f 	bl	8001bce <HAL_SYSTICK_Config>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e00e      	b.n	8001938 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b0f      	cmp	r3, #15
 800191e:	d80a      	bhi.n	8001936 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001920:	2200      	movs	r2, #0
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	f04f 30ff 	mov.w	r0, #4294967295
 8001928:	f000 f927 	bl	8001b7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800192c:	4a06      	ldr	r2, [pc, #24]	; (8001948 <HAL_InitTick+0x5c>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001932:	2300      	movs	r3, #0
 8001934:	e000      	b.n	8001938 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
}
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200000f0 	.word	0x200000f0
 8001944:	200000f8 	.word	0x200000f8
 8001948:	200000f4 	.word	0x200000f4

0800194c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_IncTick+0x1c>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	4b05      	ldr	r3, [pc, #20]	; (800196c <HAL_IncTick+0x20>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4413      	add	r3, r2
 800195c:	4a03      	ldr	r2, [pc, #12]	; (800196c <HAL_IncTick+0x20>)
 800195e:	6013      	str	r3, [r2, #0]
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	200000f8 	.word	0x200000f8
 800196c:	200005dc 	.word	0x200005dc

08001970 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return uwTick;
 8001974:	4b02      	ldr	r3, [pc, #8]	; (8001980 <HAL_GetTick+0x10>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr
 8001980:	200005dc 	.word	0x200005dc

08001984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800198c:	f7ff fff0 	bl	8001970 <HAL_GetTick>
 8001990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199c:	d005      	beq.n	80019aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <HAL_Delay+0x44>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4413      	add	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019aa:	bf00      	nop
 80019ac:	f7ff ffe0 	bl	8001970 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d8f7      	bhi.n	80019ac <HAL_Delay+0x28>
  {
  }
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200000f8 	.word	0x200000f8

080019cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e8:	4013      	ands	r3, r2
 80019ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fe:	4a04      	ldr	r2, [pc, #16]	; (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	60d3      	str	r3, [r2, #12]
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a18:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <__NVIC_GetPriorityGrouping+0x18>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	f003 0307 	and.w	r3, r3, #7
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	db0b      	blt.n	8001a5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	f003 021f 	and.w	r2, r3, #31
 8001a48:	4906      	ldr	r1, [pc, #24]	; (8001a64 <__NVIC_EnableIRQ+0x34>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	095b      	lsrs	r3, r3, #5
 8001a50:	2001      	movs	r0, #1
 8001a52:	fa00 f202 	lsl.w	r2, r0, r2
 8001a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	e000e100 	.word	0xe000e100

08001a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	6039      	str	r1, [r7, #0]
 8001a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	db0a      	blt.n	8001a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	490c      	ldr	r1, [pc, #48]	; (8001ab4 <__NVIC_SetPriority+0x4c>)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	0112      	lsls	r2, r2, #4
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a90:	e00a      	b.n	8001aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4908      	ldr	r1, [pc, #32]	; (8001ab8 <__NVIC_SetPriority+0x50>)
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	3b04      	subs	r3, #4
 8001aa0:	0112      	lsls	r2, r2, #4
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	761a      	strb	r2, [r3, #24]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000e100 	.word	0xe000e100
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b089      	sub	sp, #36	; 0x24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f1c3 0307 	rsb	r3, r3, #7
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	bf28      	it	cs
 8001ada:	2304      	movcs	r3, #4
 8001adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	2b06      	cmp	r3, #6
 8001ae4:	d902      	bls.n	8001aec <NVIC_EncodePriority+0x30>
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3b03      	subs	r3, #3
 8001aea:	e000      	b.n	8001aee <NVIC_EncodePriority+0x32>
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	f04f 32ff 	mov.w	r2, #4294967295
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43da      	mvns	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	401a      	ands	r2, r3
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b04:	f04f 31ff 	mov.w	r1, #4294967295
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0e:	43d9      	mvns	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b14:	4313      	orrs	r3, r2
         );
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3724      	adds	r7, #36	; 0x24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr

08001b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b30:	d301      	bcc.n	8001b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00f      	b.n	8001b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b36:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <SysTick_Config+0x40>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3e:	210f      	movs	r1, #15
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f7ff ff90 	bl	8001a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <SysTick_Config+0x40>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4e:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <SysTick_Config+0x40>)
 8001b50:	2207      	movs	r2, #7
 8001b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	e000e010 	.word	0xe000e010

08001b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ff2d 	bl	80019cc <__NVIC_SetPriorityGrouping>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b086      	sub	sp, #24
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
 8001b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b8c:	f7ff ff42 	bl	8001a14 <__NVIC_GetPriorityGrouping>
 8001b90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	68b9      	ldr	r1, [r7, #8]
 8001b96:	6978      	ldr	r0, [r7, #20]
 8001b98:	f7ff ff90 	bl	8001abc <NVIC_EncodePriority>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff5f 	bl	8001a68 <__NVIC_SetPriority>
}
 8001baa:	bf00      	nop
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	4603      	mov	r3, r0
 8001bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff35 	bl	8001a30 <__NVIC_EnableIRQ>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff ffa2 	bl	8001b20 <SysTick_Config>
 8001bdc:	4603      	mov	r3, r0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e043      	b.n	8001c86 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	461a      	mov	r2, r3
 8001c04:	4b22      	ldr	r3, [pc, #136]	; (8001c90 <HAL_DMA_Init+0xa8>)
 8001c06:	4413      	add	r3, r2
 8001c08:	4a22      	ldr	r2, [pc, #136]	; (8001c94 <HAL_DMA_Init+0xac>)
 8001c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0e:	091b      	lsrs	r3, r3, #4
 8001c10:	009a      	lsls	r2, r3, #2
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a1f      	ldr	r2, [pc, #124]	; (8001c98 <HAL_DMA_Init+0xb0>)
 8001c1a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c32:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001c36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr
 8001c90:	bffdfff8 	.word	0xbffdfff8
 8001c94:	cccccccd 	.word	0xcccccccd
 8001c98:	40020000 	.word	0x40020000

08001c9c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
 8001ca8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_DMA_Start_IT+0x20>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e04b      	b.n	8001d54 <HAL_DMA_Start_IT+0xb8>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d13a      	bne.n	8001d46 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 0201 	bic.w	r2, r2, #1
 8001cec:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	68b9      	ldr	r1, [r7, #8]
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f000 f9eb 	bl	80020d0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d008      	beq.n	8001d14 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f042 020e 	orr.w	r2, r2, #14
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	e00f      	b.n	8001d34 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 0204 	bic.w	r2, r2, #4
 8001d22:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 020a 	orr.w	r2, r2, #10
 8001d32:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0201 	orr.w	r2, r2, #1
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	e005      	b.n	8001d52 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d64:	2300      	movs	r3, #0
 8001d66:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d008      	beq.n	8001d86 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2204      	movs	r2, #4
 8001d78:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e020      	b.n	8001dc8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 020e 	bic.w	r2, r2, #14
 8001d94:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0201 	bic.w	r2, r2, #1
 8001da4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dae:	2101      	movs	r1, #1
 8001db0:	fa01 f202 	lsl.w	r2, r1, r2
 8001db4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr
	...

08001dd4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d005      	beq.n	8001df8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2204      	movs	r2, #4
 8001df0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	73fb      	strb	r3, [r7, #15]
 8001df6:	e051      	b.n	8001e9c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 020e 	bic.w	r2, r2, #14
 8001e06:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0201 	bic.w	r2, r2, #1
 8001e16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a22      	ldr	r2, [pc, #136]	; (8001ea8 <HAL_DMA_Abort_IT+0xd4>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d029      	beq.n	8001e76 <HAL_DMA_Abort_IT+0xa2>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a21      	ldr	r2, [pc, #132]	; (8001eac <HAL_DMA_Abort_IT+0xd8>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d022      	beq.n	8001e72 <HAL_DMA_Abort_IT+0x9e>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a1f      	ldr	r2, [pc, #124]	; (8001eb0 <HAL_DMA_Abort_IT+0xdc>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d01a      	beq.n	8001e6c <HAL_DMA_Abort_IT+0x98>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a1e      	ldr	r2, [pc, #120]	; (8001eb4 <HAL_DMA_Abort_IT+0xe0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d012      	beq.n	8001e66 <HAL_DMA_Abort_IT+0x92>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a1c      	ldr	r2, [pc, #112]	; (8001eb8 <HAL_DMA_Abort_IT+0xe4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00a      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x8c>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a1b      	ldr	r2, [pc, #108]	; (8001ebc <HAL_DMA_Abort_IT+0xe8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d102      	bne.n	8001e5a <HAL_DMA_Abort_IT+0x86>
 8001e54:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e58:	e00e      	b.n	8001e78 <HAL_DMA_Abort_IT+0xa4>
 8001e5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e5e:	e00b      	b.n	8001e78 <HAL_DMA_Abort_IT+0xa4>
 8001e60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e64:	e008      	b.n	8001e78 <HAL_DMA_Abort_IT+0xa4>
 8001e66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e6a:	e005      	b.n	8001e78 <HAL_DMA_Abort_IT+0xa4>
 8001e6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e70:	e002      	b.n	8001e78 <HAL_DMA_Abort_IT+0xa4>
 8001e72:	2310      	movs	r3, #16
 8001e74:	e000      	b.n	8001e78 <HAL_DMA_Abort_IT+0xa4>
 8001e76:	2301      	movs	r3, #1
 8001e78:	4a11      	ldr	r2, [pc, #68]	; (8001ec0 <HAL_DMA_Abort_IT+0xec>)
 8001e7a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	4798      	blx	r3
    } 
  }
  return status;
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40020008 	.word	0x40020008
 8001eac:	4002001c 	.word	0x4002001c
 8001eb0:	40020030 	.word	0x40020030
 8001eb4:	40020044 	.word	0x40020044
 8001eb8:	40020058 	.word	0x40020058
 8001ebc:	4002006c 	.word	0x4002006c
 8001ec0:	40020000 	.word	0x40020000

08001ec4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d04f      	beq.n	8001f8c <HAL_DMA_IRQHandler+0xc8>
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d04a      	beq.n	8001f8c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0320 	and.w	r3, r3, #32
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d107      	bne.n	8001f14 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 0204 	bic.w	r2, r2, #4
 8001f12:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a66      	ldr	r2, [pc, #408]	; (80020b4 <HAL_DMA_IRQHandler+0x1f0>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d029      	beq.n	8001f72 <HAL_DMA_IRQHandler+0xae>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a65      	ldr	r2, [pc, #404]	; (80020b8 <HAL_DMA_IRQHandler+0x1f4>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d022      	beq.n	8001f6e <HAL_DMA_IRQHandler+0xaa>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a63      	ldr	r2, [pc, #396]	; (80020bc <HAL_DMA_IRQHandler+0x1f8>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d01a      	beq.n	8001f68 <HAL_DMA_IRQHandler+0xa4>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a62      	ldr	r2, [pc, #392]	; (80020c0 <HAL_DMA_IRQHandler+0x1fc>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d012      	beq.n	8001f62 <HAL_DMA_IRQHandler+0x9e>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a60      	ldr	r2, [pc, #384]	; (80020c4 <HAL_DMA_IRQHandler+0x200>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d00a      	beq.n	8001f5c <HAL_DMA_IRQHandler+0x98>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a5f      	ldr	r2, [pc, #380]	; (80020c8 <HAL_DMA_IRQHandler+0x204>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d102      	bne.n	8001f56 <HAL_DMA_IRQHandler+0x92>
 8001f50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f54:	e00e      	b.n	8001f74 <HAL_DMA_IRQHandler+0xb0>
 8001f56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f5a:	e00b      	b.n	8001f74 <HAL_DMA_IRQHandler+0xb0>
 8001f5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f60:	e008      	b.n	8001f74 <HAL_DMA_IRQHandler+0xb0>
 8001f62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f66:	e005      	b.n	8001f74 <HAL_DMA_IRQHandler+0xb0>
 8001f68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f6c:	e002      	b.n	8001f74 <HAL_DMA_IRQHandler+0xb0>
 8001f6e:	2340      	movs	r3, #64	; 0x40
 8001f70:	e000      	b.n	8001f74 <HAL_DMA_IRQHandler+0xb0>
 8001f72:	2304      	movs	r3, #4
 8001f74:	4a55      	ldr	r2, [pc, #340]	; (80020cc <HAL_DMA_IRQHandler+0x208>)
 8001f76:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 8094 	beq.w	80020aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001f8a:	e08e      	b.n	80020aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	2202      	movs	r2, #2
 8001f92:	409a      	lsls	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d056      	beq.n	800204a <HAL_DMA_IRQHandler+0x186>
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d051      	beq.n	800204a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0320 	and.w	r3, r3, #32
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10b      	bne.n	8001fcc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 020a 	bic.w	r2, r2, #10
 8001fc2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a38      	ldr	r2, [pc, #224]	; (80020b4 <HAL_DMA_IRQHandler+0x1f0>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d029      	beq.n	800202a <HAL_DMA_IRQHandler+0x166>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a37      	ldr	r2, [pc, #220]	; (80020b8 <HAL_DMA_IRQHandler+0x1f4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d022      	beq.n	8002026 <HAL_DMA_IRQHandler+0x162>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a35      	ldr	r2, [pc, #212]	; (80020bc <HAL_DMA_IRQHandler+0x1f8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d01a      	beq.n	8002020 <HAL_DMA_IRQHandler+0x15c>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a34      	ldr	r2, [pc, #208]	; (80020c0 <HAL_DMA_IRQHandler+0x1fc>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d012      	beq.n	800201a <HAL_DMA_IRQHandler+0x156>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a32      	ldr	r2, [pc, #200]	; (80020c4 <HAL_DMA_IRQHandler+0x200>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d00a      	beq.n	8002014 <HAL_DMA_IRQHandler+0x150>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a31      	ldr	r2, [pc, #196]	; (80020c8 <HAL_DMA_IRQHandler+0x204>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d102      	bne.n	800200e <HAL_DMA_IRQHandler+0x14a>
 8002008:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800200c:	e00e      	b.n	800202c <HAL_DMA_IRQHandler+0x168>
 800200e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002012:	e00b      	b.n	800202c <HAL_DMA_IRQHandler+0x168>
 8002014:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002018:	e008      	b.n	800202c <HAL_DMA_IRQHandler+0x168>
 800201a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800201e:	e005      	b.n	800202c <HAL_DMA_IRQHandler+0x168>
 8002020:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002024:	e002      	b.n	800202c <HAL_DMA_IRQHandler+0x168>
 8002026:	2320      	movs	r3, #32
 8002028:	e000      	b.n	800202c <HAL_DMA_IRQHandler+0x168>
 800202a:	2302      	movs	r3, #2
 800202c:	4a27      	ldr	r2, [pc, #156]	; (80020cc <HAL_DMA_IRQHandler+0x208>)
 800202e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203c:	2b00      	cmp	r3, #0
 800203e:	d034      	beq.n	80020aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002048:	e02f      	b.n	80020aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	2208      	movs	r2, #8
 8002050:	409a      	lsls	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4013      	ands	r3, r2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d028      	beq.n	80020ac <HAL_DMA_IRQHandler+0x1e8>
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	2b00      	cmp	r3, #0
 8002062:	d023      	beq.n	80020ac <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 020e 	bic.w	r2, r2, #14
 8002072:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207c:	2101      	movs	r1, #1
 800207e:	fa01 f202 	lsl.w	r2, r1, r2
 8002082:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d004      	beq.n	80020ac <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	4798      	blx	r3
    }
  }
  return;
 80020aa:	bf00      	nop
 80020ac:	bf00      	nop
}
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40020008 	.word	0x40020008
 80020b8:	4002001c 	.word	0x4002001c
 80020bc:	40020030 	.word	0x40020030
 80020c0:	40020044 	.word	0x40020044
 80020c4:	40020058 	.word	0x40020058
 80020c8:	4002006c 	.word	0x4002006c
 80020cc:	40020000 	.word	0x40020000

080020d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
 80020dc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e6:	2101      	movs	r1, #1
 80020e8:	fa01 f202 	lsl.w	r2, r1, r2
 80020ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b10      	cmp	r3, #16
 80020fc:	d108      	bne.n	8002110 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800210e:	e007      	b.n	8002120 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	60da      	str	r2, [r3, #12]
}
 8002120:	bf00      	nop
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr
	...

0800212c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800212c:	b480      	push	{r7}
 800212e:	b08b      	sub	sp, #44	; 0x2c
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002136:	2300      	movs	r3, #0
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800213a:	2300      	movs	r3, #0
 800213c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800213e:	e169      	b.n	8002414 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002140:	2201      	movs	r2, #1
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	69fa      	ldr	r2, [r7, #28]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	429a      	cmp	r2, r3
 800215a:	f040 8158 	bne.w	800240e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	4a9a      	ldr	r2, [pc, #616]	; (80023cc <HAL_GPIO_Init+0x2a0>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d05e      	beq.n	8002226 <HAL_GPIO_Init+0xfa>
 8002168:	4a98      	ldr	r2, [pc, #608]	; (80023cc <HAL_GPIO_Init+0x2a0>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d875      	bhi.n	800225a <HAL_GPIO_Init+0x12e>
 800216e:	4a98      	ldr	r2, [pc, #608]	; (80023d0 <HAL_GPIO_Init+0x2a4>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d058      	beq.n	8002226 <HAL_GPIO_Init+0xfa>
 8002174:	4a96      	ldr	r2, [pc, #600]	; (80023d0 <HAL_GPIO_Init+0x2a4>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d86f      	bhi.n	800225a <HAL_GPIO_Init+0x12e>
 800217a:	4a96      	ldr	r2, [pc, #600]	; (80023d4 <HAL_GPIO_Init+0x2a8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d052      	beq.n	8002226 <HAL_GPIO_Init+0xfa>
 8002180:	4a94      	ldr	r2, [pc, #592]	; (80023d4 <HAL_GPIO_Init+0x2a8>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d869      	bhi.n	800225a <HAL_GPIO_Init+0x12e>
 8002186:	4a94      	ldr	r2, [pc, #592]	; (80023d8 <HAL_GPIO_Init+0x2ac>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d04c      	beq.n	8002226 <HAL_GPIO_Init+0xfa>
 800218c:	4a92      	ldr	r2, [pc, #584]	; (80023d8 <HAL_GPIO_Init+0x2ac>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d863      	bhi.n	800225a <HAL_GPIO_Init+0x12e>
 8002192:	4a92      	ldr	r2, [pc, #584]	; (80023dc <HAL_GPIO_Init+0x2b0>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d046      	beq.n	8002226 <HAL_GPIO_Init+0xfa>
 8002198:	4a90      	ldr	r2, [pc, #576]	; (80023dc <HAL_GPIO_Init+0x2b0>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d85d      	bhi.n	800225a <HAL_GPIO_Init+0x12e>
 800219e:	2b12      	cmp	r3, #18
 80021a0:	d82a      	bhi.n	80021f8 <HAL_GPIO_Init+0xcc>
 80021a2:	2b12      	cmp	r3, #18
 80021a4:	d859      	bhi.n	800225a <HAL_GPIO_Init+0x12e>
 80021a6:	a201      	add	r2, pc, #4	; (adr r2, 80021ac <HAL_GPIO_Init+0x80>)
 80021a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ac:	08002227 	.word	0x08002227
 80021b0:	08002201 	.word	0x08002201
 80021b4:	08002213 	.word	0x08002213
 80021b8:	08002255 	.word	0x08002255
 80021bc:	0800225b 	.word	0x0800225b
 80021c0:	0800225b 	.word	0x0800225b
 80021c4:	0800225b 	.word	0x0800225b
 80021c8:	0800225b 	.word	0x0800225b
 80021cc:	0800225b 	.word	0x0800225b
 80021d0:	0800225b 	.word	0x0800225b
 80021d4:	0800225b 	.word	0x0800225b
 80021d8:	0800225b 	.word	0x0800225b
 80021dc:	0800225b 	.word	0x0800225b
 80021e0:	0800225b 	.word	0x0800225b
 80021e4:	0800225b 	.word	0x0800225b
 80021e8:	0800225b 	.word	0x0800225b
 80021ec:	0800225b 	.word	0x0800225b
 80021f0:	08002209 	.word	0x08002209
 80021f4:	0800221d 	.word	0x0800221d
 80021f8:	4a79      	ldr	r2, [pc, #484]	; (80023e0 <HAL_GPIO_Init+0x2b4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d013      	beq.n	8002226 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021fe:	e02c      	b.n	800225a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	623b      	str	r3, [r7, #32]
          break;
 8002206:	e029      	b.n	800225c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	3304      	adds	r3, #4
 800220e:	623b      	str	r3, [r7, #32]
          break;
 8002210:	e024      	b.n	800225c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	3308      	adds	r3, #8
 8002218:	623b      	str	r3, [r7, #32]
          break;
 800221a:	e01f      	b.n	800225c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	330c      	adds	r3, #12
 8002222:	623b      	str	r3, [r7, #32]
          break;
 8002224:	e01a      	b.n	800225c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d102      	bne.n	8002234 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800222e:	2304      	movs	r3, #4
 8002230:	623b      	str	r3, [r7, #32]
          break;
 8002232:	e013      	b.n	800225c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d105      	bne.n	8002248 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800223c:	2308      	movs	r3, #8
 800223e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69fa      	ldr	r2, [r7, #28]
 8002244:	611a      	str	r2, [r3, #16]
          break;
 8002246:	e009      	b.n	800225c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002248:	2308      	movs	r3, #8
 800224a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69fa      	ldr	r2, [r7, #28]
 8002250:	615a      	str	r2, [r3, #20]
          break;
 8002252:	e003      	b.n	800225c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002254:	2300      	movs	r3, #0
 8002256:	623b      	str	r3, [r7, #32]
          break;
 8002258:	e000      	b.n	800225c <HAL_GPIO_Init+0x130>
          break;
 800225a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	2bff      	cmp	r3, #255	; 0xff
 8002260:	d801      	bhi.n	8002266 <HAL_GPIO_Init+0x13a>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	e001      	b.n	800226a <HAL_GPIO_Init+0x13e>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3304      	adds	r3, #4
 800226a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	2bff      	cmp	r3, #255	; 0xff
 8002270:	d802      	bhi.n	8002278 <HAL_GPIO_Init+0x14c>
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	e002      	b.n	800227e <HAL_GPIO_Init+0x152>
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	3b08      	subs	r3, #8
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	210f      	movs	r1, #15
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	fa01 f303 	lsl.w	r3, r1, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	401a      	ands	r2, r3
 8002290:	6a39      	ldr	r1, [r7, #32]
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	fa01 f303 	lsl.w	r3, r1, r3
 8002298:	431a      	orrs	r2, r3
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 80b1 	beq.w	800240e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022ac:	4b4d      	ldr	r3, [pc, #308]	; (80023e4 <HAL_GPIO_Init+0x2b8>)
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	4a4c      	ldr	r2, [pc, #304]	; (80023e4 <HAL_GPIO_Init+0x2b8>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	6193      	str	r3, [r2, #24]
 80022b8:	4b4a      	ldr	r3, [pc, #296]	; (80023e4 <HAL_GPIO_Init+0x2b8>)
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022c4:	4a48      	ldr	r2, [pc, #288]	; (80023e8 <HAL_GPIO_Init+0x2bc>)
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	089b      	lsrs	r3, r3, #2
 80022ca:	3302      	adds	r3, #2
 80022cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	220f      	movs	r2, #15
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	4013      	ands	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a40      	ldr	r2, [pc, #256]	; (80023ec <HAL_GPIO_Init+0x2c0>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d013      	beq.n	8002318 <HAL_GPIO_Init+0x1ec>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a3f      	ldr	r2, [pc, #252]	; (80023f0 <HAL_GPIO_Init+0x2c4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d00d      	beq.n	8002314 <HAL_GPIO_Init+0x1e8>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a3e      	ldr	r2, [pc, #248]	; (80023f4 <HAL_GPIO_Init+0x2c8>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d007      	beq.n	8002310 <HAL_GPIO_Init+0x1e4>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a3d      	ldr	r2, [pc, #244]	; (80023f8 <HAL_GPIO_Init+0x2cc>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d101      	bne.n	800230c <HAL_GPIO_Init+0x1e0>
 8002308:	2303      	movs	r3, #3
 800230a:	e006      	b.n	800231a <HAL_GPIO_Init+0x1ee>
 800230c:	2304      	movs	r3, #4
 800230e:	e004      	b.n	800231a <HAL_GPIO_Init+0x1ee>
 8002310:	2302      	movs	r3, #2
 8002312:	e002      	b.n	800231a <HAL_GPIO_Init+0x1ee>
 8002314:	2301      	movs	r3, #1
 8002316:	e000      	b.n	800231a <HAL_GPIO_Init+0x1ee>
 8002318:	2300      	movs	r3, #0
 800231a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231c:	f002 0203 	and.w	r2, r2, #3
 8002320:	0092      	lsls	r2, r2, #2
 8002322:	4093      	lsls	r3, r2
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800232a:	492f      	ldr	r1, [pc, #188]	; (80023e8 <HAL_GPIO_Init+0x2bc>)
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	089b      	lsrs	r3, r3, #2
 8002330:	3302      	adds	r3, #2
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d006      	beq.n	8002352 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002344:	4b2d      	ldr	r3, [pc, #180]	; (80023fc <HAL_GPIO_Init+0x2d0>)
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	492c      	ldr	r1, [pc, #176]	; (80023fc <HAL_GPIO_Init+0x2d0>)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	4313      	orrs	r3, r2
 800234e:	608b      	str	r3, [r1, #8]
 8002350:	e006      	b.n	8002360 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002352:	4b2a      	ldr	r3, [pc, #168]	; (80023fc <HAL_GPIO_Init+0x2d0>)
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	43db      	mvns	r3, r3
 800235a:	4928      	ldr	r1, [pc, #160]	; (80023fc <HAL_GPIO_Init+0x2d0>)
 800235c:	4013      	ands	r3, r2
 800235e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d006      	beq.n	800237a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800236c:	4b23      	ldr	r3, [pc, #140]	; (80023fc <HAL_GPIO_Init+0x2d0>)
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	4922      	ldr	r1, [pc, #136]	; (80023fc <HAL_GPIO_Init+0x2d0>)
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	4313      	orrs	r3, r2
 8002376:	60cb      	str	r3, [r1, #12]
 8002378:	e006      	b.n	8002388 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800237a:	4b20      	ldr	r3, [pc, #128]	; (80023fc <HAL_GPIO_Init+0x2d0>)
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	43db      	mvns	r3, r3
 8002382:	491e      	ldr	r1, [pc, #120]	; (80023fc <HAL_GPIO_Init+0x2d0>)
 8002384:	4013      	ands	r3, r2
 8002386:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d006      	beq.n	80023a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002394:	4b19      	ldr	r3, [pc, #100]	; (80023fc <HAL_GPIO_Init+0x2d0>)
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	4918      	ldr	r1, [pc, #96]	; (80023fc <HAL_GPIO_Init+0x2d0>)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	4313      	orrs	r3, r2
 800239e:	604b      	str	r3, [r1, #4]
 80023a0:	e006      	b.n	80023b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023a2:	4b16      	ldr	r3, [pc, #88]	; (80023fc <HAL_GPIO_Init+0x2d0>)
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	43db      	mvns	r3, r3
 80023aa:	4914      	ldr	r1, [pc, #80]	; (80023fc <HAL_GPIO_Init+0x2d0>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d021      	beq.n	8002400 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023bc:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <HAL_GPIO_Init+0x2d0>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	490e      	ldr	r1, [pc, #56]	; (80023fc <HAL_GPIO_Init+0x2d0>)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	600b      	str	r3, [r1, #0]
 80023c8:	e021      	b.n	800240e <HAL_GPIO_Init+0x2e2>
 80023ca:	bf00      	nop
 80023cc:	10320000 	.word	0x10320000
 80023d0:	10310000 	.word	0x10310000
 80023d4:	10220000 	.word	0x10220000
 80023d8:	10210000 	.word	0x10210000
 80023dc:	10120000 	.word	0x10120000
 80023e0:	10110000 	.word	0x10110000
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40010000 	.word	0x40010000
 80023ec:	40010800 	.word	0x40010800
 80023f0:	40010c00 	.word	0x40010c00
 80023f4:	40011000 	.word	0x40011000
 80023f8:	40011400 	.word	0x40011400
 80023fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_GPIO_Init+0x304>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	43db      	mvns	r3, r3
 8002408:	4909      	ldr	r1, [pc, #36]	; (8002430 <HAL_GPIO_Init+0x304>)
 800240a:	4013      	ands	r3, r2
 800240c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	3301      	adds	r3, #1
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	fa22 f303 	lsr.w	r3, r2, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	f47f ae8e 	bne.w	8002140 <HAL_GPIO_Init+0x14>
  }
}
 8002424:	bf00      	nop
 8002426:	bf00      	nop
 8002428:	372c      	adds	r7, #44	; 0x2c
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	40010400 	.word	0x40010400

08002434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	460b      	mov	r3, r1
 800243e:	807b      	strh	r3, [r7, #2]
 8002440:	4613      	mov	r3, r2
 8002442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002444:	787b      	ldrb	r3, [r7, #1]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800244a:	887a      	ldrh	r2, [r7, #2]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002450:	e003      	b.n	800245a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002452:	887b      	ldrh	r3, [r7, #2]
 8002454:	041a      	lsls	r2, r3, #16
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	611a      	str	r2, [r3, #16]
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002476:	887a      	ldrh	r2, [r7, #2]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4013      	ands	r3, r2
 800247c:	041a      	lsls	r2, r3, #16
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	43d9      	mvns	r1, r3
 8002482:	887b      	ldrh	r3, [r7, #2]
 8002484:	400b      	ands	r3, r1
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	611a      	str	r2, [r3, #16]
}
 800248c:	bf00      	nop
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr
	...

08002498 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e272      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 8087 	beq.w	80025c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024b8:	4b92      	ldr	r3, [pc, #584]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 030c 	and.w	r3, r3, #12
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d00c      	beq.n	80024de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024c4:	4b8f      	ldr	r3, [pc, #572]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 030c 	and.w	r3, r3, #12
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d112      	bne.n	80024f6 <HAL_RCC_OscConfig+0x5e>
 80024d0:	4b8c      	ldr	r3, [pc, #560]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024dc:	d10b      	bne.n	80024f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024de:	4b89      	ldr	r3, [pc, #548]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d06c      	beq.n	80025c4 <HAL_RCC_OscConfig+0x12c>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d168      	bne.n	80025c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e24c      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024fe:	d106      	bne.n	800250e <HAL_RCC_OscConfig+0x76>
 8002500:	4b80      	ldr	r3, [pc, #512]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a7f      	ldr	r2, [pc, #508]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	e02e      	b.n	800256c <HAL_RCC_OscConfig+0xd4>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10c      	bne.n	8002530 <HAL_RCC_OscConfig+0x98>
 8002516:	4b7b      	ldr	r3, [pc, #492]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a7a      	ldr	r2, [pc, #488]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 800251c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	4b78      	ldr	r3, [pc, #480]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a77      	ldr	r2, [pc, #476]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002528:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	e01d      	b.n	800256c <HAL_RCC_OscConfig+0xd4>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002538:	d10c      	bne.n	8002554 <HAL_RCC_OscConfig+0xbc>
 800253a:	4b72      	ldr	r3, [pc, #456]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a71      	ldr	r2, [pc, #452]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	4b6f      	ldr	r3, [pc, #444]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a6e      	ldr	r2, [pc, #440]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 800254c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	e00b      	b.n	800256c <HAL_RCC_OscConfig+0xd4>
 8002554:	4b6b      	ldr	r3, [pc, #428]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a6a      	ldr	r2, [pc, #424]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 800255a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	4b68      	ldr	r3, [pc, #416]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a67      	ldr	r2, [pc, #412]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800256a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d013      	beq.n	800259c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7ff f9fc 	bl	8001970 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800257c:	f7ff f9f8 	bl	8001970 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b64      	cmp	r3, #100	; 0x64
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e200      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	4b5d      	ldr	r3, [pc, #372]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0f0      	beq.n	800257c <HAL_RCC_OscConfig+0xe4>
 800259a:	e014      	b.n	80025c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259c:	f7ff f9e8 	bl	8001970 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a4:	f7ff f9e4 	bl	8001970 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b64      	cmp	r3, #100	; 0x64
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e1ec      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b6:	4b53      	ldr	r3, [pc, #332]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0x10c>
 80025c2:	e000      	b.n	80025c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d063      	beq.n	800269a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025d2:	4b4c      	ldr	r3, [pc, #304]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00b      	beq.n	80025f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025de:	4b49      	ldr	r3, [pc, #292]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d11c      	bne.n	8002624 <HAL_RCC_OscConfig+0x18c>
 80025ea:	4b46      	ldr	r3, [pc, #280]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d116      	bne.n	8002624 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f6:	4b43      	ldr	r3, [pc, #268]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d005      	beq.n	800260e <HAL_RCC_OscConfig+0x176>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d001      	beq.n	800260e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e1c0      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260e:	4b3d      	ldr	r3, [pc, #244]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4939      	ldr	r1, [pc, #228]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 800261e:	4313      	orrs	r3, r2
 8002620:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002622:	e03a      	b.n	800269a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d020      	beq.n	800266e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800262c:	4b36      	ldr	r3, [pc, #216]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 800262e:	2201      	movs	r2, #1
 8002630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002632:	f7ff f99d 	bl	8001970 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800263a:	f7ff f999 	bl	8001970 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e1a1      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264c:	4b2d      	ldr	r3, [pc, #180]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002658:	4b2a      	ldr	r3, [pc, #168]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	4927      	ldr	r1, [pc, #156]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002668:	4313      	orrs	r3, r2
 800266a:	600b      	str	r3, [r1, #0]
 800266c:	e015      	b.n	800269a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800266e:	4b26      	ldr	r3, [pc, #152]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002674:	f7ff f97c 	bl	8001970 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800267c:	f7ff f978 	bl	8001970 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e180      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268e:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f0      	bne.n	800267c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d03a      	beq.n	800271c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d019      	beq.n	80026e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ae:	4b17      	ldr	r3, [pc, #92]	; (800270c <HAL_RCC_OscConfig+0x274>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b4:	f7ff f95c 	bl	8001970 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026bc:	f7ff f958 	bl	8001970 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e160      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ce:	4b0d      	ldr	r3, [pc, #52]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026da:	2001      	movs	r0, #1
 80026dc:	f000 face 	bl	8002c7c <RCC_Delay>
 80026e0:	e01c      	b.n	800271c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e2:	4b0a      	ldr	r3, [pc, #40]	; (800270c <HAL_RCC_OscConfig+0x274>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e8:	f7ff f942 	bl	8001970 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ee:	e00f      	b.n	8002710 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f0:	f7ff f93e 	bl	8001970 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d908      	bls.n	8002710 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e146      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
 8002702:	bf00      	nop
 8002704:	40021000 	.word	0x40021000
 8002708:	42420000 	.word	0x42420000
 800270c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002710:	4b92      	ldr	r3, [pc, #584]	; (800295c <HAL_RCC_OscConfig+0x4c4>)
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1e9      	bne.n	80026f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 80a6 	beq.w	8002876 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800272a:	2300      	movs	r3, #0
 800272c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800272e:	4b8b      	ldr	r3, [pc, #556]	; (800295c <HAL_RCC_OscConfig+0x4c4>)
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10d      	bne.n	8002756 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800273a:	4b88      	ldr	r3, [pc, #544]	; (800295c <HAL_RCC_OscConfig+0x4c4>)
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	4a87      	ldr	r2, [pc, #540]	; (800295c <HAL_RCC_OscConfig+0x4c4>)
 8002740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002744:	61d3      	str	r3, [r2, #28]
 8002746:	4b85      	ldr	r3, [pc, #532]	; (800295c <HAL_RCC_OscConfig+0x4c4>)
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002752:	2301      	movs	r3, #1
 8002754:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002756:	4b82      	ldr	r3, [pc, #520]	; (8002960 <HAL_RCC_OscConfig+0x4c8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275e:	2b00      	cmp	r3, #0
 8002760:	d118      	bne.n	8002794 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002762:	4b7f      	ldr	r3, [pc, #508]	; (8002960 <HAL_RCC_OscConfig+0x4c8>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a7e      	ldr	r2, [pc, #504]	; (8002960 <HAL_RCC_OscConfig+0x4c8>)
 8002768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800276e:	f7ff f8ff 	bl	8001970 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002776:	f7ff f8fb 	bl	8001970 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b64      	cmp	r3, #100	; 0x64
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e103      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002788:	4b75      	ldr	r3, [pc, #468]	; (8002960 <HAL_RCC_OscConfig+0x4c8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d106      	bne.n	80027aa <HAL_RCC_OscConfig+0x312>
 800279c:	4b6f      	ldr	r3, [pc, #444]	; (800295c <HAL_RCC_OscConfig+0x4c4>)
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	4a6e      	ldr	r2, [pc, #440]	; (800295c <HAL_RCC_OscConfig+0x4c4>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	6213      	str	r3, [r2, #32]
 80027a8:	e02d      	b.n	8002806 <HAL_RCC_OscConfig+0x36e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10c      	bne.n	80027cc <HAL_RCC_OscConfig+0x334>
 80027b2:	4b6a      	ldr	r3, [pc, #424]	; (800295c <HAL_RCC_OscConfig+0x4c4>)
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	4a69      	ldr	r2, [pc, #420]	; (800295c <HAL_RCC_OscConfig+0x4c4>)
 80027b8:	f023 0301 	bic.w	r3, r3, #1
 80027bc:	6213      	str	r3, [r2, #32]
 80027be:	4b67      	ldr	r3, [pc, #412]	; (800295c <HAL_RCC_OscConfig+0x4c4>)
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	4a66      	ldr	r2, [pc, #408]	; (800295c <HAL_RCC_OscConfig+0x4c4>)
 80027c4:	f023 0304 	bic.w	r3, r3, #4
 80027c8:	6213      	str	r3, [r2, #32]
 80027ca:	e01c      	b.n	8002806 <HAL_RCC_OscConfig+0x36e>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	2b05      	cmp	r3, #5
 80027d2:	d10c      	bne.n	80027ee <HAL_RCC_OscConfig+0x356>
 80027d4:	4b61      	ldr	r3, [pc, #388]	; (800295c <HAL_RCC_OscConfig+0x4c4>)
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	4a60      	ldr	r2, [pc, #384]	; (800295c <HAL_RCC_OscConfig+0x4c4>)
 80027da:	f043 0304 	orr.w	r3, r3, #4
 80027de:	6213      	str	r3, [r2, #32]
 80027e0:	4b5e      	ldr	r3, [pc, #376]	; (800295c <HAL_RCC_OscConfig+0x4c4>)
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	4a5d      	ldr	r2, [pc, #372]	; (800295c <HAL_RCC_OscConfig+0x4c4>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6213      	str	r3, [r2, #32]
 80027ec:	e00b      	b.n	8002806 <HAL_RCC_OscConfig+0x36e>
 80027ee:	4b5b      	ldr	r3, [pc, #364]	; (800295c <HAL_RCC_OscConfig+0x4c4>)
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	4a5a      	ldr	r2, [pc, #360]	; (800295c <HAL_RCC_OscConfig+0x4c4>)
 80027f4:	f023 0301 	bic.w	r3, r3, #1
 80027f8:	6213      	str	r3, [r2, #32]
 80027fa:	4b58      	ldr	r3, [pc, #352]	; (800295c <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	4a57      	ldr	r2, [pc, #348]	; (800295c <HAL_RCC_OscConfig+0x4c4>)
 8002800:	f023 0304 	bic.w	r3, r3, #4
 8002804:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d015      	beq.n	800283a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280e:	f7ff f8af 	bl	8001970 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002814:	e00a      	b.n	800282c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002816:	f7ff f8ab 	bl	8001970 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	f241 3288 	movw	r2, #5000	; 0x1388
 8002824:	4293      	cmp	r3, r2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e0b1      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282c:	4b4b      	ldr	r3, [pc, #300]	; (800295c <HAL_RCC_OscConfig+0x4c4>)
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0ee      	beq.n	8002816 <HAL_RCC_OscConfig+0x37e>
 8002838:	e014      	b.n	8002864 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283a:	f7ff f899 	bl	8001970 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002840:	e00a      	b.n	8002858 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002842:	f7ff f895 	bl	8001970 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002850:	4293      	cmp	r3, r2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e09b      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002858:	4b40      	ldr	r3, [pc, #256]	; (800295c <HAL_RCC_OscConfig+0x4c4>)
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1ee      	bne.n	8002842 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002864:	7dfb      	ldrb	r3, [r7, #23]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d105      	bne.n	8002876 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800286a:	4b3c      	ldr	r3, [pc, #240]	; (800295c <HAL_RCC_OscConfig+0x4c4>)
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	4a3b      	ldr	r2, [pc, #236]	; (800295c <HAL_RCC_OscConfig+0x4c4>)
 8002870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002874:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 8087 	beq.w	800298e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002880:	4b36      	ldr	r3, [pc, #216]	; (800295c <HAL_RCC_OscConfig+0x4c4>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 030c 	and.w	r3, r3, #12
 8002888:	2b08      	cmp	r3, #8
 800288a:	d061      	beq.n	8002950 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d146      	bne.n	8002922 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002894:	4b33      	ldr	r3, [pc, #204]	; (8002964 <HAL_RCC_OscConfig+0x4cc>)
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289a:	f7ff f869 	bl	8001970 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a2:	f7ff f865 	bl	8001970 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e06d      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b4:	4b29      	ldr	r3, [pc, #164]	; (800295c <HAL_RCC_OscConfig+0x4c4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f0      	bne.n	80028a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c8:	d108      	bne.n	80028dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028ca:	4b24      	ldr	r3, [pc, #144]	; (800295c <HAL_RCC_OscConfig+0x4c4>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	4921      	ldr	r1, [pc, #132]	; (800295c <HAL_RCC_OscConfig+0x4c4>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028dc:	4b1f      	ldr	r3, [pc, #124]	; (800295c <HAL_RCC_OscConfig+0x4c4>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a19      	ldr	r1, [r3, #32]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	430b      	orrs	r3, r1
 80028ee:	491b      	ldr	r1, [pc, #108]	; (800295c <HAL_RCC_OscConfig+0x4c4>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028f4:	4b1b      	ldr	r3, [pc, #108]	; (8002964 <HAL_RCC_OscConfig+0x4cc>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fa:	f7ff f839 	bl	8001970 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002902:	f7ff f835 	bl	8001970 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e03d      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002914:	4b11      	ldr	r3, [pc, #68]	; (800295c <HAL_RCC_OscConfig+0x4c4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0f0      	beq.n	8002902 <HAL_RCC_OscConfig+0x46a>
 8002920:	e035      	b.n	800298e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002922:	4b10      	ldr	r3, [pc, #64]	; (8002964 <HAL_RCC_OscConfig+0x4cc>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7ff f822 	bl	8001970 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002930:	f7ff f81e 	bl	8001970 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e026      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002942:	4b06      	ldr	r3, [pc, #24]	; (800295c <HAL_RCC_OscConfig+0x4c4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0x498>
 800294e:	e01e      	b.n	800298e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d107      	bne.n	8002968 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e019      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
 800295c:	40021000 	.word	0x40021000
 8002960:	40007000 	.word	0x40007000
 8002964:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002968:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <HAL_RCC_OscConfig+0x500>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	429a      	cmp	r2, r3
 800297a:	d106      	bne.n	800298a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002986:	429a      	cmp	r2, r3
 8002988:	d001      	beq.n	800298e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40021000 	.word	0x40021000

0800299c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0d0      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029b0:	4b6a      	ldr	r3, [pc, #424]	; (8002b5c <HAL_RCC_ClockConfig+0x1c0>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d910      	bls.n	80029e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029be:	4b67      	ldr	r3, [pc, #412]	; (8002b5c <HAL_RCC_ClockConfig+0x1c0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f023 0207 	bic.w	r2, r3, #7
 80029c6:	4965      	ldr	r1, [pc, #404]	; (8002b5c <HAL_RCC_ClockConfig+0x1c0>)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ce:	4b63      	ldr	r3, [pc, #396]	; (8002b5c <HAL_RCC_ClockConfig+0x1c0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0b8      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d020      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029f8:	4b59      	ldr	r3, [pc, #356]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	4a58      	ldr	r2, [pc, #352]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 80029fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0308 	and.w	r3, r3, #8
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a10:	4b53      	ldr	r3, [pc, #332]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	4a52      	ldr	r2, [pc, #328]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a1c:	4b50      	ldr	r3, [pc, #320]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	494d      	ldr	r1, [pc, #308]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d040      	beq.n	8002abc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d107      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a42:	4b47      	ldr	r3, [pc, #284]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d115      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e07f      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d107      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5a:	4b41      	ldr	r3, [pc, #260]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d109      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e073      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6a:	4b3d      	ldr	r3, [pc, #244]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e06b      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a7a:	4b39      	ldr	r3, [pc, #228]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f023 0203 	bic.w	r2, r3, #3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	4936      	ldr	r1, [pc, #216]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a8c:	f7fe ff70 	bl	8001970 <HAL_GetTick>
 8002a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a92:	e00a      	b.n	8002aaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a94:	f7fe ff6c 	bl	8001970 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e053      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aaa:	4b2d      	ldr	r3, [pc, #180]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 020c 	and.w	r2, r3, #12
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d1eb      	bne.n	8002a94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002abc:	4b27      	ldr	r3, [pc, #156]	; (8002b5c <HAL_RCC_ClockConfig+0x1c0>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d210      	bcs.n	8002aec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aca:	4b24      	ldr	r3, [pc, #144]	; (8002b5c <HAL_RCC_ClockConfig+0x1c0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 0207 	bic.w	r2, r3, #7
 8002ad2:	4922      	ldr	r1, [pc, #136]	; (8002b5c <HAL_RCC_ClockConfig+0x1c0>)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ada:	4b20      	ldr	r3, [pc, #128]	; (8002b5c <HAL_RCC_ClockConfig+0x1c0>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e032      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002af8:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	4916      	ldr	r1, [pc, #88]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d009      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b16:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	490e      	ldr	r1, [pc, #56]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b2a:	f000 f821 	bl	8002b70 <HAL_RCC_GetSysClockFreq>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	490a      	ldr	r1, [pc, #40]	; (8002b64 <HAL_RCC_ClockConfig+0x1c8>)
 8002b3c:	5ccb      	ldrb	r3, [r1, r3]
 8002b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b42:	4a09      	ldr	r2, [pc, #36]	; (8002b68 <HAL_RCC_ClockConfig+0x1cc>)
 8002b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b46:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <HAL_RCC_ClockConfig+0x1d0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe fece 	bl	80018ec <HAL_InitTick>

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40022000 	.word	0x40022000
 8002b60:	40021000 	.word	0x40021000
 8002b64:	08004f48 	.word	0x08004f48
 8002b68:	200000f0 	.word	0x200000f0
 8002b6c:	200000f4 	.word	0x200000f4

08002b70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60bb      	str	r3, [r7, #8]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	2300      	movs	r3, #0
 8002b84:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b8a:	4b1e      	ldr	r3, [pc, #120]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f003 030c 	and.w	r3, r3, #12
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d002      	beq.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x30>
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d003      	beq.n	8002ba6 <HAL_RCC_GetSysClockFreq+0x36>
 8002b9e:	e027      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ba0:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ba2:	613b      	str	r3, [r7, #16]
      break;
 8002ba4:	e027      	b.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	0c9b      	lsrs	r3, r3, #18
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	4a17      	ldr	r2, [pc, #92]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bb0:	5cd3      	ldrb	r3, [r2, r3]
 8002bb2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d010      	beq.n	8002be0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bbe:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	0c5b      	lsrs	r3, r3, #17
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	4a11      	ldr	r2, [pc, #68]	; (8002c10 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bca:	5cd3      	ldrb	r3, [r2, r3]
 8002bcc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a0d      	ldr	r2, [pc, #52]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bd2:	fb03 f202 	mul.w	r2, r3, r2
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	e004      	b.n	8002bea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a0c      	ldr	r2, [pc, #48]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002be4:	fb02 f303 	mul.w	r3, r2, r3
 8002be8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	613b      	str	r3, [r7, #16]
      break;
 8002bee:	e002      	b.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bf0:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bf2:	613b      	str	r3, [r7, #16]
      break;
 8002bf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bf6:	693b      	ldr	r3, [r7, #16]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	371c      	adds	r7, #28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40021000 	.word	0x40021000
 8002c08:	007a1200 	.word	0x007a1200
 8002c0c:	08004f60 	.word	0x08004f60
 8002c10:	08004f70 	.word	0x08004f70
 8002c14:	003d0900 	.word	0x003d0900

08002c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c1c:	4b02      	ldr	r3, [pc, #8]	; (8002c28 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr
 8002c28:	200000f0 	.word	0x200000f0

08002c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c30:	f7ff fff2 	bl	8002c18 <HAL_RCC_GetHCLKFreq>
 8002c34:	4602      	mov	r2, r0
 8002c36:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	0a1b      	lsrs	r3, r3, #8
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	4903      	ldr	r1, [pc, #12]	; (8002c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c42:	5ccb      	ldrb	r3, [r1, r3]
 8002c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	08004f58 	.word	0x08004f58

08002c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c58:	f7ff ffde 	bl	8002c18 <HAL_RCC_GetHCLKFreq>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	0adb      	lsrs	r3, r3, #11
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	4903      	ldr	r1, [pc, #12]	; (8002c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c6a:	5ccb      	ldrb	r3, [r1, r3]
 8002c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40021000 	.word	0x40021000
 8002c78:	08004f58 	.word	0x08004f58

08002c7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c84:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <RCC_Delay+0x34>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a0a      	ldr	r2, [pc, #40]	; (8002cb4 <RCC_Delay+0x38>)
 8002c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8e:	0a5b      	lsrs	r3, r3, #9
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	fb02 f303 	mul.w	r3, r2, r3
 8002c96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c98:	bf00      	nop
  }
  while (Delay --);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	1e5a      	subs	r2, r3, #1
 8002c9e:	60fa      	str	r2, [r7, #12]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1f9      	bne.n	8002c98 <RCC_Delay+0x1c>
}
 8002ca4:	bf00      	nop
 8002ca6:	bf00      	nop
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr
 8002cb0:	200000f0 	.word	0x200000f0
 8002cb4:	10624dd3 	.word	0x10624dd3

08002cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e041      	b.n	8002d4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d106      	bne.n	8002ce4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7fe fc6a 	bl	80015b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4610      	mov	r0, r2
 8002cf8:	f000 fa74 	bl	80031e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d001      	beq.n	8002d70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e03a      	b.n	8002de6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 0201 	orr.w	r2, r2, #1
 8002d86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a18      	ldr	r2, [pc, #96]	; (8002df0 <HAL_TIM_Base_Start_IT+0x98>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d00e      	beq.n	8002db0 <HAL_TIM_Base_Start_IT+0x58>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d9a:	d009      	beq.n	8002db0 <HAL_TIM_Base_Start_IT+0x58>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a14      	ldr	r2, [pc, #80]	; (8002df4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d004      	beq.n	8002db0 <HAL_TIM_Base_Start_IT+0x58>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a13      	ldr	r2, [pc, #76]	; (8002df8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d111      	bne.n	8002dd4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2b06      	cmp	r3, #6
 8002dc0:	d010      	beq.n	8002de4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 0201 	orr.w	r2, r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd2:	e007      	b.n	8002de4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr
 8002df0:	40012c00 	.word	0x40012c00
 8002df4:	40000400 	.word	0x40000400
 8002df8:	40000800 	.word	0x40000800

08002dfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d122      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d11b      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f06f 0202 	mvn.w	r2, #2
 8002e28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f9b4 	bl	80031ac <HAL_TIM_IC_CaptureCallback>
 8002e44:	e005      	b.n	8002e52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f9a7 	bl	800319a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f9b6 	bl	80031be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d122      	bne.n	8002eac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d11b      	bne.n	8002eac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f06f 0204 	mvn.w	r2, #4
 8002e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2202      	movs	r2, #2
 8002e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f98a 	bl	80031ac <HAL_TIM_IC_CaptureCallback>
 8002e98:	e005      	b.n	8002ea6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f97d 	bl	800319a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f98c 	bl	80031be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d122      	bne.n	8002f00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f003 0308 	and.w	r3, r3, #8
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	d11b      	bne.n	8002f00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f06f 0208 	mvn.w	r2, #8
 8002ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f960 	bl	80031ac <HAL_TIM_IC_CaptureCallback>
 8002eec:	e005      	b.n	8002efa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f953 	bl	800319a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f962 	bl	80031be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	2b10      	cmp	r3, #16
 8002f0c:	d122      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f003 0310 	and.w	r3, r3, #16
 8002f18:	2b10      	cmp	r3, #16
 8002f1a:	d11b      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f06f 0210 	mvn.w	r2, #16
 8002f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2208      	movs	r2, #8
 8002f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f936 	bl	80031ac <HAL_TIM_IC_CaptureCallback>
 8002f40:	e005      	b.n	8002f4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f929 	bl	800319a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f938 	bl	80031be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d10e      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d107      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0201 	mvn.w	r2, #1
 8002f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7fe f926 	bl	80011cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8a:	2b80      	cmp	r3, #128	; 0x80
 8002f8c:	d10e      	bne.n	8002fac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f98:	2b80      	cmp	r3, #128	; 0x80
 8002f9a:	d107      	bne.n	8002fac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 fa7b 	bl	80034a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb6:	2b40      	cmp	r3, #64	; 0x40
 8002fb8:	d10e      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc4:	2b40      	cmp	r3, #64	; 0x40
 8002fc6:	d107      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f8fc 	bl	80031d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f003 0320 	and.w	r3, r3, #32
 8002fe2:	2b20      	cmp	r3, #32
 8002fe4:	d10e      	bne.n	8003004 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	2b20      	cmp	r3, #32
 8002ff2:	d107      	bne.n	8003004 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f06f 0220 	mvn.w	r2, #32
 8002ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 fa46 	bl	8003490 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003004:	bf00      	nop
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <HAL_TIM_ConfigClockSource+0x1c>
 8003024:	2302      	movs	r3, #2
 8003026:	e0b4      	b.n	8003192 <HAL_TIM_ConfigClockSource+0x186>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2202      	movs	r2, #2
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003046:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800304e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003060:	d03e      	beq.n	80030e0 <HAL_TIM_ConfigClockSource+0xd4>
 8003062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003066:	f200 8087 	bhi.w	8003178 <HAL_TIM_ConfigClockSource+0x16c>
 800306a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800306e:	f000 8086 	beq.w	800317e <HAL_TIM_ConfigClockSource+0x172>
 8003072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003076:	d87f      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x16c>
 8003078:	2b70      	cmp	r3, #112	; 0x70
 800307a:	d01a      	beq.n	80030b2 <HAL_TIM_ConfigClockSource+0xa6>
 800307c:	2b70      	cmp	r3, #112	; 0x70
 800307e:	d87b      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x16c>
 8003080:	2b60      	cmp	r3, #96	; 0x60
 8003082:	d050      	beq.n	8003126 <HAL_TIM_ConfigClockSource+0x11a>
 8003084:	2b60      	cmp	r3, #96	; 0x60
 8003086:	d877      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x16c>
 8003088:	2b50      	cmp	r3, #80	; 0x50
 800308a:	d03c      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0xfa>
 800308c:	2b50      	cmp	r3, #80	; 0x50
 800308e:	d873      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x16c>
 8003090:	2b40      	cmp	r3, #64	; 0x40
 8003092:	d058      	beq.n	8003146 <HAL_TIM_ConfigClockSource+0x13a>
 8003094:	2b40      	cmp	r3, #64	; 0x40
 8003096:	d86f      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x16c>
 8003098:	2b30      	cmp	r3, #48	; 0x30
 800309a:	d064      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0x15a>
 800309c:	2b30      	cmp	r3, #48	; 0x30
 800309e:	d86b      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x16c>
 80030a0:	2b20      	cmp	r3, #32
 80030a2:	d060      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0x15a>
 80030a4:	2b20      	cmp	r3, #32
 80030a6:	d867      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x16c>
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d05c      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0x15a>
 80030ac:	2b10      	cmp	r3, #16
 80030ae:	d05a      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0x15a>
 80030b0:	e062      	b.n	8003178 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030c2:	f000 f968 	bl	8003396 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	609a      	str	r2, [r3, #8]
      break;
 80030de:	e04f      	b.n	8003180 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030f0:	f000 f951 	bl	8003396 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003102:	609a      	str	r2, [r3, #8]
      break;
 8003104:	e03c      	b.n	8003180 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003112:	461a      	mov	r2, r3
 8003114:	f000 f8c8 	bl	80032a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2150      	movs	r1, #80	; 0x50
 800311e:	4618      	mov	r0, r3
 8003120:	f000 f91f 	bl	8003362 <TIM_ITRx_SetConfig>
      break;
 8003124:	e02c      	b.n	8003180 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003132:	461a      	mov	r2, r3
 8003134:	f000 f8e6 	bl	8003304 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2160      	movs	r1, #96	; 0x60
 800313e:	4618      	mov	r0, r3
 8003140:	f000 f90f 	bl	8003362 <TIM_ITRx_SetConfig>
      break;
 8003144:	e01c      	b.n	8003180 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003152:	461a      	mov	r2, r3
 8003154:	f000 f8a8 	bl	80032a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2140      	movs	r1, #64	; 0x40
 800315e:	4618      	mov	r0, r3
 8003160:	f000 f8ff 	bl	8003362 <TIM_ITRx_SetConfig>
      break;
 8003164:	e00c      	b.n	8003180 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4619      	mov	r1, r3
 8003170:	4610      	mov	r0, r2
 8003172:	f000 f8f6 	bl	8003362 <TIM_ITRx_SetConfig>
      break;
 8003176:	e003      	b.n	8003180 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	73fb      	strb	r3, [r7, #15]
      break;
 800317c:	e000      	b.n	8003180 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800317e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003190:	7bfb      	ldrb	r3, [r7, #15]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr

080031ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr

080031be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr

080031d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr
	...

080031e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a29      	ldr	r2, [pc, #164]	; (800329c <TIM_Base_SetConfig+0xb8>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00b      	beq.n	8003214 <TIM_Base_SetConfig+0x30>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003202:	d007      	beq.n	8003214 <TIM_Base_SetConfig+0x30>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a26      	ldr	r2, [pc, #152]	; (80032a0 <TIM_Base_SetConfig+0xbc>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d003      	beq.n	8003214 <TIM_Base_SetConfig+0x30>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a25      	ldr	r2, [pc, #148]	; (80032a4 <TIM_Base_SetConfig+0xc0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d108      	bne.n	8003226 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800321a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	4313      	orrs	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a1c      	ldr	r2, [pc, #112]	; (800329c <TIM_Base_SetConfig+0xb8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d00b      	beq.n	8003246 <TIM_Base_SetConfig+0x62>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003234:	d007      	beq.n	8003246 <TIM_Base_SetConfig+0x62>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a19      	ldr	r2, [pc, #100]	; (80032a0 <TIM_Base_SetConfig+0xbc>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d003      	beq.n	8003246 <TIM_Base_SetConfig+0x62>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a18      	ldr	r2, [pc, #96]	; (80032a4 <TIM_Base_SetConfig+0xc0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d108      	bne.n	8003258 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800324c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4313      	orrs	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	4313      	orrs	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a07      	ldr	r2, [pc, #28]	; (800329c <TIM_Base_SetConfig+0xb8>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d103      	bne.n	800328c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	615a      	str	r2, [r3, #20]
}
 8003292:	bf00      	nop
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr
 800329c:	40012c00 	.word	0x40012c00
 80032a0:	40000400 	.word	0x40000400
 80032a4:	40000800 	.word	0x40000800

080032a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	f023 0201 	bic.w	r2, r3, #1
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	4313      	orrs	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f023 030a 	bic.w	r3, r3, #10
 80032e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	621a      	str	r2, [r3, #32]
}
 80032fa:	bf00      	nop
 80032fc:	371c      	adds	r7, #28
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr

08003304 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	f023 0210 	bic.w	r2, r3, #16
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800332e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	031b      	lsls	r3, r3, #12
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4313      	orrs	r3, r2
 8003338:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003340:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4313      	orrs	r3, r2
 800334a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	621a      	str	r2, [r3, #32]
}
 8003358:	bf00      	nop
 800335a:	371c      	adds	r7, #28
 800335c:	46bd      	mov	sp, r7
 800335e:	bc80      	pop	{r7}
 8003360:	4770      	bx	lr

08003362 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003362:	b480      	push	{r7}
 8003364:	b085      	sub	sp, #20
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
 800336a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003378:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4313      	orrs	r3, r2
 8003380:	f043 0307 	orr.w	r3, r3, #7
 8003384:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	609a      	str	r2, [r3, #8]
}
 800338c:	bf00      	nop
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr

08003396 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003396:	b480      	push	{r7}
 8003398:	b087      	sub	sp, #28
 800339a:	af00      	add	r7, sp, #0
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	607a      	str	r2, [r7, #4]
 80033a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	021a      	lsls	r2, r3, #8
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	431a      	orrs	r2, r3
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	4313      	orrs	r3, r2
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	609a      	str	r2, [r3, #8]
}
 80033ca:	bf00      	nop
 80033cc:	371c      	adds	r7, #28
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr

080033d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e046      	b.n	800347a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003412:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	4313      	orrs	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a16      	ldr	r2, [pc, #88]	; (8003484 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d00e      	beq.n	800344e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003438:	d009      	beq.n	800344e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a12      	ldr	r2, [pc, #72]	; (8003488 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d004      	beq.n	800344e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a10      	ldr	r2, [pc, #64]	; (800348c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d10c      	bne.n	8003468 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003454:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	4313      	orrs	r3, r2
 800345e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr
 8003484:	40012c00 	.word	0x40012c00
 8003488:	40000400 	.word	0x40000400
 800348c:	40000800 	.word	0x40000800

08003490 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	bc80      	pop	{r7}
 80034a0:	4770      	bx	lr

080034a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr

080034b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e042      	b.n	800354c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d106      	bne.n	80034e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7fe f892 	bl	8001604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2224      	movs	r2, #36	; 0x24
 80034e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 ffb3 	bl	8004464 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	691a      	ldr	r2, [r3, #16]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800350c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695a      	ldr	r2, [r3, #20]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800351c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800352c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2220      	movs	r2, #32
 8003538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08a      	sub	sp, #40	; 0x28
 8003558:	af02      	add	r7, sp, #8
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	603b      	str	r3, [r7, #0]
 8003560:	4613      	mov	r3, r2
 8003562:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b20      	cmp	r3, #32
 8003572:	d16d      	bne.n	8003650 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d002      	beq.n	8003580 <HAL_UART_Transmit+0x2c>
 800357a:	88fb      	ldrh	r3, [r7, #6]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e066      	b.n	8003652 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2221      	movs	r2, #33	; 0x21
 800358e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003592:	f7fe f9ed 	bl	8001970 <HAL_GetTick>
 8003596:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	88fa      	ldrh	r2, [r7, #6]
 800359c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	88fa      	ldrh	r2, [r7, #6]
 80035a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ac:	d108      	bne.n	80035c0 <HAL_UART_Transmit+0x6c>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d104      	bne.n	80035c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	61bb      	str	r3, [r7, #24]
 80035be:	e003      	b.n	80035c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035c8:	e02a      	b.n	8003620 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2200      	movs	r2, #0
 80035d2:	2180      	movs	r1, #128	; 0x80
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 fc41 	bl	8003e5c <UART_WaitOnFlagUntilTimeout>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e036      	b.n	8003652 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10b      	bne.n	8003602 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	3302      	adds	r3, #2
 80035fe:	61bb      	str	r3, [r7, #24]
 8003600:	e007      	b.n	8003612 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	781a      	ldrb	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	3301      	adds	r3, #1
 8003610:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003616:	b29b      	uxth	r3, r3
 8003618:	3b01      	subs	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003624:	b29b      	uxth	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1cf      	bne.n	80035ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2200      	movs	r2, #0
 8003632:	2140      	movs	r1, #64	; 0x40
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 fc11 	bl	8003e5c <UART_WaitOnFlagUntilTimeout>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e006      	b.n	8003652 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	e000      	b.n	8003652 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003650:	2302      	movs	r3, #2
  }
}
 8003652:	4618      	mov	r0, r3
 8003654:	3720      	adds	r7, #32
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b084      	sub	sp, #16
 800365e:	af00      	add	r7, sp, #0
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	4613      	mov	r3, r2
 8003666:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b20      	cmp	r3, #32
 8003672:	d112      	bne.n	800369a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d002      	beq.n	8003680 <HAL_UART_Receive_IT+0x26>
 800367a:	88fb      	ldrh	r3, [r7, #6]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e00b      	b.n	800369c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800368a:	88fb      	ldrh	r3, [r7, #6]
 800368c:	461a      	mov	r2, r3
 800368e:	68b9      	ldr	r1, [r7, #8]
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 fc51 	bl	8003f38 <UART_Start_Receive_IT>
 8003696:	4603      	mov	r3, r0
 8003698:	e000      	b.n	800369c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800369a:	2302      	movs	r3, #2
  }
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	4613      	mov	r3, r2
 80036b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b20      	cmp	r3, #32
 80036bc:	d112      	bne.n	80036e4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d002      	beq.n	80036ca <HAL_UART_Receive_DMA+0x26>
 80036c4:	88fb      	ldrh	r3, [r7, #6]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e00b      	b.n	80036e6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80036d4:	88fb      	ldrh	r3, [r7, #6]
 80036d6:	461a      	mov	r2, r3
 80036d8:	68b9      	ldr	r1, [r7, #8]
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 fc66 	bl	8003fac <UART_Start_Receive_DMA>
 80036e0:	4603      	mov	r3, r0
 80036e2:	e000      	b.n	80036e6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80036e4:	2302      	movs	r3, #2
  }
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
	...

080036f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b0ba      	sub	sp, #232	; 0xe8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003716:	2300      	movs	r3, #0
 8003718:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800371c:	2300      	movs	r3, #0
 800371e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800372e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10f      	bne.n	8003756 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	2b00      	cmp	r3, #0
 8003740:	d009      	beq.n	8003756 <HAL_UART_IRQHandler+0x66>
 8003742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003746:	f003 0320 	and.w	r3, r3, #32
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fdca 	bl	80042e8 <UART_Receive_IT>
      return;
 8003754:	e25b      	b.n	8003c0e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003756:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 80de 	beq.w	800391c <HAL_UART_IRQHandler+0x22c>
 8003760:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b00      	cmp	r3, #0
 800376a:	d106      	bne.n	800377a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800376c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003770:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 80d1 	beq.w	800391c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800377a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00b      	beq.n	800379e <HAL_UART_IRQHandler+0xae>
 8003786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800378a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378e:	2b00      	cmp	r3, #0
 8003790:	d005      	beq.n	800379e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	f043 0201 	orr.w	r2, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800379e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00b      	beq.n	80037c2 <HAL_UART_IRQHandler+0xd2>
 80037aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d005      	beq.n	80037c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	f043 0202 	orr.w	r2, r3, #2
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00b      	beq.n	80037e6 <HAL_UART_IRQHandler+0xf6>
 80037ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d005      	beq.n	80037e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037de:	f043 0204 	orr.w	r2, r3, #4
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d011      	beq.n	8003816 <HAL_UART_IRQHandler+0x126>
 80037f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037f6:	f003 0320 	and.w	r3, r3, #32
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d105      	bne.n	800380a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d005      	beq.n	8003816 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380e:	f043 0208 	orr.w	r2, r3, #8
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 81f2 	beq.w	8003c04 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003824:	f003 0320 	and.w	r3, r3, #32
 8003828:	2b00      	cmp	r3, #0
 800382a:	d008      	beq.n	800383e <HAL_UART_IRQHandler+0x14e>
 800382c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003830:	f003 0320 	and.w	r3, r3, #32
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 fd55 	bl	80042e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003848:	2b00      	cmp	r3, #0
 800384a:	bf14      	ite	ne
 800384c:	2301      	movne	r3, #1
 800384e:	2300      	moveq	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d103      	bne.n	800386a <HAL_UART_IRQHandler+0x17a>
 8003862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003866:	2b00      	cmp	r3, #0
 8003868:	d04f      	beq.n	800390a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fc5f 	bl	800412e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387a:	2b00      	cmp	r3, #0
 800387c:	d041      	beq.n	8003902 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	3314      	adds	r3, #20
 8003884:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003888:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800388c:	e853 3f00 	ldrex	r3, [r3]
 8003890:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003894:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003898:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800389c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3314      	adds	r3, #20
 80038a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80038aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80038ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80038b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80038ba:	e841 2300 	strex	r3, r2, [r1]
 80038be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80038c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1d9      	bne.n	800387e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d013      	beq.n	80038fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d6:	4a7e      	ldr	r2, [pc, #504]	; (8003ad0 <HAL_UART_IRQHandler+0x3e0>)
 80038d8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038de:	4618      	mov	r0, r3
 80038e0:	f7fe fa78 	bl	8001dd4 <HAL_DMA_Abort_IT>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d016      	beq.n	8003918 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038f4:	4610      	mov	r0, r2
 80038f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f8:	e00e      	b.n	8003918 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f99c 	bl	8003c38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003900:	e00a      	b.n	8003918 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f998 	bl	8003c38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003908:	e006      	b.n	8003918 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f994 	bl	8003c38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003916:	e175      	b.n	8003c04 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003918:	bf00      	nop
    return;
 800391a:	e173      	b.n	8003c04 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003920:	2b01      	cmp	r3, #1
 8003922:	f040 814f 	bne.w	8003bc4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 8148 	beq.w	8003bc4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 8141 	beq.w	8003bc4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003942:	2300      	movs	r3, #0
 8003944:	60bb      	str	r3, [r7, #8]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	60bb      	str	r3, [r7, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 80b6 	beq.w	8003ad4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003974:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 8145 	beq.w	8003c08 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003982:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003986:	429a      	cmp	r2, r3
 8003988:	f080 813e 	bcs.w	8003c08 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003992:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	2b20      	cmp	r3, #32
 800399c:	f000 8088 	beq.w	8003ab0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	330c      	adds	r3, #12
 80039a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039ae:	e853 3f00 	ldrex	r3, [r3]
 80039b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80039b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	330c      	adds	r3, #12
 80039c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80039cc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80039d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80039dc:	e841 2300 	strex	r3, r2, [r1]
 80039e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80039e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1d9      	bne.n	80039a0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	3314      	adds	r3, #20
 80039f2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039f6:	e853 3f00 	ldrex	r3, [r3]
 80039fa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80039fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039fe:	f023 0301 	bic.w	r3, r3, #1
 8003a02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	3314      	adds	r3, #20
 8003a0c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a10:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003a14:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a16:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a18:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a1c:	e841 2300 	strex	r3, r2, [r1]
 8003a20:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1e1      	bne.n	80039ec <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	3314      	adds	r3, #20
 8003a2e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a32:	e853 3f00 	ldrex	r3, [r3]
 8003a36:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3314      	adds	r3, #20
 8003a48:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a4c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a4e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a50:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a52:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a54:	e841 2300 	strex	r3, r2, [r1]
 8003a58:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1e3      	bne.n	8003a28 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	330c      	adds	r3, #12
 8003a74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a78:	e853 3f00 	ldrex	r3, [r3]
 8003a7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a80:	f023 0310 	bic.w	r3, r3, #16
 8003a84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	330c      	adds	r3, #12
 8003a8e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003a92:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a94:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a9a:	e841 2300 	strex	r3, r2, [r1]
 8003a9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1e3      	bne.n	8003a6e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fe f956 	bl	8001d5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f8bf 	bl	8003c4a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003acc:	e09c      	b.n	8003c08 <HAL_UART_IRQHandler+0x518>
 8003ace:	bf00      	nop
 8003ad0:	080041f3 	.word	0x080041f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 808e 	beq.w	8003c0c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003af0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 8089 	beq.w	8003c0c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	330c      	adds	r3, #12
 8003b00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b04:	e853 3f00 	ldrex	r3, [r3]
 8003b08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	330c      	adds	r3, #12
 8003b1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003b1e:	647a      	str	r2, [r7, #68]	; 0x44
 8003b20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b26:	e841 2300 	strex	r3, r2, [r1]
 8003b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1e3      	bne.n	8003afa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	3314      	adds	r3, #20
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	e853 3f00 	ldrex	r3, [r3]
 8003b40:	623b      	str	r3, [r7, #32]
   return(result);
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	f023 0301 	bic.w	r3, r3, #1
 8003b48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	3314      	adds	r3, #20
 8003b52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b56:	633a      	str	r2, [r7, #48]	; 0x30
 8003b58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b5e:	e841 2300 	strex	r3, r2, [r1]
 8003b62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1e3      	bne.n	8003b32 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	330c      	adds	r3, #12
 8003b7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	e853 3f00 	ldrex	r3, [r3]
 8003b86:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 0310 	bic.w	r3, r3, #16
 8003b8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	330c      	adds	r3, #12
 8003b98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003b9c:	61fa      	str	r2, [r7, #28]
 8003b9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba0:	69b9      	ldr	r1, [r7, #24]
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	e841 2300 	strex	r3, r2, [r1]
 8003ba8:	617b      	str	r3, [r7, #20]
   return(result);
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1e3      	bne.n	8003b78 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bb6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bba:	4619      	mov	r1, r3
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f844 	bl	8003c4a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bc2:	e023      	b.n	8003c0c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d009      	beq.n	8003be4 <HAL_UART_IRQHandler+0x4f4>
 8003bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 fb1c 	bl	800421a <UART_Transmit_IT>
    return;
 8003be2:	e014      	b.n	8003c0e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00e      	beq.n	8003c0e <HAL_UART_IRQHandler+0x51e>
 8003bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fb5b 	bl	80042b8 <UART_EndTransmit_IT>
    return;
 8003c02:	e004      	b.n	8003c0e <HAL_UART_IRQHandler+0x51e>
    return;
 8003c04:	bf00      	nop
 8003c06:	e002      	b.n	8003c0e <HAL_UART_IRQHandler+0x51e>
      return;
 8003c08:	bf00      	nop
 8003c0a:	e000      	b.n	8003c0e <HAL_UART_IRQHandler+0x51e>
      return;
 8003c0c:	bf00      	nop
  }
}
 8003c0e:	37e8      	adds	r7, #232	; 0xe8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bc80      	pop	{r7}
 8003c24:	4770      	bx	lr

08003c26 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr

08003c38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bc80      	pop	{r7}
 8003c48:	4770      	bx	lr

08003c4a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
 8003c52:	460b      	mov	r3, r1
 8003c54:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr

08003c60 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b09c      	sub	sp, #112	; 0x70
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d172      	bne.n	8003d62 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c7e:	2200      	movs	r2, #0
 8003c80:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	330c      	adds	r3, #12
 8003c88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c8c:	e853 3f00 	ldrex	r3, [r3]
 8003c90:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c98:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	330c      	adds	r3, #12
 8003ca0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ca2:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ca4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ca8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003caa:	e841 2300 	strex	r3, r2, [r1]
 8003cae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1e5      	bne.n	8003c82 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	3314      	adds	r3, #20
 8003cbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc0:	e853 3f00 	ldrex	r3, [r3]
 8003cc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc8:	f023 0301 	bic.w	r3, r3, #1
 8003ccc:	667b      	str	r3, [r7, #100]	; 0x64
 8003cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	3314      	adds	r3, #20
 8003cd4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003cd6:	647a      	str	r2, [r7, #68]	; 0x44
 8003cd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003cdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cde:	e841 2300 	strex	r3, r2, [r1]
 8003ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1e5      	bne.n	8003cb6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3314      	adds	r3, #20
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	e853 3f00 	ldrex	r3, [r3]
 8003cf8:	623b      	str	r3, [r7, #32]
   return(result);
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d00:	663b      	str	r3, [r7, #96]	; 0x60
 8003d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	3314      	adds	r3, #20
 8003d08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d0a:	633a      	str	r2, [r7, #48]	; 0x30
 8003d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d12:	e841 2300 	strex	r3, r2, [r1]
 8003d16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1e5      	bne.n	8003cea <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d20:	2220      	movs	r2, #32
 8003d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d119      	bne.n	8003d62 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	330c      	adds	r3, #12
 8003d34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	e853 3f00 	ldrex	r3, [r3]
 8003d3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f023 0310 	bic.w	r3, r3, #16
 8003d44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	330c      	adds	r3, #12
 8003d4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d4e:	61fa      	str	r2, [r7, #28]
 8003d50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d52:	69b9      	ldr	r1, [r7, #24]
 8003d54:	69fa      	ldr	r2, [r7, #28]
 8003d56:	e841 2300 	strex	r3, r2, [r1]
 8003d5a:	617b      	str	r3, [r7, #20]
   return(result);
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1e5      	bne.n	8003d2e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d64:	2200      	movs	r2, #0
 8003d66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d106      	bne.n	8003d7e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d74:	4619      	mov	r1, r3
 8003d76:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003d78:	f7ff ff67 	bl	8003c4a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d7c:	e002      	b.n	8003d84 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003d7e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003d80:	f7fd fa3e 	bl	8001200 <HAL_UART_RxCpltCallback>
}
 8003d84:	bf00      	nop
 8003d86:	3770      	adds	r7, #112	; 0x70
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d108      	bne.n	8003dba <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003dac:	085b      	lsrs	r3, r3, #1
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	4619      	mov	r1, r3
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f7ff ff49 	bl	8003c4a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003db8:	e002      	b.n	8003dc0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f7ff ff33 	bl	8003c26 <HAL_UART_RxHalfCpltCallback>
}
 8003dc0:	bf00      	nop
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	bf14      	ite	ne
 8003de8:	2301      	movne	r3, #1
 8003dea:	2300      	moveq	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b21      	cmp	r3, #33	; 0x21
 8003dfa:	d108      	bne.n	8003e0e <UART_DMAError+0x46>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d005      	beq.n	8003e0e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2200      	movs	r2, #0
 8003e06:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003e08:	68b8      	ldr	r0, [r7, #8]
 8003e0a:	f000 f969 	bl	80040e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	bf14      	ite	ne
 8003e1c:	2301      	movne	r3, #1
 8003e1e:	2300      	moveq	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b22      	cmp	r3, #34	; 0x22
 8003e2e:	d108      	bne.n	8003e42 <UART_DMAError+0x7a>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d005      	beq.n	8003e42 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003e3c:	68b8      	ldr	r0, [r7, #8]
 8003e3e:	f000 f976 	bl	800412e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e46:	f043 0210 	orr.w	r2, r3, #16
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e4e:	68b8      	ldr	r0, [r7, #8]
 8003e50:	f7ff fef2 	bl	8003c38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e54:	bf00      	nop
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b090      	sub	sp, #64	; 0x40
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	603b      	str	r3, [r7, #0]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e6c:	e050      	b.n	8003f10 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d04c      	beq.n	8003f10 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d007      	beq.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x30>
 8003e7c:	f7fd fd78 	bl	8001970 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d241      	bcs.n	8003f10 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	330c      	adds	r3, #12
 8003e92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e96:	e853 3f00 	ldrex	r3, [r3]
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	330c      	adds	r3, #12
 8003eaa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003eac:	637a      	str	r2, [r7, #52]	; 0x34
 8003eae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003eb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003eb4:	e841 2300 	strex	r3, r2, [r1]
 8003eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1e5      	bne.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	3314      	adds	r3, #20
 8003ec6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	e853 3f00 	ldrex	r3, [r3]
 8003ece:	613b      	str	r3, [r7, #16]
   return(result);
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f023 0301 	bic.w	r3, r3, #1
 8003ed6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	3314      	adds	r3, #20
 8003ede:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ee0:	623a      	str	r2, [r7, #32]
 8003ee2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee4:	69f9      	ldr	r1, [r7, #28]
 8003ee6:	6a3a      	ldr	r2, [r7, #32]
 8003ee8:	e841 2300 	strex	r3, r2, [r1]
 8003eec:	61bb      	str	r3, [r7, #24]
   return(result);
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1e5      	bne.n	8003ec0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e00f      	b.n	8003f30 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	bf0c      	ite	eq
 8003f20:	2301      	moveq	r3, #1
 8003f22:	2300      	movne	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	461a      	mov	r2, r3
 8003f28:	79fb      	ldrb	r3, [r7, #7]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d09f      	beq.n	8003e6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3740      	adds	r7, #64	; 0x40
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	4613      	mov	r3, r2
 8003f44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	88fa      	ldrh	r2, [r7, #6]
 8003f50:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	88fa      	ldrh	r2, [r7, #6]
 8003f56:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2222      	movs	r2, #34	; 0x22
 8003f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d007      	beq.n	8003f7e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68da      	ldr	r2, [r3, #12]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f7c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	695a      	ldr	r2, [r3, #20]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f042 0201 	orr.w	r2, r2, #1
 8003f8c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68da      	ldr	r2, [r3, #12]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 0220 	orr.w	r2, r2, #32
 8003f9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bc80      	pop	{r7}
 8003fa8:	4770      	bx	lr
	...

08003fac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b098      	sub	sp, #96	; 0x60
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	88fa      	ldrh	r2, [r7, #6]
 8003fc4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2222      	movs	r2, #34	; 0x22
 8003fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd8:	4a3e      	ldr	r2, [pc, #248]	; (80040d4 <UART_Start_Receive_DMA+0x128>)
 8003fda:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe0:	4a3d      	ldr	r2, [pc, #244]	; (80040d8 <UART_Start_Receive_DMA+0x12c>)
 8003fe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe8:	4a3c      	ldr	r2, [pc, #240]	; (80040dc <UART_Start_Receive_DMA+0x130>)
 8003fea:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003ff4:	f107 0308 	add.w	r3, r7, #8
 8003ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3304      	adds	r3, #4
 8004004:	4619      	mov	r1, r3
 8004006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	88fb      	ldrh	r3, [r7, #6]
 800400c:	f7fd fe46 	bl	8001c9c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004010:	2300      	movs	r3, #0
 8004012:	613b      	str	r3, [r7, #16]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	613b      	str	r3, [r7, #16]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	613b      	str	r3, [r7, #16]
 8004024:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d019      	beq.n	8004062 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	330c      	adds	r3, #12
 8004034:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004038:	e853 3f00 	ldrex	r3, [r3]
 800403c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800403e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004044:	65bb      	str	r3, [r7, #88]	; 0x58
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	330c      	adds	r3, #12
 800404c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800404e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004050:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004052:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004054:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004056:	e841 2300 	strex	r3, r2, [r1]
 800405a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800405c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1e5      	bne.n	800402e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3314      	adds	r3, #20
 8004068:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406c:	e853 3f00 	ldrex	r3, [r3]
 8004070:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004074:	f043 0301 	orr.w	r3, r3, #1
 8004078:	657b      	str	r3, [r7, #84]	; 0x54
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3314      	adds	r3, #20
 8004080:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004082:	63ba      	str	r2, [r7, #56]	; 0x38
 8004084:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004086:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004088:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800408a:	e841 2300 	strex	r3, r2, [r1]
 800408e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1e5      	bne.n	8004062 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3314      	adds	r3, #20
 800409c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	e853 3f00 	ldrex	r3, [r3]
 80040a4:	617b      	str	r3, [r7, #20]
   return(result);
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040ac:	653b      	str	r3, [r7, #80]	; 0x50
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3314      	adds	r3, #20
 80040b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80040b6:	627a      	str	r2, [r7, #36]	; 0x24
 80040b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	6a39      	ldr	r1, [r7, #32]
 80040bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e5      	bne.n	8004096 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3760      	adds	r7, #96	; 0x60
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	08003c61 	.word	0x08003c61
 80040d8:	08003d8d 	.word	0x08003d8d
 80040dc:	08003dc9 	.word	0x08003dc9

080040e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b089      	sub	sp, #36	; 0x24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	330c      	adds	r3, #12
 80040ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	e853 3f00 	ldrex	r3, [r3]
 80040f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80040fe:	61fb      	str	r3, [r7, #28]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	330c      	adds	r3, #12
 8004106:	69fa      	ldr	r2, [r7, #28]
 8004108:	61ba      	str	r2, [r7, #24]
 800410a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410c:	6979      	ldr	r1, [r7, #20]
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	e841 2300 	strex	r3, r2, [r1]
 8004114:	613b      	str	r3, [r7, #16]
   return(result);
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1e5      	bne.n	80040e8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8004124:	bf00      	nop
 8004126:	3724      	adds	r7, #36	; 0x24
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr

0800412e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800412e:	b480      	push	{r7}
 8004130:	b095      	sub	sp, #84	; 0x54
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	330c      	adds	r3, #12
 800413c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004140:	e853 3f00 	ldrex	r3, [r3]
 8004144:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004148:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800414c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	330c      	adds	r3, #12
 8004154:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004156:	643a      	str	r2, [r7, #64]	; 0x40
 8004158:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800415c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800415e:	e841 2300 	strex	r3, r2, [r1]
 8004162:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1e5      	bne.n	8004136 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	3314      	adds	r3, #20
 8004170:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	e853 3f00 	ldrex	r3, [r3]
 8004178:	61fb      	str	r3, [r7, #28]
   return(result);
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	f023 0301 	bic.w	r3, r3, #1
 8004180:	64bb      	str	r3, [r7, #72]	; 0x48
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3314      	adds	r3, #20
 8004188:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800418a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800418c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004192:	e841 2300 	strex	r3, r2, [r1]
 8004196:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1e5      	bne.n	800416a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d119      	bne.n	80041da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	330c      	adds	r3, #12
 80041ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	e853 3f00 	ldrex	r3, [r3]
 80041b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	f023 0310 	bic.w	r3, r3, #16
 80041bc:	647b      	str	r3, [r7, #68]	; 0x44
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	330c      	adds	r3, #12
 80041c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041c6:	61ba      	str	r2, [r7, #24]
 80041c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ca:	6979      	ldr	r1, [r7, #20]
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	e841 2300 	strex	r3, r2, [r1]
 80041d2:	613b      	str	r3, [r7, #16]
   return(result);
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1e5      	bne.n	80041a6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2220      	movs	r2, #32
 80041de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80041e8:	bf00      	nop
 80041ea:	3754      	adds	r7, #84	; 0x54
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bc80      	pop	{r7}
 80041f0:	4770      	bx	lr

080041f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b084      	sub	sp, #16
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f7ff fd13 	bl	8003c38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004212:	bf00      	nop
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800421a:	b480      	push	{r7}
 800421c:	b085      	sub	sp, #20
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b21      	cmp	r3, #33	; 0x21
 800422c:	d13e      	bne.n	80042ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004236:	d114      	bne.n	8004262 <UART_Transmit_IT+0x48>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d110      	bne.n	8004262 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	461a      	mov	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004254:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	1c9a      	adds	r2, r3, #2
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	621a      	str	r2, [r3, #32]
 8004260:	e008      	b.n	8004274 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	1c59      	adds	r1, r3, #1
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6211      	str	r1, [r2, #32]
 800426c:	781a      	ldrb	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004278:	b29b      	uxth	r3, r3
 800427a:	3b01      	subs	r3, #1
 800427c:	b29b      	uxth	r3, r3
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	4619      	mov	r1, r3
 8004282:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10f      	bne.n	80042a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004296:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042a8:	2300      	movs	r3, #0
 80042aa:	e000      	b.n	80042ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042ac:	2302      	movs	r3, #2
  }
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr

080042b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff fc9b 	bl	8003c14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08c      	sub	sp, #48	; 0x30
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b22      	cmp	r3, #34	; 0x22
 80042fa:	f040 80ae 	bne.w	800445a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004306:	d117      	bne.n	8004338 <UART_Receive_IT+0x50>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d113      	bne.n	8004338 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004310:	2300      	movs	r3, #0
 8004312:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004318:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	b29b      	uxth	r3, r3
 8004322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004326:	b29a      	uxth	r2, r3
 8004328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004330:	1c9a      	adds	r2, r3, #2
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	629a      	str	r2, [r3, #40]	; 0x28
 8004336:	e026      	b.n	8004386 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800433e:	2300      	movs	r3, #0
 8004340:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800434a:	d007      	beq.n	800435c <UART_Receive_IT+0x74>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10a      	bne.n	800436a <UART_Receive_IT+0x82>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d106      	bne.n	800436a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	b2da      	uxtb	r2, r3
 8004364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004366:	701a      	strb	r2, [r3, #0]
 8004368:	e008      	b.n	800437c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004376:	b2da      	uxtb	r2, r3
 8004378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29b      	uxth	r3, r3
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	4619      	mov	r1, r3
 8004394:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004396:	2b00      	cmp	r3, #0
 8004398:	d15d      	bne.n	8004456 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 0220 	bic.w	r2, r2, #32
 80043a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695a      	ldr	r2, [r3, #20]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0201 	bic.w	r2, r2, #1
 80043c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d135      	bne.n	800444c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	330c      	adds	r3, #12
 80043ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	e853 3f00 	ldrex	r3, [r3]
 80043f4:	613b      	str	r3, [r7, #16]
   return(result);
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f023 0310 	bic.w	r3, r3, #16
 80043fc:	627b      	str	r3, [r7, #36]	; 0x24
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	330c      	adds	r3, #12
 8004404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004406:	623a      	str	r2, [r7, #32]
 8004408:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440a:	69f9      	ldr	r1, [r7, #28]
 800440c:	6a3a      	ldr	r2, [r7, #32]
 800440e:	e841 2300 	strex	r3, r2, [r1]
 8004412:	61bb      	str	r3, [r7, #24]
   return(result);
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1e5      	bne.n	80043e6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	2b10      	cmp	r3, #16
 8004426:	d10a      	bne.n	800443e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004428:	2300      	movs	r3, #0
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004442:	4619      	mov	r1, r3
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff fc00 	bl	8003c4a <HAL_UARTEx_RxEventCallback>
 800444a:	e002      	b.n	8004452 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7fc fed7 	bl	8001200 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	e002      	b.n	800445c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	e000      	b.n	800445c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800445a:	2302      	movs	r3, #2
  }
}
 800445c:	4618      	mov	r0, r3
 800445e:	3730      	adds	r7, #48	; 0x30
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	4313      	orrs	r3, r2
 8004492:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800449e:	f023 030c 	bic.w	r3, r3, #12
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6812      	ldr	r2, [r2, #0]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	430b      	orrs	r3, r1
 80044aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699a      	ldr	r2, [r3, #24]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a2c      	ldr	r2, [pc, #176]	; (8004578 <UART_SetConfig+0x114>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d103      	bne.n	80044d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044cc:	f7fe fbc2 	bl	8002c54 <HAL_RCC_GetPCLK2Freq>
 80044d0:	60f8      	str	r0, [r7, #12]
 80044d2:	e002      	b.n	80044da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044d4:	f7fe fbaa 	bl	8002c2c <HAL_RCC_GetPCLK1Freq>
 80044d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	009a      	lsls	r2, r3, #2
 80044e4:	441a      	add	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f0:	4a22      	ldr	r2, [pc, #136]	; (800457c <UART_SetConfig+0x118>)
 80044f2:	fba2 2303 	umull	r2, r3, r2, r3
 80044f6:	095b      	lsrs	r3, r3, #5
 80044f8:	0119      	lsls	r1, r3, #4
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	4613      	mov	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	009a      	lsls	r2, r3, #2
 8004504:	441a      	add	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004510:	4b1a      	ldr	r3, [pc, #104]	; (800457c <UART_SetConfig+0x118>)
 8004512:	fba3 0302 	umull	r0, r3, r3, r2
 8004516:	095b      	lsrs	r3, r3, #5
 8004518:	2064      	movs	r0, #100	; 0x64
 800451a:	fb00 f303 	mul.w	r3, r0, r3
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	3332      	adds	r3, #50	; 0x32
 8004524:	4a15      	ldr	r2, [pc, #84]	; (800457c <UART_SetConfig+0x118>)
 8004526:	fba2 2303 	umull	r2, r3, r2, r3
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004530:	4419      	add	r1, r3
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	009a      	lsls	r2, r3, #2
 800453c:	441a      	add	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	fbb2 f2f3 	udiv	r2, r2, r3
 8004548:	4b0c      	ldr	r3, [pc, #48]	; (800457c <UART_SetConfig+0x118>)
 800454a:	fba3 0302 	umull	r0, r3, r3, r2
 800454e:	095b      	lsrs	r3, r3, #5
 8004550:	2064      	movs	r0, #100	; 0x64
 8004552:	fb00 f303 	mul.w	r3, r0, r3
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	3332      	adds	r3, #50	; 0x32
 800455c:	4a07      	ldr	r2, [pc, #28]	; (800457c <UART_SetConfig+0x118>)
 800455e:	fba2 2303 	umull	r2, r3, r2, r3
 8004562:	095b      	lsrs	r3, r3, #5
 8004564:	f003 020f 	and.w	r2, r3, #15
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	440a      	add	r2, r1
 800456e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004570:	bf00      	nop
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40013800 	.word	0x40013800
 800457c:	51eb851f 	.word	0x51eb851f

08004580 <siprintf>:
 8004580:	b40e      	push	{r1, r2, r3}
 8004582:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004586:	b500      	push	{lr}
 8004588:	b09c      	sub	sp, #112	; 0x70
 800458a:	ab1d      	add	r3, sp, #116	; 0x74
 800458c:	9002      	str	r0, [sp, #8]
 800458e:	9006      	str	r0, [sp, #24]
 8004590:	9107      	str	r1, [sp, #28]
 8004592:	9104      	str	r1, [sp, #16]
 8004594:	4808      	ldr	r0, [pc, #32]	; (80045b8 <siprintf+0x38>)
 8004596:	4909      	ldr	r1, [pc, #36]	; (80045bc <siprintf+0x3c>)
 8004598:	f853 2b04 	ldr.w	r2, [r3], #4
 800459c:	9105      	str	r1, [sp, #20]
 800459e:	6800      	ldr	r0, [r0, #0]
 80045a0:	a902      	add	r1, sp, #8
 80045a2:	9301      	str	r3, [sp, #4]
 80045a4:	f000 f98e 	bl	80048c4 <_svfiprintf_r>
 80045a8:	2200      	movs	r2, #0
 80045aa:	9b02      	ldr	r3, [sp, #8]
 80045ac:	701a      	strb	r2, [r3, #0]
 80045ae:	b01c      	add	sp, #112	; 0x70
 80045b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80045b4:	b003      	add	sp, #12
 80045b6:	4770      	bx	lr
 80045b8:	20000148 	.word	0x20000148
 80045bc:	ffff0208 	.word	0xffff0208

080045c0 <memset>:
 80045c0:	4603      	mov	r3, r0
 80045c2:	4402      	add	r2, r0
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d100      	bne.n	80045ca <memset+0xa>
 80045c8:	4770      	bx	lr
 80045ca:	f803 1b01 	strb.w	r1, [r3], #1
 80045ce:	e7f9      	b.n	80045c4 <memset+0x4>

080045d0 <__errno>:
 80045d0:	4b01      	ldr	r3, [pc, #4]	; (80045d8 <__errno+0x8>)
 80045d2:	6818      	ldr	r0, [r3, #0]
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	20000148 	.word	0x20000148

080045dc <__libc_init_array>:
 80045dc:	b570      	push	{r4, r5, r6, lr}
 80045de:	2600      	movs	r6, #0
 80045e0:	4d0c      	ldr	r5, [pc, #48]	; (8004614 <__libc_init_array+0x38>)
 80045e2:	4c0d      	ldr	r4, [pc, #52]	; (8004618 <__libc_init_array+0x3c>)
 80045e4:	1b64      	subs	r4, r4, r5
 80045e6:	10a4      	asrs	r4, r4, #2
 80045e8:	42a6      	cmp	r6, r4
 80045ea:	d109      	bne.n	8004600 <__libc_init_array+0x24>
 80045ec:	f000 fc7a 	bl	8004ee4 <_init>
 80045f0:	2600      	movs	r6, #0
 80045f2:	4d0a      	ldr	r5, [pc, #40]	; (800461c <__libc_init_array+0x40>)
 80045f4:	4c0a      	ldr	r4, [pc, #40]	; (8004620 <__libc_init_array+0x44>)
 80045f6:	1b64      	subs	r4, r4, r5
 80045f8:	10a4      	asrs	r4, r4, #2
 80045fa:	42a6      	cmp	r6, r4
 80045fc:	d105      	bne.n	800460a <__libc_init_array+0x2e>
 80045fe:	bd70      	pop	{r4, r5, r6, pc}
 8004600:	f855 3b04 	ldr.w	r3, [r5], #4
 8004604:	4798      	blx	r3
 8004606:	3601      	adds	r6, #1
 8004608:	e7ee      	b.n	80045e8 <__libc_init_array+0xc>
 800460a:	f855 3b04 	ldr.w	r3, [r5], #4
 800460e:	4798      	blx	r3
 8004610:	3601      	adds	r6, #1
 8004612:	e7f2      	b.n	80045fa <__libc_init_array+0x1e>
 8004614:	08004fa8 	.word	0x08004fa8
 8004618:	08004fa8 	.word	0x08004fa8
 800461c:	08004fa8 	.word	0x08004fa8
 8004620:	08004fac 	.word	0x08004fac

08004624 <__retarget_lock_acquire_recursive>:
 8004624:	4770      	bx	lr

08004626 <__retarget_lock_release_recursive>:
 8004626:	4770      	bx	lr

08004628 <_free_r>:
 8004628:	b538      	push	{r3, r4, r5, lr}
 800462a:	4605      	mov	r5, r0
 800462c:	2900      	cmp	r1, #0
 800462e:	d040      	beq.n	80046b2 <_free_r+0x8a>
 8004630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004634:	1f0c      	subs	r4, r1, #4
 8004636:	2b00      	cmp	r3, #0
 8004638:	bfb8      	it	lt
 800463a:	18e4      	addlt	r4, r4, r3
 800463c:	f000 f8dc 	bl	80047f8 <__malloc_lock>
 8004640:	4a1c      	ldr	r2, [pc, #112]	; (80046b4 <_free_r+0x8c>)
 8004642:	6813      	ldr	r3, [r2, #0]
 8004644:	b933      	cbnz	r3, 8004654 <_free_r+0x2c>
 8004646:	6063      	str	r3, [r4, #4]
 8004648:	6014      	str	r4, [r2, #0]
 800464a:	4628      	mov	r0, r5
 800464c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004650:	f000 b8d8 	b.w	8004804 <__malloc_unlock>
 8004654:	42a3      	cmp	r3, r4
 8004656:	d908      	bls.n	800466a <_free_r+0x42>
 8004658:	6820      	ldr	r0, [r4, #0]
 800465a:	1821      	adds	r1, r4, r0
 800465c:	428b      	cmp	r3, r1
 800465e:	bf01      	itttt	eq
 8004660:	6819      	ldreq	r1, [r3, #0]
 8004662:	685b      	ldreq	r3, [r3, #4]
 8004664:	1809      	addeq	r1, r1, r0
 8004666:	6021      	streq	r1, [r4, #0]
 8004668:	e7ed      	b.n	8004646 <_free_r+0x1e>
 800466a:	461a      	mov	r2, r3
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	b10b      	cbz	r3, 8004674 <_free_r+0x4c>
 8004670:	42a3      	cmp	r3, r4
 8004672:	d9fa      	bls.n	800466a <_free_r+0x42>
 8004674:	6811      	ldr	r1, [r2, #0]
 8004676:	1850      	adds	r0, r2, r1
 8004678:	42a0      	cmp	r0, r4
 800467a:	d10b      	bne.n	8004694 <_free_r+0x6c>
 800467c:	6820      	ldr	r0, [r4, #0]
 800467e:	4401      	add	r1, r0
 8004680:	1850      	adds	r0, r2, r1
 8004682:	4283      	cmp	r3, r0
 8004684:	6011      	str	r1, [r2, #0]
 8004686:	d1e0      	bne.n	800464a <_free_r+0x22>
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	4408      	add	r0, r1
 800468e:	6010      	str	r0, [r2, #0]
 8004690:	6053      	str	r3, [r2, #4]
 8004692:	e7da      	b.n	800464a <_free_r+0x22>
 8004694:	d902      	bls.n	800469c <_free_r+0x74>
 8004696:	230c      	movs	r3, #12
 8004698:	602b      	str	r3, [r5, #0]
 800469a:	e7d6      	b.n	800464a <_free_r+0x22>
 800469c:	6820      	ldr	r0, [r4, #0]
 800469e:	1821      	adds	r1, r4, r0
 80046a0:	428b      	cmp	r3, r1
 80046a2:	bf01      	itttt	eq
 80046a4:	6819      	ldreq	r1, [r3, #0]
 80046a6:	685b      	ldreq	r3, [r3, #4]
 80046a8:	1809      	addeq	r1, r1, r0
 80046aa:	6021      	streq	r1, [r4, #0]
 80046ac:	6063      	str	r3, [r4, #4]
 80046ae:	6054      	str	r4, [r2, #4]
 80046b0:	e7cb      	b.n	800464a <_free_r+0x22>
 80046b2:	bd38      	pop	{r3, r4, r5, pc}
 80046b4:	20000720 	.word	0x20000720

080046b8 <sbrk_aligned>:
 80046b8:	b570      	push	{r4, r5, r6, lr}
 80046ba:	4e0e      	ldr	r6, [pc, #56]	; (80046f4 <sbrk_aligned+0x3c>)
 80046bc:	460c      	mov	r4, r1
 80046be:	6831      	ldr	r1, [r6, #0]
 80046c0:	4605      	mov	r5, r0
 80046c2:	b911      	cbnz	r1, 80046ca <sbrk_aligned+0x12>
 80046c4:	f000 fbaa 	bl	8004e1c <_sbrk_r>
 80046c8:	6030      	str	r0, [r6, #0]
 80046ca:	4621      	mov	r1, r4
 80046cc:	4628      	mov	r0, r5
 80046ce:	f000 fba5 	bl	8004e1c <_sbrk_r>
 80046d2:	1c43      	adds	r3, r0, #1
 80046d4:	d00a      	beq.n	80046ec <sbrk_aligned+0x34>
 80046d6:	1cc4      	adds	r4, r0, #3
 80046d8:	f024 0403 	bic.w	r4, r4, #3
 80046dc:	42a0      	cmp	r0, r4
 80046de:	d007      	beq.n	80046f0 <sbrk_aligned+0x38>
 80046e0:	1a21      	subs	r1, r4, r0
 80046e2:	4628      	mov	r0, r5
 80046e4:	f000 fb9a 	bl	8004e1c <_sbrk_r>
 80046e8:	3001      	adds	r0, #1
 80046ea:	d101      	bne.n	80046f0 <sbrk_aligned+0x38>
 80046ec:	f04f 34ff 	mov.w	r4, #4294967295
 80046f0:	4620      	mov	r0, r4
 80046f2:	bd70      	pop	{r4, r5, r6, pc}
 80046f4:	20000724 	.word	0x20000724

080046f8 <_malloc_r>:
 80046f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046fc:	1ccd      	adds	r5, r1, #3
 80046fe:	f025 0503 	bic.w	r5, r5, #3
 8004702:	3508      	adds	r5, #8
 8004704:	2d0c      	cmp	r5, #12
 8004706:	bf38      	it	cc
 8004708:	250c      	movcc	r5, #12
 800470a:	2d00      	cmp	r5, #0
 800470c:	4607      	mov	r7, r0
 800470e:	db01      	blt.n	8004714 <_malloc_r+0x1c>
 8004710:	42a9      	cmp	r1, r5
 8004712:	d905      	bls.n	8004720 <_malloc_r+0x28>
 8004714:	230c      	movs	r3, #12
 8004716:	2600      	movs	r6, #0
 8004718:	603b      	str	r3, [r7, #0]
 800471a:	4630      	mov	r0, r6
 800471c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004720:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80047f4 <_malloc_r+0xfc>
 8004724:	f000 f868 	bl	80047f8 <__malloc_lock>
 8004728:	f8d8 3000 	ldr.w	r3, [r8]
 800472c:	461c      	mov	r4, r3
 800472e:	bb5c      	cbnz	r4, 8004788 <_malloc_r+0x90>
 8004730:	4629      	mov	r1, r5
 8004732:	4638      	mov	r0, r7
 8004734:	f7ff ffc0 	bl	80046b8 <sbrk_aligned>
 8004738:	1c43      	adds	r3, r0, #1
 800473a:	4604      	mov	r4, r0
 800473c:	d155      	bne.n	80047ea <_malloc_r+0xf2>
 800473e:	f8d8 4000 	ldr.w	r4, [r8]
 8004742:	4626      	mov	r6, r4
 8004744:	2e00      	cmp	r6, #0
 8004746:	d145      	bne.n	80047d4 <_malloc_r+0xdc>
 8004748:	2c00      	cmp	r4, #0
 800474a:	d048      	beq.n	80047de <_malloc_r+0xe6>
 800474c:	6823      	ldr	r3, [r4, #0]
 800474e:	4631      	mov	r1, r6
 8004750:	4638      	mov	r0, r7
 8004752:	eb04 0903 	add.w	r9, r4, r3
 8004756:	f000 fb61 	bl	8004e1c <_sbrk_r>
 800475a:	4581      	cmp	r9, r0
 800475c:	d13f      	bne.n	80047de <_malloc_r+0xe6>
 800475e:	6821      	ldr	r1, [r4, #0]
 8004760:	4638      	mov	r0, r7
 8004762:	1a6d      	subs	r5, r5, r1
 8004764:	4629      	mov	r1, r5
 8004766:	f7ff ffa7 	bl	80046b8 <sbrk_aligned>
 800476a:	3001      	adds	r0, #1
 800476c:	d037      	beq.n	80047de <_malloc_r+0xe6>
 800476e:	6823      	ldr	r3, [r4, #0]
 8004770:	442b      	add	r3, r5
 8004772:	6023      	str	r3, [r4, #0]
 8004774:	f8d8 3000 	ldr.w	r3, [r8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d038      	beq.n	80047ee <_malloc_r+0xf6>
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	42a2      	cmp	r2, r4
 8004780:	d12b      	bne.n	80047da <_malloc_r+0xe2>
 8004782:	2200      	movs	r2, #0
 8004784:	605a      	str	r2, [r3, #4]
 8004786:	e00f      	b.n	80047a8 <_malloc_r+0xb0>
 8004788:	6822      	ldr	r2, [r4, #0]
 800478a:	1b52      	subs	r2, r2, r5
 800478c:	d41f      	bmi.n	80047ce <_malloc_r+0xd6>
 800478e:	2a0b      	cmp	r2, #11
 8004790:	d917      	bls.n	80047c2 <_malloc_r+0xca>
 8004792:	1961      	adds	r1, r4, r5
 8004794:	42a3      	cmp	r3, r4
 8004796:	6025      	str	r5, [r4, #0]
 8004798:	bf18      	it	ne
 800479a:	6059      	strne	r1, [r3, #4]
 800479c:	6863      	ldr	r3, [r4, #4]
 800479e:	bf08      	it	eq
 80047a0:	f8c8 1000 	streq.w	r1, [r8]
 80047a4:	5162      	str	r2, [r4, r5]
 80047a6:	604b      	str	r3, [r1, #4]
 80047a8:	4638      	mov	r0, r7
 80047aa:	f104 060b 	add.w	r6, r4, #11
 80047ae:	f000 f829 	bl	8004804 <__malloc_unlock>
 80047b2:	f026 0607 	bic.w	r6, r6, #7
 80047b6:	1d23      	adds	r3, r4, #4
 80047b8:	1af2      	subs	r2, r6, r3
 80047ba:	d0ae      	beq.n	800471a <_malloc_r+0x22>
 80047bc:	1b9b      	subs	r3, r3, r6
 80047be:	50a3      	str	r3, [r4, r2]
 80047c0:	e7ab      	b.n	800471a <_malloc_r+0x22>
 80047c2:	42a3      	cmp	r3, r4
 80047c4:	6862      	ldr	r2, [r4, #4]
 80047c6:	d1dd      	bne.n	8004784 <_malloc_r+0x8c>
 80047c8:	f8c8 2000 	str.w	r2, [r8]
 80047cc:	e7ec      	b.n	80047a8 <_malloc_r+0xb0>
 80047ce:	4623      	mov	r3, r4
 80047d0:	6864      	ldr	r4, [r4, #4]
 80047d2:	e7ac      	b.n	800472e <_malloc_r+0x36>
 80047d4:	4634      	mov	r4, r6
 80047d6:	6876      	ldr	r6, [r6, #4]
 80047d8:	e7b4      	b.n	8004744 <_malloc_r+0x4c>
 80047da:	4613      	mov	r3, r2
 80047dc:	e7cc      	b.n	8004778 <_malloc_r+0x80>
 80047de:	230c      	movs	r3, #12
 80047e0:	4638      	mov	r0, r7
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	f000 f80e 	bl	8004804 <__malloc_unlock>
 80047e8:	e797      	b.n	800471a <_malloc_r+0x22>
 80047ea:	6025      	str	r5, [r4, #0]
 80047ec:	e7dc      	b.n	80047a8 <_malloc_r+0xb0>
 80047ee:	605b      	str	r3, [r3, #4]
 80047f0:	deff      	udf	#255	; 0xff
 80047f2:	bf00      	nop
 80047f4:	20000720 	.word	0x20000720

080047f8 <__malloc_lock>:
 80047f8:	4801      	ldr	r0, [pc, #4]	; (8004800 <__malloc_lock+0x8>)
 80047fa:	f7ff bf13 	b.w	8004624 <__retarget_lock_acquire_recursive>
 80047fe:	bf00      	nop
 8004800:	2000071c 	.word	0x2000071c

08004804 <__malloc_unlock>:
 8004804:	4801      	ldr	r0, [pc, #4]	; (800480c <__malloc_unlock+0x8>)
 8004806:	f7ff bf0e 	b.w	8004626 <__retarget_lock_release_recursive>
 800480a:	bf00      	nop
 800480c:	2000071c 	.word	0x2000071c

08004810 <__ssputs_r>:
 8004810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004814:	461f      	mov	r7, r3
 8004816:	688e      	ldr	r6, [r1, #8]
 8004818:	4682      	mov	sl, r0
 800481a:	42be      	cmp	r6, r7
 800481c:	460c      	mov	r4, r1
 800481e:	4690      	mov	r8, r2
 8004820:	680b      	ldr	r3, [r1, #0]
 8004822:	d82c      	bhi.n	800487e <__ssputs_r+0x6e>
 8004824:	898a      	ldrh	r2, [r1, #12]
 8004826:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800482a:	d026      	beq.n	800487a <__ssputs_r+0x6a>
 800482c:	6965      	ldr	r5, [r4, #20]
 800482e:	6909      	ldr	r1, [r1, #16]
 8004830:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004834:	eba3 0901 	sub.w	r9, r3, r1
 8004838:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800483c:	1c7b      	adds	r3, r7, #1
 800483e:	444b      	add	r3, r9
 8004840:	106d      	asrs	r5, r5, #1
 8004842:	429d      	cmp	r5, r3
 8004844:	bf38      	it	cc
 8004846:	461d      	movcc	r5, r3
 8004848:	0553      	lsls	r3, r2, #21
 800484a:	d527      	bpl.n	800489c <__ssputs_r+0x8c>
 800484c:	4629      	mov	r1, r5
 800484e:	f7ff ff53 	bl	80046f8 <_malloc_r>
 8004852:	4606      	mov	r6, r0
 8004854:	b360      	cbz	r0, 80048b0 <__ssputs_r+0xa0>
 8004856:	464a      	mov	r2, r9
 8004858:	6921      	ldr	r1, [r4, #16]
 800485a:	f000 fafd 	bl	8004e58 <memcpy>
 800485e:	89a3      	ldrh	r3, [r4, #12]
 8004860:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004868:	81a3      	strh	r3, [r4, #12]
 800486a:	6126      	str	r6, [r4, #16]
 800486c:	444e      	add	r6, r9
 800486e:	6026      	str	r6, [r4, #0]
 8004870:	463e      	mov	r6, r7
 8004872:	6165      	str	r5, [r4, #20]
 8004874:	eba5 0509 	sub.w	r5, r5, r9
 8004878:	60a5      	str	r5, [r4, #8]
 800487a:	42be      	cmp	r6, r7
 800487c:	d900      	bls.n	8004880 <__ssputs_r+0x70>
 800487e:	463e      	mov	r6, r7
 8004880:	4632      	mov	r2, r6
 8004882:	4641      	mov	r1, r8
 8004884:	6820      	ldr	r0, [r4, #0]
 8004886:	f000 faaf 	bl	8004de8 <memmove>
 800488a:	2000      	movs	r0, #0
 800488c:	68a3      	ldr	r3, [r4, #8]
 800488e:	1b9b      	subs	r3, r3, r6
 8004890:	60a3      	str	r3, [r4, #8]
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	4433      	add	r3, r6
 8004896:	6023      	str	r3, [r4, #0]
 8004898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800489c:	462a      	mov	r2, r5
 800489e:	f000 fae9 	bl	8004e74 <_realloc_r>
 80048a2:	4606      	mov	r6, r0
 80048a4:	2800      	cmp	r0, #0
 80048a6:	d1e0      	bne.n	800486a <__ssputs_r+0x5a>
 80048a8:	4650      	mov	r0, sl
 80048aa:	6921      	ldr	r1, [r4, #16]
 80048ac:	f7ff febc 	bl	8004628 <_free_r>
 80048b0:	230c      	movs	r3, #12
 80048b2:	f8ca 3000 	str.w	r3, [sl]
 80048b6:	89a3      	ldrh	r3, [r4, #12]
 80048b8:	f04f 30ff 	mov.w	r0, #4294967295
 80048bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048c0:	81a3      	strh	r3, [r4, #12]
 80048c2:	e7e9      	b.n	8004898 <__ssputs_r+0x88>

080048c4 <_svfiprintf_r>:
 80048c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048c8:	4698      	mov	r8, r3
 80048ca:	898b      	ldrh	r3, [r1, #12]
 80048cc:	4607      	mov	r7, r0
 80048ce:	061b      	lsls	r3, r3, #24
 80048d0:	460d      	mov	r5, r1
 80048d2:	4614      	mov	r4, r2
 80048d4:	b09d      	sub	sp, #116	; 0x74
 80048d6:	d50e      	bpl.n	80048f6 <_svfiprintf_r+0x32>
 80048d8:	690b      	ldr	r3, [r1, #16]
 80048da:	b963      	cbnz	r3, 80048f6 <_svfiprintf_r+0x32>
 80048dc:	2140      	movs	r1, #64	; 0x40
 80048de:	f7ff ff0b 	bl	80046f8 <_malloc_r>
 80048e2:	6028      	str	r0, [r5, #0]
 80048e4:	6128      	str	r0, [r5, #16]
 80048e6:	b920      	cbnz	r0, 80048f2 <_svfiprintf_r+0x2e>
 80048e8:	230c      	movs	r3, #12
 80048ea:	603b      	str	r3, [r7, #0]
 80048ec:	f04f 30ff 	mov.w	r0, #4294967295
 80048f0:	e0d0      	b.n	8004a94 <_svfiprintf_r+0x1d0>
 80048f2:	2340      	movs	r3, #64	; 0x40
 80048f4:	616b      	str	r3, [r5, #20]
 80048f6:	2300      	movs	r3, #0
 80048f8:	9309      	str	r3, [sp, #36]	; 0x24
 80048fa:	2320      	movs	r3, #32
 80048fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004900:	2330      	movs	r3, #48	; 0x30
 8004902:	f04f 0901 	mov.w	r9, #1
 8004906:	f8cd 800c 	str.w	r8, [sp, #12]
 800490a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004aac <_svfiprintf_r+0x1e8>
 800490e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004912:	4623      	mov	r3, r4
 8004914:	469a      	mov	sl, r3
 8004916:	f813 2b01 	ldrb.w	r2, [r3], #1
 800491a:	b10a      	cbz	r2, 8004920 <_svfiprintf_r+0x5c>
 800491c:	2a25      	cmp	r2, #37	; 0x25
 800491e:	d1f9      	bne.n	8004914 <_svfiprintf_r+0x50>
 8004920:	ebba 0b04 	subs.w	fp, sl, r4
 8004924:	d00b      	beq.n	800493e <_svfiprintf_r+0x7a>
 8004926:	465b      	mov	r3, fp
 8004928:	4622      	mov	r2, r4
 800492a:	4629      	mov	r1, r5
 800492c:	4638      	mov	r0, r7
 800492e:	f7ff ff6f 	bl	8004810 <__ssputs_r>
 8004932:	3001      	adds	r0, #1
 8004934:	f000 80a9 	beq.w	8004a8a <_svfiprintf_r+0x1c6>
 8004938:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800493a:	445a      	add	r2, fp
 800493c:	9209      	str	r2, [sp, #36]	; 0x24
 800493e:	f89a 3000 	ldrb.w	r3, [sl]
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 80a1 	beq.w	8004a8a <_svfiprintf_r+0x1c6>
 8004948:	2300      	movs	r3, #0
 800494a:	f04f 32ff 	mov.w	r2, #4294967295
 800494e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004952:	f10a 0a01 	add.w	sl, sl, #1
 8004956:	9304      	str	r3, [sp, #16]
 8004958:	9307      	str	r3, [sp, #28]
 800495a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800495e:	931a      	str	r3, [sp, #104]	; 0x68
 8004960:	4654      	mov	r4, sl
 8004962:	2205      	movs	r2, #5
 8004964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004968:	4850      	ldr	r0, [pc, #320]	; (8004aac <_svfiprintf_r+0x1e8>)
 800496a:	f000 fa67 	bl	8004e3c <memchr>
 800496e:	9a04      	ldr	r2, [sp, #16]
 8004970:	b9d8      	cbnz	r0, 80049aa <_svfiprintf_r+0xe6>
 8004972:	06d0      	lsls	r0, r2, #27
 8004974:	bf44      	itt	mi
 8004976:	2320      	movmi	r3, #32
 8004978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800497c:	0711      	lsls	r1, r2, #28
 800497e:	bf44      	itt	mi
 8004980:	232b      	movmi	r3, #43	; 0x2b
 8004982:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004986:	f89a 3000 	ldrb.w	r3, [sl]
 800498a:	2b2a      	cmp	r3, #42	; 0x2a
 800498c:	d015      	beq.n	80049ba <_svfiprintf_r+0xf6>
 800498e:	4654      	mov	r4, sl
 8004990:	2000      	movs	r0, #0
 8004992:	f04f 0c0a 	mov.w	ip, #10
 8004996:	9a07      	ldr	r2, [sp, #28]
 8004998:	4621      	mov	r1, r4
 800499a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800499e:	3b30      	subs	r3, #48	; 0x30
 80049a0:	2b09      	cmp	r3, #9
 80049a2:	d94d      	bls.n	8004a40 <_svfiprintf_r+0x17c>
 80049a4:	b1b0      	cbz	r0, 80049d4 <_svfiprintf_r+0x110>
 80049a6:	9207      	str	r2, [sp, #28]
 80049a8:	e014      	b.n	80049d4 <_svfiprintf_r+0x110>
 80049aa:	eba0 0308 	sub.w	r3, r0, r8
 80049ae:	fa09 f303 	lsl.w	r3, r9, r3
 80049b2:	4313      	orrs	r3, r2
 80049b4:	46a2      	mov	sl, r4
 80049b6:	9304      	str	r3, [sp, #16]
 80049b8:	e7d2      	b.n	8004960 <_svfiprintf_r+0x9c>
 80049ba:	9b03      	ldr	r3, [sp, #12]
 80049bc:	1d19      	adds	r1, r3, #4
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	9103      	str	r1, [sp, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	bfbb      	ittet	lt
 80049c6:	425b      	neglt	r3, r3
 80049c8:	f042 0202 	orrlt.w	r2, r2, #2
 80049cc:	9307      	strge	r3, [sp, #28]
 80049ce:	9307      	strlt	r3, [sp, #28]
 80049d0:	bfb8      	it	lt
 80049d2:	9204      	strlt	r2, [sp, #16]
 80049d4:	7823      	ldrb	r3, [r4, #0]
 80049d6:	2b2e      	cmp	r3, #46	; 0x2e
 80049d8:	d10c      	bne.n	80049f4 <_svfiprintf_r+0x130>
 80049da:	7863      	ldrb	r3, [r4, #1]
 80049dc:	2b2a      	cmp	r3, #42	; 0x2a
 80049de:	d134      	bne.n	8004a4a <_svfiprintf_r+0x186>
 80049e0:	9b03      	ldr	r3, [sp, #12]
 80049e2:	3402      	adds	r4, #2
 80049e4:	1d1a      	adds	r2, r3, #4
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	9203      	str	r2, [sp, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	bfb8      	it	lt
 80049ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80049f2:	9305      	str	r3, [sp, #20]
 80049f4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004ab0 <_svfiprintf_r+0x1ec>
 80049f8:	2203      	movs	r2, #3
 80049fa:	4650      	mov	r0, sl
 80049fc:	7821      	ldrb	r1, [r4, #0]
 80049fe:	f000 fa1d 	bl	8004e3c <memchr>
 8004a02:	b138      	cbz	r0, 8004a14 <_svfiprintf_r+0x150>
 8004a04:	2240      	movs	r2, #64	; 0x40
 8004a06:	9b04      	ldr	r3, [sp, #16]
 8004a08:	eba0 000a 	sub.w	r0, r0, sl
 8004a0c:	4082      	lsls	r2, r0
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	3401      	adds	r4, #1
 8004a12:	9304      	str	r3, [sp, #16]
 8004a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a18:	2206      	movs	r2, #6
 8004a1a:	4826      	ldr	r0, [pc, #152]	; (8004ab4 <_svfiprintf_r+0x1f0>)
 8004a1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a20:	f000 fa0c 	bl	8004e3c <memchr>
 8004a24:	2800      	cmp	r0, #0
 8004a26:	d038      	beq.n	8004a9a <_svfiprintf_r+0x1d6>
 8004a28:	4b23      	ldr	r3, [pc, #140]	; (8004ab8 <_svfiprintf_r+0x1f4>)
 8004a2a:	bb1b      	cbnz	r3, 8004a74 <_svfiprintf_r+0x1b0>
 8004a2c:	9b03      	ldr	r3, [sp, #12]
 8004a2e:	3307      	adds	r3, #7
 8004a30:	f023 0307 	bic.w	r3, r3, #7
 8004a34:	3308      	adds	r3, #8
 8004a36:	9303      	str	r3, [sp, #12]
 8004a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a3a:	4433      	add	r3, r6
 8004a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a3e:	e768      	b.n	8004912 <_svfiprintf_r+0x4e>
 8004a40:	460c      	mov	r4, r1
 8004a42:	2001      	movs	r0, #1
 8004a44:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a48:	e7a6      	b.n	8004998 <_svfiprintf_r+0xd4>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f04f 0c0a 	mov.w	ip, #10
 8004a50:	4619      	mov	r1, r3
 8004a52:	3401      	adds	r4, #1
 8004a54:	9305      	str	r3, [sp, #20]
 8004a56:	4620      	mov	r0, r4
 8004a58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a5c:	3a30      	subs	r2, #48	; 0x30
 8004a5e:	2a09      	cmp	r2, #9
 8004a60:	d903      	bls.n	8004a6a <_svfiprintf_r+0x1a6>
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0c6      	beq.n	80049f4 <_svfiprintf_r+0x130>
 8004a66:	9105      	str	r1, [sp, #20]
 8004a68:	e7c4      	b.n	80049f4 <_svfiprintf_r+0x130>
 8004a6a:	4604      	mov	r4, r0
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a72:	e7f0      	b.n	8004a56 <_svfiprintf_r+0x192>
 8004a74:	ab03      	add	r3, sp, #12
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	462a      	mov	r2, r5
 8004a7a:	4638      	mov	r0, r7
 8004a7c:	4b0f      	ldr	r3, [pc, #60]	; (8004abc <_svfiprintf_r+0x1f8>)
 8004a7e:	a904      	add	r1, sp, #16
 8004a80:	f3af 8000 	nop.w
 8004a84:	1c42      	adds	r2, r0, #1
 8004a86:	4606      	mov	r6, r0
 8004a88:	d1d6      	bne.n	8004a38 <_svfiprintf_r+0x174>
 8004a8a:	89ab      	ldrh	r3, [r5, #12]
 8004a8c:	065b      	lsls	r3, r3, #25
 8004a8e:	f53f af2d 	bmi.w	80048ec <_svfiprintf_r+0x28>
 8004a92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a94:	b01d      	add	sp, #116	; 0x74
 8004a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a9a:	ab03      	add	r3, sp, #12
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	462a      	mov	r2, r5
 8004aa0:	4638      	mov	r0, r7
 8004aa2:	4b06      	ldr	r3, [pc, #24]	; (8004abc <_svfiprintf_r+0x1f8>)
 8004aa4:	a904      	add	r1, sp, #16
 8004aa6:	f000 f87d 	bl	8004ba4 <_printf_i>
 8004aaa:	e7eb      	b.n	8004a84 <_svfiprintf_r+0x1c0>
 8004aac:	08004f72 	.word	0x08004f72
 8004ab0:	08004f78 	.word	0x08004f78
 8004ab4:	08004f7c 	.word	0x08004f7c
 8004ab8:	00000000 	.word	0x00000000
 8004abc:	08004811 	.word	0x08004811

08004ac0 <_printf_common>:
 8004ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac4:	4616      	mov	r6, r2
 8004ac6:	4699      	mov	r9, r3
 8004ac8:	688a      	ldr	r2, [r1, #8]
 8004aca:	690b      	ldr	r3, [r1, #16]
 8004acc:	4607      	mov	r7, r0
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	bfb8      	it	lt
 8004ad2:	4613      	movlt	r3, r2
 8004ad4:	6033      	str	r3, [r6, #0]
 8004ad6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ada:	460c      	mov	r4, r1
 8004adc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ae0:	b10a      	cbz	r2, 8004ae6 <_printf_common+0x26>
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	6033      	str	r3, [r6, #0]
 8004ae6:	6823      	ldr	r3, [r4, #0]
 8004ae8:	0699      	lsls	r1, r3, #26
 8004aea:	bf42      	ittt	mi
 8004aec:	6833      	ldrmi	r3, [r6, #0]
 8004aee:	3302      	addmi	r3, #2
 8004af0:	6033      	strmi	r3, [r6, #0]
 8004af2:	6825      	ldr	r5, [r4, #0]
 8004af4:	f015 0506 	ands.w	r5, r5, #6
 8004af8:	d106      	bne.n	8004b08 <_printf_common+0x48>
 8004afa:	f104 0a19 	add.w	sl, r4, #25
 8004afe:	68e3      	ldr	r3, [r4, #12]
 8004b00:	6832      	ldr	r2, [r6, #0]
 8004b02:	1a9b      	subs	r3, r3, r2
 8004b04:	42ab      	cmp	r3, r5
 8004b06:	dc2b      	bgt.n	8004b60 <_printf_common+0xa0>
 8004b08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b0c:	1e13      	subs	r3, r2, #0
 8004b0e:	6822      	ldr	r2, [r4, #0]
 8004b10:	bf18      	it	ne
 8004b12:	2301      	movne	r3, #1
 8004b14:	0692      	lsls	r2, r2, #26
 8004b16:	d430      	bmi.n	8004b7a <_printf_common+0xba>
 8004b18:	4649      	mov	r1, r9
 8004b1a:	4638      	mov	r0, r7
 8004b1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b20:	47c0      	blx	r8
 8004b22:	3001      	adds	r0, #1
 8004b24:	d023      	beq.n	8004b6e <_printf_common+0xae>
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	6922      	ldr	r2, [r4, #16]
 8004b2a:	f003 0306 	and.w	r3, r3, #6
 8004b2e:	2b04      	cmp	r3, #4
 8004b30:	bf14      	ite	ne
 8004b32:	2500      	movne	r5, #0
 8004b34:	6833      	ldreq	r3, [r6, #0]
 8004b36:	f04f 0600 	mov.w	r6, #0
 8004b3a:	bf08      	it	eq
 8004b3c:	68e5      	ldreq	r5, [r4, #12]
 8004b3e:	f104 041a 	add.w	r4, r4, #26
 8004b42:	bf08      	it	eq
 8004b44:	1aed      	subeq	r5, r5, r3
 8004b46:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004b4a:	bf08      	it	eq
 8004b4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b50:	4293      	cmp	r3, r2
 8004b52:	bfc4      	itt	gt
 8004b54:	1a9b      	subgt	r3, r3, r2
 8004b56:	18ed      	addgt	r5, r5, r3
 8004b58:	42b5      	cmp	r5, r6
 8004b5a:	d11a      	bne.n	8004b92 <_printf_common+0xd2>
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	e008      	b.n	8004b72 <_printf_common+0xb2>
 8004b60:	2301      	movs	r3, #1
 8004b62:	4652      	mov	r2, sl
 8004b64:	4649      	mov	r1, r9
 8004b66:	4638      	mov	r0, r7
 8004b68:	47c0      	blx	r8
 8004b6a:	3001      	adds	r0, #1
 8004b6c:	d103      	bne.n	8004b76 <_printf_common+0xb6>
 8004b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b76:	3501      	adds	r5, #1
 8004b78:	e7c1      	b.n	8004afe <_printf_common+0x3e>
 8004b7a:	2030      	movs	r0, #48	; 0x30
 8004b7c:	18e1      	adds	r1, r4, r3
 8004b7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b82:	1c5a      	adds	r2, r3, #1
 8004b84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b88:	4422      	add	r2, r4
 8004b8a:	3302      	adds	r3, #2
 8004b8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b90:	e7c2      	b.n	8004b18 <_printf_common+0x58>
 8004b92:	2301      	movs	r3, #1
 8004b94:	4622      	mov	r2, r4
 8004b96:	4649      	mov	r1, r9
 8004b98:	4638      	mov	r0, r7
 8004b9a:	47c0      	blx	r8
 8004b9c:	3001      	adds	r0, #1
 8004b9e:	d0e6      	beq.n	8004b6e <_printf_common+0xae>
 8004ba0:	3601      	adds	r6, #1
 8004ba2:	e7d9      	b.n	8004b58 <_printf_common+0x98>

08004ba4 <_printf_i>:
 8004ba4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba8:	7e0f      	ldrb	r7, [r1, #24]
 8004baa:	4691      	mov	r9, r2
 8004bac:	2f78      	cmp	r7, #120	; 0x78
 8004bae:	4680      	mov	r8, r0
 8004bb0:	460c      	mov	r4, r1
 8004bb2:	469a      	mov	sl, r3
 8004bb4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004bba:	d807      	bhi.n	8004bcc <_printf_i+0x28>
 8004bbc:	2f62      	cmp	r7, #98	; 0x62
 8004bbe:	d80a      	bhi.n	8004bd6 <_printf_i+0x32>
 8004bc0:	2f00      	cmp	r7, #0
 8004bc2:	f000 80d5 	beq.w	8004d70 <_printf_i+0x1cc>
 8004bc6:	2f58      	cmp	r7, #88	; 0x58
 8004bc8:	f000 80c1 	beq.w	8004d4e <_printf_i+0x1aa>
 8004bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004bd4:	e03a      	b.n	8004c4c <_printf_i+0xa8>
 8004bd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004bda:	2b15      	cmp	r3, #21
 8004bdc:	d8f6      	bhi.n	8004bcc <_printf_i+0x28>
 8004bde:	a101      	add	r1, pc, #4	; (adr r1, 8004be4 <_printf_i+0x40>)
 8004be0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004be4:	08004c3d 	.word	0x08004c3d
 8004be8:	08004c51 	.word	0x08004c51
 8004bec:	08004bcd 	.word	0x08004bcd
 8004bf0:	08004bcd 	.word	0x08004bcd
 8004bf4:	08004bcd 	.word	0x08004bcd
 8004bf8:	08004bcd 	.word	0x08004bcd
 8004bfc:	08004c51 	.word	0x08004c51
 8004c00:	08004bcd 	.word	0x08004bcd
 8004c04:	08004bcd 	.word	0x08004bcd
 8004c08:	08004bcd 	.word	0x08004bcd
 8004c0c:	08004bcd 	.word	0x08004bcd
 8004c10:	08004d57 	.word	0x08004d57
 8004c14:	08004c7d 	.word	0x08004c7d
 8004c18:	08004d11 	.word	0x08004d11
 8004c1c:	08004bcd 	.word	0x08004bcd
 8004c20:	08004bcd 	.word	0x08004bcd
 8004c24:	08004d79 	.word	0x08004d79
 8004c28:	08004bcd 	.word	0x08004bcd
 8004c2c:	08004c7d 	.word	0x08004c7d
 8004c30:	08004bcd 	.word	0x08004bcd
 8004c34:	08004bcd 	.word	0x08004bcd
 8004c38:	08004d19 	.word	0x08004d19
 8004c3c:	682b      	ldr	r3, [r5, #0]
 8004c3e:	1d1a      	adds	r2, r3, #4
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	602a      	str	r2, [r5, #0]
 8004c44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e0a0      	b.n	8004d92 <_printf_i+0x1ee>
 8004c50:	6820      	ldr	r0, [r4, #0]
 8004c52:	682b      	ldr	r3, [r5, #0]
 8004c54:	0607      	lsls	r7, r0, #24
 8004c56:	f103 0104 	add.w	r1, r3, #4
 8004c5a:	6029      	str	r1, [r5, #0]
 8004c5c:	d501      	bpl.n	8004c62 <_printf_i+0xbe>
 8004c5e:	681e      	ldr	r6, [r3, #0]
 8004c60:	e003      	b.n	8004c6a <_printf_i+0xc6>
 8004c62:	0646      	lsls	r6, r0, #25
 8004c64:	d5fb      	bpl.n	8004c5e <_printf_i+0xba>
 8004c66:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004c6a:	2e00      	cmp	r6, #0
 8004c6c:	da03      	bge.n	8004c76 <_printf_i+0xd2>
 8004c6e:	232d      	movs	r3, #45	; 0x2d
 8004c70:	4276      	negs	r6, r6
 8004c72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c76:	230a      	movs	r3, #10
 8004c78:	4859      	ldr	r0, [pc, #356]	; (8004de0 <_printf_i+0x23c>)
 8004c7a:	e012      	b.n	8004ca2 <_printf_i+0xfe>
 8004c7c:	682b      	ldr	r3, [r5, #0]
 8004c7e:	6820      	ldr	r0, [r4, #0]
 8004c80:	1d19      	adds	r1, r3, #4
 8004c82:	6029      	str	r1, [r5, #0]
 8004c84:	0605      	lsls	r5, r0, #24
 8004c86:	d501      	bpl.n	8004c8c <_printf_i+0xe8>
 8004c88:	681e      	ldr	r6, [r3, #0]
 8004c8a:	e002      	b.n	8004c92 <_printf_i+0xee>
 8004c8c:	0641      	lsls	r1, r0, #25
 8004c8e:	d5fb      	bpl.n	8004c88 <_printf_i+0xe4>
 8004c90:	881e      	ldrh	r6, [r3, #0]
 8004c92:	2f6f      	cmp	r7, #111	; 0x6f
 8004c94:	bf0c      	ite	eq
 8004c96:	2308      	moveq	r3, #8
 8004c98:	230a      	movne	r3, #10
 8004c9a:	4851      	ldr	r0, [pc, #324]	; (8004de0 <_printf_i+0x23c>)
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ca2:	6865      	ldr	r5, [r4, #4]
 8004ca4:	2d00      	cmp	r5, #0
 8004ca6:	bfa8      	it	ge
 8004ca8:	6821      	ldrge	r1, [r4, #0]
 8004caa:	60a5      	str	r5, [r4, #8]
 8004cac:	bfa4      	itt	ge
 8004cae:	f021 0104 	bicge.w	r1, r1, #4
 8004cb2:	6021      	strge	r1, [r4, #0]
 8004cb4:	b90e      	cbnz	r6, 8004cba <_printf_i+0x116>
 8004cb6:	2d00      	cmp	r5, #0
 8004cb8:	d04b      	beq.n	8004d52 <_printf_i+0x1ae>
 8004cba:	4615      	mov	r5, r2
 8004cbc:	fbb6 f1f3 	udiv	r1, r6, r3
 8004cc0:	fb03 6711 	mls	r7, r3, r1, r6
 8004cc4:	5dc7      	ldrb	r7, [r0, r7]
 8004cc6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004cca:	4637      	mov	r7, r6
 8004ccc:	42bb      	cmp	r3, r7
 8004cce:	460e      	mov	r6, r1
 8004cd0:	d9f4      	bls.n	8004cbc <_printf_i+0x118>
 8004cd2:	2b08      	cmp	r3, #8
 8004cd4:	d10b      	bne.n	8004cee <_printf_i+0x14a>
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	07de      	lsls	r6, r3, #31
 8004cda:	d508      	bpl.n	8004cee <_printf_i+0x14a>
 8004cdc:	6923      	ldr	r3, [r4, #16]
 8004cde:	6861      	ldr	r1, [r4, #4]
 8004ce0:	4299      	cmp	r1, r3
 8004ce2:	bfde      	ittt	le
 8004ce4:	2330      	movle	r3, #48	; 0x30
 8004ce6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cea:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cee:	1b52      	subs	r2, r2, r5
 8004cf0:	6122      	str	r2, [r4, #16]
 8004cf2:	464b      	mov	r3, r9
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	4640      	mov	r0, r8
 8004cf8:	f8cd a000 	str.w	sl, [sp]
 8004cfc:	aa03      	add	r2, sp, #12
 8004cfe:	f7ff fedf 	bl	8004ac0 <_printf_common>
 8004d02:	3001      	adds	r0, #1
 8004d04:	d14a      	bne.n	8004d9c <_printf_i+0x1f8>
 8004d06:	f04f 30ff 	mov.w	r0, #4294967295
 8004d0a:	b004      	add	sp, #16
 8004d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	f043 0320 	orr.w	r3, r3, #32
 8004d16:	6023      	str	r3, [r4, #0]
 8004d18:	2778      	movs	r7, #120	; 0x78
 8004d1a:	4832      	ldr	r0, [pc, #200]	; (8004de4 <_printf_i+0x240>)
 8004d1c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d20:	6823      	ldr	r3, [r4, #0]
 8004d22:	6829      	ldr	r1, [r5, #0]
 8004d24:	061f      	lsls	r7, r3, #24
 8004d26:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d2a:	d402      	bmi.n	8004d32 <_printf_i+0x18e>
 8004d2c:	065f      	lsls	r7, r3, #25
 8004d2e:	bf48      	it	mi
 8004d30:	b2b6      	uxthmi	r6, r6
 8004d32:	07df      	lsls	r7, r3, #31
 8004d34:	bf48      	it	mi
 8004d36:	f043 0320 	orrmi.w	r3, r3, #32
 8004d3a:	6029      	str	r1, [r5, #0]
 8004d3c:	bf48      	it	mi
 8004d3e:	6023      	strmi	r3, [r4, #0]
 8004d40:	b91e      	cbnz	r6, 8004d4a <_printf_i+0x1a6>
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	f023 0320 	bic.w	r3, r3, #32
 8004d48:	6023      	str	r3, [r4, #0]
 8004d4a:	2310      	movs	r3, #16
 8004d4c:	e7a6      	b.n	8004c9c <_printf_i+0xf8>
 8004d4e:	4824      	ldr	r0, [pc, #144]	; (8004de0 <_printf_i+0x23c>)
 8004d50:	e7e4      	b.n	8004d1c <_printf_i+0x178>
 8004d52:	4615      	mov	r5, r2
 8004d54:	e7bd      	b.n	8004cd2 <_printf_i+0x12e>
 8004d56:	682b      	ldr	r3, [r5, #0]
 8004d58:	6826      	ldr	r6, [r4, #0]
 8004d5a:	1d18      	adds	r0, r3, #4
 8004d5c:	6961      	ldr	r1, [r4, #20]
 8004d5e:	6028      	str	r0, [r5, #0]
 8004d60:	0635      	lsls	r5, r6, #24
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	d501      	bpl.n	8004d6a <_printf_i+0x1c6>
 8004d66:	6019      	str	r1, [r3, #0]
 8004d68:	e002      	b.n	8004d70 <_printf_i+0x1cc>
 8004d6a:	0670      	lsls	r0, r6, #25
 8004d6c:	d5fb      	bpl.n	8004d66 <_printf_i+0x1c2>
 8004d6e:	8019      	strh	r1, [r3, #0]
 8004d70:	2300      	movs	r3, #0
 8004d72:	4615      	mov	r5, r2
 8004d74:	6123      	str	r3, [r4, #16]
 8004d76:	e7bc      	b.n	8004cf2 <_printf_i+0x14e>
 8004d78:	682b      	ldr	r3, [r5, #0]
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	1d1a      	adds	r2, r3, #4
 8004d7e:	602a      	str	r2, [r5, #0]
 8004d80:	681d      	ldr	r5, [r3, #0]
 8004d82:	6862      	ldr	r2, [r4, #4]
 8004d84:	4628      	mov	r0, r5
 8004d86:	f000 f859 	bl	8004e3c <memchr>
 8004d8a:	b108      	cbz	r0, 8004d90 <_printf_i+0x1ec>
 8004d8c:	1b40      	subs	r0, r0, r5
 8004d8e:	6060      	str	r0, [r4, #4]
 8004d90:	6863      	ldr	r3, [r4, #4]
 8004d92:	6123      	str	r3, [r4, #16]
 8004d94:	2300      	movs	r3, #0
 8004d96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d9a:	e7aa      	b.n	8004cf2 <_printf_i+0x14e>
 8004d9c:	462a      	mov	r2, r5
 8004d9e:	4649      	mov	r1, r9
 8004da0:	4640      	mov	r0, r8
 8004da2:	6923      	ldr	r3, [r4, #16]
 8004da4:	47d0      	blx	sl
 8004da6:	3001      	adds	r0, #1
 8004da8:	d0ad      	beq.n	8004d06 <_printf_i+0x162>
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	079b      	lsls	r3, r3, #30
 8004dae:	d413      	bmi.n	8004dd8 <_printf_i+0x234>
 8004db0:	68e0      	ldr	r0, [r4, #12]
 8004db2:	9b03      	ldr	r3, [sp, #12]
 8004db4:	4298      	cmp	r0, r3
 8004db6:	bfb8      	it	lt
 8004db8:	4618      	movlt	r0, r3
 8004dba:	e7a6      	b.n	8004d0a <_printf_i+0x166>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	4632      	mov	r2, r6
 8004dc0:	4649      	mov	r1, r9
 8004dc2:	4640      	mov	r0, r8
 8004dc4:	47d0      	blx	sl
 8004dc6:	3001      	adds	r0, #1
 8004dc8:	d09d      	beq.n	8004d06 <_printf_i+0x162>
 8004dca:	3501      	adds	r5, #1
 8004dcc:	68e3      	ldr	r3, [r4, #12]
 8004dce:	9903      	ldr	r1, [sp, #12]
 8004dd0:	1a5b      	subs	r3, r3, r1
 8004dd2:	42ab      	cmp	r3, r5
 8004dd4:	dcf2      	bgt.n	8004dbc <_printf_i+0x218>
 8004dd6:	e7eb      	b.n	8004db0 <_printf_i+0x20c>
 8004dd8:	2500      	movs	r5, #0
 8004dda:	f104 0619 	add.w	r6, r4, #25
 8004dde:	e7f5      	b.n	8004dcc <_printf_i+0x228>
 8004de0:	08004f83 	.word	0x08004f83
 8004de4:	08004f94 	.word	0x08004f94

08004de8 <memmove>:
 8004de8:	4288      	cmp	r0, r1
 8004dea:	b510      	push	{r4, lr}
 8004dec:	eb01 0402 	add.w	r4, r1, r2
 8004df0:	d902      	bls.n	8004df8 <memmove+0x10>
 8004df2:	4284      	cmp	r4, r0
 8004df4:	4623      	mov	r3, r4
 8004df6:	d807      	bhi.n	8004e08 <memmove+0x20>
 8004df8:	1e43      	subs	r3, r0, #1
 8004dfa:	42a1      	cmp	r1, r4
 8004dfc:	d008      	beq.n	8004e10 <memmove+0x28>
 8004dfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e06:	e7f8      	b.n	8004dfa <memmove+0x12>
 8004e08:	4601      	mov	r1, r0
 8004e0a:	4402      	add	r2, r0
 8004e0c:	428a      	cmp	r2, r1
 8004e0e:	d100      	bne.n	8004e12 <memmove+0x2a>
 8004e10:	bd10      	pop	{r4, pc}
 8004e12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e1a:	e7f7      	b.n	8004e0c <memmove+0x24>

08004e1c <_sbrk_r>:
 8004e1c:	b538      	push	{r3, r4, r5, lr}
 8004e1e:	2300      	movs	r3, #0
 8004e20:	4d05      	ldr	r5, [pc, #20]	; (8004e38 <_sbrk_r+0x1c>)
 8004e22:	4604      	mov	r4, r0
 8004e24:	4608      	mov	r0, r1
 8004e26:	602b      	str	r3, [r5, #0]
 8004e28:	f7fc fce8 	bl	80017fc <_sbrk>
 8004e2c:	1c43      	adds	r3, r0, #1
 8004e2e:	d102      	bne.n	8004e36 <_sbrk_r+0x1a>
 8004e30:	682b      	ldr	r3, [r5, #0]
 8004e32:	b103      	cbz	r3, 8004e36 <_sbrk_r+0x1a>
 8004e34:	6023      	str	r3, [r4, #0]
 8004e36:	bd38      	pop	{r3, r4, r5, pc}
 8004e38:	20000718 	.word	0x20000718

08004e3c <memchr>:
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	b510      	push	{r4, lr}
 8004e40:	b2c9      	uxtb	r1, r1
 8004e42:	4402      	add	r2, r0
 8004e44:	4293      	cmp	r3, r2
 8004e46:	4618      	mov	r0, r3
 8004e48:	d101      	bne.n	8004e4e <memchr+0x12>
 8004e4a:	2000      	movs	r0, #0
 8004e4c:	e003      	b.n	8004e56 <memchr+0x1a>
 8004e4e:	7804      	ldrb	r4, [r0, #0]
 8004e50:	3301      	adds	r3, #1
 8004e52:	428c      	cmp	r4, r1
 8004e54:	d1f6      	bne.n	8004e44 <memchr+0x8>
 8004e56:	bd10      	pop	{r4, pc}

08004e58 <memcpy>:
 8004e58:	440a      	add	r2, r1
 8004e5a:	4291      	cmp	r1, r2
 8004e5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e60:	d100      	bne.n	8004e64 <memcpy+0xc>
 8004e62:	4770      	bx	lr
 8004e64:	b510      	push	{r4, lr}
 8004e66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e6a:	4291      	cmp	r1, r2
 8004e6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e70:	d1f9      	bne.n	8004e66 <memcpy+0xe>
 8004e72:	bd10      	pop	{r4, pc}

08004e74 <_realloc_r>:
 8004e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e78:	4680      	mov	r8, r0
 8004e7a:	4614      	mov	r4, r2
 8004e7c:	460e      	mov	r6, r1
 8004e7e:	b921      	cbnz	r1, 8004e8a <_realloc_r+0x16>
 8004e80:	4611      	mov	r1, r2
 8004e82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e86:	f7ff bc37 	b.w	80046f8 <_malloc_r>
 8004e8a:	b92a      	cbnz	r2, 8004e98 <_realloc_r+0x24>
 8004e8c:	f7ff fbcc 	bl	8004628 <_free_r>
 8004e90:	4625      	mov	r5, r4
 8004e92:	4628      	mov	r0, r5
 8004e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e98:	f000 f81b 	bl	8004ed2 <_malloc_usable_size_r>
 8004e9c:	4284      	cmp	r4, r0
 8004e9e:	4607      	mov	r7, r0
 8004ea0:	d802      	bhi.n	8004ea8 <_realloc_r+0x34>
 8004ea2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004ea6:	d812      	bhi.n	8004ece <_realloc_r+0x5a>
 8004ea8:	4621      	mov	r1, r4
 8004eaa:	4640      	mov	r0, r8
 8004eac:	f7ff fc24 	bl	80046f8 <_malloc_r>
 8004eb0:	4605      	mov	r5, r0
 8004eb2:	2800      	cmp	r0, #0
 8004eb4:	d0ed      	beq.n	8004e92 <_realloc_r+0x1e>
 8004eb6:	42bc      	cmp	r4, r7
 8004eb8:	4622      	mov	r2, r4
 8004eba:	4631      	mov	r1, r6
 8004ebc:	bf28      	it	cs
 8004ebe:	463a      	movcs	r2, r7
 8004ec0:	f7ff ffca 	bl	8004e58 <memcpy>
 8004ec4:	4631      	mov	r1, r6
 8004ec6:	4640      	mov	r0, r8
 8004ec8:	f7ff fbae 	bl	8004628 <_free_r>
 8004ecc:	e7e1      	b.n	8004e92 <_realloc_r+0x1e>
 8004ece:	4635      	mov	r5, r6
 8004ed0:	e7df      	b.n	8004e92 <_realloc_r+0x1e>

08004ed2 <_malloc_usable_size_r>:
 8004ed2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ed6:	1f18      	subs	r0, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	bfbc      	itt	lt
 8004edc:	580b      	ldrlt	r3, [r1, r0]
 8004ede:	18c0      	addlt	r0, r0, r3
 8004ee0:	4770      	bx	lr
	...

08004ee4 <_init>:
 8004ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee6:	bf00      	nop
 8004ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eea:	bc08      	pop	{r3}
 8004eec:	469e      	mov	lr, r3
 8004eee:	4770      	bx	lr

08004ef0 <_fini>:
 8004ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef2:	bf00      	nop
 8004ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ef6:	bc08      	pop	{r3}
 8004ef8:	469e      	mov	lr, r3
 8004efa:	4770      	bx	lr
