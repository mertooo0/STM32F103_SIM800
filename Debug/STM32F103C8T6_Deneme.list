
STM32F103C8T6_Deneme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007760  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08007870  08007870  00017870  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cb4  08007cb4  00020244  2**0
                  CONTENTS
  4 .ARM          00000000  08007cb4  08007cb4  00020244  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007cb4  08007cb4  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cb4  08007cb4  00017cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cb8  08007cb8  00017cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  08007cbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000078c  20000244  08007f00  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009d0  08007f00  000209d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002026d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d8a0  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002346  00000000  00000000  0002db50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d68  00000000  00000000  0002fe98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a71  00000000  00000000  00030c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018d9e  00000000  00000000  00031671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fa43  00000000  00000000  0004a40f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c313  00000000  00000000  00059e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000048c8  00000000  00000000  000e6168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000eaa30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000244 	.word	0x20000244
 800012c:	00000000 	.word	0x00000000
 8000130:	08007858 	.word	0x08007858

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000248 	.word	0x20000248
 800014c:	08007858 	.word	0x08007858

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <Set_Time>:
};

// ----------------------------------------------

void Set_Time()
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
	uint8_t Comma_Trig=0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	71fb      	strb	r3, [r7, #7]
	uint16_t syc=0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	80bb      	strh	r3, [r7, #4]
/*  //ESKİ ALGORİTMA ++ÇALIŞIYOR
	Time.hh = ((GPGGA_Data[7]-'0')*10+(uint8_t)GPGGA_Data[8]-'0')+3; //GMT +3
	Time.mm = (GPGGA_Data[9]-'0')*10+(uint8_t)GPGGA_Data[10]-'0';
	Time.ss = (GPGGA_Data[11]-'0')*10+(uint8_t)GPGGA_Data[12]-'0';
*/
	Get_GGA();
 8000b36:	f000 fab9 	bl	80010ac <Get_GGA>

	while(Comma_Trig<=0)//GPGGA_Data bufferındaki verilerin analizi ',' e göre yapılmıştır --!!! BUFFER BOŞ İSE HATA VERİR !!!
 8000b3a:	e058      	b.n	8000bee <Set_Time+0xc6>
	{
		if(GPGGA_Data[syc]==',')
 8000b3c:	88bb      	ldrh	r3, [r7, #4]
 8000b3e:	4a30      	ldr	r2, [pc, #192]	; (8000c00 <Set_Time+0xd8>)
 8000b40:	5cd3      	ldrb	r3, [r2, r3]
 8000b42:	2b2c      	cmp	r3, #44	; 0x2c
 8000b44:	d150      	bne.n	8000be8 <Set_Time+0xc0>
		{
			if(GPGGA_Data[syc+1] == ',')//No data has received yet
 8000b46:	88bb      	ldrh	r3, [r7, #4]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	4a2d      	ldr	r2, [pc, #180]	; (8000c00 <Set_Time+0xd8>)
 8000b4c:	5cd3      	ldrb	r3, [r2, r3]
 8000b4e:	2b2c      	cmp	r3, #44	; 0x2c
 8000b50:	d109      	bne.n	8000b66 <Set_Time+0x3e>
			{
				Time.hh=0;
 8000b52:	4b2c      	ldr	r3, [pc, #176]	; (8000c04 <Set_Time+0xdc>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]
				Time.mm=0;
 8000b58:	4b2a      	ldr	r3, [pc, #168]	; (8000c04 <Set_Time+0xdc>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	705a      	strb	r2, [r3, #1]
				Time.ss=0;
 8000b5e:	4b29      	ldr	r3, [pc, #164]	; (8000c04 <Set_Time+0xdc>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	709a      	strb	r2, [r3, #2]
 8000b64:	e03e      	b.n	8000be4 <Set_Time+0xbc>
			}

			else
			{
				Time.hh= ((GPGGA_Data[syc+1]-'0')*10+(uint8_t)GPGGA_Data[syc+2]-'0')+3;
 8000b66:	88bb      	ldrh	r3, [r7, #4]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	4a25      	ldr	r2, [pc, #148]	; (8000c00 <Set_Time+0xd8>)
 8000b6c:	5cd3      	ldrb	r3, [r2, r3]
 8000b6e:	3b30      	subs	r3, #48	; 0x30
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	461a      	mov	r2, r3
 8000b74:	0092      	lsls	r2, r2, #2
 8000b76:	4413      	add	r3, r2
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	88bb      	ldrh	r3, [r7, #4]
 8000b7e:	3302      	adds	r3, #2
 8000b80:	491f      	ldr	r1, [pc, #124]	; (8000c00 <Set_Time+0xd8>)
 8000b82:	5ccb      	ldrb	r3, [r1, r3]
 8000b84:	4413      	add	r3, r2
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	3b2d      	subs	r3, #45	; 0x2d
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <Set_Time+0xdc>)
 8000b8e:	701a      	strb	r2, [r3, #0]
				Time.mm = (GPGGA_Data[syc+3]-'0')*10+(uint8_t)GPGGA_Data[syc+4]-'0';
 8000b90:	88bb      	ldrh	r3, [r7, #4]
 8000b92:	3303      	adds	r3, #3
 8000b94:	4a1a      	ldr	r2, [pc, #104]	; (8000c00 <Set_Time+0xd8>)
 8000b96:	5cd3      	ldrb	r3, [r2, r3]
 8000b98:	3b30      	subs	r3, #48	; 0x30
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	0092      	lsls	r2, r2, #2
 8000ba0:	4413      	add	r3, r2
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	88bb      	ldrh	r3, [r7, #4]
 8000ba8:	3304      	adds	r3, #4
 8000baa:	4915      	ldr	r1, [pc, #84]	; (8000c00 <Set_Time+0xd8>)
 8000bac:	5ccb      	ldrb	r3, [r1, r3]
 8000bae:	4413      	add	r3, r2
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	3b30      	subs	r3, #48	; 0x30
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <Set_Time+0xdc>)
 8000bb8:	705a      	strb	r2, [r3, #1]
				Time.ss = (GPGGA_Data[syc+5]-'0')*10+(uint8_t)GPGGA_Data[syc+6]-'0';
 8000bba:	88bb      	ldrh	r3, [r7, #4]
 8000bbc:	3305      	adds	r3, #5
 8000bbe:	4a10      	ldr	r2, [pc, #64]	; (8000c00 <Set_Time+0xd8>)
 8000bc0:	5cd3      	ldrb	r3, [r2, r3]
 8000bc2:	3b30      	subs	r3, #48	; 0x30
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	0092      	lsls	r2, r2, #2
 8000bca:	4413      	add	r3, r2
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	88bb      	ldrh	r3, [r7, #4]
 8000bd2:	3306      	adds	r3, #6
 8000bd4:	490a      	ldr	r1, [pc, #40]	; (8000c00 <Set_Time+0xd8>)
 8000bd6:	5ccb      	ldrb	r3, [r1, r3]
 8000bd8:	4413      	add	r3, r2
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	3b30      	subs	r3, #48	; 0x30
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <Set_Time+0xdc>)
 8000be2:	709a      	strb	r2, [r3, #2]
			}

			Comma_Trig=1;
 8000be4:	2301      	movs	r3, #1
 8000be6:	71fb      	strb	r3, [r7, #7]
		}
		syc++;
 8000be8:	88bb      	ldrh	r3, [r7, #4]
 8000bea:	3301      	adds	r3, #1
 8000bec:	80bb      	strh	r3, [r7, #4]
	while(Comma_Trig<=0)//GPGGA_Data bufferındaki verilerin analizi ',' e göre yapılmıştır --!!! BUFFER BOŞ İSE HATA VERİR !!!
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d0a3      	beq.n	8000b3c <Set_Time+0x14>
	}

}
 8000bf4:	bf00      	nop
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200002c4 	.word	0x200002c4
 8000c04:	2000032c 	.word	0x2000032c

08000c08 <Set_Location>:
void Send_Time()
{
	SIM800l_Send_Data(Time.mm);
}
void Set_Location()
{
 8000c08:	b5b0      	push	{r4, r5, r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
	Get_GGA();
 8000c0e:	f000 fa4d 	bl	80010ac <Get_GGA>

	uint8_t Comma_Trig=0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	71fb      	strb	r3, [r7, #7]
	uint16_t syc=0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	80bb      	strh	r3, [r7, #4]

	while(Comma_Trig<2)//GPGGA_Data bufferındaki verilerin analizi ',' e göre yapılmıştır
 8000c1a:	e00a      	b.n	8000c32 <Set_Location+0x2a>
	{

		if(GPGGA_Data[syc]==',')
 8000c1c:	88bb      	ldrh	r3, [r7, #4]
 8000c1e:	4a0c      	ldr	r2, [pc, #48]	; (8000c50 <Set_Location+0x48>)
 8000c20:	5cd3      	ldrb	r3, [r2, r3]
 8000c22:	2b2c      	cmp	r3, #44	; 0x2c
 8000c24:	d102      	bne.n	8000c2c <Set_Location+0x24>
		{

			Comma_Trig++;
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	71fb      	strb	r3, [r7, #7]
		}
			syc++;
 8000c2c:	88bb      	ldrh	r3, [r7, #4]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	80bb      	strh	r3, [r7, #4]
	while(Comma_Trig<2)//GPGGA_Data bufferındaki verilerin analizi ',' e göre yapılmıştır
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d9f1      	bls.n	8000c1c <Set_Location+0x14>
	}


	if(Comma_Trig==2)
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d10f      	bne.n	8000c5e <Set_Location+0x56>
	{
		if(GPGGA_Data[syc]==',')//Any very hasn't received yet
 8000c3e:	88bb      	ldrh	r3, [r7, #4]
 8000c40:	4a03      	ldr	r2, [pc, #12]	; (8000c50 <Set_Location+0x48>)
 8000c42:	5cd3      	ldrb	r3, [r2, r3]
 8000c44:	2b2c      	cmp	r3, #44	; 0x2c
 8000c46:	d107      	bne.n	8000c58 <Set_Location+0x50>
		{
			GPS_Location_Data_Received = false;
 8000c48:	4b02      	ldr	r3, [pc, #8]	; (8000c54 <Set_Location+0x4c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
 8000c4e:	e006      	b.n	8000c5e <Set_Location+0x56>
 8000c50:	200002c4 	.word	0x200002c4
 8000c54:	20000329 	.word	0x20000329
		}
		else GPS_Location_Data_Received = true;
 8000c58:	4bd5      	ldr	r3, [pc, #852]	; (8000fb0 <Set_Location+0x3a8>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]
	}

	if(GPS_Location_Data_Received == true)
 8000c5e:	4bd4      	ldr	r3, [pc, #848]	; (8000fb0 <Set_Location+0x3a8>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f000 81fa 	beq.w	800105c <Set_Location+0x454>
	{

		//YENİ ALGORİTMA -- ',' e göre hesaplanıyor
		Coord.latitude= (GPGGA_Data[syc]-'0')*10 + (GPGGA_Data[syc+1]-'0')*1 + (GPGGA_Data[syc+2]-'0')*0.1 + (GPGGA_Data[syc+3]-'0')*0.01 + (GPGGA_Data[syc+4]-'0')*0.001 + (GPGGA_Data[syc+5]-'0')*0.0001 + (GPGGA_Data[syc+6]-'0')*0.00001 + (GPGGA_Data[syc+7]-'0')*0.000001 + (GPGGA_Data[syc+8]-'0')*0.0000001 + (GPGGA_Data[syc+9]-'0')*0.00000001;
 8000c68:	88bb      	ldrh	r3, [r7, #4]
 8000c6a:	4ad2      	ldr	r2, [pc, #840]	; (8000fb4 <Set_Location+0x3ac>)
 8000c6c:	5cd3      	ldrb	r3, [r2, r3]
 8000c6e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000c72:	4613      	mov	r3, r2
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	4413      	add	r3, r2
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	88bb      	ldrh	r3, [r7, #4]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	4acc      	ldr	r2, [pc, #816]	; (8000fb4 <Set_Location+0x3ac>)
 8000c82:	5cd3      	ldrb	r3, [r2, r3]
 8000c84:	3b30      	subs	r3, #48	; 0x30
 8000c86:	440b      	add	r3, r1
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fbbb 	bl	8000404 <__aeabi_i2d>
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	88bb      	ldrh	r3, [r7, #4]
 8000c94:	3302      	adds	r3, #2
 8000c96:	4ac7      	ldr	r2, [pc, #796]	; (8000fb4 <Set_Location+0x3ac>)
 8000c98:	5cd3      	ldrb	r3, [r2, r3]
 8000c9a:	3b30      	subs	r3, #48	; 0x30
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fbb1 	bl	8000404 <__aeabi_i2d>
 8000ca2:	a3b3      	add	r3, pc, #716	; (adr r3, 8000f70 <Set_Location+0x368>)
 8000ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca8:	f7ff fc16 	bl	80004d8 <__aeabi_dmul>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4620      	mov	r0, r4
 8000cb2:	4629      	mov	r1, r5
 8000cb4:	f7ff fa5a 	bl	800016c <__adddf3>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4614      	mov	r4, r2
 8000cbe:	461d      	mov	r5, r3
 8000cc0:	88bb      	ldrh	r3, [r7, #4]
 8000cc2:	3303      	adds	r3, #3
 8000cc4:	4abb      	ldr	r2, [pc, #748]	; (8000fb4 <Set_Location+0x3ac>)
 8000cc6:	5cd3      	ldrb	r3, [r2, r3]
 8000cc8:	3b30      	subs	r3, #48	; 0x30
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fb9a 	bl	8000404 <__aeabi_i2d>
 8000cd0:	a3a9      	add	r3, pc, #676	; (adr r3, 8000f78 <Set_Location+0x370>)
 8000cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd6:	f7ff fbff 	bl	80004d8 <__aeabi_dmul>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	460b      	mov	r3, r1
 8000cde:	4620      	mov	r0, r4
 8000ce0:	4629      	mov	r1, r5
 8000ce2:	f7ff fa43 	bl	800016c <__adddf3>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	460b      	mov	r3, r1
 8000cea:	4614      	mov	r4, r2
 8000cec:	461d      	mov	r5, r3
 8000cee:	88bb      	ldrh	r3, [r7, #4]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	4ab0      	ldr	r2, [pc, #704]	; (8000fb4 <Set_Location+0x3ac>)
 8000cf4:	5cd3      	ldrb	r3, [r2, r3]
 8000cf6:	3b30      	subs	r3, #48	; 0x30
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fb83 	bl	8000404 <__aeabi_i2d>
 8000cfe:	a3a0      	add	r3, pc, #640	; (adr r3, 8000f80 <Set_Location+0x378>)
 8000d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d04:	f7ff fbe8 	bl	80004d8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4620      	mov	r0, r4
 8000d0e:	4629      	mov	r1, r5
 8000d10:	f7ff fa2c 	bl	800016c <__adddf3>
 8000d14:	4602      	mov	r2, r0
 8000d16:	460b      	mov	r3, r1
 8000d18:	4614      	mov	r4, r2
 8000d1a:	461d      	mov	r5, r3
 8000d1c:	88bb      	ldrh	r3, [r7, #4]
 8000d1e:	3305      	adds	r3, #5
 8000d20:	4aa4      	ldr	r2, [pc, #656]	; (8000fb4 <Set_Location+0x3ac>)
 8000d22:	5cd3      	ldrb	r3, [r2, r3]
 8000d24:	3b30      	subs	r3, #48	; 0x30
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fb6c 	bl	8000404 <__aeabi_i2d>
 8000d2c:	a396      	add	r3, pc, #600	; (adr r3, 8000f88 <Set_Location+0x380>)
 8000d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d32:	f7ff fbd1 	bl	80004d8 <__aeabi_dmul>
 8000d36:	4602      	mov	r2, r0
 8000d38:	460b      	mov	r3, r1
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	4629      	mov	r1, r5
 8000d3e:	f7ff fa15 	bl	800016c <__adddf3>
 8000d42:	4602      	mov	r2, r0
 8000d44:	460b      	mov	r3, r1
 8000d46:	4614      	mov	r4, r2
 8000d48:	461d      	mov	r5, r3
 8000d4a:	88bb      	ldrh	r3, [r7, #4]
 8000d4c:	3306      	adds	r3, #6
 8000d4e:	4a99      	ldr	r2, [pc, #612]	; (8000fb4 <Set_Location+0x3ac>)
 8000d50:	5cd3      	ldrb	r3, [r2, r3]
 8000d52:	3b30      	subs	r3, #48	; 0x30
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fb55 	bl	8000404 <__aeabi_i2d>
 8000d5a:	a38d      	add	r3, pc, #564	; (adr r3, 8000f90 <Set_Location+0x388>)
 8000d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d60:	f7ff fbba 	bl	80004d8 <__aeabi_dmul>
 8000d64:	4602      	mov	r2, r0
 8000d66:	460b      	mov	r3, r1
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	f7ff f9fe 	bl	800016c <__adddf3>
 8000d70:	4602      	mov	r2, r0
 8000d72:	460b      	mov	r3, r1
 8000d74:	4614      	mov	r4, r2
 8000d76:	461d      	mov	r5, r3
 8000d78:	88bb      	ldrh	r3, [r7, #4]
 8000d7a:	3307      	adds	r3, #7
 8000d7c:	4a8d      	ldr	r2, [pc, #564]	; (8000fb4 <Set_Location+0x3ac>)
 8000d7e:	5cd3      	ldrb	r3, [r2, r3]
 8000d80:	3b30      	subs	r3, #48	; 0x30
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fb3e 	bl	8000404 <__aeabi_i2d>
 8000d88:	a383      	add	r3, pc, #524	; (adr r3, 8000f98 <Set_Location+0x390>)
 8000d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d8e:	f7ff fba3 	bl	80004d8 <__aeabi_dmul>
 8000d92:	4602      	mov	r2, r0
 8000d94:	460b      	mov	r3, r1
 8000d96:	4620      	mov	r0, r4
 8000d98:	4629      	mov	r1, r5
 8000d9a:	f7ff f9e7 	bl	800016c <__adddf3>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	460b      	mov	r3, r1
 8000da2:	4614      	mov	r4, r2
 8000da4:	461d      	mov	r5, r3
 8000da6:	88bb      	ldrh	r3, [r7, #4]
 8000da8:	3308      	adds	r3, #8
 8000daa:	4a82      	ldr	r2, [pc, #520]	; (8000fb4 <Set_Location+0x3ac>)
 8000dac:	5cd3      	ldrb	r3, [r2, r3]
 8000dae:	3b30      	subs	r3, #48	; 0x30
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fb27 	bl	8000404 <__aeabi_i2d>
 8000db6:	a37a      	add	r3, pc, #488	; (adr r3, 8000fa0 <Set_Location+0x398>)
 8000db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dbc:	f7ff fb8c 	bl	80004d8 <__aeabi_dmul>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	4629      	mov	r1, r5
 8000dc8:	f7ff f9d0 	bl	800016c <__adddf3>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	460b      	mov	r3, r1
 8000dd0:	4614      	mov	r4, r2
 8000dd2:	461d      	mov	r5, r3
 8000dd4:	88bb      	ldrh	r3, [r7, #4]
 8000dd6:	3309      	adds	r3, #9
 8000dd8:	4a76      	ldr	r2, [pc, #472]	; (8000fb4 <Set_Location+0x3ac>)
 8000dda:	5cd3      	ldrb	r3, [r2, r3]
 8000ddc:	3b30      	subs	r3, #48	; 0x30
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fb10 	bl	8000404 <__aeabi_i2d>
 8000de4:	a370      	add	r3, pc, #448	; (adr r3, 8000fa8 <Set_Location+0x3a0>)
 8000de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dea:	f7ff fb75 	bl	80004d8 <__aeabi_dmul>
 8000dee:	4602      	mov	r2, r0
 8000df0:	460b      	mov	r3, r1
 8000df2:	4620      	mov	r0, r4
 8000df4:	4629      	mov	r1, r5
 8000df6:	f7ff f9b9 	bl	800016c <__adddf3>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	4610      	mov	r0, r2
 8000e00:	4619      	mov	r1, r3
 8000e02:	f7ff fe41 	bl	8000a88 <__aeabi_d2f>
 8000e06:	4603      	mov	r3, r0
 8000e08:	4a6b      	ldr	r2, [pc, #428]	; (8000fb8 <Set_Location+0x3b0>)
 8000e0a:	6013      	str	r3, [r2, #0]
		Coord.L_hemisphere=GPGGA_Data[syc+11];
 8000e0c:	88bb      	ldrh	r3, [r7, #4]
 8000e0e:	330b      	adds	r3, #11
 8000e10:	4a68      	ldr	r2, [pc, #416]	; (8000fb4 <Set_Location+0x3ac>)
 8000e12:	5cd2      	ldrb	r2, [r2, r3]
 8000e14:	4b68      	ldr	r3, [pc, #416]	; (8000fb8 <Set_Location+0x3b0>)
 8000e16:	711a      	strb	r2, [r3, #4]
		Coord.longitude= (GPGGA_Data[syc+14]-'0')*10 + (GPGGA_Data[syc+15]-'0')*1 + (GPGGA_Data[syc+16]-'0')*0.1 + (GPGGA_Data[syc+17]-'0')*0.01 + (GPGGA_Data[syc+18]-'0')*0.001 + (GPGGA_Data[syc+19]-'0')*0.0001 + (GPGGA_Data[syc+20]-'0')*0.00001 + (GPGGA_Data[syc+21]-'0')*0.000001 + (GPGGA_Data[syc+22]-'0')*0.0000001 + (GPGGA_Data-'0')[syc+23]*0.00000001;
 8000e18:	88bb      	ldrh	r3, [r7, #4]
 8000e1a:	330e      	adds	r3, #14
 8000e1c:	4a65      	ldr	r2, [pc, #404]	; (8000fb4 <Set_Location+0x3ac>)
 8000e1e:	5cd3      	ldrb	r3, [r2, r3]
 8000e20:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000e24:	4613      	mov	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4413      	add	r3, r2
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	88bb      	ldrh	r3, [r7, #4]
 8000e30:	330f      	adds	r3, #15
 8000e32:	4a60      	ldr	r2, [pc, #384]	; (8000fb4 <Set_Location+0x3ac>)
 8000e34:	5cd3      	ldrb	r3, [r2, r3]
 8000e36:	3b30      	subs	r3, #48	; 0x30
 8000e38:	440b      	add	r3, r1
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fae2 	bl	8000404 <__aeabi_i2d>
 8000e40:	4604      	mov	r4, r0
 8000e42:	460d      	mov	r5, r1
 8000e44:	88bb      	ldrh	r3, [r7, #4]
 8000e46:	3310      	adds	r3, #16
 8000e48:	4a5a      	ldr	r2, [pc, #360]	; (8000fb4 <Set_Location+0x3ac>)
 8000e4a:	5cd3      	ldrb	r3, [r2, r3]
 8000e4c:	3b30      	subs	r3, #48	; 0x30
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fad8 	bl	8000404 <__aeabi_i2d>
 8000e54:	a346      	add	r3, pc, #280	; (adr r3, 8000f70 <Set_Location+0x368>)
 8000e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5a:	f7ff fb3d 	bl	80004d8 <__aeabi_dmul>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	460b      	mov	r3, r1
 8000e62:	4620      	mov	r0, r4
 8000e64:	4629      	mov	r1, r5
 8000e66:	f7ff f981 	bl	800016c <__adddf3>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	4614      	mov	r4, r2
 8000e70:	461d      	mov	r5, r3
 8000e72:	88bb      	ldrh	r3, [r7, #4]
 8000e74:	3311      	adds	r3, #17
 8000e76:	4a4f      	ldr	r2, [pc, #316]	; (8000fb4 <Set_Location+0x3ac>)
 8000e78:	5cd3      	ldrb	r3, [r2, r3]
 8000e7a:	3b30      	subs	r3, #48	; 0x30
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fac1 	bl	8000404 <__aeabi_i2d>
 8000e82:	a33d      	add	r3, pc, #244	; (adr r3, 8000f78 <Set_Location+0x370>)
 8000e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e88:	f7ff fb26 	bl	80004d8 <__aeabi_dmul>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	4620      	mov	r0, r4
 8000e92:	4629      	mov	r1, r5
 8000e94:	f7ff f96a 	bl	800016c <__adddf3>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	4614      	mov	r4, r2
 8000e9e:	461d      	mov	r5, r3
 8000ea0:	88bb      	ldrh	r3, [r7, #4]
 8000ea2:	3312      	adds	r3, #18
 8000ea4:	4a43      	ldr	r2, [pc, #268]	; (8000fb4 <Set_Location+0x3ac>)
 8000ea6:	5cd3      	ldrb	r3, [r2, r3]
 8000ea8:	3b30      	subs	r3, #48	; 0x30
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff faaa 	bl	8000404 <__aeabi_i2d>
 8000eb0:	a333      	add	r3, pc, #204	; (adr r3, 8000f80 <Set_Location+0x378>)
 8000eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb6:	f7ff fb0f 	bl	80004d8 <__aeabi_dmul>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4620      	mov	r0, r4
 8000ec0:	4629      	mov	r1, r5
 8000ec2:	f7ff f953 	bl	800016c <__adddf3>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	460b      	mov	r3, r1
 8000eca:	4614      	mov	r4, r2
 8000ecc:	461d      	mov	r5, r3
 8000ece:	88bb      	ldrh	r3, [r7, #4]
 8000ed0:	3313      	adds	r3, #19
 8000ed2:	4a38      	ldr	r2, [pc, #224]	; (8000fb4 <Set_Location+0x3ac>)
 8000ed4:	5cd3      	ldrb	r3, [r2, r3]
 8000ed6:	3b30      	subs	r3, #48	; 0x30
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fa93 	bl	8000404 <__aeabi_i2d>
 8000ede:	a32a      	add	r3, pc, #168	; (adr r3, 8000f88 <Set_Location+0x380>)
 8000ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee4:	f7ff faf8 	bl	80004d8 <__aeabi_dmul>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	460b      	mov	r3, r1
 8000eec:	4620      	mov	r0, r4
 8000eee:	4629      	mov	r1, r5
 8000ef0:	f7ff f93c 	bl	800016c <__adddf3>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4614      	mov	r4, r2
 8000efa:	461d      	mov	r5, r3
 8000efc:	88bb      	ldrh	r3, [r7, #4]
 8000efe:	3314      	adds	r3, #20
 8000f00:	4a2c      	ldr	r2, [pc, #176]	; (8000fb4 <Set_Location+0x3ac>)
 8000f02:	5cd3      	ldrb	r3, [r2, r3]
 8000f04:	3b30      	subs	r3, #48	; 0x30
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fa7c 	bl	8000404 <__aeabi_i2d>
 8000f0c:	a320      	add	r3, pc, #128	; (adr r3, 8000f90 <Set_Location+0x388>)
 8000f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f12:	f7ff fae1 	bl	80004d8 <__aeabi_dmul>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	4620      	mov	r0, r4
 8000f1c:	4629      	mov	r1, r5
 8000f1e:	f7ff f925 	bl	800016c <__adddf3>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	4614      	mov	r4, r2
 8000f28:	461d      	mov	r5, r3
 8000f2a:	88bb      	ldrh	r3, [r7, #4]
 8000f2c:	3315      	adds	r3, #21
 8000f2e:	4a21      	ldr	r2, [pc, #132]	; (8000fb4 <Set_Location+0x3ac>)
 8000f30:	5cd3      	ldrb	r3, [r2, r3]
 8000f32:	3b30      	subs	r3, #48	; 0x30
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fa65 	bl	8000404 <__aeabi_i2d>
 8000f3a:	a317      	add	r3, pc, #92	; (adr r3, 8000f98 <Set_Location+0x390>)
 8000f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f40:	f7ff faca 	bl	80004d8 <__aeabi_dmul>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	4620      	mov	r0, r4
 8000f4a:	4629      	mov	r1, r5
 8000f4c:	f7ff f90e 	bl	800016c <__adddf3>
 8000f50:	4602      	mov	r2, r0
 8000f52:	460b      	mov	r3, r1
 8000f54:	4614      	mov	r4, r2
 8000f56:	461d      	mov	r5, r3
 8000f58:	88bb      	ldrh	r3, [r7, #4]
 8000f5a:	3316      	adds	r3, #22
 8000f5c:	4a15      	ldr	r2, [pc, #84]	; (8000fb4 <Set_Location+0x3ac>)
 8000f5e:	5cd3      	ldrb	r3, [r2, r3]
 8000f60:	3b30      	subs	r3, #48	; 0x30
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fa4e 	bl	8000404 <__aeabi_i2d>
 8000f68:	e028      	b.n	8000fbc <Set_Location+0x3b4>
 8000f6a:	bf00      	nop
 8000f6c:	f3af 8000 	nop.w
 8000f70:	9999999a 	.word	0x9999999a
 8000f74:	3fb99999 	.word	0x3fb99999
 8000f78:	47ae147b 	.word	0x47ae147b
 8000f7c:	3f847ae1 	.word	0x3f847ae1
 8000f80:	d2f1a9fc 	.word	0xd2f1a9fc
 8000f84:	3f50624d 	.word	0x3f50624d
 8000f88:	eb1c432d 	.word	0xeb1c432d
 8000f8c:	3f1a36e2 	.word	0x3f1a36e2
 8000f90:	88e368f1 	.word	0x88e368f1
 8000f94:	3ee4f8b5 	.word	0x3ee4f8b5
 8000f98:	a0b5ed8d 	.word	0xa0b5ed8d
 8000f9c:	3eb0c6f7 	.word	0x3eb0c6f7
 8000fa0:	9abcaf48 	.word	0x9abcaf48
 8000fa4:	3e7ad7f2 	.word	0x3e7ad7f2
 8000fa8:	e2308c3a 	.word	0xe2308c3a
 8000fac:	3e45798e 	.word	0x3e45798e
 8000fb0:	20000329 	.word	0x20000329
 8000fb4:	200002c4 	.word	0x200002c4
 8000fb8:	2000033c 	.word	0x2000033c
 8000fbc:	a32a      	add	r3, pc, #168	; (adr r3, 8001068 <Set_Location+0x460>)
 8000fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc2:	f7ff fa89 	bl	80004d8 <__aeabi_dmul>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4620      	mov	r0, r4
 8000fcc:	4629      	mov	r1, r5
 8000fce:	f7ff f8cd 	bl	800016c <__adddf3>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	4614      	mov	r4, r2
 8000fd8:	461d      	mov	r5, r3
 8000fda:	88bb      	ldrh	r3, [r7, #4]
 8000fdc:	3b19      	subs	r3, #25
 8000fde:	4a26      	ldr	r2, [pc, #152]	; (8001078 <Set_Location+0x470>)
 8000fe0:	4413      	add	r3, r2
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fa0d 	bl	8000404 <__aeabi_i2d>
 8000fea:	a321      	add	r3, pc, #132	; (adr r3, 8001070 <Set_Location+0x468>)
 8000fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff0:	f7ff fa72 	bl	80004d8 <__aeabi_dmul>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	4629      	mov	r1, r5
 8000ffc:	f7ff f8b6 	bl	800016c <__adddf3>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4610      	mov	r0, r2
 8001006:	4619      	mov	r1, r3
 8001008:	f7ff fd3e 	bl	8000a88 <__aeabi_d2f>
 800100c:	4603      	mov	r3, r0
 800100e:	4a1b      	ldr	r2, [pc, #108]	; (800107c <Set_Location+0x474>)
 8001010:	6093      	str	r3, [r2, #8]
		Coord.T_hemisphere = GPGGA_Data[syc+25];
 8001012:	88bb      	ldrh	r3, [r7, #4]
 8001014:	3319      	adds	r3, #25
 8001016:	4a18      	ldr	r2, [pc, #96]	; (8001078 <Set_Location+0x470>)
 8001018:	5cd2      	ldrb	r2, [r2, r3]
 800101a:	4b18      	ldr	r3, [pc, #96]	; (800107c <Set_Location+0x474>)
 800101c:	731a      	strb	r2, [r3, #12]

		if(Coord.L_hemisphere == 'N' || Coord.L_hemisphere == 'S' && Coord.T_hemisphere == 'E'  || Coord.T_hemisphere == 'W')
 800101e:	4b17      	ldr	r3, [pc, #92]	; (800107c <Set_Location+0x474>)
 8001020:	791b      	ldrb	r3, [r3, #4]
 8001022:	2b4e      	cmp	r3, #78	; 0x4e
 8001024:	d00b      	beq.n	800103e <Set_Location+0x436>
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <Set_Location+0x474>)
 8001028:	791b      	ldrb	r3, [r3, #4]
 800102a:	2b53      	cmp	r3, #83	; 0x53
 800102c:	d103      	bne.n	8001036 <Set_Location+0x42e>
 800102e:	4b13      	ldr	r3, [pc, #76]	; (800107c <Set_Location+0x474>)
 8001030:	7b1b      	ldrb	r3, [r3, #12]
 8001032:	2b45      	cmp	r3, #69	; 0x45
 8001034:	d003      	beq.n	800103e <Set_Location+0x436>
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <Set_Location+0x474>)
 8001038:	7b1b      	ldrb	r3, [r3, #12]
 800103a:	2b57      	cmp	r3, #87	; 0x57
 800103c:	d103      	bne.n	8001046 <Set_Location+0x43e>
		{
			GPS_Connection_Stat = true;
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <Set_Location+0x478>)
 8001040:	2201      	movs	r2, #1
 8001042:	701a      	strb	r2, [r3, #0]
			Coord.longitude=0;
			GPS_Connection_Stat = false;
		}
	}

}
 8001044:	e00a      	b.n	800105c <Set_Location+0x454>
			Coord.latitude=0;
 8001046:	4b0d      	ldr	r3, [pc, #52]	; (800107c <Set_Location+0x474>)
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
			Coord.longitude=0;
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <Set_Location+0x474>)
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
			GPS_Connection_Stat = false;
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <Set_Location+0x478>)
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bdb0      	pop	{r4, r5, r7, pc}
 8001064:	f3af 8000 	nop.w
 8001068:	9abcaf48 	.word	0x9abcaf48
 800106c:	3e7ad7f2 	.word	0x3e7ad7f2
 8001070:	e2308c3a 	.word	0xe2308c3a
 8001074:	3e45798e 	.word	0x3e45798e
 8001078:	200002c4 	.word	0x200002c4
 800107c:	2000033c 	.word	0x2000033c
 8001080:	20000328 	.word	0x20000328

08001084 <Send_Location>:
void Send_Location()
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	//SIM800l_Send_Data(Coord.latitude,Coord.longitude);
	x=Coord.latitude;
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <Send_Location+0x1c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <Send_Location+0x20>)
 800108e:	6013      	str	r3, [r2, #0]
	y=Coord.longitude;
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <Send_Location+0x1c>)
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <Send_Location+0x24>)
 8001096:	6013      	str	r3, [r2, #0]
	SIM800l_Send_Location();
 8001098:	f000 f904 	bl	80012a4 <SIM800l_Send_Location>
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	2000033c 	.word	0x2000033c
 80010a4:	20000878 	.word	0x20000878
 80010a8:	20000874 	.word	0x20000874

080010ac <Get_GGA>:
	Reorder_data(Sp_finder(GPRMC),GPRMC);

}

void Get_GGA()//GLOBAL POSITIONING SYSTEM FIX DATA
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	//HAL_UART_Receive(&huart2,(uint8_t*)Buffer,500, 1000); //uart ile veri alınırken
	HAL_UART_DMAPause(&huart2);//DMA Pause
 80010b0:	480c      	ldr	r0, [pc, #48]	; (80010e4 <Get_GGA+0x38>)
 80010b2:	f002 fcf2 	bl	8003a9a <HAL_UART_DMAPause>
	memcpy(Buffer2,Buffer,500);
 80010b6:	4a0c      	ldr	r2, [pc, #48]	; (80010e8 <Get_GGA+0x3c>)
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <Get_GGA+0x40>)
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010c2:	461a      	mov	r2, r3
 80010c4:	f004 fb6b 	bl	800579e <memcpy>
	Reorder_data(Sp_finder(GPGGA),GPGGA);
 80010c8:	2002      	movs	r0, #2
 80010ca:	f000 f811 	bl	80010f0 <Sp_finder>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2102      	movs	r1, #2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f89a 	bl	800120c <Reorder_data>
	HAL_UART_DMAResume(&huart2);//DMA Resume
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <Get_GGA+0x38>)
 80010da:	f002 fd7a 	bl	8003bd2 <HAL_UART_DMAResume>

}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200003e0 	.word	0x200003e0
 80010e8:	2000067c 	.word	0x2000067c
 80010ec:	20000488 	.word	0x20000488

080010f0 <Sp_finder>:

uint16_t Sp_finder(uint8_t s_case)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]

	switch(s_case)
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	2b05      	cmp	r3, #5
 80010fe:	d87b      	bhi.n	80011f8 <Sp_finder+0x108>
 8001100:	a201      	add	r2, pc, #4	; (adr r2, 8001108 <Sp_finder+0x18>)
 8001102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001106:	bf00      	nop
 8001108:	08001121 	.word	0x08001121
 800110c:	080011f9 	.word	0x080011f9
 8001110:	0800118d 	.word	0x0800118d
 8001114:	080011f9 	.word	0x080011f9
 8001118:	080011f9 	.word	0x080011f9
 800111c:	080011f9 	.word	0x080011f9
	{

		case 0:  //GPRMC
			for(int i=0;i<500;i++)
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	e02d      	b.n	8001182 <Sp_finder+0x92>
			{
				if(Buffer2[i]== '$')
 8001126:	4a37      	ldr	r2, [pc, #220]	; (8001204 <Sp_finder+0x114>)
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4413      	add	r3, r2
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b24      	cmp	r3, #36	; 0x24
 8001130:	d124      	bne.n	800117c <Sp_finder+0x8c>
				{
					if(Buffer2[i+1]== 'G')
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	3301      	adds	r3, #1
 8001136:	4a33      	ldr	r2, [pc, #204]	; (8001204 <Sp_finder+0x114>)
 8001138:	5cd3      	ldrb	r3, [r2, r3]
 800113a:	2b47      	cmp	r3, #71	; 0x47
 800113c:	d11e      	bne.n	800117c <Sp_finder+0x8c>
					{
						if(Buffer2[i+2]== 'P')
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	3302      	adds	r3, #2
 8001142:	4a30      	ldr	r2, [pc, #192]	; (8001204 <Sp_finder+0x114>)
 8001144:	5cd3      	ldrb	r3, [r2, r3]
 8001146:	2b50      	cmp	r3, #80	; 0x50
 8001148:	d118      	bne.n	800117c <Sp_finder+0x8c>
						{
							if(Buffer2[i+3]== 'R')
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	3303      	adds	r3, #3
 800114e:	4a2d      	ldr	r2, [pc, #180]	; (8001204 <Sp_finder+0x114>)
 8001150:	5cd3      	ldrb	r3, [r2, r3]
 8001152:	2b52      	cmp	r3, #82	; 0x52
 8001154:	d112      	bne.n	800117c <Sp_finder+0x8c>
							{
								if(Buffer2[i+4]== 'M')
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	3304      	adds	r3, #4
 800115a:	4a2a      	ldr	r2, [pc, #168]	; (8001204 <Sp_finder+0x114>)
 800115c:	5cd3      	ldrb	r3, [r2, r3]
 800115e:	2b4d      	cmp	r3, #77	; 0x4d
 8001160:	d10c      	bne.n	800117c <Sp_finder+0x8c>
								{
									if(Buffer2[i+5]== 'C')
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	3305      	adds	r3, #5
 8001166:	4a27      	ldr	r2, [pc, #156]	; (8001204 <Sp_finder+0x114>)
 8001168:	5cd3      	ldrb	r3, [r2, r3]
 800116a:	2b43      	cmp	r3, #67	; 0x43
 800116c:	d106      	bne.n	800117c <Sp_finder+0x8c>
									{
										Strting_point=i;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	b29a      	uxth	r2, r3
 8001172:	4b25      	ldr	r3, [pc, #148]	; (8001208 <Sp_finder+0x118>)
 8001174:	801a      	strh	r2, [r3, #0]
										return (uint16_t)i;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	b29b      	uxth	r3, r3
 800117a:	e03e      	b.n	80011fa <Sp_finder+0x10a>
			for(int i=0;i<500;i++)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	3301      	adds	r3, #1
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001188:	dbcd      	blt.n	8001126 <Sp_finder+0x36>
							}
						}
					}
				}
			}
			break;
 800118a:	e036      	b.n	80011fa <Sp_finder+0x10a>

			return;
			break;

		case 2://GPGGA
			for(int i=0;i<500;i++)
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	e02d      	b.n	80011ee <Sp_finder+0xfe>
			{
				if(Buffer2[i]== '$')
 8001192:	4a1c      	ldr	r2, [pc, #112]	; (8001204 <Sp_finder+0x114>)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	4413      	add	r3, r2
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b24      	cmp	r3, #36	; 0x24
 800119c:	d124      	bne.n	80011e8 <Sp_finder+0xf8>
				{
					if(Buffer2[i+1]== 'G')
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	3301      	adds	r3, #1
 80011a2:	4a18      	ldr	r2, [pc, #96]	; (8001204 <Sp_finder+0x114>)
 80011a4:	5cd3      	ldrb	r3, [r2, r3]
 80011a6:	2b47      	cmp	r3, #71	; 0x47
 80011a8:	d11e      	bne.n	80011e8 <Sp_finder+0xf8>
					{
						if(Buffer2[i+2]== 'P')
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	3302      	adds	r3, #2
 80011ae:	4a15      	ldr	r2, [pc, #84]	; (8001204 <Sp_finder+0x114>)
 80011b0:	5cd3      	ldrb	r3, [r2, r3]
 80011b2:	2b50      	cmp	r3, #80	; 0x50
 80011b4:	d118      	bne.n	80011e8 <Sp_finder+0xf8>
						{
							if(Buffer2[i+3]== 'G')
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	3303      	adds	r3, #3
 80011ba:	4a12      	ldr	r2, [pc, #72]	; (8001204 <Sp_finder+0x114>)
 80011bc:	5cd3      	ldrb	r3, [r2, r3]
 80011be:	2b47      	cmp	r3, #71	; 0x47
 80011c0:	d112      	bne.n	80011e8 <Sp_finder+0xf8>
							{
								if(Buffer2[i+4]== 'G')
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	3304      	adds	r3, #4
 80011c6:	4a0f      	ldr	r2, [pc, #60]	; (8001204 <Sp_finder+0x114>)
 80011c8:	5cd3      	ldrb	r3, [r2, r3]
 80011ca:	2b47      	cmp	r3, #71	; 0x47
 80011cc:	d10c      	bne.n	80011e8 <Sp_finder+0xf8>
								{
									if(Buffer2[i+5]== 'A')
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	3305      	adds	r3, #5
 80011d2:	4a0c      	ldr	r2, [pc, #48]	; (8001204 <Sp_finder+0x114>)
 80011d4:	5cd3      	ldrb	r3, [r2, r3]
 80011d6:	2b41      	cmp	r3, #65	; 0x41
 80011d8:	d106      	bne.n	80011e8 <Sp_finder+0xf8>
									{
										Strting_point=i;
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <Sp_finder+0x118>)
 80011e0:	801a      	strh	r2, [r3, #0]
										return (uint16_t)i;
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	e008      	b.n	80011fa <Sp_finder+0x10a>
			for(int i=0;i<500;i++)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	3301      	adds	r3, #1
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011f4:	dbcd      	blt.n	8001192 <Sp_finder+0xa2>
							}
						}
					}
				}
			}
			return;
 80011f6:	e000      	b.n	80011fa <Sp_finder+0x10a>

			return;
			break;

		default:
			return;
 80011f8:	bf00      	nop
			break;

	}

}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	2000067c 	.word	0x2000067c
 8001208:	2000034c 	.word	0x2000034c

0800120c <Reorder_data>:

void Reorder_data(uint16_t sp,uint8_t s_case)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	460a      	mov	r2, r1
 8001216:	80fb      	strh	r3, [r7, #6]
 8001218:	4613      	mov	r3, r2
 800121a:	717b      	strb	r3, [r7, #5]
	uint16_t syc=0;
 800121c:	2300      	movs	r3, #0
 800121e:	81fb      	strh	r3, [r7, #14]


	while(Buffer2[sp] !='\n')//&& Buffer2[sp+1]!='\n')
 8001220:	e02e      	b.n	8001280 <Reorder_data+0x74>
	{
		sp++;
 8001222:	88fb      	ldrh	r3, [r7, #6]
 8001224:	3301      	adds	r3, #1
 8001226:	80fb      	strh	r3, [r7, #6]

		if(sp == 501) //500 ü aştıktan sonra while döngüsü sonsuza kadar gidiyor
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	f240 12f5 	movw	r2, #501	; 0x1f5
 800122e:	4293      	cmp	r3, r2
 8001230:	d101      	bne.n	8001236 <Reorder_data+0x2a>
		{
			sp=0;
 8001232:	2300      	movs	r3, #0
 8001234:	80fb      	strh	r3, [r7, #6]
		}
		switch(s_case)
 8001236:	797b      	ldrb	r3, [r7, #5]
 8001238:	2b05      	cmp	r3, #5
 800123a:	d820      	bhi.n	800127e <Reorder_data+0x72>
 800123c:	a201      	add	r2, pc, #4	; (adr r2, 8001244 <Reorder_data+0x38>)
 800123e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001242:	bf00      	nop
 8001244:	0800125d 	.word	0x0800125d
 8001248:	0800127f 	.word	0x0800127f
 800124c:	0800126b 	.word	0x0800126b
 8001250:	0800127f 	.word	0x0800127f
 8001254:	0800127f 	.word	0x0800127f
 8001258:	0800127f 	.word	0x0800127f
		{

			case 0:
				GPRMC_Data[syc]=Buffer2[sp];
 800125c:	88fa      	ldrh	r2, [r7, #6]
 800125e:	89fb      	ldrh	r3, [r7, #14]
 8001260:	490d      	ldr	r1, [pc, #52]	; (8001298 <Reorder_data+0x8c>)
 8001262:	5c89      	ldrb	r1, [r1, r2]
 8001264:	4a0d      	ldr	r2, [pc, #52]	; (800129c <Reorder_data+0x90>)
 8001266:	54d1      	strb	r1, [r2, r3]
				//syc++ koyulması gerekiyor !!!
				break;
 8001268:	e00a      	b.n	8001280 <Reorder_data+0x74>


				break;

			case 2:
				GPGGA_Data[syc]=Buffer2[sp];
 800126a:	88fa      	ldrh	r2, [r7, #6]
 800126c:	89fb      	ldrh	r3, [r7, #14]
 800126e:	490a      	ldr	r1, [pc, #40]	; (8001298 <Reorder_data+0x8c>)
 8001270:	5c89      	ldrb	r1, [r1, r2]
 8001272:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <Reorder_data+0x94>)
 8001274:	54d1      	strb	r1, [r2, r3]
				syc++;//while-switch arasından buraya getirildi
 8001276:	89fb      	ldrh	r3, [r7, #14]
 8001278:	3301      	adds	r3, #1
 800127a:	81fb      	strh	r3, [r7, #14]
				break;
 800127c:	e000      	b.n	8001280 <Reorder_data+0x74>

				break;

			default:

				break;
 800127e:	bf00      	nop
	while(Buffer2[sp] !='\n')//&& Buffer2[sp+1]!='\n')
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	4a05      	ldr	r2, [pc, #20]	; (8001298 <Reorder_data+0x8c>)
 8001284:	5cd3      	ldrb	r3, [r2, r3]
 8001286:	2b0a      	cmp	r3, #10
 8001288:	d1cb      	bne.n	8001222 <Reorder_data+0x16>

		}

	}

}
 800128a:	bf00      	nop
 800128c:	bf00      	nop
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	2000067c 	.word	0x2000067c
 800129c:	20000260 	.word	0x20000260
 80012a0:	200002c4 	.word	0x200002c4

080012a4 <SIM800l_Send_Location>:
	HAL_Delay(750);

}

void SIM800l_Send_Location()
{
 80012a4:	b5b0      	push	{r4, r5, r7, lr}
 80012a6:	b0ae      	sub	sp, #184	; 0xb8
 80012a8:	af02      	add	r7, sp, #8
	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT+CIFSR --
 80012aa:	4861      	ldr	r0, [pc, #388]	; (8001430 <SIM800l_Send_Location+0x18c>)
 80012ac:	f7fe ff50 	bl	8000150 <strlen>
 80012b0:	4603      	mov	r3, r0
 80012b2:	461a      	mov	r2, r3
 80012b4:	2100      	movs	r1, #0
 80012b6:	485e      	ldr	r0, [pc, #376]	; (8001430 <SIM800l_Send_Location+0x18c>)
 80012b8:	f004 f9e3 	bl	8005682 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command10,strlen(Command10),1000);
 80012bc:	485d      	ldr	r0, [pc, #372]	; (8001434 <SIM800l_Send_Location+0x190>)
 80012be:	f7fe ff47 	bl	8000150 <strlen>
 80012c2:	4603      	mov	r3, r0
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ca:	495a      	ldr	r1, [pc, #360]	; (8001434 <SIM800l_Send_Location+0x190>)
 80012cc:	485a      	ldr	r0, [pc, #360]	; (8001438 <SIM800l_Send_Location+0x194>)
 80012ce:	f002 fb17 	bl	8003900 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80012d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012d6:	f000 fd2b 	bl	8001d30 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT+CIPSPRT=0 --Seri port iletişimini devre dışı bırakır.Cihaz yalnızca AT komutları ile yönlendirilir.
 80012da:	4855      	ldr	r0, [pc, #340]	; (8001430 <SIM800l_Send_Location+0x18c>)
 80012dc:	f7fe ff38 	bl	8000150 <strlen>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461a      	mov	r2, r3
 80012e4:	2100      	movs	r1, #0
 80012e6:	4852      	ldr	r0, [pc, #328]	; (8001430 <SIM800l_Send_Location+0x18c>)
 80012e8:	f004 f9cb 	bl	8005682 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command11,strlen(Command11),1000);
 80012ec:	4853      	ldr	r0, [pc, #332]	; (800143c <SIM800l_Send_Location+0x198>)
 80012ee:	f7fe ff2f 	bl	8000150 <strlen>
 80012f2:	4603      	mov	r3, r0
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fa:	4950      	ldr	r1, [pc, #320]	; (800143c <SIM800l_Send_Location+0x198>)
 80012fc:	484e      	ldr	r0, [pc, #312]	; (8001438 <SIM800l_Send_Location+0x194>)
 80012fe:	f002 faff 	bl	8003900 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001302:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001306:	f000 fd13 	bl	8001d30 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",\"80\"\r\n
 800130a:	4849      	ldr	r0, [pc, #292]	; (8001430 <SIM800l_Send_Location+0x18c>)
 800130c:	f7fe ff20 	bl	8000150 <strlen>
 8001310:	4603      	mov	r3, r0
 8001312:	461a      	mov	r2, r3
 8001314:	2100      	movs	r1, #0
 8001316:	4846      	ldr	r0, [pc, #280]	; (8001430 <SIM800l_Send_Location+0x18c>)
 8001318:	f004 f9b3 	bl	8005682 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command12,strlen(Command12),1000);
 800131c:	4848      	ldr	r0, [pc, #288]	; (8001440 <SIM800l_Send_Location+0x19c>)
 800131e:	f7fe ff17 	bl	8000150 <strlen>
 8001322:	4603      	mov	r3, r0
 8001324:	b29a      	uxth	r2, r3
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	4945      	ldr	r1, [pc, #276]	; (8001440 <SIM800l_Send_Location+0x19c>)
 800132c:	4842      	ldr	r0, [pc, #264]	; (8001438 <SIM800l_Send_Location+0x194>)
 800132e:	f002 fae7 	bl	8003900 <HAL_UART_Transmit>
	HAL_Delay(1500);//
 8001332:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001336:	f000 fcfb 	bl	8001d30 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT+CIPSEND
 800133a:	483d      	ldr	r0, [pc, #244]	; (8001430 <SIM800l_Send_Location+0x18c>)
 800133c:	f7fe ff08 	bl	8000150 <strlen>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	2100      	movs	r1, #0
 8001346:	483a      	ldr	r0, [pc, #232]	; (8001430 <SIM800l_Send_Location+0x18c>)
 8001348:	f004 f99b 	bl	8005682 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command13,strlen(Command13),1000);
 800134c:	483d      	ldr	r0, [pc, #244]	; (8001444 <SIM800l_Send_Location+0x1a0>)
 800134e:	f7fe feff 	bl	8000150 <strlen>
 8001352:	4603      	mov	r3, r0
 8001354:	b29a      	uxth	r2, r3
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	493a      	ldr	r1, [pc, #232]	; (8001444 <SIM800l_Send_Location+0x1a0>)
 800135c:	4836      	ldr	r0, [pc, #216]	; (8001438 <SIM800l_Send_Location+0x194>)
 800135e:	f002 facf 	bl	8003900 <HAL_UART_Transmit>
	HAL_Delay(1500);
 8001362:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001366:	f000 fce3 	bl	8001d30 <HAL_Delay>

	char buffer[170];
	sprintf(buffer,"GET https://api.thingspeak.com/update?api_key=I7HHP47YNWI8PSM8&field1=%.4f&field2=%.4f\r\n",x,y);
 800136a:	4b37      	ldr	r3, [pc, #220]	; (8001448 <SIM800l_Send_Location+0x1a4>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff f85a 	bl	8000428 <__aeabi_f2d>
 8001374:	4604      	mov	r4, r0
 8001376:	460d      	mov	r5, r1
 8001378:	4b34      	ldr	r3, [pc, #208]	; (800144c <SIM800l_Send_Location+0x1a8>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f853 	bl	8000428 <__aeabi_f2d>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	1d38      	adds	r0, r7, #4
 8001388:	e9cd 2300 	strd	r2, r3, [sp]
 800138c:	4622      	mov	r2, r4
 800138e:	462b      	mov	r3, r5
 8001390:	492f      	ldr	r1, [pc, #188]	; (8001450 <SIM800l_Send_Location+0x1ac>)
 8001392:	f004 f913 	bl	80055bc <siprintf>


	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//
 8001396:	4826      	ldr	r0, [pc, #152]	; (8001430 <SIM800l_Send_Location+0x18c>)
 8001398:	f7fe feda 	bl	8000150 <strlen>
 800139c:	4603      	mov	r3, r0
 800139e:	461a      	mov	r2, r3
 80013a0:	2100      	movs	r1, #0
 80013a2:	4823      	ldr	r0, [pc, #140]	; (8001430 <SIM800l_Send_Location+0x18c>)
 80013a4:	f004 f96d 	bl	8005682 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)buffer,strlen(buffer),1000);
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7fe fed0 	bl	8000150 <strlen>
 80013b0:	4603      	mov	r3, r0
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	1d39      	adds	r1, r7, #4
 80013b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ba:	481f      	ldr	r0, [pc, #124]	; (8001438 <SIM800l_Send_Location+0x194>)
 80013bc:	f002 faa0 	bl	8003900 <HAL_UART_Transmit>
	HAL_Delay(1500);
 80013c0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80013c4:	f000 fcb4 	bl	8001d30 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//
 80013c8:	4819      	ldr	r0, [pc, #100]	; (8001430 <SIM800l_Send_Location+0x18c>)
 80013ca:	f7fe fec1 	bl	8000150 <strlen>
 80013ce:	4603      	mov	r3, r0
 80013d0:	461a      	mov	r2, r3
 80013d2:	2100      	movs	r1, #0
 80013d4:	4816      	ldr	r0, [pc, #88]	; (8001430 <SIM800l_Send_Location+0x18c>)
 80013d6:	f004 f954 	bl	8005682 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command15,strlen(Command15),1000);
 80013da:	481e      	ldr	r0, [pc, #120]	; (8001454 <SIM800l_Send_Location+0x1b0>)
 80013dc:	f7fe feb8 	bl	8000150 <strlen>
 80013e0:	4603      	mov	r3, r0
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e8:	491a      	ldr	r1, [pc, #104]	; (8001454 <SIM800l_Send_Location+0x1b0>)
 80013ea:	4813      	ldr	r0, [pc, #76]	; (8001438 <SIM800l_Send_Location+0x194>)
 80013ec:	f002 fa88 	bl	8003900 <HAL_UART_Transmit>
	HAL_Delay(1500);
 80013f0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80013f4:	f000 fc9c 	bl	8001d30 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//
 80013f8:	480d      	ldr	r0, [pc, #52]	; (8001430 <SIM800l_Send_Location+0x18c>)
 80013fa:	f7fe fea9 	bl	8000150 <strlen>
 80013fe:	4603      	mov	r3, r0
 8001400:	461a      	mov	r2, r3
 8001402:	2100      	movs	r1, #0
 8001404:	480a      	ldr	r0, [pc, #40]	; (8001430 <SIM800l_Send_Location+0x18c>)
 8001406:	f004 f93c 	bl	8005682 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command16,strlen(Command16),1000);
 800140a:	4813      	ldr	r0, [pc, #76]	; (8001458 <SIM800l_Send_Location+0x1b4>)
 800140c:	f7fe fea0 	bl	8000150 <strlen>
 8001410:	4603      	mov	r3, r0
 8001412:	b29a      	uxth	r2, r3
 8001414:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001418:	490f      	ldr	r1, [pc, #60]	; (8001458 <SIM800l_Send_Location+0x1b4>)
 800141a:	4807      	ldr	r0, [pc, #28]	; (8001438 <SIM800l_Send_Location+0x194>)
 800141c:	f002 fa70 	bl	8003900 <HAL_UART_Transmit>
	HAL_Delay(750);
 8001420:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001424:	f000 fc84 	bl	8001d30 <HAL_Delay>
}
 8001428:	bf00      	nop
 800142a:	37b0      	adds	r7, #176	; 0xb0
 800142c:	46bd      	mov	sp, r7
 800142e:	bdb0      	pop	{r4, r5, r7, pc}
 8001430:	2000046c 	.word	0x2000046c
 8001434:	20000000 	.word	0x20000000
 8001438:	20000398 	.word	0x20000398
 800143c:	2000000c 	.word	0x2000000c
 8001440:	2000001c 	.word	0x2000001c
 8001444:	2000004c 	.word	0x2000004c
 8001448:	20000878 	.word	0x20000878
 800144c:	20000874 	.word	0x20000874
 8001450:	080078bc 	.word	0x080078bc
 8001454:	2000005c 	.word	0x2000005c
 8001458:	20000060 	.word	0x20000060

0800145c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	//if(htim->Instance == htim1.Instance)
	if(htim == &htim1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d115      	bne.n	8001498 <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		HAL_GPIO_TogglePin(Blink_GPIO_Port,Blink_Pin);
 800146c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001470:	480c      	ldr	r0, [pc, #48]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001472:	f001 f9cd 	bl	8002810 <HAL_GPIO_TogglePin>



		tim_cntr++;
 8001476:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	3301      	adds	r3, #1
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001480:	701a      	strb	r2, [r3, #0]
		if(tim_cntr==3)//Her üç saniyede bir zaman ve konum bilgileri güncelleniyor
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b03      	cmp	r3, #3
 8001488:	d106      	bne.n	8001498 <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
			Set_Time();
 800148a:	f7ff fb4d 	bl	8000b28 <Set_Time>
			Set_Location();
 800148e:	f7ff fbbb 	bl	8000c08 <Set_Location>
			tim_cntr=0;
 8001492:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000350 	.word	0x20000350
 80014a4:	40011000 	.word	0x40011000
 80014a8:	20000870 	.word	0x20000870

080014ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
	{

	}
	HAL_UART_Receive_IT(&huart1, RxBuffer,20);
 80014b4:	2214      	movs	r2, #20
 80014b6:	4904      	ldr	r1, [pc, #16]	; (80014c8 <HAL_UART_RxCpltCallback+0x1c>)
 80014b8:	4804      	ldr	r0, [pc, #16]	; (80014cc <HAL_UART_RxCpltCallback+0x20>)
 80014ba:	f002 faa4 	bl	8003a06 <HAL_UART_Receive_IT>

}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2000046c 	.word	0x2000046c
 80014cc:	20000398 	.word	0x20000398

080014d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d4:	f000 fbca 	bl	8001c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d8:	f000 f82a 	bl	8001530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014dc:	f000 f932 	bl	8001744 <MX_GPIO_Init>
  MX_DMA_Init();
 80014e0:	f000 f912 	bl	8001708 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80014e4:	f000 f8bc 	bl	8001660 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80014e8:	f000 f868 	bl	80015bc <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80014ec:	f000 f8e2 	bl	80016b4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
 // SIM800_Init();

  HAL_UART_Receive_DMA(&huart2, Buffer, 500);
 80014f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80014f4:	4909      	ldr	r1, [pc, #36]	; (800151c <main+0x4c>)
 80014f6:	480a      	ldr	r0, [pc, #40]	; (8001520 <main+0x50>)
 80014f8:	f002 faaa 	bl	8003a50 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart1, RxBuffer,20);
 80014fc:	2214      	movs	r2, #20
 80014fe:	4909      	ldr	r1, [pc, #36]	; (8001524 <main+0x54>)
 8001500:	4809      	ldr	r0, [pc, #36]	; (8001528 <main+0x58>)
 8001502:	f002 fa80 	bl	8003a06 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8001506:	4809      	ldr	r0, [pc, #36]	; (800152c <main+0x5c>)
 8001508:	f001 fdfc 	bl	8003104 <HAL_TIM_Base_Start_IT>

    /* USER CODE BEGIN 3 */

	  //HAL_GPIO_TogglePin(Blink_GPIO_Port,Blink_Pin);

      HAL_Delay(2000);
 800150c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001510:	f000 fc0e 	bl	8001d30 <HAL_Delay>
      //test4();
	  //Send_Time();
      Send_Location();
 8001514:	f7ff fdb6 	bl	8001084 <Send_Location>
  {
 8001518:	e7f8      	b.n	800150c <main+0x3c>
 800151a:	bf00      	nop
 800151c:	20000488 	.word	0x20000488
 8001520:	200003e0 	.word	0x200003e0
 8001524:	2000046c 	.word	0x2000046c
 8001528:	20000398 	.word	0x20000398
 800152c:	20000350 	.word	0x20000350

08001530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b090      	sub	sp, #64	; 0x40
 8001534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001536:	f107 0318 	add.w	r3, r7, #24
 800153a:	2228      	movs	r2, #40	; 0x28
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f004 f89f 	bl	8005682 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
 8001550:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001552:	2301      	movs	r3, #1
 8001554:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001556:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800155a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001560:	2301      	movs	r3, #1
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001564:	2302      	movs	r3, #2
 8001566:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800156c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800156e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001572:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001574:	f107 0318 	add.w	r3, r7, #24
 8001578:	4618      	mov	r0, r3
 800157a:	f001 f963 	bl	8002844 <HAL_RCC_OscConfig>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001584:	f000 f92a 	bl	80017dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001588:	230f      	movs	r3, #15
 800158a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800158c:	2302      	movs	r3, #2
 800158e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001598:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	2102      	movs	r1, #2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f001 fbd0 	bl	8002d48 <HAL_RCC_ClockConfig>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80015ae:	f000 f915 	bl	80017dc <Error_Handler>
  }
}
 80015b2:	bf00      	nop
 80015b4:	3740      	adds	r7, #64	; 0x40
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015c2:	f107 0308 	add.w	r3, r7, #8
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d0:	463b      	mov	r3, r7
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015d8:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <MX_TIM1_Init+0x9c>)
 80015da:	4a20      	ldr	r2, [pc, #128]	; (800165c <MX_TIM1_Init+0xa0>)
 80015dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 80015de:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <MX_TIM1_Init+0x9c>)
 80015e0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80015e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e6:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <MX_TIM1_Init+0x9c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <MX_TIM1_Init+0x9c>)
 80015ee:	f242 720f 	movw	r2, #9999	; 0x270f
 80015f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f4:	4b18      	ldr	r3, [pc, #96]	; (8001658 <MX_TIM1_Init+0x9c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <MX_TIM1_Init+0x9c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001600:	4b15      	ldr	r3, [pc, #84]	; (8001658 <MX_TIM1_Init+0x9c>)
 8001602:	2200      	movs	r2, #0
 8001604:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001606:	4814      	ldr	r0, [pc, #80]	; (8001658 <MX_TIM1_Init+0x9c>)
 8001608:	f001 fd2c 	bl	8003064 <HAL_TIM_Base_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001612:	f000 f8e3 	bl	80017dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800161c:	f107 0308 	add.w	r3, r7, #8
 8001620:	4619      	mov	r1, r3
 8001622:	480d      	ldr	r0, [pc, #52]	; (8001658 <MX_TIM1_Init+0x9c>)
 8001624:	f001 fec8 	bl	80033b8 <HAL_TIM_ConfigClockSource>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800162e:	f000 f8d5 	bl	80017dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001632:	2300      	movs	r3, #0
 8001634:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800163a:	463b      	mov	r3, r7
 800163c:	4619      	mov	r1, r3
 800163e:	4806      	ldr	r0, [pc, #24]	; (8001658 <MX_TIM1_Init+0x9c>)
 8001640:	f002 f89e 	bl	8003780 <HAL_TIMEx_MasterConfigSynchronization>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800164a:	f000 f8c7 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000350 	.word	0x20000350
 800165c:	40012c00 	.word	0x40012c00

08001660 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001666:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <MX_USART1_UART_Init+0x50>)
 8001668:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 800166c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001670:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001686:	220c      	movs	r2, #12
 8001688:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001698:	f002 f8e2 	bl	8003860 <HAL_UART_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016a2:	f000 f89b 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000398 	.word	0x20000398
 80016b0:	40013800 	.word	0x40013800

080016b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016ba:	4a12      	ldr	r2, [pc, #72]	; (8001704 <MX_USART2_UART_Init+0x50>)
 80016bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016da:	220c      	movs	r2, #12
 80016dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016de:	4b08      	ldr	r3, [pc, #32]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016ec:	f002 f8b8 	bl	8003860 <HAL_UART_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016f6:	f000 f871 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200003e0 	.word	0x200003e0
 8001704:	40004400 	.word	0x40004400

08001708 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800170e:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <MX_DMA_Init+0x38>)
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	4a0b      	ldr	r2, [pc, #44]	; (8001740 <MX_DMA_Init+0x38>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6153      	str	r3, [r2, #20]
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <MX_DMA_Init+0x38>)
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2100      	movs	r1, #0
 800172a:	2010      	movs	r0, #16
 800172c:	f000 fbfb 	bl	8001f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001730:	2010      	movs	r0, #16
 8001732:	f000 fc14 	bl	8001f5e <HAL_NVIC_EnableIRQ>

}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40021000 	.word	0x40021000

08001744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174a:	f107 0310 	add.w	r3, r7, #16
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001758:	4b1e      	ldr	r3, [pc, #120]	; (80017d4 <MX_GPIO_Init+0x90>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	4a1d      	ldr	r2, [pc, #116]	; (80017d4 <MX_GPIO_Init+0x90>)
 800175e:	f043 0310 	orr.w	r3, r3, #16
 8001762:	6193      	str	r3, [r2, #24]
 8001764:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <MX_GPIO_Init+0x90>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f003 0310 	and.w	r3, r3, #16
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001770:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <MX_GPIO_Init+0x90>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4a17      	ldr	r2, [pc, #92]	; (80017d4 <MX_GPIO_Init+0x90>)
 8001776:	f043 0320 	orr.w	r3, r3, #32
 800177a:	6193      	str	r3, [r2, #24]
 800177c:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <MX_GPIO_Init+0x90>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0320 	and.w	r3, r3, #32
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <MX_GPIO_Init+0x90>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	4a11      	ldr	r2, [pc, #68]	; (80017d4 <MX_GPIO_Init+0x90>)
 800178e:	f043 0304 	orr.w	r3, r3, #4
 8001792:	6193      	str	r3, [r2, #24]
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <MX_GPIO_Init+0x90>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Blink_GPIO_Port, Blink_Pin, GPIO_PIN_RESET);
 80017a0:	2200      	movs	r2, #0
 80017a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017a6:	480c      	ldr	r0, [pc, #48]	; (80017d8 <MX_GPIO_Init+0x94>)
 80017a8:	f001 f81a 	bl	80027e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blink_Pin */
  GPIO_InitStruct.Pin = Blink_Pin;
 80017ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b2:	2301      	movs	r3, #1
 80017b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2302      	movs	r3, #2
 80017bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Blink_GPIO_Port, &GPIO_InitStruct);
 80017be:	f107 0310 	add.w	r3, r7, #16
 80017c2:	4619      	mov	r1, r3
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <MX_GPIO_Init+0x94>)
 80017c6:	f000 fe87 	bl	80024d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017ca:	bf00      	nop
 80017cc:	3720      	adds	r7, #32
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40011000 	.word	0x40011000

080017dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e0:	b672      	cpsid	i
}
 80017e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <Error_Handler+0x8>
	...

080017e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <HAL_MspInit+0x5c>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	4a14      	ldr	r2, [pc, #80]	; (8001844 <HAL_MspInit+0x5c>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6193      	str	r3, [r2, #24]
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_MspInit+0x5c>)
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001806:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <HAL_MspInit+0x5c>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	4a0e      	ldr	r2, [pc, #56]	; (8001844 <HAL_MspInit+0x5c>)
 800180c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001810:	61d3      	str	r3, [r2, #28]
 8001812:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <HAL_MspInit+0x5c>)
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800181e:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <HAL_MspInit+0x60>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	4a04      	ldr	r2, [pc, #16]	; (8001848 <HAL_MspInit+0x60>)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183a:	bf00      	nop
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr
 8001844:	40021000 	.word	0x40021000
 8001848:	40010000 	.word	0x40010000

0800184c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0d      	ldr	r2, [pc, #52]	; (8001890 <HAL_TIM_Base_MspInit+0x44>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d113      	bne.n	8001886 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800185e:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <HAL_TIM_Base_MspInit+0x48>)
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	4a0c      	ldr	r2, [pc, #48]	; (8001894 <HAL_TIM_Base_MspInit+0x48>)
 8001864:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001868:	6193      	str	r3, [r2, #24]
 800186a:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <HAL_TIM_Base_MspInit+0x48>)
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 1, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2101      	movs	r1, #1
 800187a:	2019      	movs	r0, #25
 800187c:	f000 fb53 	bl	8001f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001880:	2019      	movs	r0, #25
 8001882:	f000 fb6c 	bl	8001f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001886:	bf00      	nop
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40012c00 	.word	0x40012c00
 8001894:	40021000 	.word	0x40021000

08001898 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	; 0x28
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 0318 	add.w	r3, r7, #24
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a4f      	ldr	r2, [pc, #316]	; (80019f0 <HAL_UART_MspInit+0x158>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d13a      	bne.n	800192e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018b8:	4b4e      	ldr	r3, [pc, #312]	; (80019f4 <HAL_UART_MspInit+0x15c>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	4a4d      	ldr	r2, [pc, #308]	; (80019f4 <HAL_UART_MspInit+0x15c>)
 80018be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c2:	6193      	str	r3, [r2, #24]
 80018c4:	4b4b      	ldr	r3, [pc, #300]	; (80019f4 <HAL_UART_MspInit+0x15c>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d0:	4b48      	ldr	r3, [pc, #288]	; (80019f4 <HAL_UART_MspInit+0x15c>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	4a47      	ldr	r2, [pc, #284]	; (80019f4 <HAL_UART_MspInit+0x15c>)
 80018d6:	f043 0304 	orr.w	r3, r3, #4
 80018da:	6193      	str	r3, [r2, #24]
 80018dc:	4b45      	ldr	r3, [pc, #276]	; (80019f4 <HAL_UART_MspInit+0x15c>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018f2:	2303      	movs	r3, #3
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f6:	f107 0318 	add.w	r3, r7, #24
 80018fa:	4619      	mov	r1, r3
 80018fc:	483e      	ldr	r0, [pc, #248]	; (80019f8 <HAL_UART_MspInit+0x160>)
 80018fe:	f000 fdeb 	bl	80024d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001902:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001910:	f107 0318 	add.w	r3, r7, #24
 8001914:	4619      	mov	r1, r3
 8001916:	4838      	ldr	r0, [pc, #224]	; (80019f8 <HAL_UART_MspInit+0x160>)
 8001918:	f000 fdde 	bl	80024d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800191c:	2200      	movs	r2, #0
 800191e:	2100      	movs	r1, #0
 8001920:	2025      	movs	r0, #37	; 0x25
 8001922:	f000 fb00 	bl	8001f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001926:	2025      	movs	r0, #37	; 0x25
 8001928:	f000 fb19 	bl	8001f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800192c:	e05b      	b.n	80019e6 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a32      	ldr	r2, [pc, #200]	; (80019fc <HAL_UART_MspInit+0x164>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d156      	bne.n	80019e6 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001938:	4b2e      	ldr	r3, [pc, #184]	; (80019f4 <HAL_UART_MspInit+0x15c>)
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	4a2d      	ldr	r2, [pc, #180]	; (80019f4 <HAL_UART_MspInit+0x15c>)
 800193e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001942:	61d3      	str	r3, [r2, #28]
 8001944:	4b2b      	ldr	r3, [pc, #172]	; (80019f4 <HAL_UART_MspInit+0x15c>)
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001950:	4b28      	ldr	r3, [pc, #160]	; (80019f4 <HAL_UART_MspInit+0x15c>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	4a27      	ldr	r2, [pc, #156]	; (80019f4 <HAL_UART_MspInit+0x15c>)
 8001956:	f043 0304 	orr.w	r3, r3, #4
 800195a:	6193      	str	r3, [r2, #24]
 800195c:	4b25      	ldr	r3, [pc, #148]	; (80019f4 <HAL_UART_MspInit+0x15c>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001968:	2304      	movs	r3, #4
 800196a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001970:	2303      	movs	r3, #3
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001974:	f107 0318 	add.w	r3, r7, #24
 8001978:	4619      	mov	r1, r3
 800197a:	481f      	ldr	r0, [pc, #124]	; (80019f8 <HAL_UART_MspInit+0x160>)
 800197c:	f000 fdac 	bl	80024d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001980:	2308      	movs	r3, #8
 8001982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198c:	f107 0318 	add.w	r3, r7, #24
 8001990:	4619      	mov	r1, r3
 8001992:	4819      	ldr	r0, [pc, #100]	; (80019f8 <HAL_UART_MspInit+0x160>)
 8001994:	f000 fda0 	bl	80024d8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001998:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <HAL_UART_MspInit+0x168>)
 800199a:	4a1a      	ldr	r2, [pc, #104]	; (8001a04 <HAL_UART_MspInit+0x16c>)
 800199c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800199e:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <HAL_UART_MspInit+0x168>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a4:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <HAL_UART_MspInit+0x168>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <HAL_UART_MspInit+0x168>)
 80019ac:	2280      	movs	r2, #128	; 0x80
 80019ae:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019b0:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <HAL_UART_MspInit+0x168>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019b6:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_UART_MspInit+0x168>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80019bc:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <HAL_UART_MspInit+0x168>)
 80019be:	2220      	movs	r2, #32
 80019c0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80019c2:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <HAL_UART_MspInit+0x168>)
 80019c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019c8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80019ca:	480d      	ldr	r0, [pc, #52]	; (8001a00 <HAL_UART_MspInit+0x168>)
 80019cc:	f000 fae2 	bl	8001f94 <HAL_DMA_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_UART_MspInit+0x142>
      Error_Handler();
 80019d6:	f7ff ff01 	bl	80017dc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a08      	ldr	r2, [pc, #32]	; (8001a00 <HAL_UART_MspInit+0x168>)
 80019de:	63da      	str	r2, [r3, #60]	; 0x3c
 80019e0:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <HAL_UART_MspInit+0x168>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6253      	str	r3, [r2, #36]	; 0x24
}
 80019e6:	bf00      	nop
 80019e8:	3728      	adds	r7, #40	; 0x28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40013800 	.word	0x40013800
 80019f4:	40021000 	.word	0x40021000
 80019f8:	40010800 	.word	0x40010800
 80019fc:	40004400 	.word	0x40004400
 8001a00:	20000428 	.word	0x20000428
 8001a04:	4002006c 	.word	0x4002006c

08001a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <NMI_Handler+0x4>

08001a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <HardFault_Handler+0x4>

08001a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <MemManage_Handler+0x4>

08001a1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a1e:	e7fe      	b.n	8001a1e <BusFault_Handler+0x4>

08001a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <UsageFault_Handler+0x4>

08001a26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr

08001a32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr

08001a3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr

08001a4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a4e:	f000 f953 	bl	8001cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001a5c:	4802      	ldr	r0, [pc, #8]	; (8001a68 <DMA1_Channel6_IRQHandler+0x10>)
 8001a5e:	f000 fc07 	bl	8002270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000428 	.word	0x20000428

08001a6c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a70:	4802      	ldr	r0, [pc, #8]	; (8001a7c <TIM1_UP_IRQHandler+0x10>)
 8001a72:	f001 fb99 	bl	80031a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000350 	.word	0x20000350

08001a80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <USART1_IRQHandler+0x10>)
 8001a86:	f002 f931 	bl	8003cec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000398 	.word	0x20000398

08001a94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return 1;
 8001a98:	2301      	movs	r3, #1
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr

08001aa2 <_kill>:

int _kill(int pid, int sig)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001aac:	f003 fe3c 	bl	8005728 <__errno>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2216      	movs	r2, #22
 8001ab4:	601a      	str	r2, [r3, #0]
  return -1;
 8001ab6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <_exit>:

void _exit (int status)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001aca:	f04f 31ff 	mov.w	r1, #4294967295
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff ffe7 	bl	8001aa2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ad4:	e7fe      	b.n	8001ad4 <_exit+0x12>

08001ad6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	60f8      	str	r0, [r7, #12]
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	e00a      	b.n	8001afe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ae8:	f3af 8000 	nop.w
 8001aec:	4601      	mov	r1, r0
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	1c5a      	adds	r2, r3, #1
 8001af2:	60ba      	str	r2, [r7, #8]
 8001af4:	b2ca      	uxtb	r2, r1
 8001af6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	3301      	adds	r3, #1
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	dbf0      	blt.n	8001ae8 <_read+0x12>
  }

  return len;
 8001b06:	687b      	ldr	r3, [r7, #4]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	e009      	b.n	8001b36 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	60ba      	str	r2, [r7, #8]
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	3301      	adds	r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	dbf1      	blt.n	8001b22 <_write+0x12>
  }
  return len;
 8001b3e:	687b      	ldr	r3, [r7, #4]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <_close>:

int _close(int file)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr

08001b5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b6e:	605a      	str	r2, [r3, #4]
  return 0;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <_isatty>:

int _isatty(int file)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b84:	2301      	movs	r3, #1
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb0:	4a14      	ldr	r2, [pc, #80]	; (8001c04 <_sbrk+0x5c>)
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <_sbrk+0x60>)
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bbc:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <_sbrk+0x64>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d102      	bne.n	8001bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <_sbrk+0x64>)
 8001bc6:	4a12      	ldr	r2, [pc, #72]	; (8001c10 <_sbrk+0x68>)
 8001bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <_sbrk+0x64>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d207      	bcs.n	8001be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bd8:	f003 fda6 	bl	8005728 <__errno>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	220c      	movs	r2, #12
 8001be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001be2:	f04f 33ff 	mov.w	r3, #4294967295
 8001be6:	e009      	b.n	8001bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <_sbrk+0x64>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bee:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <_sbrk+0x64>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	4a05      	ldr	r2, [pc, #20]	; (8001c0c <_sbrk+0x64>)
 8001bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20005000 	.word	0x20005000
 8001c08:	00000400 	.word	0x00000400
 8001c0c:	2000087c 	.word	0x2000087c
 8001c10:	200009d0 	.word	0x200009d0

08001c14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c20:	f7ff fff8 	bl	8001c14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c24:	480b      	ldr	r0, [pc, #44]	; (8001c54 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c26:	490c      	ldr	r1, [pc, #48]	; (8001c58 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c28:	4a0c      	ldr	r2, [pc, #48]	; (8001c5c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c2c:	e002      	b.n	8001c34 <LoopCopyDataInit>

08001c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c32:	3304      	adds	r3, #4

08001c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c38:	d3f9      	bcc.n	8001c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c3a:	4a09      	ldr	r2, [pc, #36]	; (8001c60 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c3c:	4c09      	ldr	r4, [pc, #36]	; (8001c64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c40:	e001      	b.n	8001c46 <LoopFillZerobss>

08001c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c44:	3204      	adds	r2, #4

08001c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c48:	d3fb      	bcc.n	8001c42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c4a:	f003 fd73 	bl	8005734 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c4e:	f7ff fc3f 	bl	80014d0 <main>
  bx lr
 8001c52:	4770      	bx	lr
  ldr r0, =_sdata
 8001c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c58:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8001c5c:	08007cbc 	.word	0x08007cbc
  ldr r2, =_sbss
 8001c60:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8001c64:	200009d0 	.word	0x200009d0

08001c68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c68:	e7fe      	b.n	8001c68 <ADC1_2_IRQHandler>
	...

08001c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <HAL_Init+0x28>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a07      	ldr	r2, [pc, #28]	; (8001c94 <HAL_Init+0x28>)
 8001c76:	f043 0310 	orr.w	r3, r3, #16
 8001c7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	f000 f947 	bl	8001f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c82:	200f      	movs	r0, #15
 8001c84:	f000 f808 	bl	8001c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c88:	f7ff fdae 	bl	80017e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40022000 	.word	0x40022000

08001c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ca0:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_InitTick+0x54>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <HAL_InitTick+0x58>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 f95f 	bl	8001f7a <HAL_SYSTICK_Config>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e00e      	b.n	8001ce4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b0f      	cmp	r3, #15
 8001cca:	d80a      	bhi.n	8001ce2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd4:	f000 f927 	bl	8001f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cd8:	4a06      	ldr	r2, [pc, #24]	; (8001cf4 <HAL_InitTick+0x5c>)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	e000      	b.n	8001ce4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000070 	.word	0x20000070
 8001cf0:	20000078 	.word	0x20000078
 8001cf4:	20000074 	.word	0x20000074

08001cf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cfc:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <HAL_IncTick+0x1c>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <HAL_IncTick+0x20>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4413      	add	r3, r2
 8001d08:	4a03      	ldr	r2, [pc, #12]	; (8001d18 <HAL_IncTick+0x20>)
 8001d0a:	6013      	str	r3, [r2, #0]
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr
 8001d14:	20000078 	.word	0x20000078
 8001d18:	20000880 	.word	0x20000880

08001d1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d20:	4b02      	ldr	r3, [pc, #8]	; (8001d2c <HAL_GetTick+0x10>)
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr
 8001d2c:	20000880 	.word	0x20000880

08001d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d38:	f7ff fff0 	bl	8001d1c <HAL_GetTick>
 8001d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d48:	d005      	beq.n	8001d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <HAL_Delay+0x44>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4413      	add	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d56:	bf00      	nop
 8001d58:	f7ff ffe0 	bl	8001d1c <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d8f7      	bhi.n	8001d58 <HAL_Delay+0x28>
  {
  }
}
 8001d68:	bf00      	nop
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000078 	.word	0x20000078

08001d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d94:	4013      	ands	r3, r2
 8001d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001daa:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	60d3      	str	r3, [r2, #12]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	0a1b      	lsrs	r3, r3, #8
 8001dca:	f003 0307 	and.w	r3, r3, #7
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	db0b      	blt.n	8001e06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	f003 021f 	and.w	r2, r3, #31
 8001df4:	4906      	ldr	r1, [pc, #24]	; (8001e10 <__NVIC_EnableIRQ+0x34>)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	e000e100 	.word	0xe000e100

08001e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	6039      	str	r1, [r7, #0]
 8001e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	db0a      	blt.n	8001e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	490c      	ldr	r1, [pc, #48]	; (8001e60 <__NVIC_SetPriority+0x4c>)
 8001e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e32:	0112      	lsls	r2, r2, #4
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	440b      	add	r3, r1
 8001e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e3c:	e00a      	b.n	8001e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	4908      	ldr	r1, [pc, #32]	; (8001e64 <__NVIC_SetPriority+0x50>)
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	3b04      	subs	r3, #4
 8001e4c:	0112      	lsls	r2, r2, #4
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	440b      	add	r3, r1
 8001e52:	761a      	strb	r2, [r3, #24]
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000e100 	.word	0xe000e100
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b089      	sub	sp, #36	; 0x24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f1c3 0307 	rsb	r3, r3, #7
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	bf28      	it	cs
 8001e86:	2304      	movcs	r3, #4
 8001e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	2b06      	cmp	r3, #6
 8001e90:	d902      	bls.n	8001e98 <NVIC_EncodePriority+0x30>
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3b03      	subs	r3, #3
 8001e96:	e000      	b.n	8001e9a <NVIC_EncodePriority+0x32>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43da      	mvns	r2, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	401a      	ands	r2, r3
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eba:	43d9      	mvns	r1, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec0:	4313      	orrs	r3, r2
         );
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3724      	adds	r7, #36	; 0x24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001edc:	d301      	bcc.n	8001ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e00f      	b.n	8001f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <SysTick_Config+0x40>)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eea:	210f      	movs	r1, #15
 8001eec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef0:	f7ff ff90 	bl	8001e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <SysTick_Config+0x40>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001efa:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <SysTick_Config+0x40>)
 8001efc:	2207      	movs	r2, #7
 8001efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	e000e010 	.word	0xe000e010

08001f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff ff2d 	bl	8001d78 <__NVIC_SetPriorityGrouping>
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b086      	sub	sp, #24
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	607a      	str	r2, [r7, #4]
 8001f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f38:	f7ff ff42 	bl	8001dc0 <__NVIC_GetPriorityGrouping>
 8001f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68b9      	ldr	r1, [r7, #8]
 8001f42:	6978      	ldr	r0, [r7, #20]
 8001f44:	f7ff ff90 	bl	8001e68 <NVIC_EncodePriority>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff ff5f 	bl	8001e14 <__NVIC_SetPriority>
}
 8001f56:	bf00      	nop
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	4603      	mov	r3, r0
 8001f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff35 	bl	8001ddc <__NVIC_EnableIRQ>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff ffa2 	bl	8001ecc <SysTick_Config>
 8001f88:	4603      	mov	r3, r0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
	...

08001f94 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e043      	b.n	8002032 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4b22      	ldr	r3, [pc, #136]	; (800203c <HAL_DMA_Init+0xa8>)
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4a22      	ldr	r2, [pc, #136]	; (8002040 <HAL_DMA_Init+0xac>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	091b      	lsrs	r3, r3, #4
 8001fbc:	009a      	lsls	r2, r3, #2
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a1f      	ldr	r2, [pc, #124]	; (8002044 <HAL_DMA_Init+0xb0>)
 8001fc6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001fde:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001fe2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001fec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002004:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4313      	orrs	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr
 800203c:	bffdfff8 	.word	0xbffdfff8
 8002040:	cccccccd 	.word	0xcccccccd
 8002044:	40020000 	.word	0x40020000

08002048 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
 8002054:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <HAL_DMA_Start_IT+0x20>
 8002064:	2302      	movs	r3, #2
 8002066:	e04b      	b.n	8002100 <HAL_DMA_Start_IT+0xb8>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b01      	cmp	r3, #1
 800207a:	d13a      	bne.n	80020f2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2202      	movs	r2, #2
 8002080:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 0201 	bic.w	r2, r2, #1
 8002098:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	68b9      	ldr	r1, [r7, #8]
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 f9eb 	bl	800247c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d008      	beq.n	80020c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f042 020e 	orr.w	r2, r2, #14
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	e00f      	b.n	80020e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0204 	bic.w	r2, r2, #4
 80020ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 020a 	orr.w	r2, r2, #10
 80020de:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0201 	orr.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	e005      	b.n	80020fe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80020fa:	2302      	movs	r3, #2
 80020fc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80020fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d008      	beq.n	8002132 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2204      	movs	r2, #4
 8002124:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e020      	b.n	8002174 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 020e 	bic.w	r2, r2, #14
 8002140:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0201 	bic.w	r2, r2, #1
 8002150:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215a:	2101      	movs	r1, #1
 800215c:	fa01 f202 	lsl.w	r2, r1, r2
 8002160:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002172:	7bfb      	ldrb	r3, [r7, #15]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr
	...

08002180 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d005      	beq.n	80021a4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2204      	movs	r2, #4
 800219c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	73fb      	strb	r3, [r7, #15]
 80021a2:	e051      	b.n	8002248 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 020e 	bic.w	r2, r2, #14
 80021b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0201 	bic.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a22      	ldr	r2, [pc, #136]	; (8002254 <HAL_DMA_Abort_IT+0xd4>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d029      	beq.n	8002222 <HAL_DMA_Abort_IT+0xa2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a21      	ldr	r2, [pc, #132]	; (8002258 <HAL_DMA_Abort_IT+0xd8>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d022      	beq.n	800221e <HAL_DMA_Abort_IT+0x9e>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a1f      	ldr	r2, [pc, #124]	; (800225c <HAL_DMA_Abort_IT+0xdc>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d01a      	beq.n	8002218 <HAL_DMA_Abort_IT+0x98>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a1e      	ldr	r2, [pc, #120]	; (8002260 <HAL_DMA_Abort_IT+0xe0>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d012      	beq.n	8002212 <HAL_DMA_Abort_IT+0x92>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a1c      	ldr	r2, [pc, #112]	; (8002264 <HAL_DMA_Abort_IT+0xe4>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d00a      	beq.n	800220c <HAL_DMA_Abort_IT+0x8c>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a1b      	ldr	r2, [pc, #108]	; (8002268 <HAL_DMA_Abort_IT+0xe8>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d102      	bne.n	8002206 <HAL_DMA_Abort_IT+0x86>
 8002200:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002204:	e00e      	b.n	8002224 <HAL_DMA_Abort_IT+0xa4>
 8002206:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800220a:	e00b      	b.n	8002224 <HAL_DMA_Abort_IT+0xa4>
 800220c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002210:	e008      	b.n	8002224 <HAL_DMA_Abort_IT+0xa4>
 8002212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002216:	e005      	b.n	8002224 <HAL_DMA_Abort_IT+0xa4>
 8002218:	f44f 7380 	mov.w	r3, #256	; 0x100
 800221c:	e002      	b.n	8002224 <HAL_DMA_Abort_IT+0xa4>
 800221e:	2310      	movs	r3, #16
 8002220:	e000      	b.n	8002224 <HAL_DMA_Abort_IT+0xa4>
 8002222:	2301      	movs	r3, #1
 8002224:	4a11      	ldr	r2, [pc, #68]	; (800226c <HAL_DMA_Abort_IT+0xec>)
 8002226:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	4798      	blx	r3
    } 
  }
  return status;
 8002248:	7bfb      	ldrb	r3, [r7, #15]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40020008 	.word	0x40020008
 8002258:	4002001c 	.word	0x4002001c
 800225c:	40020030 	.word	0x40020030
 8002260:	40020044 	.word	0x40020044
 8002264:	40020058 	.word	0x40020058
 8002268:	4002006c 	.word	0x4002006c
 800226c:	40020000 	.word	0x40020000

08002270 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	2204      	movs	r2, #4
 800228e:	409a      	lsls	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4013      	ands	r3, r2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d04f      	beq.n	8002338 <HAL_DMA_IRQHandler+0xc8>
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d04a      	beq.n	8002338 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0320 	and.w	r3, r3, #32
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d107      	bne.n	80022c0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0204 	bic.w	r2, r2, #4
 80022be:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a66      	ldr	r2, [pc, #408]	; (8002460 <HAL_DMA_IRQHandler+0x1f0>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d029      	beq.n	800231e <HAL_DMA_IRQHandler+0xae>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a65      	ldr	r2, [pc, #404]	; (8002464 <HAL_DMA_IRQHandler+0x1f4>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d022      	beq.n	800231a <HAL_DMA_IRQHandler+0xaa>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a63      	ldr	r2, [pc, #396]	; (8002468 <HAL_DMA_IRQHandler+0x1f8>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d01a      	beq.n	8002314 <HAL_DMA_IRQHandler+0xa4>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a62      	ldr	r2, [pc, #392]	; (800246c <HAL_DMA_IRQHandler+0x1fc>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d012      	beq.n	800230e <HAL_DMA_IRQHandler+0x9e>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a60      	ldr	r2, [pc, #384]	; (8002470 <HAL_DMA_IRQHandler+0x200>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d00a      	beq.n	8002308 <HAL_DMA_IRQHandler+0x98>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a5f      	ldr	r2, [pc, #380]	; (8002474 <HAL_DMA_IRQHandler+0x204>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d102      	bne.n	8002302 <HAL_DMA_IRQHandler+0x92>
 80022fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002300:	e00e      	b.n	8002320 <HAL_DMA_IRQHandler+0xb0>
 8002302:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002306:	e00b      	b.n	8002320 <HAL_DMA_IRQHandler+0xb0>
 8002308:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800230c:	e008      	b.n	8002320 <HAL_DMA_IRQHandler+0xb0>
 800230e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002312:	e005      	b.n	8002320 <HAL_DMA_IRQHandler+0xb0>
 8002314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002318:	e002      	b.n	8002320 <HAL_DMA_IRQHandler+0xb0>
 800231a:	2340      	movs	r3, #64	; 0x40
 800231c:	e000      	b.n	8002320 <HAL_DMA_IRQHandler+0xb0>
 800231e:	2304      	movs	r3, #4
 8002320:	4a55      	ldr	r2, [pc, #340]	; (8002478 <HAL_DMA_IRQHandler+0x208>)
 8002322:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 8094 	beq.w	8002456 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002336:	e08e      	b.n	8002456 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	2202      	movs	r2, #2
 800233e:	409a      	lsls	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4013      	ands	r3, r2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d056      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x186>
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d051      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0320 	and.w	r3, r3, #32
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10b      	bne.n	8002378 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 020a 	bic.w	r2, r2, #10
 800236e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a38      	ldr	r2, [pc, #224]	; (8002460 <HAL_DMA_IRQHandler+0x1f0>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d029      	beq.n	80023d6 <HAL_DMA_IRQHandler+0x166>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a37      	ldr	r2, [pc, #220]	; (8002464 <HAL_DMA_IRQHandler+0x1f4>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d022      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x162>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a35      	ldr	r2, [pc, #212]	; (8002468 <HAL_DMA_IRQHandler+0x1f8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d01a      	beq.n	80023cc <HAL_DMA_IRQHandler+0x15c>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a34      	ldr	r2, [pc, #208]	; (800246c <HAL_DMA_IRQHandler+0x1fc>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d012      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x156>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a32      	ldr	r2, [pc, #200]	; (8002470 <HAL_DMA_IRQHandler+0x200>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d00a      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x150>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a31      	ldr	r2, [pc, #196]	; (8002474 <HAL_DMA_IRQHandler+0x204>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d102      	bne.n	80023ba <HAL_DMA_IRQHandler+0x14a>
 80023b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023b8:	e00e      	b.n	80023d8 <HAL_DMA_IRQHandler+0x168>
 80023ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023be:	e00b      	b.n	80023d8 <HAL_DMA_IRQHandler+0x168>
 80023c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023c4:	e008      	b.n	80023d8 <HAL_DMA_IRQHandler+0x168>
 80023c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023ca:	e005      	b.n	80023d8 <HAL_DMA_IRQHandler+0x168>
 80023cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023d0:	e002      	b.n	80023d8 <HAL_DMA_IRQHandler+0x168>
 80023d2:	2320      	movs	r3, #32
 80023d4:	e000      	b.n	80023d8 <HAL_DMA_IRQHandler+0x168>
 80023d6:	2302      	movs	r3, #2
 80023d8:	4a27      	ldr	r2, [pc, #156]	; (8002478 <HAL_DMA_IRQHandler+0x208>)
 80023da:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d034      	beq.n	8002456 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80023f4:	e02f      	b.n	8002456 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	2208      	movs	r2, #8
 80023fc:	409a      	lsls	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4013      	ands	r3, r2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d028      	beq.n	8002458 <HAL_DMA_IRQHandler+0x1e8>
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	f003 0308 	and.w	r3, r3, #8
 800240c:	2b00      	cmp	r3, #0
 800240e:	d023      	beq.n	8002458 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 020e 	bic.w	r2, r2, #14
 800241e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002428:	2101      	movs	r1, #1
 800242a:	fa01 f202 	lsl.w	r2, r1, r2
 800242e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	2b00      	cmp	r3, #0
 800244c:	d004      	beq.n	8002458 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	4798      	blx	r3
    }
  }
  return;
 8002456:	bf00      	nop
 8002458:	bf00      	nop
}
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40020008 	.word	0x40020008
 8002464:	4002001c 	.word	0x4002001c
 8002468:	40020030 	.word	0x40020030
 800246c:	40020044 	.word	0x40020044
 8002470:	40020058 	.word	0x40020058
 8002474:	4002006c 	.word	0x4002006c
 8002478:	40020000 	.word	0x40020000

0800247c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
 8002488:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002492:	2101      	movs	r1, #1
 8002494:	fa01 f202 	lsl.w	r2, r1, r2
 8002498:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b10      	cmp	r3, #16
 80024a8:	d108      	bne.n	80024bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80024ba:	e007      	b.n	80024cc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	60da      	str	r2, [r3, #12]
}
 80024cc:	bf00      	nop
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr
	...

080024d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d8:	b480      	push	{r7}
 80024da:	b08b      	sub	sp, #44	; 0x2c
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024e2:	2300      	movs	r3, #0
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024e6:	2300      	movs	r3, #0
 80024e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ea:	e169      	b.n	80027c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024ec:	2201      	movs	r2, #1
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	429a      	cmp	r2, r3
 8002506:	f040 8158 	bne.w	80027ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4a9a      	ldr	r2, [pc, #616]	; (8002778 <HAL_GPIO_Init+0x2a0>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d05e      	beq.n	80025d2 <HAL_GPIO_Init+0xfa>
 8002514:	4a98      	ldr	r2, [pc, #608]	; (8002778 <HAL_GPIO_Init+0x2a0>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d875      	bhi.n	8002606 <HAL_GPIO_Init+0x12e>
 800251a:	4a98      	ldr	r2, [pc, #608]	; (800277c <HAL_GPIO_Init+0x2a4>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d058      	beq.n	80025d2 <HAL_GPIO_Init+0xfa>
 8002520:	4a96      	ldr	r2, [pc, #600]	; (800277c <HAL_GPIO_Init+0x2a4>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d86f      	bhi.n	8002606 <HAL_GPIO_Init+0x12e>
 8002526:	4a96      	ldr	r2, [pc, #600]	; (8002780 <HAL_GPIO_Init+0x2a8>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d052      	beq.n	80025d2 <HAL_GPIO_Init+0xfa>
 800252c:	4a94      	ldr	r2, [pc, #592]	; (8002780 <HAL_GPIO_Init+0x2a8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d869      	bhi.n	8002606 <HAL_GPIO_Init+0x12e>
 8002532:	4a94      	ldr	r2, [pc, #592]	; (8002784 <HAL_GPIO_Init+0x2ac>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d04c      	beq.n	80025d2 <HAL_GPIO_Init+0xfa>
 8002538:	4a92      	ldr	r2, [pc, #584]	; (8002784 <HAL_GPIO_Init+0x2ac>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d863      	bhi.n	8002606 <HAL_GPIO_Init+0x12e>
 800253e:	4a92      	ldr	r2, [pc, #584]	; (8002788 <HAL_GPIO_Init+0x2b0>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d046      	beq.n	80025d2 <HAL_GPIO_Init+0xfa>
 8002544:	4a90      	ldr	r2, [pc, #576]	; (8002788 <HAL_GPIO_Init+0x2b0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d85d      	bhi.n	8002606 <HAL_GPIO_Init+0x12e>
 800254a:	2b12      	cmp	r3, #18
 800254c:	d82a      	bhi.n	80025a4 <HAL_GPIO_Init+0xcc>
 800254e:	2b12      	cmp	r3, #18
 8002550:	d859      	bhi.n	8002606 <HAL_GPIO_Init+0x12e>
 8002552:	a201      	add	r2, pc, #4	; (adr r2, 8002558 <HAL_GPIO_Init+0x80>)
 8002554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002558:	080025d3 	.word	0x080025d3
 800255c:	080025ad 	.word	0x080025ad
 8002560:	080025bf 	.word	0x080025bf
 8002564:	08002601 	.word	0x08002601
 8002568:	08002607 	.word	0x08002607
 800256c:	08002607 	.word	0x08002607
 8002570:	08002607 	.word	0x08002607
 8002574:	08002607 	.word	0x08002607
 8002578:	08002607 	.word	0x08002607
 800257c:	08002607 	.word	0x08002607
 8002580:	08002607 	.word	0x08002607
 8002584:	08002607 	.word	0x08002607
 8002588:	08002607 	.word	0x08002607
 800258c:	08002607 	.word	0x08002607
 8002590:	08002607 	.word	0x08002607
 8002594:	08002607 	.word	0x08002607
 8002598:	08002607 	.word	0x08002607
 800259c:	080025b5 	.word	0x080025b5
 80025a0:	080025c9 	.word	0x080025c9
 80025a4:	4a79      	ldr	r2, [pc, #484]	; (800278c <HAL_GPIO_Init+0x2b4>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d013      	beq.n	80025d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025aa:	e02c      	b.n	8002606 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	623b      	str	r3, [r7, #32]
          break;
 80025b2:	e029      	b.n	8002608 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	3304      	adds	r3, #4
 80025ba:	623b      	str	r3, [r7, #32]
          break;
 80025bc:	e024      	b.n	8002608 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	3308      	adds	r3, #8
 80025c4:	623b      	str	r3, [r7, #32]
          break;
 80025c6:	e01f      	b.n	8002608 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	330c      	adds	r3, #12
 80025ce:	623b      	str	r3, [r7, #32]
          break;
 80025d0:	e01a      	b.n	8002608 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d102      	bne.n	80025e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025da:	2304      	movs	r3, #4
 80025dc:	623b      	str	r3, [r7, #32]
          break;
 80025de:	e013      	b.n	8002608 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d105      	bne.n	80025f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025e8:	2308      	movs	r3, #8
 80025ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69fa      	ldr	r2, [r7, #28]
 80025f0:	611a      	str	r2, [r3, #16]
          break;
 80025f2:	e009      	b.n	8002608 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025f4:	2308      	movs	r3, #8
 80025f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	615a      	str	r2, [r3, #20]
          break;
 80025fe:	e003      	b.n	8002608 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002600:	2300      	movs	r3, #0
 8002602:	623b      	str	r3, [r7, #32]
          break;
 8002604:	e000      	b.n	8002608 <HAL_GPIO_Init+0x130>
          break;
 8002606:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	2bff      	cmp	r3, #255	; 0xff
 800260c:	d801      	bhi.n	8002612 <HAL_GPIO_Init+0x13a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	e001      	b.n	8002616 <HAL_GPIO_Init+0x13e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3304      	adds	r3, #4
 8002616:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	2bff      	cmp	r3, #255	; 0xff
 800261c:	d802      	bhi.n	8002624 <HAL_GPIO_Init+0x14c>
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	e002      	b.n	800262a <HAL_GPIO_Init+0x152>
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	3b08      	subs	r3, #8
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	210f      	movs	r1, #15
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	fa01 f303 	lsl.w	r3, r1, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	401a      	ands	r2, r3
 800263c:	6a39      	ldr	r1, [r7, #32]
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	fa01 f303 	lsl.w	r3, r1, r3
 8002644:	431a      	orrs	r2, r3
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 80b1 	beq.w	80027ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002658:	4b4d      	ldr	r3, [pc, #308]	; (8002790 <HAL_GPIO_Init+0x2b8>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	4a4c      	ldr	r2, [pc, #304]	; (8002790 <HAL_GPIO_Init+0x2b8>)
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	6193      	str	r3, [r2, #24]
 8002664:	4b4a      	ldr	r3, [pc, #296]	; (8002790 <HAL_GPIO_Init+0x2b8>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002670:	4a48      	ldr	r2, [pc, #288]	; (8002794 <HAL_GPIO_Init+0x2bc>)
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	089b      	lsrs	r3, r3, #2
 8002676:	3302      	adds	r3, #2
 8002678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	220f      	movs	r2, #15
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	4013      	ands	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a40      	ldr	r2, [pc, #256]	; (8002798 <HAL_GPIO_Init+0x2c0>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d013      	beq.n	80026c4 <HAL_GPIO_Init+0x1ec>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a3f      	ldr	r2, [pc, #252]	; (800279c <HAL_GPIO_Init+0x2c4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d00d      	beq.n	80026c0 <HAL_GPIO_Init+0x1e8>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a3e      	ldr	r2, [pc, #248]	; (80027a0 <HAL_GPIO_Init+0x2c8>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d007      	beq.n	80026bc <HAL_GPIO_Init+0x1e4>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a3d      	ldr	r2, [pc, #244]	; (80027a4 <HAL_GPIO_Init+0x2cc>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d101      	bne.n	80026b8 <HAL_GPIO_Init+0x1e0>
 80026b4:	2303      	movs	r3, #3
 80026b6:	e006      	b.n	80026c6 <HAL_GPIO_Init+0x1ee>
 80026b8:	2304      	movs	r3, #4
 80026ba:	e004      	b.n	80026c6 <HAL_GPIO_Init+0x1ee>
 80026bc:	2302      	movs	r3, #2
 80026be:	e002      	b.n	80026c6 <HAL_GPIO_Init+0x1ee>
 80026c0:	2301      	movs	r3, #1
 80026c2:	e000      	b.n	80026c6 <HAL_GPIO_Init+0x1ee>
 80026c4:	2300      	movs	r3, #0
 80026c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c8:	f002 0203 	and.w	r2, r2, #3
 80026cc:	0092      	lsls	r2, r2, #2
 80026ce:	4093      	lsls	r3, r2
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026d6:	492f      	ldr	r1, [pc, #188]	; (8002794 <HAL_GPIO_Init+0x2bc>)
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	089b      	lsrs	r3, r3, #2
 80026dc:	3302      	adds	r3, #2
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d006      	beq.n	80026fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026f0:	4b2d      	ldr	r3, [pc, #180]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	492c      	ldr	r1, [pc, #176]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	608b      	str	r3, [r1, #8]
 80026fc:	e006      	b.n	800270c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026fe:	4b2a      	ldr	r3, [pc, #168]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	43db      	mvns	r3, r3
 8002706:	4928      	ldr	r1, [pc, #160]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002708:	4013      	ands	r3, r2
 800270a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d006      	beq.n	8002726 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002718:	4b23      	ldr	r3, [pc, #140]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	4922      	ldr	r1, [pc, #136]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	60cb      	str	r3, [r1, #12]
 8002724:	e006      	b.n	8002734 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002726:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	43db      	mvns	r3, r3
 800272e:	491e      	ldr	r1, [pc, #120]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002730:	4013      	ands	r3, r2
 8002732:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d006      	beq.n	800274e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002740:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	4918      	ldr	r1, [pc, #96]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]
 800274c:	e006      	b.n	800275c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800274e:	4b16      	ldr	r3, [pc, #88]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	43db      	mvns	r3, r3
 8002756:	4914      	ldr	r1, [pc, #80]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002758:	4013      	ands	r3, r2
 800275a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d021      	beq.n	80027ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002768:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	490e      	ldr	r1, [pc, #56]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	4313      	orrs	r3, r2
 8002772:	600b      	str	r3, [r1, #0]
 8002774:	e021      	b.n	80027ba <HAL_GPIO_Init+0x2e2>
 8002776:	bf00      	nop
 8002778:	10320000 	.word	0x10320000
 800277c:	10310000 	.word	0x10310000
 8002780:	10220000 	.word	0x10220000
 8002784:	10210000 	.word	0x10210000
 8002788:	10120000 	.word	0x10120000
 800278c:	10110000 	.word	0x10110000
 8002790:	40021000 	.word	0x40021000
 8002794:	40010000 	.word	0x40010000
 8002798:	40010800 	.word	0x40010800
 800279c:	40010c00 	.word	0x40010c00
 80027a0:	40011000 	.word	0x40011000
 80027a4:	40011400 	.word	0x40011400
 80027a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_GPIO_Init+0x304>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	43db      	mvns	r3, r3
 80027b4:	4909      	ldr	r1, [pc, #36]	; (80027dc <HAL_GPIO_Init+0x304>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	3301      	adds	r3, #1
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f47f ae8e 	bne.w	80024ec <HAL_GPIO_Init+0x14>
  }
}
 80027d0:	bf00      	nop
 80027d2:	bf00      	nop
 80027d4:	372c      	adds	r7, #44	; 0x2c
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr
 80027dc:	40010400 	.word	0x40010400

080027e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	807b      	strh	r3, [r7, #2]
 80027ec:	4613      	mov	r3, r2
 80027ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027f0:	787b      	ldrb	r3, [r7, #1]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027f6:	887a      	ldrh	r2, [r7, #2]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027fc:	e003      	b.n	8002806 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027fe:	887b      	ldrh	r3, [r7, #2]
 8002800:	041a      	lsls	r2, r3, #16
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	611a      	str	r2, [r3, #16]
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002822:	887a      	ldrh	r2, [r7, #2]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4013      	ands	r3, r2
 8002828:	041a      	lsls	r2, r3, #16
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	43d9      	mvns	r1, r3
 800282e:	887b      	ldrh	r3, [r7, #2]
 8002830:	400b      	ands	r3, r1
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	611a      	str	r2, [r3, #16]
}
 8002838:	bf00      	nop
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr
	...

08002844 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e272      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 8087 	beq.w	8002972 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002864:	4b92      	ldr	r3, [pc, #584]	; (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 030c 	and.w	r3, r3, #12
 800286c:	2b04      	cmp	r3, #4
 800286e:	d00c      	beq.n	800288a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002870:	4b8f      	ldr	r3, [pc, #572]	; (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 030c 	and.w	r3, r3, #12
 8002878:	2b08      	cmp	r3, #8
 800287a:	d112      	bne.n	80028a2 <HAL_RCC_OscConfig+0x5e>
 800287c:	4b8c      	ldr	r3, [pc, #560]	; (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002888:	d10b      	bne.n	80028a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288a:	4b89      	ldr	r3, [pc, #548]	; (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d06c      	beq.n	8002970 <HAL_RCC_OscConfig+0x12c>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d168      	bne.n	8002970 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e24c      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028aa:	d106      	bne.n	80028ba <HAL_RCC_OscConfig+0x76>
 80028ac:	4b80      	ldr	r3, [pc, #512]	; (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a7f      	ldr	r2, [pc, #508]	; (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80028b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	e02e      	b.n	8002918 <HAL_RCC_OscConfig+0xd4>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10c      	bne.n	80028dc <HAL_RCC_OscConfig+0x98>
 80028c2:	4b7b      	ldr	r3, [pc, #492]	; (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a7a      	ldr	r2, [pc, #488]	; (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80028c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	4b78      	ldr	r3, [pc, #480]	; (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a77      	ldr	r2, [pc, #476]	; (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80028d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	e01d      	b.n	8002918 <HAL_RCC_OscConfig+0xd4>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028e4:	d10c      	bne.n	8002900 <HAL_RCC_OscConfig+0xbc>
 80028e6:	4b72      	ldr	r3, [pc, #456]	; (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a71      	ldr	r2, [pc, #452]	; (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80028ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	4b6f      	ldr	r3, [pc, #444]	; (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a6e      	ldr	r2, [pc, #440]	; (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80028f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	e00b      	b.n	8002918 <HAL_RCC_OscConfig+0xd4>
 8002900:	4b6b      	ldr	r3, [pc, #428]	; (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a6a      	ldr	r2, [pc, #424]	; (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	4b68      	ldr	r3, [pc, #416]	; (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a67      	ldr	r2, [pc, #412]	; (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002916:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d013      	beq.n	8002948 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002920:	f7ff f9fc 	bl	8001d1c <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002928:	f7ff f9f8 	bl	8001d1c <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b64      	cmp	r3, #100	; 0x64
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e200      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293a:	4b5d      	ldr	r3, [pc, #372]	; (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0xe4>
 8002946:	e014      	b.n	8002972 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002948:	f7ff f9e8 	bl	8001d1c <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002950:	f7ff f9e4 	bl	8001d1c <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	; 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e1ec      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002962:	4b53      	ldr	r3, [pc, #332]	; (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x10c>
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d063      	beq.n	8002a46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800297e:	4b4c      	ldr	r3, [pc, #304]	; (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00b      	beq.n	80029a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800298a:	4b49      	ldr	r3, [pc, #292]	; (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	2b08      	cmp	r3, #8
 8002994:	d11c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x18c>
 8002996:	4b46      	ldr	r3, [pc, #280]	; (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d116      	bne.n	80029d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a2:	4b43      	ldr	r3, [pc, #268]	; (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d005      	beq.n	80029ba <HAL_RCC_OscConfig+0x176>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d001      	beq.n	80029ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e1c0      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ba:	4b3d      	ldr	r3, [pc, #244]	; (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4939      	ldr	r1, [pc, #228]	; (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ce:	e03a      	b.n	8002a46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d020      	beq.n	8002a1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029d8:	4b36      	ldr	r3, [pc, #216]	; (8002ab4 <HAL_RCC_OscConfig+0x270>)
 80029da:	2201      	movs	r2, #1
 80029dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029de:	f7ff f99d 	bl	8001d1c <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029e6:	f7ff f999 	bl	8001d1c <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e1a1      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f8:	4b2d      	ldr	r3, [pc, #180]	; (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a04:	4b2a      	ldr	r3, [pc, #168]	; (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4927      	ldr	r1, [pc, #156]	; (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	600b      	str	r3, [r1, #0]
 8002a18:	e015      	b.n	8002a46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a1a:	4b26      	ldr	r3, [pc, #152]	; (8002ab4 <HAL_RCC_OscConfig+0x270>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a20:	f7ff f97c 	bl	8001d1c <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a28:	f7ff f978 	bl	8001d1c <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e180      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3a:	4b1d      	ldr	r3, [pc, #116]	; (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d03a      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d019      	beq.n	8002a8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a5a:	4b17      	ldr	r3, [pc, #92]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a60:	f7ff f95c 	bl	8001d1c <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a68:	f7ff f958 	bl	8001d1c <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e160      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7a:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a86:	2001      	movs	r0, #1
 8002a88:	f000 face 	bl	8003028 <RCC_Delay>
 8002a8c:	e01c      	b.n	8002ac8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a94:	f7ff f942 	bl	8001d1c <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a9a:	e00f      	b.n	8002abc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a9c:	f7ff f93e 	bl	8001d1c <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d908      	bls.n	8002abc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e146      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
 8002aae:	bf00      	nop
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	42420000 	.word	0x42420000
 8002ab8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002abc:	4b92      	ldr	r3, [pc, #584]	; (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1e9      	bne.n	8002a9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 80a6 	beq.w	8002c22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ada:	4b8b      	ldr	r3, [pc, #556]	; (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10d      	bne.n	8002b02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae6:	4b88      	ldr	r3, [pc, #544]	; (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	4a87      	ldr	r2, [pc, #540]	; (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af0:	61d3      	str	r3, [r2, #28]
 8002af2:	4b85      	ldr	r3, [pc, #532]	; (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afa:	60bb      	str	r3, [r7, #8]
 8002afc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002afe:	2301      	movs	r3, #1
 8002b00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b02:	4b82      	ldr	r3, [pc, #520]	; (8002d0c <HAL_RCC_OscConfig+0x4c8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d118      	bne.n	8002b40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b0e:	4b7f      	ldr	r3, [pc, #508]	; (8002d0c <HAL_RCC_OscConfig+0x4c8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a7e      	ldr	r2, [pc, #504]	; (8002d0c <HAL_RCC_OscConfig+0x4c8>)
 8002b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b1a:	f7ff f8ff 	bl	8001d1c <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b22:	f7ff f8fb 	bl	8001d1c <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b64      	cmp	r3, #100	; 0x64
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e103      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b34:	4b75      	ldr	r3, [pc, #468]	; (8002d0c <HAL_RCC_OscConfig+0x4c8>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d106      	bne.n	8002b56 <HAL_RCC_OscConfig+0x312>
 8002b48:	4b6f      	ldr	r3, [pc, #444]	; (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	4a6e      	ldr	r2, [pc, #440]	; (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	6213      	str	r3, [r2, #32]
 8002b54:	e02d      	b.n	8002bb2 <HAL_RCC_OscConfig+0x36e>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10c      	bne.n	8002b78 <HAL_RCC_OscConfig+0x334>
 8002b5e:	4b6a      	ldr	r3, [pc, #424]	; (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	4a69      	ldr	r2, [pc, #420]	; (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b64:	f023 0301 	bic.w	r3, r3, #1
 8002b68:	6213      	str	r3, [r2, #32]
 8002b6a:	4b67      	ldr	r3, [pc, #412]	; (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	4a66      	ldr	r2, [pc, #408]	; (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b70:	f023 0304 	bic.w	r3, r3, #4
 8002b74:	6213      	str	r3, [r2, #32]
 8002b76:	e01c      	b.n	8002bb2 <HAL_RCC_OscConfig+0x36e>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	2b05      	cmp	r3, #5
 8002b7e:	d10c      	bne.n	8002b9a <HAL_RCC_OscConfig+0x356>
 8002b80:	4b61      	ldr	r3, [pc, #388]	; (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	4a60      	ldr	r2, [pc, #384]	; (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b86:	f043 0304 	orr.w	r3, r3, #4
 8002b8a:	6213      	str	r3, [r2, #32]
 8002b8c:	4b5e      	ldr	r3, [pc, #376]	; (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	4a5d      	ldr	r2, [pc, #372]	; (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	6213      	str	r3, [r2, #32]
 8002b98:	e00b      	b.n	8002bb2 <HAL_RCC_OscConfig+0x36e>
 8002b9a:	4b5b      	ldr	r3, [pc, #364]	; (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	4a5a      	ldr	r2, [pc, #360]	; (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002ba0:	f023 0301 	bic.w	r3, r3, #1
 8002ba4:	6213      	str	r3, [r2, #32]
 8002ba6:	4b58      	ldr	r3, [pc, #352]	; (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	4a57      	ldr	r2, [pc, #348]	; (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002bac:	f023 0304 	bic.w	r3, r3, #4
 8002bb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d015      	beq.n	8002be6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bba:	f7ff f8af 	bl	8001d1c <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc0:	e00a      	b.n	8002bd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc2:	f7ff f8ab 	bl	8001d1c <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e0b1      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd8:	4b4b      	ldr	r3, [pc, #300]	; (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0ee      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x37e>
 8002be4:	e014      	b.n	8002c10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be6:	f7ff f899 	bl	8001d1c <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bec:	e00a      	b.n	8002c04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bee:	f7ff f895 	bl	8001d1c <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e09b      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c04:	4b40      	ldr	r3, [pc, #256]	; (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1ee      	bne.n	8002bee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c10:	7dfb      	ldrb	r3, [r7, #23]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d105      	bne.n	8002c22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c16:	4b3c      	ldr	r3, [pc, #240]	; (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	4a3b      	ldr	r2, [pc, #236]	; (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 8087 	beq.w	8002d3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c2c:	4b36      	ldr	r3, [pc, #216]	; (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 030c 	and.w	r3, r3, #12
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d061      	beq.n	8002cfc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d146      	bne.n	8002cce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c40:	4b33      	ldr	r3, [pc, #204]	; (8002d10 <HAL_RCC_OscConfig+0x4cc>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c46:	f7ff f869 	bl	8001d1c <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c4e:	f7ff f865 	bl	8001d1c <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e06d      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c60:	4b29      	ldr	r3, [pc, #164]	; (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1f0      	bne.n	8002c4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c74:	d108      	bne.n	8002c88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c76:	4b24      	ldr	r3, [pc, #144]	; (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	4921      	ldr	r1, [pc, #132]	; (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c88:	4b1f      	ldr	r3, [pc, #124]	; (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a19      	ldr	r1, [r3, #32]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	491b      	ldr	r1, [pc, #108]	; (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <HAL_RCC_OscConfig+0x4cc>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca6:	f7ff f839 	bl	8001d1c <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cae:	f7ff f835 	bl	8001d1c <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e03d      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cc0:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x46a>
 8002ccc:	e035      	b.n	8002d3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cce:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <HAL_RCC_OscConfig+0x4cc>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd4:	f7ff f822 	bl	8001d1c <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cdc:	f7ff f81e 	bl	8001d1c <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e026      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cee:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x498>
 8002cfa:	e01e      	b.n	8002d3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d107      	bne.n	8002d14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e019      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40007000 	.word	0x40007000
 8002d10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d14:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <HAL_RCC_OscConfig+0x500>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d106      	bne.n	8002d36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d001      	beq.n	8002d3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40021000 	.word	0x40021000

08002d48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e0d0      	b.n	8002efe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d5c:	4b6a      	ldr	r3, [pc, #424]	; (8002f08 <HAL_RCC_ClockConfig+0x1c0>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d910      	bls.n	8002d8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6a:	4b67      	ldr	r3, [pc, #412]	; (8002f08 <HAL_RCC_ClockConfig+0x1c0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f023 0207 	bic.w	r2, r3, #7
 8002d72:	4965      	ldr	r1, [pc, #404]	; (8002f08 <HAL_RCC_ClockConfig+0x1c0>)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7a:	4b63      	ldr	r3, [pc, #396]	; (8002f08 <HAL_RCC_ClockConfig+0x1c0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d001      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e0b8      	b.n	8002efe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d020      	beq.n	8002dda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002da4:	4b59      	ldr	r3, [pc, #356]	; (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	4a58      	ldr	r2, [pc, #352]	; (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002daa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002dae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dbc:	4b53      	ldr	r3, [pc, #332]	; (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	4a52      	ldr	r2, [pc, #328]	; (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002dc2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002dc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc8:	4b50      	ldr	r3, [pc, #320]	; (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	494d      	ldr	r1, [pc, #308]	; (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d040      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d107      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dee:	4b47      	ldr	r3, [pc, #284]	; (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d115      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e07f      	b.n	8002efe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d107      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e06:	4b41      	ldr	r3, [pc, #260]	; (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d109      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e073      	b.n	8002efe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e16:	4b3d      	ldr	r3, [pc, #244]	; (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e06b      	b.n	8002efe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e26:	4b39      	ldr	r3, [pc, #228]	; (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f023 0203 	bic.w	r2, r3, #3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	4936      	ldr	r1, [pc, #216]	; (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e38:	f7fe ff70 	bl	8001d1c <HAL_GetTick>
 8002e3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3e:	e00a      	b.n	8002e56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e40:	f7fe ff6c 	bl	8001d1c <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e053      	b.n	8002efe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e56:	4b2d      	ldr	r3, [pc, #180]	; (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f003 020c 	and.w	r2, r3, #12
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d1eb      	bne.n	8002e40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e68:	4b27      	ldr	r3, [pc, #156]	; (8002f08 <HAL_RCC_ClockConfig+0x1c0>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d210      	bcs.n	8002e98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e76:	4b24      	ldr	r3, [pc, #144]	; (8002f08 <HAL_RCC_ClockConfig+0x1c0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 0207 	bic.w	r2, r3, #7
 8002e7e:	4922      	ldr	r1, [pc, #136]	; (8002f08 <HAL_RCC_ClockConfig+0x1c0>)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e86:	4b20      	ldr	r3, [pc, #128]	; (8002f08 <HAL_RCC_ClockConfig+0x1c0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d001      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e032      	b.n	8002efe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ea4:	4b19      	ldr	r3, [pc, #100]	; (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4916      	ldr	r1, [pc, #88]	; (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d009      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ec2:	4b12      	ldr	r3, [pc, #72]	; (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	490e      	ldr	r1, [pc, #56]	; (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ed6:	f000 f821 	bl	8002f1c <HAL_RCC_GetSysClockFreq>
 8002eda:	4602      	mov	r2, r0
 8002edc:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	091b      	lsrs	r3, r3, #4
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	490a      	ldr	r1, [pc, #40]	; (8002f10 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee8:	5ccb      	ldrb	r3, [r1, r3]
 8002eea:	fa22 f303 	lsr.w	r3, r2, r3
 8002eee:	4a09      	ldr	r2, [pc, #36]	; (8002f14 <HAL_RCC_ClockConfig+0x1cc>)
 8002ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ef2:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <HAL_RCC_ClockConfig+0x1d0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fe fece 	bl	8001c98 <HAL_InitTick>

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40022000 	.word	0x40022000
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	08007918 	.word	0x08007918
 8002f14:	20000070 	.word	0x20000070
 8002f18:	20000074 	.word	0x20000074

08002f1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	2300      	movs	r3, #0
 8002f28:	60bb      	str	r3, [r7, #8]
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	617b      	str	r3, [r7, #20]
 8002f2e:	2300      	movs	r3, #0
 8002f30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f36:	4b1e      	ldr	r3, [pc, #120]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d002      	beq.n	8002f4c <HAL_RCC_GetSysClockFreq+0x30>
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d003      	beq.n	8002f52 <HAL_RCC_GetSysClockFreq+0x36>
 8002f4a:	e027      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f4c:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f4e:	613b      	str	r3, [r7, #16]
      break;
 8002f50:	e027      	b.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	0c9b      	lsrs	r3, r3, #18
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	4a17      	ldr	r2, [pc, #92]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f5c:	5cd3      	ldrb	r3, [r2, r3]
 8002f5e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d010      	beq.n	8002f8c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f6a:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	0c5b      	lsrs	r3, r3, #17
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	4a11      	ldr	r2, [pc, #68]	; (8002fbc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f76:	5cd3      	ldrb	r3, [r2, r3]
 8002f78:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a0d      	ldr	r2, [pc, #52]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f7e:	fb03 f202 	mul.w	r2, r3, r2
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	e004      	b.n	8002f96 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a0c      	ldr	r2, [pc, #48]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f90:	fb02 f303 	mul.w	r3, r2, r3
 8002f94:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	613b      	str	r3, [r7, #16]
      break;
 8002f9a:	e002      	b.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f9c:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f9e:	613b      	str	r3, [r7, #16]
      break;
 8002fa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fa2:	693b      	ldr	r3, [r7, #16]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	371c      	adds	r7, #28
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	007a1200 	.word	0x007a1200
 8002fb8:	08007930 	.word	0x08007930
 8002fbc:	08007940 	.word	0x08007940
 8002fc0:	003d0900 	.word	0x003d0900

08002fc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fc8:	4b02      	ldr	r3, [pc, #8]	; (8002fd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fca:	681b      	ldr	r3, [r3, #0]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr
 8002fd4:	20000070 	.word	0x20000070

08002fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fdc:	f7ff fff2 	bl	8002fc4 <HAL_RCC_GetHCLKFreq>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	0a1b      	lsrs	r3, r3, #8
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	4903      	ldr	r1, [pc, #12]	; (8002ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fee:	5ccb      	ldrb	r3, [r1, r3]
 8002ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	08007928 	.word	0x08007928

08003000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003004:	f7ff ffde 	bl	8002fc4 <HAL_RCC_GetHCLKFreq>
 8003008:	4602      	mov	r2, r0
 800300a:	4b05      	ldr	r3, [pc, #20]	; (8003020 <HAL_RCC_GetPCLK2Freq+0x20>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	0adb      	lsrs	r3, r3, #11
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	4903      	ldr	r1, [pc, #12]	; (8003024 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003016:	5ccb      	ldrb	r3, [r1, r3]
 8003018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800301c:	4618      	mov	r0, r3
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40021000 	.word	0x40021000
 8003024:	08007928 	.word	0x08007928

08003028 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003030:	4b0a      	ldr	r3, [pc, #40]	; (800305c <RCC_Delay+0x34>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a0a      	ldr	r2, [pc, #40]	; (8003060 <RCC_Delay+0x38>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	0a5b      	lsrs	r3, r3, #9
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	fb02 f303 	mul.w	r3, r2, r3
 8003042:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003044:	bf00      	nop
  }
  while (Delay --);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	1e5a      	subs	r2, r3, #1
 800304a:	60fa      	str	r2, [r7, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1f9      	bne.n	8003044 <RCC_Delay+0x1c>
}
 8003050:	bf00      	nop
 8003052:	bf00      	nop
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr
 800305c:	20000070 	.word	0x20000070
 8003060:	10624dd3 	.word	0x10624dd3

08003064 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e041      	b.n	80030fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d106      	bne.n	8003090 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7fe fbde 	bl	800184c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3304      	adds	r3, #4
 80030a0:	4619      	mov	r1, r3
 80030a2:	4610      	mov	r0, r2
 80030a4:	f000 fa74 	bl	8003590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b01      	cmp	r3, #1
 8003116:	d001      	beq.n	800311c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e03a      	b.n	8003192 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a18      	ldr	r2, [pc, #96]	; (800319c <HAL_TIM_Base_Start_IT+0x98>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d00e      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x58>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003146:	d009      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x58>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a14      	ldr	r2, [pc, #80]	; (80031a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d004      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x58>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a13      	ldr	r2, [pc, #76]	; (80031a4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d111      	bne.n	8003180 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2b06      	cmp	r3, #6
 800316c:	d010      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f042 0201 	orr.w	r2, r2, #1
 800317c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800317e:	e007      	b.n	8003190 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr
 800319c:	40012c00 	.word	0x40012c00
 80031a0:	40000400 	.word	0x40000400
 80031a4:	40000800 	.word	0x40000800

080031a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d122      	bne.n	8003204 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d11b      	bne.n	8003204 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f06f 0202 	mvn.w	r2, #2
 80031d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f9b4 	bl	8003558 <HAL_TIM_IC_CaptureCallback>
 80031f0:	e005      	b.n	80031fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f9a7 	bl	8003546 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f9b6 	bl	800356a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b04      	cmp	r3, #4
 8003210:	d122      	bne.n	8003258 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b04      	cmp	r3, #4
 800321e:	d11b      	bne.n	8003258 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f06f 0204 	mvn.w	r2, #4
 8003228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2202      	movs	r2, #2
 800322e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f98a 	bl	8003558 <HAL_TIM_IC_CaptureCallback>
 8003244:	e005      	b.n	8003252 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f97d 	bl	8003546 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f98c 	bl	800356a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b08      	cmp	r3, #8
 8003264:	d122      	bne.n	80032ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f003 0308 	and.w	r3, r3, #8
 8003270:	2b08      	cmp	r3, #8
 8003272:	d11b      	bne.n	80032ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f06f 0208 	mvn.w	r2, #8
 800327c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2204      	movs	r2, #4
 8003282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f960 	bl	8003558 <HAL_TIM_IC_CaptureCallback>
 8003298:	e005      	b.n	80032a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f953 	bl	8003546 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f962 	bl	800356a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f003 0310 	and.w	r3, r3, #16
 80032b6:	2b10      	cmp	r3, #16
 80032b8:	d122      	bne.n	8003300 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f003 0310 	and.w	r3, r3, #16
 80032c4:	2b10      	cmp	r3, #16
 80032c6:	d11b      	bne.n	8003300 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f06f 0210 	mvn.w	r2, #16
 80032d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2208      	movs	r2, #8
 80032d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f936 	bl	8003558 <HAL_TIM_IC_CaptureCallback>
 80032ec:	e005      	b.n	80032fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f929 	bl	8003546 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f938 	bl	800356a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b01      	cmp	r3, #1
 800330c:	d10e      	bne.n	800332c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b01      	cmp	r3, #1
 800331a:	d107      	bne.n	800332c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f06f 0201 	mvn.w	r2, #1
 8003324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7fe f898 	bl	800145c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003336:	2b80      	cmp	r3, #128	; 0x80
 8003338:	d10e      	bne.n	8003358 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003344:	2b80      	cmp	r3, #128	; 0x80
 8003346:	d107      	bne.n	8003358 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 fa7b 	bl	800384e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003362:	2b40      	cmp	r3, #64	; 0x40
 8003364:	d10e      	bne.n	8003384 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003370:	2b40      	cmp	r3, #64	; 0x40
 8003372:	d107      	bne.n	8003384 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800337c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f8fc 	bl	800357c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f003 0320 	and.w	r3, r3, #32
 800338e:	2b20      	cmp	r3, #32
 8003390:	d10e      	bne.n	80033b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	2b20      	cmp	r3, #32
 800339e:	d107      	bne.n	80033b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f06f 0220 	mvn.w	r2, #32
 80033a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 fa46 	bl	800383c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033b0:	bf00      	nop
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033c2:	2300      	movs	r3, #0
 80033c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_TIM_ConfigClockSource+0x1c>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e0b4      	b.n	800353e <HAL_TIM_ConfigClockSource+0x186>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800340c:	d03e      	beq.n	800348c <HAL_TIM_ConfigClockSource+0xd4>
 800340e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003412:	f200 8087 	bhi.w	8003524 <HAL_TIM_ConfigClockSource+0x16c>
 8003416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800341a:	f000 8086 	beq.w	800352a <HAL_TIM_ConfigClockSource+0x172>
 800341e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003422:	d87f      	bhi.n	8003524 <HAL_TIM_ConfigClockSource+0x16c>
 8003424:	2b70      	cmp	r3, #112	; 0x70
 8003426:	d01a      	beq.n	800345e <HAL_TIM_ConfigClockSource+0xa6>
 8003428:	2b70      	cmp	r3, #112	; 0x70
 800342a:	d87b      	bhi.n	8003524 <HAL_TIM_ConfigClockSource+0x16c>
 800342c:	2b60      	cmp	r3, #96	; 0x60
 800342e:	d050      	beq.n	80034d2 <HAL_TIM_ConfigClockSource+0x11a>
 8003430:	2b60      	cmp	r3, #96	; 0x60
 8003432:	d877      	bhi.n	8003524 <HAL_TIM_ConfigClockSource+0x16c>
 8003434:	2b50      	cmp	r3, #80	; 0x50
 8003436:	d03c      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0xfa>
 8003438:	2b50      	cmp	r3, #80	; 0x50
 800343a:	d873      	bhi.n	8003524 <HAL_TIM_ConfigClockSource+0x16c>
 800343c:	2b40      	cmp	r3, #64	; 0x40
 800343e:	d058      	beq.n	80034f2 <HAL_TIM_ConfigClockSource+0x13a>
 8003440:	2b40      	cmp	r3, #64	; 0x40
 8003442:	d86f      	bhi.n	8003524 <HAL_TIM_ConfigClockSource+0x16c>
 8003444:	2b30      	cmp	r3, #48	; 0x30
 8003446:	d064      	beq.n	8003512 <HAL_TIM_ConfigClockSource+0x15a>
 8003448:	2b30      	cmp	r3, #48	; 0x30
 800344a:	d86b      	bhi.n	8003524 <HAL_TIM_ConfigClockSource+0x16c>
 800344c:	2b20      	cmp	r3, #32
 800344e:	d060      	beq.n	8003512 <HAL_TIM_ConfigClockSource+0x15a>
 8003450:	2b20      	cmp	r3, #32
 8003452:	d867      	bhi.n	8003524 <HAL_TIM_ConfigClockSource+0x16c>
 8003454:	2b00      	cmp	r3, #0
 8003456:	d05c      	beq.n	8003512 <HAL_TIM_ConfigClockSource+0x15a>
 8003458:	2b10      	cmp	r3, #16
 800345a:	d05a      	beq.n	8003512 <HAL_TIM_ConfigClockSource+0x15a>
 800345c:	e062      	b.n	8003524 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800346e:	f000 f968 	bl	8003742 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003480:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	609a      	str	r2, [r3, #8]
      break;
 800348a:	e04f      	b.n	800352c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800349c:	f000 f951 	bl	8003742 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034ae:	609a      	str	r2, [r3, #8]
      break;
 80034b0:	e03c      	b.n	800352c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034be:	461a      	mov	r2, r3
 80034c0:	f000 f8c8 	bl	8003654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2150      	movs	r1, #80	; 0x50
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 f91f 	bl	800370e <TIM_ITRx_SetConfig>
      break;
 80034d0:	e02c      	b.n	800352c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034de:	461a      	mov	r2, r3
 80034e0:	f000 f8e6 	bl	80036b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2160      	movs	r1, #96	; 0x60
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 f90f 	bl	800370e <TIM_ITRx_SetConfig>
      break;
 80034f0:	e01c      	b.n	800352c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034fe:	461a      	mov	r2, r3
 8003500:	f000 f8a8 	bl	8003654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2140      	movs	r1, #64	; 0x40
 800350a:	4618      	mov	r0, r3
 800350c:	f000 f8ff 	bl	800370e <TIM_ITRx_SetConfig>
      break;
 8003510:	e00c      	b.n	800352c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4619      	mov	r1, r3
 800351c:	4610      	mov	r0, r2
 800351e:	f000 f8f6 	bl	800370e <TIM_ITRx_SetConfig>
      break;
 8003522:	e003      	b.n	800352c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	73fb      	strb	r3, [r7, #15]
      break;
 8003528:	e000      	b.n	800352c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800352a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800353c:	7bfb      	ldrb	r3, [r7, #15]
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	bc80      	pop	{r7}
 8003556:	4770      	bx	lr

08003558 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	bc80      	pop	{r7}
 8003568:	4770      	bx	lr

0800356a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr

0800357c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	bc80      	pop	{r7}
 800358c:	4770      	bx	lr
	...

08003590 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a29      	ldr	r2, [pc, #164]	; (8003648 <TIM_Base_SetConfig+0xb8>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d00b      	beq.n	80035c0 <TIM_Base_SetConfig+0x30>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ae:	d007      	beq.n	80035c0 <TIM_Base_SetConfig+0x30>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a26      	ldr	r2, [pc, #152]	; (800364c <TIM_Base_SetConfig+0xbc>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d003      	beq.n	80035c0 <TIM_Base_SetConfig+0x30>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a25      	ldr	r2, [pc, #148]	; (8003650 <TIM_Base_SetConfig+0xc0>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d108      	bne.n	80035d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a1c      	ldr	r2, [pc, #112]	; (8003648 <TIM_Base_SetConfig+0xb8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d00b      	beq.n	80035f2 <TIM_Base_SetConfig+0x62>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e0:	d007      	beq.n	80035f2 <TIM_Base_SetConfig+0x62>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a19      	ldr	r2, [pc, #100]	; (800364c <TIM_Base_SetConfig+0xbc>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d003      	beq.n	80035f2 <TIM_Base_SetConfig+0x62>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a18      	ldr	r2, [pc, #96]	; (8003650 <TIM_Base_SetConfig+0xc0>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d108      	bne.n	8003604 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	4313      	orrs	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	4313      	orrs	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a07      	ldr	r2, [pc, #28]	; (8003648 <TIM_Base_SetConfig+0xb8>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d103      	bne.n	8003638 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	615a      	str	r2, [r3, #20]
}
 800363e:	bf00      	nop
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	bc80      	pop	{r7}
 8003646:	4770      	bx	lr
 8003648:	40012c00 	.word	0x40012c00
 800364c:	40000400 	.word	0x40000400
 8003650:	40000800 	.word	0x40000800

08003654 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	f023 0201 	bic.w	r2, r3, #1
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800367e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f023 030a 	bic.w	r3, r3, #10
 8003690:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4313      	orrs	r3, r2
 8003698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	621a      	str	r2, [r3, #32]
}
 80036a6:	bf00      	nop
 80036a8:	371c      	adds	r7, #28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr

080036b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	f023 0210 	bic.w	r2, r3, #16
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	031b      	lsls	r3, r3, #12
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	621a      	str	r2, [r3, #32]
}
 8003704:	bf00      	nop
 8003706:	371c      	adds	r7, #28
 8003708:	46bd      	mov	sp, r7
 800370a:	bc80      	pop	{r7}
 800370c:	4770      	bx	lr

0800370e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800370e:	b480      	push	{r7}
 8003710:	b085      	sub	sp, #20
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003724:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4313      	orrs	r3, r2
 800372c:	f043 0307 	orr.w	r3, r3, #7
 8003730:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	609a      	str	r2, [r3, #8]
}
 8003738:	bf00      	nop
 800373a:	3714      	adds	r7, #20
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr

08003742 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003742:	b480      	push	{r7}
 8003744:	b087      	sub	sp, #28
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	607a      	str	r2, [r7, #4]
 800374e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800375c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	021a      	lsls	r2, r3, #8
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	431a      	orrs	r2, r3
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	4313      	orrs	r3, r2
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4313      	orrs	r3, r2
 800376e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	609a      	str	r2, [r3, #8]
}
 8003776:	bf00      	nop
 8003778:	371c      	adds	r7, #28
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr

08003780 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003790:	2b01      	cmp	r3, #1
 8003792:	d101      	bne.n	8003798 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003794:	2302      	movs	r3, #2
 8003796:	e046      	b.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2202      	movs	r2, #2
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a16      	ldr	r2, [pc, #88]	; (8003830 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d00e      	beq.n	80037fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e4:	d009      	beq.n	80037fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a12      	ldr	r2, [pc, #72]	; (8003834 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d004      	beq.n	80037fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a10      	ldr	r2, [pc, #64]	; (8003838 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d10c      	bne.n	8003814 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003800:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	4313      	orrs	r3, r2
 800380a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	bc80      	pop	{r7}
 800382e:	4770      	bx	lr
 8003830:	40012c00 	.word	0x40012c00
 8003834:	40000400 	.word	0x40000400
 8003838:	40000800 	.word	0x40000800

0800383c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr

0800384e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr

08003860 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e042      	b.n	80038f8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d106      	bne.n	800388c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fe f806 	bl	8001898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2224      	movs	r2, #36	; 0x24
 8003890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f001 f8db 	bl	8004a60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695a      	ldr	r2, [r3, #20]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08a      	sub	sp, #40	; 0x28
 8003904:	af02      	add	r7, sp, #8
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	603b      	str	r3, [r7, #0]
 800390c:	4613      	mov	r3, r2
 800390e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b20      	cmp	r3, #32
 800391e:	d16d      	bne.n	80039fc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <HAL_UART_Transmit+0x2c>
 8003926:	88fb      	ldrh	r3, [r7, #6]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e066      	b.n	80039fe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2221      	movs	r2, #33	; 0x21
 800393a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800393e:	f7fe f9ed 	bl	8001d1c <HAL_GetTick>
 8003942:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	88fa      	ldrh	r2, [r7, #6]
 8003948:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	88fa      	ldrh	r2, [r7, #6]
 800394e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003958:	d108      	bne.n	800396c <HAL_UART_Transmit+0x6c>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d104      	bne.n	800396c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003962:	2300      	movs	r3, #0
 8003964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	61bb      	str	r3, [r7, #24]
 800396a:	e003      	b.n	8003974 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003970:	2300      	movs	r3, #0
 8003972:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003974:	e02a      	b.n	80039cc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2200      	movs	r2, #0
 800397e:	2180      	movs	r1, #128	; 0x80
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 fd69 	bl	8004458 <UART_WaitOnFlagUntilTimeout>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e036      	b.n	80039fe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10b      	bne.n	80039ae <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	3302      	adds	r3, #2
 80039aa:	61bb      	str	r3, [r7, #24]
 80039ac:	e007      	b.n	80039be <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	781a      	ldrb	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	3301      	adds	r3, #1
 80039bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1cf      	bne.n	8003976 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2200      	movs	r2, #0
 80039de:	2140      	movs	r1, #64	; 0x40
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 fd39 	bl	8004458 <UART_WaitOnFlagUntilTimeout>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e006      	b.n	80039fe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	e000      	b.n	80039fe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80039fc:	2302      	movs	r3, #2
  }
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3720      	adds	r7, #32
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	4613      	mov	r3, r2
 8003a12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	d112      	bne.n	8003a46 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d002      	beq.n	8003a2c <HAL_UART_Receive_IT+0x26>
 8003a26:	88fb      	ldrh	r3, [r7, #6]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e00b      	b.n	8003a48 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a36:	88fb      	ldrh	r3, [r7, #6]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	68b9      	ldr	r1, [r7, #8]
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 fd79 	bl	8004534 <UART_Start_Receive_IT>
 8003a42:	4603      	mov	r3, r0
 8003a44:	e000      	b.n	8003a48 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003a46:	2302      	movs	r3, #2
  }
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b20      	cmp	r3, #32
 8003a68:	d112      	bne.n	8003a90 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d002      	beq.n	8003a76 <HAL_UART_Receive_DMA+0x26>
 8003a70:	88fb      	ldrh	r3, [r7, #6]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e00b      	b.n	8003a92 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003a80:	88fb      	ldrh	r3, [r7, #6]
 8003a82:	461a      	mov	r2, r3
 8003a84:	68b9      	ldr	r1, [r7, #8]
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 fd8e 	bl	80045a8 <UART_Start_Receive_DMA>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	e000      	b.n	8003a92 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003a90:	2302      	movs	r3, #2
  }
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_UART_DMAPause>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b09d      	sub	sp, #116	; 0x74
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	66fb      	str	r3, [r7, #108]	; 0x6c

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	bf14      	ite	ne
 8003ab4:	2301      	movne	r3, #1
 8003ab6:	2300      	moveq	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b21      	cmp	r3, #33	; 0x21
 8003ac6:	d11c      	bne.n	8003b02 <HAL_UART_DMAPause+0x68>
 8003ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d019      	beq.n	8003b02 <HAL_UART_DMAPause+0x68>
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3314      	adds	r3, #20
 8003ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ad8:	e853 3f00 	ldrex	r3, [r3]
 8003adc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ae0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ae4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	3314      	adds	r3, #20
 8003aec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003aee:	65ba      	str	r2, [r7, #88]	; 0x58
 8003af0:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003af4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003af6:	e841 2300 	strex	r3, r2, [r1]
 8003afa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003afc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1e5      	bne.n	8003ace <HAL_UART_DMAPause+0x34>
  }

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	bf14      	ite	ne
 8003b10:	2301      	movne	r3, #1
 8003b12:	2300      	moveq	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b22      	cmp	r3, #34	; 0x22
 8003b22:	d150      	bne.n	8003bc6 <HAL_UART_DMAPause+0x12c>
 8003b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d04d      	beq.n	8003bc6 <HAL_UART_DMAPause+0x12c>
  {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	330c      	adds	r3, #12
 8003b30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b34:	e853 3f00 	ldrex	r3, [r3]
 8003b38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b40:	667b      	str	r3, [r7, #100]	; 0x64
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	330c      	adds	r3, #12
 8003b48:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003b4a:	647a      	str	r2, [r7, #68]	; 0x44
 8003b4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b52:	e841 2300 	strex	r3, r2, [r1]
 8003b56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1e5      	bne.n	8003b2a <HAL_UART_DMAPause+0x90>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3314      	adds	r3, #20
 8003b64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	e853 3f00 	ldrex	r3, [r3]
 8003b6c:	623b      	str	r3, [r7, #32]
   return(result);
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	f023 0301 	bic.w	r3, r3, #1
 8003b74:	663b      	str	r3, [r7, #96]	; 0x60
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	3314      	adds	r3, #20
 8003b7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b7e:	633a      	str	r2, [r7, #48]	; 0x30
 8003b80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b86:	e841 2300 	strex	r3, r2, [r1]
 8003b8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1e5      	bne.n	8003b5e <HAL_UART_DMAPause+0xc4>

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3314      	adds	r3, #20
 8003b98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	e853 3f00 	ldrex	r3, [r3]
 8003ba0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	3314      	adds	r3, #20
 8003bb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003bb2:	61fa      	str	r2, [r7, #28]
 8003bb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb6:	69b9      	ldr	r1, [r7, #24]
 8003bb8:	69fa      	ldr	r2, [r7, #28]
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	617b      	str	r3, [r7, #20]
   return(result);
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1e5      	bne.n	8003b92 <HAL_UART_DMAPause+0xf8>
  }

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3774      	adds	r7, #116	; 0x74
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bc80      	pop	{r7}
 8003bd0:	4770      	bx	lr

08003bd2 <HAL_UART_DMAResume>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b09d      	sub	sp, #116	; 0x74
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b21      	cmp	r3, #33	; 0x21
 8003be4:	d119      	bne.n	8003c1a <HAL_UART_DMAResume+0x48>
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	3314      	adds	r3, #20
 8003bec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bf0:	e853 3f00 	ldrex	r3, [r3]
 8003bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bfc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3314      	adds	r3, #20
 8003c04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c06:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003c08:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c0e:	e841 2300 	strex	r3, r2, [r1]
 8003c12:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1e5      	bne.n	8003be6 <HAL_UART_DMAResume+0x14>
  }

  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b22      	cmp	r3, #34	; 0x22
 8003c24:	d15c      	bne.n	8003ce0 <HAL_UART_DMAResume+0x10e>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	68fb      	ldr	r3, [r7, #12]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d019      	beq.n	8003c78 <HAL_UART_DMAResume+0xa6>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	330c      	adds	r3, #12
 8003c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c4e:	e853 3f00 	ldrex	r3, [r3]
 8003c52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	330c      	adds	r3, #12
 8003c62:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c64:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c66:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c68:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c6c:	e841 2300 	strex	r3, r2, [r1]
 8003c70:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1e5      	bne.n	8003c44 <HAL_UART_DMAResume+0x72>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	3314      	adds	r3, #20
 8003c7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c82:	e853 3f00 	ldrex	r3, [r3]
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	f043 0301 	orr.w	r3, r3, #1
 8003c8e:	667b      	str	r3, [r7, #100]	; 0x64
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3314      	adds	r3, #20
 8003c96:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003c98:	637a      	str	r2, [r7, #52]	; 0x34
 8003c9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ca0:	e841 2300 	strex	r3, r2, [r1]
 8003ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1e5      	bne.n	8003c78 <HAL_UART_DMAResume+0xa6>

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3314      	adds	r3, #20
 8003cb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	e853 3f00 	ldrex	r3, [r3]
 8003cba:	613b      	str	r3, [r7, #16]
   return(result);
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cc2:	663b      	str	r3, [r7, #96]	; 0x60
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	3314      	adds	r3, #20
 8003cca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ccc:	623a      	str	r2, [r7, #32]
 8003cce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd0:	69f9      	ldr	r1, [r7, #28]
 8003cd2:	6a3a      	ldr	r2, [r7, #32]
 8003cd4:	e841 2300 	strex	r3, r2, [r1]
 8003cd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1e5      	bne.n	8003cac <HAL_UART_DMAResume+0xda>
  }

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3774      	adds	r7, #116	; 0x74
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr

08003cec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b0ba      	sub	sp, #232	; 0xe8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003d2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10f      	bne.n	8003d52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d009      	beq.n	8003d52 <HAL_UART_IRQHandler+0x66>
 8003d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fdca 	bl	80048e4 <UART_Receive_IT>
      return;
 8003d50:	e25b      	b.n	800420a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 80de 	beq.w	8003f18 <HAL_UART_IRQHandler+0x22c>
 8003d5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d106      	bne.n	8003d76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d6c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 80d1 	beq.w	8003f18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00b      	beq.n	8003d9a <HAL_UART_IRQHandler+0xae>
 8003d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d005      	beq.n	8003d9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d92:	f043 0201 	orr.w	r2, r3, #1
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00b      	beq.n	8003dbe <HAL_UART_IRQHandler+0xd2>
 8003da6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d005      	beq.n	8003dbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db6:	f043 0202 	orr.w	r2, r3, #2
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00b      	beq.n	8003de2 <HAL_UART_IRQHandler+0xf6>
 8003dca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d005      	beq.n	8003de2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dda:	f043 0204 	orr.w	r2, r3, #4
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d011      	beq.n	8003e12 <HAL_UART_IRQHandler+0x126>
 8003dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003df2:	f003 0320 	and.w	r3, r3, #32
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d105      	bne.n	8003e06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003dfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d005      	beq.n	8003e12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0a:	f043 0208 	orr.w	r2, r3, #8
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 81f2 	beq.w	8004200 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e20:	f003 0320 	and.w	r3, r3, #32
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d008      	beq.n	8003e3a <HAL_UART_IRQHandler+0x14e>
 8003e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e2c:	f003 0320 	and.w	r3, r3, #32
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 fd55 	bl	80048e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	bf14      	ite	ne
 8003e48:	2301      	movne	r3, #1
 8003e4a:	2300      	moveq	r3, #0
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d103      	bne.n	8003e66 <HAL_UART_IRQHandler+0x17a>
 8003e5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d04f      	beq.n	8003f06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 fc5f 	bl	800472a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d041      	beq.n	8003efe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	3314      	adds	r3, #20
 8003e80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e88:	e853 3f00 	ldrex	r3, [r3]
 8003e8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3314      	adds	r3, #20
 8003ea2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ea6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003eaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003eb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003eb6:	e841 2300 	strex	r3, r2, [r1]
 8003eba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003ebe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1d9      	bne.n	8003e7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d013      	beq.n	8003ef6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed2:	4a7e      	ldr	r2, [pc, #504]	; (80040cc <HAL_UART_IRQHandler+0x3e0>)
 8003ed4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fe f950 	bl	8002180 <HAL_DMA_Abort_IT>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d016      	beq.n	8003f14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef4:	e00e      	b.n	8003f14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f99c 	bl	8004234 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003efc:	e00a      	b.n	8003f14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f998 	bl	8004234 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f04:	e006      	b.n	8003f14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f994 	bl	8004234 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003f12:	e175      	b.n	8004200 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f14:	bf00      	nop
    return;
 8003f16:	e173      	b.n	8004200 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	f040 814f 	bne.w	80041c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f26:	f003 0310 	and.w	r3, r3, #16
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 8148 	beq.w	80041c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f34:	f003 0310 	and.w	r3, r3, #16
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 8141 	beq.w	80041c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60bb      	str	r3, [r7, #8]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	60bb      	str	r3, [r7, #8]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	60bb      	str	r3, [r7, #8]
 8003f52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 80b6 	beq.w	80040d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 8145 	beq.w	8004204 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f82:	429a      	cmp	r2, r3
 8003f84:	f080 813e 	bcs.w	8004204 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f8e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	2b20      	cmp	r3, #32
 8003f98:	f000 8088 	beq.w	80040ac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	330c      	adds	r3, #12
 8003fa2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003faa:	e853 3f00 	ldrex	r3, [r3]
 8003fae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003fb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	330c      	adds	r3, #12
 8003fc4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003fc8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003fd4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003fd8:	e841 2300 	strex	r3, r2, [r1]
 8003fdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003fe0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1d9      	bne.n	8003f9c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3314      	adds	r3, #20
 8003fee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ff2:	e853 3f00 	ldrex	r3, [r3]
 8003ff6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ff8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ffa:	f023 0301 	bic.w	r3, r3, #1
 8003ffe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	3314      	adds	r3, #20
 8004008:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800400c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004010:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004014:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004018:	e841 2300 	strex	r3, r2, [r1]
 800401c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800401e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1e1      	bne.n	8003fe8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3314      	adds	r3, #20
 800402a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800402e:	e853 3f00 	ldrex	r3, [r3]
 8004032:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004036:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800403a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	3314      	adds	r3, #20
 8004044:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004048:	66fa      	str	r2, [r7, #108]	; 0x6c
 800404a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800404e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004050:	e841 2300 	strex	r3, r2, [r1]
 8004054:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004056:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1e3      	bne.n	8004024 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	330c      	adds	r3, #12
 8004070:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004074:	e853 3f00 	ldrex	r3, [r3]
 8004078:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800407a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800407c:	f023 0310 	bic.w	r3, r3, #16
 8004080:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	330c      	adds	r3, #12
 800408a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800408e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004090:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004092:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004094:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004096:	e841 2300 	strex	r3, r2, [r1]
 800409a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800409c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1e3      	bne.n	800406a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fe f82e 	bl	8002108 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	b29b      	uxth	r3, r3
 80040c0:	4619      	mov	r1, r3
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f8bf 	bl	8004246 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040c8:	e09c      	b.n	8004204 <HAL_UART_IRQHandler+0x518>
 80040ca:	bf00      	nop
 80040cc:	080047ef 	.word	0x080047ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040d8:	b29b      	uxth	r3, r3
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 808e 	beq.w	8004208 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80040ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 8089 	beq.w	8004208 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	330c      	adds	r3, #12
 80040fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004100:	e853 3f00 	ldrex	r3, [r3]
 8004104:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004108:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800410c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	330c      	adds	r3, #12
 8004116:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800411a:	647a      	str	r2, [r7, #68]	; 0x44
 800411c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004120:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004122:	e841 2300 	strex	r3, r2, [r1]
 8004126:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1e3      	bne.n	80040f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	3314      	adds	r3, #20
 8004134:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	e853 3f00 	ldrex	r3, [r3]
 800413c:	623b      	str	r3, [r7, #32]
   return(result);
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	f023 0301 	bic.w	r3, r3, #1
 8004144:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3314      	adds	r3, #20
 800414e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004152:	633a      	str	r2, [r7, #48]	; 0x30
 8004154:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004156:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800415a:	e841 2300 	strex	r3, r2, [r1]
 800415e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1e3      	bne.n	800412e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2220      	movs	r2, #32
 800416a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	330c      	adds	r3, #12
 800417a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	e853 3f00 	ldrex	r3, [r3]
 8004182:	60fb      	str	r3, [r7, #12]
   return(result);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0310 	bic.w	r3, r3, #16
 800418a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	330c      	adds	r3, #12
 8004194:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004198:	61fa      	str	r2, [r7, #28]
 800419a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419c:	69b9      	ldr	r1, [r7, #24]
 800419e:	69fa      	ldr	r2, [r7, #28]
 80041a0:	e841 2300 	strex	r3, r2, [r1]
 80041a4:	617b      	str	r3, [r7, #20]
   return(result);
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1e3      	bne.n	8004174 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041b6:	4619      	mov	r1, r3
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f844 	bl	8004246 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041be:	e023      	b.n	8004208 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80041c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d009      	beq.n	80041e0 <HAL_UART_IRQHandler+0x4f4>
 80041cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 fb1c 	bl	8004816 <UART_Transmit_IT>
    return;
 80041de:	e014      	b.n	800420a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00e      	beq.n	800420a <HAL_UART_IRQHandler+0x51e>
 80041ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d008      	beq.n	800420a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 fb5b 	bl	80048b4 <UART_EndTransmit_IT>
    return;
 80041fe:	e004      	b.n	800420a <HAL_UART_IRQHandler+0x51e>
    return;
 8004200:	bf00      	nop
 8004202:	e002      	b.n	800420a <HAL_UART_IRQHandler+0x51e>
      return;
 8004204:	bf00      	nop
 8004206:	e000      	b.n	800420a <HAL_UART_IRQHandler+0x51e>
      return;
 8004208:	bf00      	nop
  }
}
 800420a:	37e8      	adds	r7, #232	; 0xe8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr

08004222 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	bc80      	pop	{r7}
 8004232:	4770      	bx	lr

08004234 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	bc80      	pop	{r7}
 8004244:	4770      	bx	lr

08004246 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004246:	b480      	push	{r7}
 8004248:	b083      	sub	sp, #12
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
 800424e:	460b      	mov	r3, r1
 8004250:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	bc80      	pop	{r7}
 800425a:	4770      	bx	lr

0800425c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b09c      	sub	sp, #112	; 0x70
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0320 	and.w	r3, r3, #32
 8004274:	2b00      	cmp	r3, #0
 8004276:	d172      	bne.n	800435e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800427a:	2200      	movs	r2, #0
 800427c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800427e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	330c      	adds	r3, #12
 8004284:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004288:	e853 3f00 	ldrex	r3, [r3]
 800428c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800428e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004294:	66bb      	str	r3, [r7, #104]	; 0x68
 8004296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	330c      	adds	r3, #12
 800429c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800429e:	65ba      	str	r2, [r7, #88]	; 0x58
 80042a0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042a6:	e841 2300 	strex	r3, r2, [r1]
 80042aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80042ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1e5      	bne.n	800427e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	3314      	adds	r3, #20
 80042b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042bc:	e853 3f00 	ldrex	r3, [r3]
 80042c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c4:	f023 0301 	bic.w	r3, r3, #1
 80042c8:	667b      	str	r3, [r7, #100]	; 0x64
 80042ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	3314      	adds	r3, #20
 80042d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80042d2:	647a      	str	r2, [r7, #68]	; 0x44
 80042d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042da:	e841 2300 	strex	r3, r2, [r1]
 80042de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1e5      	bne.n	80042b2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	3314      	adds	r3, #20
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	e853 3f00 	ldrex	r3, [r3]
 80042f4:	623b      	str	r3, [r7, #32]
   return(result);
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042fc:	663b      	str	r3, [r7, #96]	; 0x60
 80042fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3314      	adds	r3, #20
 8004304:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004306:	633a      	str	r2, [r7, #48]	; 0x30
 8004308:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800430c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800430e:	e841 2300 	strex	r3, r2, [r1]
 8004312:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1e5      	bne.n	80042e6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800431a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800431c:	2220      	movs	r2, #32
 800431e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004326:	2b01      	cmp	r3, #1
 8004328:	d119      	bne.n	800435e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800432a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	330c      	adds	r3, #12
 8004330:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	e853 3f00 	ldrex	r3, [r3]
 8004338:	60fb      	str	r3, [r7, #12]
   return(result);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f023 0310 	bic.w	r3, r3, #16
 8004340:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	330c      	adds	r3, #12
 8004348:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800434a:	61fa      	str	r2, [r7, #28]
 800434c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434e:	69b9      	ldr	r1, [r7, #24]
 8004350:	69fa      	ldr	r2, [r7, #28]
 8004352:	e841 2300 	strex	r3, r2, [r1]
 8004356:	617b      	str	r3, [r7, #20]
   return(result);
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1e5      	bne.n	800432a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800435e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004360:	2200      	movs	r2, #0
 8004362:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004368:	2b01      	cmp	r3, #1
 800436a:	d106      	bne.n	800437a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800436c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800436e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004370:	4619      	mov	r1, r3
 8004372:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004374:	f7ff ff67 	bl	8004246 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004378:	e002      	b.n	8004380 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800437a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800437c:	f7fd f896 	bl	80014ac <HAL_UART_RxCpltCallback>
}
 8004380:	bf00      	nop
 8004382:	3770      	adds	r7, #112	; 0x70
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2201      	movs	r2, #1
 800439a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d108      	bne.n	80043b6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043a8:	085b      	lsrs	r3, r3, #1
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	4619      	mov	r1, r3
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f7ff ff49 	bl	8004246 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80043b4:	e002      	b.n	80043bc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f7ff ff33 	bl	8004222 <HAL_UART_RxHalfCpltCallback>
}
 80043bc:	bf00      	nop
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	bf14      	ite	ne
 80043e4:	2301      	movne	r3, #1
 80043e6:	2300      	moveq	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b21      	cmp	r3, #33	; 0x21
 80043f6:	d108      	bne.n	800440a <UART_DMAError+0x46>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d005      	beq.n	800440a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2200      	movs	r2, #0
 8004402:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004404:	68b8      	ldr	r0, [r7, #8]
 8004406:	f000 f969 	bl	80046dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004414:	2b00      	cmp	r3, #0
 8004416:	bf14      	ite	ne
 8004418:	2301      	movne	r3, #1
 800441a:	2300      	moveq	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b22      	cmp	r3, #34	; 0x22
 800442a:	d108      	bne.n	800443e <UART_DMAError+0x7a>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d005      	beq.n	800443e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2200      	movs	r2, #0
 8004436:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004438:	68b8      	ldr	r0, [r7, #8]
 800443a:	f000 f976 	bl	800472a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004442:	f043 0210 	orr.w	r2, r3, #16
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800444a:	68b8      	ldr	r0, [r7, #8]
 800444c:	f7ff fef2 	bl	8004234 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004450:	bf00      	nop
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b090      	sub	sp, #64	; 0x40
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	603b      	str	r3, [r7, #0]
 8004464:	4613      	mov	r3, r2
 8004466:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004468:	e050      	b.n	800450c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800446a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800446c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004470:	d04c      	beq.n	800450c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004474:	2b00      	cmp	r3, #0
 8004476:	d007      	beq.n	8004488 <UART_WaitOnFlagUntilTimeout+0x30>
 8004478:	f7fd fc50 	bl	8001d1c <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004484:	429a      	cmp	r2, r3
 8004486:	d241      	bcs.n	800450c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	330c      	adds	r3, #12
 800448e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004492:	e853 3f00 	ldrex	r3, [r3]
 8004496:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800449e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	330c      	adds	r3, #12
 80044a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044a8:	637a      	str	r2, [r7, #52]	; 0x34
 80044aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044b0:	e841 2300 	strex	r3, r2, [r1]
 80044b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1e5      	bne.n	8004488 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	3314      	adds	r3, #20
 80044c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	e853 3f00 	ldrex	r3, [r3]
 80044ca:	613b      	str	r3, [r7, #16]
   return(result);
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f023 0301 	bic.w	r3, r3, #1
 80044d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	3314      	adds	r3, #20
 80044da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044dc:	623a      	str	r2, [r7, #32]
 80044de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e0:	69f9      	ldr	r1, [r7, #28]
 80044e2:	6a3a      	ldr	r2, [r7, #32]
 80044e4:	e841 2300 	strex	r3, r2, [r1]
 80044e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e5      	bne.n	80044bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e00f      	b.n	800452c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	4013      	ands	r3, r2
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	429a      	cmp	r2, r3
 800451a:	bf0c      	ite	eq
 800451c:	2301      	moveq	r3, #1
 800451e:	2300      	movne	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	461a      	mov	r2, r3
 8004524:	79fb      	ldrb	r3, [r7, #7]
 8004526:	429a      	cmp	r2, r3
 8004528:	d09f      	beq.n	800446a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3740      	adds	r7, #64	; 0x40
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	4613      	mov	r3, r2
 8004540:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	88fa      	ldrh	r2, [r7, #6]
 800454c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	88fa      	ldrh	r2, [r7, #6]
 8004552:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2222      	movs	r2, #34	; 0x22
 800455e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d007      	beq.n	800457a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004578:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	695a      	ldr	r2, [r3, #20]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f042 0201 	orr.w	r2, r2, #1
 8004588:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f042 0220 	orr.w	r2, r2, #32
 8004598:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bc80      	pop	{r7}
 80045a4:	4770      	bx	lr
	...

080045a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b098      	sub	sp, #96	; 0x60
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	4613      	mov	r3, r2
 80045b4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	88fa      	ldrh	r2, [r7, #6]
 80045c0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2222      	movs	r2, #34	; 0x22
 80045cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d4:	4a3e      	ldr	r2, [pc, #248]	; (80046d0 <UART_Start_Receive_DMA+0x128>)
 80045d6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045dc:	4a3d      	ldr	r2, [pc, #244]	; (80046d4 <UART_Start_Receive_DMA+0x12c>)
 80045de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e4:	4a3c      	ldr	r2, [pc, #240]	; (80046d8 <UART_Start_Receive_DMA+0x130>)
 80045e6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ec:	2200      	movs	r2, #0
 80045ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80045f0:	f107 0308 	add.w	r3, r7, #8
 80045f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	3304      	adds	r3, #4
 8004600:	4619      	mov	r1, r3
 8004602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	88fb      	ldrh	r3, [r7, #6]
 8004608:	f7fd fd1e 	bl	8002048 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800460c:	2300      	movs	r3, #0
 800460e:	613b      	str	r3, [r7, #16]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	613b      	str	r3, [r7, #16]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	613b      	str	r3, [r7, #16]
 8004620:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d019      	beq.n	800465e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	330c      	adds	r3, #12
 8004630:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004634:	e853 3f00 	ldrex	r3, [r3]
 8004638:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800463a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800463c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004640:	65bb      	str	r3, [r7, #88]	; 0x58
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	330c      	adds	r3, #12
 8004648:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800464a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800464c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004650:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004652:	e841 2300 	strex	r3, r2, [r1]
 8004656:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1e5      	bne.n	800462a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	3314      	adds	r3, #20
 8004664:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004668:	e853 3f00 	ldrex	r3, [r3]
 800466c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800466e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004670:	f043 0301 	orr.w	r3, r3, #1
 8004674:	657b      	str	r3, [r7, #84]	; 0x54
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3314      	adds	r3, #20
 800467c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800467e:	63ba      	str	r2, [r7, #56]	; 0x38
 8004680:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004682:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004684:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004686:	e841 2300 	strex	r3, r2, [r1]
 800468a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800468c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1e5      	bne.n	800465e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	3314      	adds	r3, #20
 8004698:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	e853 3f00 	ldrex	r3, [r3]
 80046a0:	617b      	str	r3, [r7, #20]
   return(result);
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046a8:	653b      	str	r3, [r7, #80]	; 0x50
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3314      	adds	r3, #20
 80046b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80046b2:	627a      	str	r2, [r7, #36]	; 0x24
 80046b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b6:	6a39      	ldr	r1, [r7, #32]
 80046b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ba:	e841 2300 	strex	r3, r2, [r1]
 80046be:	61fb      	str	r3, [r7, #28]
   return(result);
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1e5      	bne.n	8004692 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3760      	adds	r7, #96	; 0x60
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	0800425d 	.word	0x0800425d
 80046d4:	08004389 	.word	0x08004389
 80046d8:	080043c5 	.word	0x080043c5

080046dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80046dc:	b480      	push	{r7}
 80046de:	b089      	sub	sp, #36	; 0x24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	330c      	adds	r3, #12
 80046ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	e853 3f00 	ldrex	r3, [r3]
 80046f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80046fa:	61fb      	str	r3, [r7, #28]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	330c      	adds	r3, #12
 8004702:	69fa      	ldr	r2, [r7, #28]
 8004704:	61ba      	str	r2, [r7, #24]
 8004706:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004708:	6979      	ldr	r1, [r7, #20]
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	e841 2300 	strex	r3, r2, [r1]
 8004710:	613b      	str	r3, [r7, #16]
   return(result);
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1e5      	bne.n	80046e4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2220      	movs	r2, #32
 800471c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8004720:	bf00      	nop
 8004722:	3724      	adds	r7, #36	; 0x24
 8004724:	46bd      	mov	sp, r7
 8004726:	bc80      	pop	{r7}
 8004728:	4770      	bx	lr

0800472a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800472a:	b480      	push	{r7}
 800472c:	b095      	sub	sp, #84	; 0x54
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	330c      	adds	r3, #12
 8004738:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800473c:	e853 3f00 	ldrex	r3, [r3]
 8004740:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004744:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004748:	64fb      	str	r3, [r7, #76]	; 0x4c
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	330c      	adds	r3, #12
 8004750:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004752:	643a      	str	r2, [r7, #64]	; 0x40
 8004754:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004756:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004758:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800475a:	e841 2300 	strex	r3, r2, [r1]
 800475e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1e5      	bne.n	8004732 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3314      	adds	r3, #20
 800476c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	e853 3f00 	ldrex	r3, [r3]
 8004774:	61fb      	str	r3, [r7, #28]
   return(result);
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	f023 0301 	bic.w	r3, r3, #1
 800477c:	64bb      	str	r3, [r7, #72]	; 0x48
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3314      	adds	r3, #20
 8004784:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004786:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004788:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800478c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800478e:	e841 2300 	strex	r3, r2, [r1]
 8004792:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1e5      	bne.n	8004766 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d119      	bne.n	80047d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	330c      	adds	r3, #12
 80047a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	e853 3f00 	ldrex	r3, [r3]
 80047b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	f023 0310 	bic.w	r3, r3, #16
 80047b8:	647b      	str	r3, [r7, #68]	; 0x44
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	330c      	adds	r3, #12
 80047c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047c2:	61ba      	str	r2, [r7, #24]
 80047c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c6:	6979      	ldr	r1, [r7, #20]
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	e841 2300 	strex	r3, r2, [r1]
 80047ce:	613b      	str	r3, [r7, #16]
   return(result);
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1e5      	bne.n	80047a2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2220      	movs	r2, #32
 80047da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80047e4:	bf00      	nop
 80047e6:	3754      	adds	r7, #84	; 0x54
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bc80      	pop	{r7}
 80047ec:	4770      	bx	lr

080047ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b084      	sub	sp, #16
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f7ff fd13 	bl	8004234 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800480e:	bf00      	nop
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004816:	b480      	push	{r7}
 8004818:	b085      	sub	sp, #20
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b21      	cmp	r3, #33	; 0x21
 8004828:	d13e      	bne.n	80048a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004832:	d114      	bne.n	800485e <UART_Transmit_IT+0x48>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d110      	bne.n	800485e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	461a      	mov	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004850:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	1c9a      	adds	r2, r3, #2
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	621a      	str	r2, [r3, #32]
 800485c:	e008      	b.n	8004870 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	1c59      	adds	r1, r3, #1
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	6211      	str	r1, [r2, #32]
 8004868:	781a      	ldrb	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004874:	b29b      	uxth	r3, r3
 8004876:	3b01      	subs	r3, #1
 8004878:	b29b      	uxth	r3, r3
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	4619      	mov	r1, r3
 800487e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10f      	bne.n	80048a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68da      	ldr	r2, [r3, #12]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004892:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68da      	ldr	r2, [r3, #12]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	e000      	b.n	80048aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80048a8:	2302      	movs	r3, #2
  }
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bc80      	pop	{r7}
 80048b2:	4770      	bx	lr

080048b4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7ff fc9b 	bl	8004210 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08c      	sub	sp, #48	; 0x30
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b22      	cmp	r3, #34	; 0x22
 80048f6:	f040 80ae 	bne.w	8004a56 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004902:	d117      	bne.n	8004934 <UART_Receive_IT+0x50>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d113      	bne.n	8004934 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800490c:	2300      	movs	r3, #0
 800490e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004914:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	b29b      	uxth	r3, r3
 800491e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004922:	b29a      	uxth	r2, r3
 8004924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004926:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492c:	1c9a      	adds	r2, r3, #2
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	629a      	str	r2, [r3, #40]	; 0x28
 8004932:	e026      	b.n	8004982 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004938:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800493a:	2300      	movs	r3, #0
 800493c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004946:	d007      	beq.n	8004958 <UART_Receive_IT+0x74>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10a      	bne.n	8004966 <UART_Receive_IT+0x82>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d106      	bne.n	8004966 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	b2da      	uxtb	r2, r3
 8004960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004962:	701a      	strb	r2, [r3, #0]
 8004964:	e008      	b.n	8004978 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	b2db      	uxtb	r3, r3
 800496e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004972:	b2da      	uxtb	r2, r3
 8004974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004976:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497c:	1c5a      	adds	r2, r3, #1
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004986:	b29b      	uxth	r3, r3
 8004988:	3b01      	subs	r3, #1
 800498a:	b29b      	uxth	r3, r3
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	4619      	mov	r1, r3
 8004990:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004992:	2b00      	cmp	r3, #0
 8004994:	d15d      	bne.n	8004a52 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68da      	ldr	r2, [r3, #12]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 0220 	bic.w	r2, r2, #32
 80049a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68da      	ldr	r2, [r3, #12]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	695a      	ldr	r2, [r3, #20]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 0201 	bic.w	r2, r2, #1
 80049c4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2220      	movs	r2, #32
 80049ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d135      	bne.n	8004a48 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	330c      	adds	r3, #12
 80049e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	e853 3f00 	ldrex	r3, [r3]
 80049f0:	613b      	str	r3, [r7, #16]
   return(result);
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f023 0310 	bic.w	r3, r3, #16
 80049f8:	627b      	str	r3, [r7, #36]	; 0x24
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	330c      	adds	r3, #12
 8004a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a02:	623a      	str	r2, [r7, #32]
 8004a04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a06:	69f9      	ldr	r1, [r7, #28]
 8004a08:	6a3a      	ldr	r2, [r7, #32]
 8004a0a:	e841 2300 	strex	r3, r2, [r1]
 8004a0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1e5      	bne.n	80049e2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0310 	and.w	r3, r3, #16
 8004a20:	2b10      	cmp	r3, #16
 8004a22:	d10a      	bne.n	8004a3a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a24:	2300      	movs	r3, #0
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	60fb      	str	r3, [r7, #12]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a3e:	4619      	mov	r1, r3
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7ff fc00 	bl	8004246 <HAL_UARTEx_RxEventCallback>
 8004a46:	e002      	b.n	8004a4e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f7fc fd2f 	bl	80014ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	e002      	b.n	8004a58 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	e000      	b.n	8004a58 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004a56:	2302      	movs	r3, #2
  }
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3730      	adds	r7, #48	; 0x30
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689a      	ldr	r2, [r3, #8]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004a9a:	f023 030c 	bic.w	r3, r3, #12
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6812      	ldr	r2, [r2, #0]
 8004aa2:	68b9      	ldr	r1, [r7, #8]
 8004aa4:	430b      	orrs	r3, r1
 8004aa6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	699a      	ldr	r2, [r3, #24]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a2c      	ldr	r2, [pc, #176]	; (8004b74 <UART_SetConfig+0x114>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d103      	bne.n	8004ad0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ac8:	f7fe fa9a 	bl	8003000 <HAL_RCC_GetPCLK2Freq>
 8004acc:	60f8      	str	r0, [r7, #12]
 8004ace:	e002      	b.n	8004ad6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ad0:	f7fe fa82 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 8004ad4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	009a      	lsls	r2, r3, #2
 8004ae0:	441a      	add	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aec:	4a22      	ldr	r2, [pc, #136]	; (8004b78 <UART_SetConfig+0x118>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	0119      	lsls	r1, r3, #4
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	4613      	mov	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	009a      	lsls	r2, r3, #2
 8004b00:	441a      	add	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b0c:	4b1a      	ldr	r3, [pc, #104]	; (8004b78 <UART_SetConfig+0x118>)
 8004b0e:	fba3 0302 	umull	r0, r3, r3, r2
 8004b12:	095b      	lsrs	r3, r3, #5
 8004b14:	2064      	movs	r0, #100	; 0x64
 8004b16:	fb00 f303 	mul.w	r3, r0, r3
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	3332      	adds	r3, #50	; 0x32
 8004b20:	4a15      	ldr	r2, [pc, #84]	; (8004b78 <UART_SetConfig+0x118>)
 8004b22:	fba2 2303 	umull	r2, r3, r2, r3
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b2c:	4419      	add	r1, r3
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	4613      	mov	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	009a      	lsls	r2, r3, #2
 8004b38:	441a      	add	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b44:	4b0c      	ldr	r3, [pc, #48]	; (8004b78 <UART_SetConfig+0x118>)
 8004b46:	fba3 0302 	umull	r0, r3, r3, r2
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	2064      	movs	r0, #100	; 0x64
 8004b4e:	fb00 f303 	mul.w	r3, r0, r3
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	011b      	lsls	r3, r3, #4
 8004b56:	3332      	adds	r3, #50	; 0x32
 8004b58:	4a07      	ldr	r2, [pc, #28]	; (8004b78 <UART_SetConfig+0x118>)
 8004b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5e:	095b      	lsrs	r3, r3, #5
 8004b60:	f003 020f 	and.w	r2, r3, #15
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	440a      	add	r2, r1
 8004b6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004b6c:	bf00      	nop
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40013800 	.word	0x40013800
 8004b78:	51eb851f 	.word	0x51eb851f

08004b7c <__cvt>:
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b82:	461f      	mov	r7, r3
 8004b84:	bfbb      	ittet	lt
 8004b86:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004b8a:	461f      	movlt	r7, r3
 8004b8c:	2300      	movge	r3, #0
 8004b8e:	232d      	movlt	r3, #45	; 0x2d
 8004b90:	b088      	sub	sp, #32
 8004b92:	4614      	mov	r4, r2
 8004b94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004b96:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004b98:	7013      	strb	r3, [r2, #0]
 8004b9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004b9c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004ba0:	f023 0820 	bic.w	r8, r3, #32
 8004ba4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ba8:	d005      	beq.n	8004bb6 <__cvt+0x3a>
 8004baa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004bae:	d100      	bne.n	8004bb2 <__cvt+0x36>
 8004bb0:	3501      	adds	r5, #1
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	e000      	b.n	8004bb8 <__cvt+0x3c>
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	aa07      	add	r2, sp, #28
 8004bba:	9204      	str	r2, [sp, #16]
 8004bbc:	aa06      	add	r2, sp, #24
 8004bbe:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004bc2:	e9cd 3500 	strd	r3, r5, [sp]
 8004bc6:	4622      	mov	r2, r4
 8004bc8:	463b      	mov	r3, r7
 8004bca:	f000 fe81 	bl	80058d0 <_dtoa_r>
 8004bce:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004bd2:	4606      	mov	r6, r0
 8004bd4:	d102      	bne.n	8004bdc <__cvt+0x60>
 8004bd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004bd8:	07db      	lsls	r3, r3, #31
 8004bda:	d522      	bpl.n	8004c22 <__cvt+0xa6>
 8004bdc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004be0:	eb06 0905 	add.w	r9, r6, r5
 8004be4:	d110      	bne.n	8004c08 <__cvt+0x8c>
 8004be6:	7833      	ldrb	r3, [r6, #0]
 8004be8:	2b30      	cmp	r3, #48	; 0x30
 8004bea:	d10a      	bne.n	8004c02 <__cvt+0x86>
 8004bec:	2200      	movs	r2, #0
 8004bee:	2300      	movs	r3, #0
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	4639      	mov	r1, r7
 8004bf4:	f7fb fed8 	bl	80009a8 <__aeabi_dcmpeq>
 8004bf8:	b918      	cbnz	r0, 8004c02 <__cvt+0x86>
 8004bfa:	f1c5 0501 	rsb	r5, r5, #1
 8004bfe:	f8ca 5000 	str.w	r5, [sl]
 8004c02:	f8da 3000 	ldr.w	r3, [sl]
 8004c06:	4499      	add	r9, r3
 8004c08:	2200      	movs	r2, #0
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	4639      	mov	r1, r7
 8004c10:	f7fb feca 	bl	80009a8 <__aeabi_dcmpeq>
 8004c14:	b108      	cbz	r0, 8004c1a <__cvt+0x9e>
 8004c16:	f8cd 901c 	str.w	r9, [sp, #28]
 8004c1a:	2230      	movs	r2, #48	; 0x30
 8004c1c:	9b07      	ldr	r3, [sp, #28]
 8004c1e:	454b      	cmp	r3, r9
 8004c20:	d307      	bcc.n	8004c32 <__cvt+0xb6>
 8004c22:	4630      	mov	r0, r6
 8004c24:	9b07      	ldr	r3, [sp, #28]
 8004c26:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004c28:	1b9b      	subs	r3, r3, r6
 8004c2a:	6013      	str	r3, [r2, #0]
 8004c2c:	b008      	add	sp, #32
 8004c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c32:	1c59      	adds	r1, r3, #1
 8004c34:	9107      	str	r1, [sp, #28]
 8004c36:	701a      	strb	r2, [r3, #0]
 8004c38:	e7f0      	b.n	8004c1c <__cvt+0xa0>

08004c3a <__exponent>:
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c3e:	2900      	cmp	r1, #0
 8004c40:	f803 2b02 	strb.w	r2, [r3], #2
 8004c44:	bfb6      	itet	lt
 8004c46:	222d      	movlt	r2, #45	; 0x2d
 8004c48:	222b      	movge	r2, #43	; 0x2b
 8004c4a:	4249      	neglt	r1, r1
 8004c4c:	2909      	cmp	r1, #9
 8004c4e:	7042      	strb	r2, [r0, #1]
 8004c50:	dd2a      	ble.n	8004ca8 <__exponent+0x6e>
 8004c52:	f10d 0207 	add.w	r2, sp, #7
 8004c56:	4617      	mov	r7, r2
 8004c58:	260a      	movs	r6, #10
 8004c5a:	fb91 f5f6 	sdiv	r5, r1, r6
 8004c5e:	4694      	mov	ip, r2
 8004c60:	fb06 1415 	mls	r4, r6, r5, r1
 8004c64:	3430      	adds	r4, #48	; 0x30
 8004c66:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004c6a:	460c      	mov	r4, r1
 8004c6c:	2c63      	cmp	r4, #99	; 0x63
 8004c6e:	4629      	mov	r1, r5
 8004c70:	f102 32ff 	add.w	r2, r2, #4294967295
 8004c74:	dcf1      	bgt.n	8004c5a <__exponent+0x20>
 8004c76:	3130      	adds	r1, #48	; 0x30
 8004c78:	f1ac 0402 	sub.w	r4, ip, #2
 8004c7c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004c80:	4622      	mov	r2, r4
 8004c82:	1c41      	adds	r1, r0, #1
 8004c84:	42ba      	cmp	r2, r7
 8004c86:	d30a      	bcc.n	8004c9e <__exponent+0x64>
 8004c88:	f10d 0209 	add.w	r2, sp, #9
 8004c8c:	eba2 020c 	sub.w	r2, r2, ip
 8004c90:	42bc      	cmp	r4, r7
 8004c92:	bf88      	it	hi
 8004c94:	2200      	movhi	r2, #0
 8004c96:	4413      	add	r3, r2
 8004c98:	1a18      	subs	r0, r3, r0
 8004c9a:	b003      	add	sp, #12
 8004c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c9e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004ca2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004ca6:	e7ed      	b.n	8004c84 <__exponent+0x4a>
 8004ca8:	2330      	movs	r3, #48	; 0x30
 8004caa:	3130      	adds	r1, #48	; 0x30
 8004cac:	7083      	strb	r3, [r0, #2]
 8004cae:	70c1      	strb	r1, [r0, #3]
 8004cb0:	1d03      	adds	r3, r0, #4
 8004cb2:	e7f1      	b.n	8004c98 <__exponent+0x5e>

08004cb4 <_printf_float>:
 8004cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb8:	b091      	sub	sp, #68	; 0x44
 8004cba:	460c      	mov	r4, r1
 8004cbc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004cc0:	4616      	mov	r6, r2
 8004cc2:	461f      	mov	r7, r3
 8004cc4:	4605      	mov	r5, r0
 8004cc6:	f000 fce5 	bl	8005694 <_localeconv_r>
 8004cca:	6803      	ldr	r3, [r0, #0]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	9309      	str	r3, [sp, #36]	; 0x24
 8004cd0:	f7fb fa3e 	bl	8000150 <strlen>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	930e      	str	r3, [sp, #56]	; 0x38
 8004cd8:	f8d8 3000 	ldr.w	r3, [r8]
 8004cdc:	900a      	str	r0, [sp, #40]	; 0x28
 8004cde:	3307      	adds	r3, #7
 8004ce0:	f023 0307 	bic.w	r3, r3, #7
 8004ce4:	f103 0208 	add.w	r2, r3, #8
 8004ce8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004cec:	f8d4 b000 	ldr.w	fp, [r4]
 8004cf0:	f8c8 2000 	str.w	r2, [r8]
 8004cf4:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004cf8:	4652      	mov	r2, sl
 8004cfa:	4643      	mov	r3, r8
 8004cfc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004d00:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004d04:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d06:	f04f 32ff 	mov.w	r2, #4294967295
 8004d0a:	4650      	mov	r0, sl
 8004d0c:	4b9c      	ldr	r3, [pc, #624]	; (8004f80 <_printf_float+0x2cc>)
 8004d0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d10:	f7fb fe7c 	bl	8000a0c <__aeabi_dcmpun>
 8004d14:	bb70      	cbnz	r0, 8004d74 <_printf_float+0xc0>
 8004d16:	f04f 32ff 	mov.w	r2, #4294967295
 8004d1a:	4650      	mov	r0, sl
 8004d1c:	4b98      	ldr	r3, [pc, #608]	; (8004f80 <_printf_float+0x2cc>)
 8004d1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d20:	f7fb fe56 	bl	80009d0 <__aeabi_dcmple>
 8004d24:	bb30      	cbnz	r0, 8004d74 <_printf_float+0xc0>
 8004d26:	2200      	movs	r2, #0
 8004d28:	2300      	movs	r3, #0
 8004d2a:	4650      	mov	r0, sl
 8004d2c:	4641      	mov	r1, r8
 8004d2e:	f7fb fe45 	bl	80009bc <__aeabi_dcmplt>
 8004d32:	b110      	cbz	r0, 8004d3a <_printf_float+0x86>
 8004d34:	232d      	movs	r3, #45	; 0x2d
 8004d36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d3a:	4a92      	ldr	r2, [pc, #584]	; (8004f84 <_printf_float+0x2d0>)
 8004d3c:	4b92      	ldr	r3, [pc, #584]	; (8004f88 <_printf_float+0x2d4>)
 8004d3e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004d42:	bf94      	ite	ls
 8004d44:	4690      	movls	r8, r2
 8004d46:	4698      	movhi	r8, r3
 8004d48:	2303      	movs	r3, #3
 8004d4a:	f04f 0a00 	mov.w	sl, #0
 8004d4e:	6123      	str	r3, [r4, #16]
 8004d50:	f02b 0304 	bic.w	r3, fp, #4
 8004d54:	6023      	str	r3, [r4, #0]
 8004d56:	4633      	mov	r3, r6
 8004d58:	4621      	mov	r1, r4
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	9700      	str	r7, [sp, #0]
 8004d5e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004d60:	f000 f9d6 	bl	8005110 <_printf_common>
 8004d64:	3001      	adds	r0, #1
 8004d66:	f040 8090 	bne.w	8004e8a <_printf_float+0x1d6>
 8004d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d6e:	b011      	add	sp, #68	; 0x44
 8004d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d74:	4652      	mov	r2, sl
 8004d76:	4643      	mov	r3, r8
 8004d78:	4650      	mov	r0, sl
 8004d7a:	4641      	mov	r1, r8
 8004d7c:	f7fb fe46 	bl	8000a0c <__aeabi_dcmpun>
 8004d80:	b148      	cbz	r0, 8004d96 <_printf_float+0xe2>
 8004d82:	f1b8 0f00 	cmp.w	r8, #0
 8004d86:	bfb8      	it	lt
 8004d88:	232d      	movlt	r3, #45	; 0x2d
 8004d8a:	4a80      	ldr	r2, [pc, #512]	; (8004f8c <_printf_float+0x2d8>)
 8004d8c:	bfb8      	it	lt
 8004d8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004d92:	4b7f      	ldr	r3, [pc, #508]	; (8004f90 <_printf_float+0x2dc>)
 8004d94:	e7d3      	b.n	8004d3e <_printf_float+0x8a>
 8004d96:	6863      	ldr	r3, [r4, #4]
 8004d98:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004d9c:	1c5a      	adds	r2, r3, #1
 8004d9e:	d142      	bne.n	8004e26 <_printf_float+0x172>
 8004da0:	2306      	movs	r3, #6
 8004da2:	6063      	str	r3, [r4, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	9206      	str	r2, [sp, #24]
 8004da8:	aa0e      	add	r2, sp, #56	; 0x38
 8004daa:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004dae:	aa0d      	add	r2, sp, #52	; 0x34
 8004db0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004db4:	9203      	str	r2, [sp, #12]
 8004db6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004dba:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004dbe:	6023      	str	r3, [r4, #0]
 8004dc0:	6863      	ldr	r3, [r4, #4]
 8004dc2:	4652      	mov	r2, sl
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	4643      	mov	r3, r8
 8004dca:	910b      	str	r1, [sp, #44]	; 0x2c
 8004dcc:	f7ff fed6 	bl	8004b7c <__cvt>
 8004dd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004dd2:	4680      	mov	r8, r0
 8004dd4:	2947      	cmp	r1, #71	; 0x47
 8004dd6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004dd8:	d108      	bne.n	8004dec <_printf_float+0x138>
 8004dda:	1cc8      	adds	r0, r1, #3
 8004ddc:	db02      	blt.n	8004de4 <_printf_float+0x130>
 8004dde:	6863      	ldr	r3, [r4, #4]
 8004de0:	4299      	cmp	r1, r3
 8004de2:	dd40      	ble.n	8004e66 <_printf_float+0x1b2>
 8004de4:	f1a9 0902 	sub.w	r9, r9, #2
 8004de8:	fa5f f989 	uxtb.w	r9, r9
 8004dec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004df0:	d81f      	bhi.n	8004e32 <_printf_float+0x17e>
 8004df2:	464a      	mov	r2, r9
 8004df4:	3901      	subs	r1, #1
 8004df6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004dfa:	910d      	str	r1, [sp, #52]	; 0x34
 8004dfc:	f7ff ff1d 	bl	8004c3a <__exponent>
 8004e00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e02:	4682      	mov	sl, r0
 8004e04:	1813      	adds	r3, r2, r0
 8004e06:	2a01      	cmp	r2, #1
 8004e08:	6123      	str	r3, [r4, #16]
 8004e0a:	dc02      	bgt.n	8004e12 <_printf_float+0x15e>
 8004e0c:	6822      	ldr	r2, [r4, #0]
 8004e0e:	07d2      	lsls	r2, r2, #31
 8004e10:	d501      	bpl.n	8004e16 <_printf_float+0x162>
 8004e12:	3301      	adds	r3, #1
 8004e14:	6123      	str	r3, [r4, #16]
 8004e16:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d09b      	beq.n	8004d56 <_printf_float+0xa2>
 8004e1e:	232d      	movs	r3, #45	; 0x2d
 8004e20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e24:	e797      	b.n	8004d56 <_printf_float+0xa2>
 8004e26:	2947      	cmp	r1, #71	; 0x47
 8004e28:	d1bc      	bne.n	8004da4 <_printf_float+0xf0>
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1ba      	bne.n	8004da4 <_printf_float+0xf0>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e7b7      	b.n	8004da2 <_printf_float+0xee>
 8004e32:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004e36:	d118      	bne.n	8004e6a <_printf_float+0x1b6>
 8004e38:	2900      	cmp	r1, #0
 8004e3a:	6863      	ldr	r3, [r4, #4]
 8004e3c:	dd0b      	ble.n	8004e56 <_printf_float+0x1a2>
 8004e3e:	6121      	str	r1, [r4, #16]
 8004e40:	b913      	cbnz	r3, 8004e48 <_printf_float+0x194>
 8004e42:	6822      	ldr	r2, [r4, #0]
 8004e44:	07d0      	lsls	r0, r2, #31
 8004e46:	d502      	bpl.n	8004e4e <_printf_float+0x19a>
 8004e48:	3301      	adds	r3, #1
 8004e4a:	440b      	add	r3, r1
 8004e4c:	6123      	str	r3, [r4, #16]
 8004e4e:	f04f 0a00 	mov.w	sl, #0
 8004e52:	65a1      	str	r1, [r4, #88]	; 0x58
 8004e54:	e7df      	b.n	8004e16 <_printf_float+0x162>
 8004e56:	b913      	cbnz	r3, 8004e5e <_printf_float+0x1aa>
 8004e58:	6822      	ldr	r2, [r4, #0]
 8004e5a:	07d2      	lsls	r2, r2, #31
 8004e5c:	d501      	bpl.n	8004e62 <_printf_float+0x1ae>
 8004e5e:	3302      	adds	r3, #2
 8004e60:	e7f4      	b.n	8004e4c <_printf_float+0x198>
 8004e62:	2301      	movs	r3, #1
 8004e64:	e7f2      	b.n	8004e4c <_printf_float+0x198>
 8004e66:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004e6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e6c:	4299      	cmp	r1, r3
 8004e6e:	db05      	blt.n	8004e7c <_printf_float+0x1c8>
 8004e70:	6823      	ldr	r3, [r4, #0]
 8004e72:	6121      	str	r1, [r4, #16]
 8004e74:	07d8      	lsls	r0, r3, #31
 8004e76:	d5ea      	bpl.n	8004e4e <_printf_float+0x19a>
 8004e78:	1c4b      	adds	r3, r1, #1
 8004e7a:	e7e7      	b.n	8004e4c <_printf_float+0x198>
 8004e7c:	2900      	cmp	r1, #0
 8004e7e:	bfcc      	ite	gt
 8004e80:	2201      	movgt	r2, #1
 8004e82:	f1c1 0202 	rsble	r2, r1, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	e7e0      	b.n	8004e4c <_printf_float+0x198>
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	055a      	lsls	r2, r3, #21
 8004e8e:	d407      	bmi.n	8004ea0 <_printf_float+0x1ec>
 8004e90:	6923      	ldr	r3, [r4, #16]
 8004e92:	4642      	mov	r2, r8
 8004e94:	4631      	mov	r1, r6
 8004e96:	4628      	mov	r0, r5
 8004e98:	47b8      	blx	r7
 8004e9a:	3001      	adds	r0, #1
 8004e9c:	d12b      	bne.n	8004ef6 <_printf_float+0x242>
 8004e9e:	e764      	b.n	8004d6a <_printf_float+0xb6>
 8004ea0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004ea4:	f240 80dd 	bls.w	8005062 <_printf_float+0x3ae>
 8004ea8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004eac:	2200      	movs	r2, #0
 8004eae:	2300      	movs	r3, #0
 8004eb0:	f7fb fd7a 	bl	80009a8 <__aeabi_dcmpeq>
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	d033      	beq.n	8004f20 <_printf_float+0x26c>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	4631      	mov	r1, r6
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	4a35      	ldr	r2, [pc, #212]	; (8004f94 <_printf_float+0x2e0>)
 8004ec0:	47b8      	blx	r7
 8004ec2:	3001      	adds	r0, #1
 8004ec4:	f43f af51 	beq.w	8004d6a <_printf_float+0xb6>
 8004ec8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	db02      	blt.n	8004ed6 <_printf_float+0x222>
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	07d8      	lsls	r0, r3, #31
 8004ed4:	d50f      	bpl.n	8004ef6 <_printf_float+0x242>
 8004ed6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004eda:	4631      	mov	r1, r6
 8004edc:	4628      	mov	r0, r5
 8004ede:	47b8      	blx	r7
 8004ee0:	3001      	adds	r0, #1
 8004ee2:	f43f af42 	beq.w	8004d6a <_printf_float+0xb6>
 8004ee6:	f04f 0800 	mov.w	r8, #0
 8004eea:	f104 091a 	add.w	r9, r4, #26
 8004eee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	4543      	cmp	r3, r8
 8004ef4:	dc09      	bgt.n	8004f0a <_printf_float+0x256>
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	079b      	lsls	r3, r3, #30
 8004efa:	f100 8104 	bmi.w	8005106 <_printf_float+0x452>
 8004efe:	68e0      	ldr	r0, [r4, #12]
 8004f00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f02:	4298      	cmp	r0, r3
 8004f04:	bfb8      	it	lt
 8004f06:	4618      	movlt	r0, r3
 8004f08:	e731      	b.n	8004d6e <_printf_float+0xba>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	464a      	mov	r2, r9
 8004f0e:	4631      	mov	r1, r6
 8004f10:	4628      	mov	r0, r5
 8004f12:	47b8      	blx	r7
 8004f14:	3001      	adds	r0, #1
 8004f16:	f43f af28 	beq.w	8004d6a <_printf_float+0xb6>
 8004f1a:	f108 0801 	add.w	r8, r8, #1
 8004f1e:	e7e6      	b.n	8004eee <_printf_float+0x23a>
 8004f20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	dc38      	bgt.n	8004f98 <_printf_float+0x2e4>
 8004f26:	2301      	movs	r3, #1
 8004f28:	4631      	mov	r1, r6
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	4a19      	ldr	r2, [pc, #100]	; (8004f94 <_printf_float+0x2e0>)
 8004f2e:	47b8      	blx	r7
 8004f30:	3001      	adds	r0, #1
 8004f32:	f43f af1a 	beq.w	8004d6a <_printf_float+0xb6>
 8004f36:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	d102      	bne.n	8004f44 <_printf_float+0x290>
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	07d9      	lsls	r1, r3, #31
 8004f42:	d5d8      	bpl.n	8004ef6 <_printf_float+0x242>
 8004f44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f48:	4631      	mov	r1, r6
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	47b8      	blx	r7
 8004f4e:	3001      	adds	r0, #1
 8004f50:	f43f af0b 	beq.w	8004d6a <_printf_float+0xb6>
 8004f54:	f04f 0900 	mov.w	r9, #0
 8004f58:	f104 0a1a 	add.w	sl, r4, #26
 8004f5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f5e:	425b      	negs	r3, r3
 8004f60:	454b      	cmp	r3, r9
 8004f62:	dc01      	bgt.n	8004f68 <_printf_float+0x2b4>
 8004f64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f66:	e794      	b.n	8004e92 <_printf_float+0x1de>
 8004f68:	2301      	movs	r3, #1
 8004f6a:	4652      	mov	r2, sl
 8004f6c:	4631      	mov	r1, r6
 8004f6e:	4628      	mov	r0, r5
 8004f70:	47b8      	blx	r7
 8004f72:	3001      	adds	r0, #1
 8004f74:	f43f aef9 	beq.w	8004d6a <_printf_float+0xb6>
 8004f78:	f109 0901 	add.w	r9, r9, #1
 8004f7c:	e7ee      	b.n	8004f5c <_printf_float+0x2a8>
 8004f7e:	bf00      	nop
 8004f80:	7fefffff 	.word	0x7fefffff
 8004f84:	08007942 	.word	0x08007942
 8004f88:	08007946 	.word	0x08007946
 8004f8c:	0800794a 	.word	0x0800794a
 8004f90:	0800794e 	.word	0x0800794e
 8004f94:	08007952 	.word	0x08007952
 8004f98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	bfa8      	it	ge
 8004fa0:	461a      	movge	r2, r3
 8004fa2:	2a00      	cmp	r2, #0
 8004fa4:	4691      	mov	r9, r2
 8004fa6:	dc37      	bgt.n	8005018 <_printf_float+0x364>
 8004fa8:	f04f 0b00 	mov.w	fp, #0
 8004fac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fb0:	f104 021a 	add.w	r2, r4, #26
 8004fb4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004fb8:	ebaa 0309 	sub.w	r3, sl, r9
 8004fbc:	455b      	cmp	r3, fp
 8004fbe:	dc33      	bgt.n	8005028 <_printf_float+0x374>
 8004fc0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	db3b      	blt.n	8005040 <_printf_float+0x38c>
 8004fc8:	6823      	ldr	r3, [r4, #0]
 8004fca:	07da      	lsls	r2, r3, #31
 8004fcc:	d438      	bmi.n	8005040 <_printf_float+0x38c>
 8004fce:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004fd2:	eba2 0903 	sub.w	r9, r2, r3
 8004fd6:	eba2 020a 	sub.w	r2, r2, sl
 8004fda:	4591      	cmp	r9, r2
 8004fdc:	bfa8      	it	ge
 8004fde:	4691      	movge	r9, r2
 8004fe0:	f1b9 0f00 	cmp.w	r9, #0
 8004fe4:	dc34      	bgt.n	8005050 <_printf_float+0x39c>
 8004fe6:	f04f 0800 	mov.w	r8, #0
 8004fea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fee:	f104 0a1a 	add.w	sl, r4, #26
 8004ff2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ff6:	1a9b      	subs	r3, r3, r2
 8004ff8:	eba3 0309 	sub.w	r3, r3, r9
 8004ffc:	4543      	cmp	r3, r8
 8004ffe:	f77f af7a 	ble.w	8004ef6 <_printf_float+0x242>
 8005002:	2301      	movs	r3, #1
 8005004:	4652      	mov	r2, sl
 8005006:	4631      	mov	r1, r6
 8005008:	4628      	mov	r0, r5
 800500a:	47b8      	blx	r7
 800500c:	3001      	adds	r0, #1
 800500e:	f43f aeac 	beq.w	8004d6a <_printf_float+0xb6>
 8005012:	f108 0801 	add.w	r8, r8, #1
 8005016:	e7ec      	b.n	8004ff2 <_printf_float+0x33e>
 8005018:	4613      	mov	r3, r2
 800501a:	4631      	mov	r1, r6
 800501c:	4642      	mov	r2, r8
 800501e:	4628      	mov	r0, r5
 8005020:	47b8      	blx	r7
 8005022:	3001      	adds	r0, #1
 8005024:	d1c0      	bne.n	8004fa8 <_printf_float+0x2f4>
 8005026:	e6a0      	b.n	8004d6a <_printf_float+0xb6>
 8005028:	2301      	movs	r3, #1
 800502a:	4631      	mov	r1, r6
 800502c:	4628      	mov	r0, r5
 800502e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005030:	47b8      	blx	r7
 8005032:	3001      	adds	r0, #1
 8005034:	f43f ae99 	beq.w	8004d6a <_printf_float+0xb6>
 8005038:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800503a:	f10b 0b01 	add.w	fp, fp, #1
 800503e:	e7b9      	b.n	8004fb4 <_printf_float+0x300>
 8005040:	4631      	mov	r1, r6
 8005042:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005046:	4628      	mov	r0, r5
 8005048:	47b8      	blx	r7
 800504a:	3001      	adds	r0, #1
 800504c:	d1bf      	bne.n	8004fce <_printf_float+0x31a>
 800504e:	e68c      	b.n	8004d6a <_printf_float+0xb6>
 8005050:	464b      	mov	r3, r9
 8005052:	4631      	mov	r1, r6
 8005054:	4628      	mov	r0, r5
 8005056:	eb08 020a 	add.w	r2, r8, sl
 800505a:	47b8      	blx	r7
 800505c:	3001      	adds	r0, #1
 800505e:	d1c2      	bne.n	8004fe6 <_printf_float+0x332>
 8005060:	e683      	b.n	8004d6a <_printf_float+0xb6>
 8005062:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005064:	2a01      	cmp	r2, #1
 8005066:	dc01      	bgt.n	800506c <_printf_float+0x3b8>
 8005068:	07db      	lsls	r3, r3, #31
 800506a:	d539      	bpl.n	80050e0 <_printf_float+0x42c>
 800506c:	2301      	movs	r3, #1
 800506e:	4642      	mov	r2, r8
 8005070:	4631      	mov	r1, r6
 8005072:	4628      	mov	r0, r5
 8005074:	47b8      	blx	r7
 8005076:	3001      	adds	r0, #1
 8005078:	f43f ae77 	beq.w	8004d6a <_printf_float+0xb6>
 800507c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005080:	4631      	mov	r1, r6
 8005082:	4628      	mov	r0, r5
 8005084:	47b8      	blx	r7
 8005086:	3001      	adds	r0, #1
 8005088:	f43f ae6f 	beq.w	8004d6a <_printf_float+0xb6>
 800508c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005090:	2200      	movs	r2, #0
 8005092:	2300      	movs	r3, #0
 8005094:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005098:	f7fb fc86 	bl	80009a8 <__aeabi_dcmpeq>
 800509c:	b9d8      	cbnz	r0, 80050d6 <_printf_float+0x422>
 800509e:	f109 33ff 	add.w	r3, r9, #4294967295
 80050a2:	f108 0201 	add.w	r2, r8, #1
 80050a6:	4631      	mov	r1, r6
 80050a8:	4628      	mov	r0, r5
 80050aa:	47b8      	blx	r7
 80050ac:	3001      	adds	r0, #1
 80050ae:	d10e      	bne.n	80050ce <_printf_float+0x41a>
 80050b0:	e65b      	b.n	8004d6a <_printf_float+0xb6>
 80050b2:	2301      	movs	r3, #1
 80050b4:	464a      	mov	r2, r9
 80050b6:	4631      	mov	r1, r6
 80050b8:	4628      	mov	r0, r5
 80050ba:	47b8      	blx	r7
 80050bc:	3001      	adds	r0, #1
 80050be:	f43f ae54 	beq.w	8004d6a <_printf_float+0xb6>
 80050c2:	f108 0801 	add.w	r8, r8, #1
 80050c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050c8:	3b01      	subs	r3, #1
 80050ca:	4543      	cmp	r3, r8
 80050cc:	dcf1      	bgt.n	80050b2 <_printf_float+0x3fe>
 80050ce:	4653      	mov	r3, sl
 80050d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80050d4:	e6de      	b.n	8004e94 <_printf_float+0x1e0>
 80050d6:	f04f 0800 	mov.w	r8, #0
 80050da:	f104 091a 	add.w	r9, r4, #26
 80050de:	e7f2      	b.n	80050c6 <_printf_float+0x412>
 80050e0:	2301      	movs	r3, #1
 80050e2:	4642      	mov	r2, r8
 80050e4:	e7df      	b.n	80050a6 <_printf_float+0x3f2>
 80050e6:	2301      	movs	r3, #1
 80050e8:	464a      	mov	r2, r9
 80050ea:	4631      	mov	r1, r6
 80050ec:	4628      	mov	r0, r5
 80050ee:	47b8      	blx	r7
 80050f0:	3001      	adds	r0, #1
 80050f2:	f43f ae3a 	beq.w	8004d6a <_printf_float+0xb6>
 80050f6:	f108 0801 	add.w	r8, r8, #1
 80050fa:	68e3      	ldr	r3, [r4, #12]
 80050fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80050fe:	1a5b      	subs	r3, r3, r1
 8005100:	4543      	cmp	r3, r8
 8005102:	dcf0      	bgt.n	80050e6 <_printf_float+0x432>
 8005104:	e6fb      	b.n	8004efe <_printf_float+0x24a>
 8005106:	f04f 0800 	mov.w	r8, #0
 800510a:	f104 0919 	add.w	r9, r4, #25
 800510e:	e7f4      	b.n	80050fa <_printf_float+0x446>

08005110 <_printf_common>:
 8005110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005114:	4616      	mov	r6, r2
 8005116:	4699      	mov	r9, r3
 8005118:	688a      	ldr	r2, [r1, #8]
 800511a:	690b      	ldr	r3, [r1, #16]
 800511c:	4607      	mov	r7, r0
 800511e:	4293      	cmp	r3, r2
 8005120:	bfb8      	it	lt
 8005122:	4613      	movlt	r3, r2
 8005124:	6033      	str	r3, [r6, #0]
 8005126:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800512a:	460c      	mov	r4, r1
 800512c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005130:	b10a      	cbz	r2, 8005136 <_printf_common+0x26>
 8005132:	3301      	adds	r3, #1
 8005134:	6033      	str	r3, [r6, #0]
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	0699      	lsls	r1, r3, #26
 800513a:	bf42      	ittt	mi
 800513c:	6833      	ldrmi	r3, [r6, #0]
 800513e:	3302      	addmi	r3, #2
 8005140:	6033      	strmi	r3, [r6, #0]
 8005142:	6825      	ldr	r5, [r4, #0]
 8005144:	f015 0506 	ands.w	r5, r5, #6
 8005148:	d106      	bne.n	8005158 <_printf_common+0x48>
 800514a:	f104 0a19 	add.w	sl, r4, #25
 800514e:	68e3      	ldr	r3, [r4, #12]
 8005150:	6832      	ldr	r2, [r6, #0]
 8005152:	1a9b      	subs	r3, r3, r2
 8005154:	42ab      	cmp	r3, r5
 8005156:	dc2b      	bgt.n	80051b0 <_printf_common+0xa0>
 8005158:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800515c:	1e13      	subs	r3, r2, #0
 800515e:	6822      	ldr	r2, [r4, #0]
 8005160:	bf18      	it	ne
 8005162:	2301      	movne	r3, #1
 8005164:	0692      	lsls	r2, r2, #26
 8005166:	d430      	bmi.n	80051ca <_printf_common+0xba>
 8005168:	4649      	mov	r1, r9
 800516a:	4638      	mov	r0, r7
 800516c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005170:	47c0      	blx	r8
 8005172:	3001      	adds	r0, #1
 8005174:	d023      	beq.n	80051be <_printf_common+0xae>
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	6922      	ldr	r2, [r4, #16]
 800517a:	f003 0306 	and.w	r3, r3, #6
 800517e:	2b04      	cmp	r3, #4
 8005180:	bf14      	ite	ne
 8005182:	2500      	movne	r5, #0
 8005184:	6833      	ldreq	r3, [r6, #0]
 8005186:	f04f 0600 	mov.w	r6, #0
 800518a:	bf08      	it	eq
 800518c:	68e5      	ldreq	r5, [r4, #12]
 800518e:	f104 041a 	add.w	r4, r4, #26
 8005192:	bf08      	it	eq
 8005194:	1aed      	subeq	r5, r5, r3
 8005196:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800519a:	bf08      	it	eq
 800519c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051a0:	4293      	cmp	r3, r2
 80051a2:	bfc4      	itt	gt
 80051a4:	1a9b      	subgt	r3, r3, r2
 80051a6:	18ed      	addgt	r5, r5, r3
 80051a8:	42b5      	cmp	r5, r6
 80051aa:	d11a      	bne.n	80051e2 <_printf_common+0xd2>
 80051ac:	2000      	movs	r0, #0
 80051ae:	e008      	b.n	80051c2 <_printf_common+0xb2>
 80051b0:	2301      	movs	r3, #1
 80051b2:	4652      	mov	r2, sl
 80051b4:	4649      	mov	r1, r9
 80051b6:	4638      	mov	r0, r7
 80051b8:	47c0      	blx	r8
 80051ba:	3001      	adds	r0, #1
 80051bc:	d103      	bne.n	80051c6 <_printf_common+0xb6>
 80051be:	f04f 30ff 	mov.w	r0, #4294967295
 80051c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051c6:	3501      	adds	r5, #1
 80051c8:	e7c1      	b.n	800514e <_printf_common+0x3e>
 80051ca:	2030      	movs	r0, #48	; 0x30
 80051cc:	18e1      	adds	r1, r4, r3
 80051ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051d2:	1c5a      	adds	r2, r3, #1
 80051d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051d8:	4422      	add	r2, r4
 80051da:	3302      	adds	r3, #2
 80051dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051e0:	e7c2      	b.n	8005168 <_printf_common+0x58>
 80051e2:	2301      	movs	r3, #1
 80051e4:	4622      	mov	r2, r4
 80051e6:	4649      	mov	r1, r9
 80051e8:	4638      	mov	r0, r7
 80051ea:	47c0      	blx	r8
 80051ec:	3001      	adds	r0, #1
 80051ee:	d0e6      	beq.n	80051be <_printf_common+0xae>
 80051f0:	3601      	adds	r6, #1
 80051f2:	e7d9      	b.n	80051a8 <_printf_common+0x98>

080051f4 <_printf_i>:
 80051f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051f8:	7e0f      	ldrb	r7, [r1, #24]
 80051fa:	4691      	mov	r9, r2
 80051fc:	2f78      	cmp	r7, #120	; 0x78
 80051fe:	4680      	mov	r8, r0
 8005200:	460c      	mov	r4, r1
 8005202:	469a      	mov	sl, r3
 8005204:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005206:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800520a:	d807      	bhi.n	800521c <_printf_i+0x28>
 800520c:	2f62      	cmp	r7, #98	; 0x62
 800520e:	d80a      	bhi.n	8005226 <_printf_i+0x32>
 8005210:	2f00      	cmp	r7, #0
 8005212:	f000 80d5 	beq.w	80053c0 <_printf_i+0x1cc>
 8005216:	2f58      	cmp	r7, #88	; 0x58
 8005218:	f000 80c1 	beq.w	800539e <_printf_i+0x1aa>
 800521c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005220:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005224:	e03a      	b.n	800529c <_printf_i+0xa8>
 8005226:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800522a:	2b15      	cmp	r3, #21
 800522c:	d8f6      	bhi.n	800521c <_printf_i+0x28>
 800522e:	a101      	add	r1, pc, #4	; (adr r1, 8005234 <_printf_i+0x40>)
 8005230:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005234:	0800528d 	.word	0x0800528d
 8005238:	080052a1 	.word	0x080052a1
 800523c:	0800521d 	.word	0x0800521d
 8005240:	0800521d 	.word	0x0800521d
 8005244:	0800521d 	.word	0x0800521d
 8005248:	0800521d 	.word	0x0800521d
 800524c:	080052a1 	.word	0x080052a1
 8005250:	0800521d 	.word	0x0800521d
 8005254:	0800521d 	.word	0x0800521d
 8005258:	0800521d 	.word	0x0800521d
 800525c:	0800521d 	.word	0x0800521d
 8005260:	080053a7 	.word	0x080053a7
 8005264:	080052cd 	.word	0x080052cd
 8005268:	08005361 	.word	0x08005361
 800526c:	0800521d 	.word	0x0800521d
 8005270:	0800521d 	.word	0x0800521d
 8005274:	080053c9 	.word	0x080053c9
 8005278:	0800521d 	.word	0x0800521d
 800527c:	080052cd 	.word	0x080052cd
 8005280:	0800521d 	.word	0x0800521d
 8005284:	0800521d 	.word	0x0800521d
 8005288:	08005369 	.word	0x08005369
 800528c:	682b      	ldr	r3, [r5, #0]
 800528e:	1d1a      	adds	r2, r3, #4
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	602a      	str	r2, [r5, #0]
 8005294:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005298:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800529c:	2301      	movs	r3, #1
 800529e:	e0a0      	b.n	80053e2 <_printf_i+0x1ee>
 80052a0:	6820      	ldr	r0, [r4, #0]
 80052a2:	682b      	ldr	r3, [r5, #0]
 80052a4:	0607      	lsls	r7, r0, #24
 80052a6:	f103 0104 	add.w	r1, r3, #4
 80052aa:	6029      	str	r1, [r5, #0]
 80052ac:	d501      	bpl.n	80052b2 <_printf_i+0xbe>
 80052ae:	681e      	ldr	r6, [r3, #0]
 80052b0:	e003      	b.n	80052ba <_printf_i+0xc6>
 80052b2:	0646      	lsls	r6, r0, #25
 80052b4:	d5fb      	bpl.n	80052ae <_printf_i+0xba>
 80052b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80052ba:	2e00      	cmp	r6, #0
 80052bc:	da03      	bge.n	80052c6 <_printf_i+0xd2>
 80052be:	232d      	movs	r3, #45	; 0x2d
 80052c0:	4276      	negs	r6, r6
 80052c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052c6:	230a      	movs	r3, #10
 80052c8:	4859      	ldr	r0, [pc, #356]	; (8005430 <_printf_i+0x23c>)
 80052ca:	e012      	b.n	80052f2 <_printf_i+0xfe>
 80052cc:	682b      	ldr	r3, [r5, #0]
 80052ce:	6820      	ldr	r0, [r4, #0]
 80052d0:	1d19      	adds	r1, r3, #4
 80052d2:	6029      	str	r1, [r5, #0]
 80052d4:	0605      	lsls	r5, r0, #24
 80052d6:	d501      	bpl.n	80052dc <_printf_i+0xe8>
 80052d8:	681e      	ldr	r6, [r3, #0]
 80052da:	e002      	b.n	80052e2 <_printf_i+0xee>
 80052dc:	0641      	lsls	r1, r0, #25
 80052de:	d5fb      	bpl.n	80052d8 <_printf_i+0xe4>
 80052e0:	881e      	ldrh	r6, [r3, #0]
 80052e2:	2f6f      	cmp	r7, #111	; 0x6f
 80052e4:	bf0c      	ite	eq
 80052e6:	2308      	moveq	r3, #8
 80052e8:	230a      	movne	r3, #10
 80052ea:	4851      	ldr	r0, [pc, #324]	; (8005430 <_printf_i+0x23c>)
 80052ec:	2100      	movs	r1, #0
 80052ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052f2:	6865      	ldr	r5, [r4, #4]
 80052f4:	2d00      	cmp	r5, #0
 80052f6:	bfa8      	it	ge
 80052f8:	6821      	ldrge	r1, [r4, #0]
 80052fa:	60a5      	str	r5, [r4, #8]
 80052fc:	bfa4      	itt	ge
 80052fe:	f021 0104 	bicge.w	r1, r1, #4
 8005302:	6021      	strge	r1, [r4, #0]
 8005304:	b90e      	cbnz	r6, 800530a <_printf_i+0x116>
 8005306:	2d00      	cmp	r5, #0
 8005308:	d04b      	beq.n	80053a2 <_printf_i+0x1ae>
 800530a:	4615      	mov	r5, r2
 800530c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005310:	fb03 6711 	mls	r7, r3, r1, r6
 8005314:	5dc7      	ldrb	r7, [r0, r7]
 8005316:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800531a:	4637      	mov	r7, r6
 800531c:	42bb      	cmp	r3, r7
 800531e:	460e      	mov	r6, r1
 8005320:	d9f4      	bls.n	800530c <_printf_i+0x118>
 8005322:	2b08      	cmp	r3, #8
 8005324:	d10b      	bne.n	800533e <_printf_i+0x14a>
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	07de      	lsls	r6, r3, #31
 800532a:	d508      	bpl.n	800533e <_printf_i+0x14a>
 800532c:	6923      	ldr	r3, [r4, #16]
 800532e:	6861      	ldr	r1, [r4, #4]
 8005330:	4299      	cmp	r1, r3
 8005332:	bfde      	ittt	le
 8005334:	2330      	movle	r3, #48	; 0x30
 8005336:	f805 3c01 	strble.w	r3, [r5, #-1]
 800533a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800533e:	1b52      	subs	r2, r2, r5
 8005340:	6122      	str	r2, [r4, #16]
 8005342:	464b      	mov	r3, r9
 8005344:	4621      	mov	r1, r4
 8005346:	4640      	mov	r0, r8
 8005348:	f8cd a000 	str.w	sl, [sp]
 800534c:	aa03      	add	r2, sp, #12
 800534e:	f7ff fedf 	bl	8005110 <_printf_common>
 8005352:	3001      	adds	r0, #1
 8005354:	d14a      	bne.n	80053ec <_printf_i+0x1f8>
 8005356:	f04f 30ff 	mov.w	r0, #4294967295
 800535a:	b004      	add	sp, #16
 800535c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	f043 0320 	orr.w	r3, r3, #32
 8005366:	6023      	str	r3, [r4, #0]
 8005368:	2778      	movs	r7, #120	; 0x78
 800536a:	4832      	ldr	r0, [pc, #200]	; (8005434 <_printf_i+0x240>)
 800536c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005370:	6823      	ldr	r3, [r4, #0]
 8005372:	6829      	ldr	r1, [r5, #0]
 8005374:	061f      	lsls	r7, r3, #24
 8005376:	f851 6b04 	ldr.w	r6, [r1], #4
 800537a:	d402      	bmi.n	8005382 <_printf_i+0x18e>
 800537c:	065f      	lsls	r7, r3, #25
 800537e:	bf48      	it	mi
 8005380:	b2b6      	uxthmi	r6, r6
 8005382:	07df      	lsls	r7, r3, #31
 8005384:	bf48      	it	mi
 8005386:	f043 0320 	orrmi.w	r3, r3, #32
 800538a:	6029      	str	r1, [r5, #0]
 800538c:	bf48      	it	mi
 800538e:	6023      	strmi	r3, [r4, #0]
 8005390:	b91e      	cbnz	r6, 800539a <_printf_i+0x1a6>
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	f023 0320 	bic.w	r3, r3, #32
 8005398:	6023      	str	r3, [r4, #0]
 800539a:	2310      	movs	r3, #16
 800539c:	e7a6      	b.n	80052ec <_printf_i+0xf8>
 800539e:	4824      	ldr	r0, [pc, #144]	; (8005430 <_printf_i+0x23c>)
 80053a0:	e7e4      	b.n	800536c <_printf_i+0x178>
 80053a2:	4615      	mov	r5, r2
 80053a4:	e7bd      	b.n	8005322 <_printf_i+0x12e>
 80053a6:	682b      	ldr	r3, [r5, #0]
 80053a8:	6826      	ldr	r6, [r4, #0]
 80053aa:	1d18      	adds	r0, r3, #4
 80053ac:	6961      	ldr	r1, [r4, #20]
 80053ae:	6028      	str	r0, [r5, #0]
 80053b0:	0635      	lsls	r5, r6, #24
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	d501      	bpl.n	80053ba <_printf_i+0x1c6>
 80053b6:	6019      	str	r1, [r3, #0]
 80053b8:	e002      	b.n	80053c0 <_printf_i+0x1cc>
 80053ba:	0670      	lsls	r0, r6, #25
 80053bc:	d5fb      	bpl.n	80053b6 <_printf_i+0x1c2>
 80053be:	8019      	strh	r1, [r3, #0]
 80053c0:	2300      	movs	r3, #0
 80053c2:	4615      	mov	r5, r2
 80053c4:	6123      	str	r3, [r4, #16]
 80053c6:	e7bc      	b.n	8005342 <_printf_i+0x14e>
 80053c8:	682b      	ldr	r3, [r5, #0]
 80053ca:	2100      	movs	r1, #0
 80053cc:	1d1a      	adds	r2, r3, #4
 80053ce:	602a      	str	r2, [r5, #0]
 80053d0:	681d      	ldr	r5, [r3, #0]
 80053d2:	6862      	ldr	r2, [r4, #4]
 80053d4:	4628      	mov	r0, r5
 80053d6:	f000 f9d4 	bl	8005782 <memchr>
 80053da:	b108      	cbz	r0, 80053e0 <_printf_i+0x1ec>
 80053dc:	1b40      	subs	r0, r0, r5
 80053de:	6060      	str	r0, [r4, #4]
 80053e0:	6863      	ldr	r3, [r4, #4]
 80053e2:	6123      	str	r3, [r4, #16]
 80053e4:	2300      	movs	r3, #0
 80053e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053ea:	e7aa      	b.n	8005342 <_printf_i+0x14e>
 80053ec:	462a      	mov	r2, r5
 80053ee:	4649      	mov	r1, r9
 80053f0:	4640      	mov	r0, r8
 80053f2:	6923      	ldr	r3, [r4, #16]
 80053f4:	47d0      	blx	sl
 80053f6:	3001      	adds	r0, #1
 80053f8:	d0ad      	beq.n	8005356 <_printf_i+0x162>
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	079b      	lsls	r3, r3, #30
 80053fe:	d413      	bmi.n	8005428 <_printf_i+0x234>
 8005400:	68e0      	ldr	r0, [r4, #12]
 8005402:	9b03      	ldr	r3, [sp, #12]
 8005404:	4298      	cmp	r0, r3
 8005406:	bfb8      	it	lt
 8005408:	4618      	movlt	r0, r3
 800540a:	e7a6      	b.n	800535a <_printf_i+0x166>
 800540c:	2301      	movs	r3, #1
 800540e:	4632      	mov	r2, r6
 8005410:	4649      	mov	r1, r9
 8005412:	4640      	mov	r0, r8
 8005414:	47d0      	blx	sl
 8005416:	3001      	adds	r0, #1
 8005418:	d09d      	beq.n	8005356 <_printf_i+0x162>
 800541a:	3501      	adds	r5, #1
 800541c:	68e3      	ldr	r3, [r4, #12]
 800541e:	9903      	ldr	r1, [sp, #12]
 8005420:	1a5b      	subs	r3, r3, r1
 8005422:	42ab      	cmp	r3, r5
 8005424:	dcf2      	bgt.n	800540c <_printf_i+0x218>
 8005426:	e7eb      	b.n	8005400 <_printf_i+0x20c>
 8005428:	2500      	movs	r5, #0
 800542a:	f104 0619 	add.w	r6, r4, #25
 800542e:	e7f5      	b.n	800541c <_printf_i+0x228>
 8005430:	08007954 	.word	0x08007954
 8005434:	08007965 	.word	0x08007965

08005438 <std>:
 8005438:	2300      	movs	r3, #0
 800543a:	b510      	push	{r4, lr}
 800543c:	4604      	mov	r4, r0
 800543e:	e9c0 3300 	strd	r3, r3, [r0]
 8005442:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005446:	6083      	str	r3, [r0, #8]
 8005448:	8181      	strh	r1, [r0, #12]
 800544a:	6643      	str	r3, [r0, #100]	; 0x64
 800544c:	81c2      	strh	r2, [r0, #14]
 800544e:	6183      	str	r3, [r0, #24]
 8005450:	4619      	mov	r1, r3
 8005452:	2208      	movs	r2, #8
 8005454:	305c      	adds	r0, #92	; 0x5c
 8005456:	f000 f914 	bl	8005682 <memset>
 800545a:	4b0d      	ldr	r3, [pc, #52]	; (8005490 <std+0x58>)
 800545c:	6224      	str	r4, [r4, #32]
 800545e:	6263      	str	r3, [r4, #36]	; 0x24
 8005460:	4b0c      	ldr	r3, [pc, #48]	; (8005494 <std+0x5c>)
 8005462:	62a3      	str	r3, [r4, #40]	; 0x28
 8005464:	4b0c      	ldr	r3, [pc, #48]	; (8005498 <std+0x60>)
 8005466:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005468:	4b0c      	ldr	r3, [pc, #48]	; (800549c <std+0x64>)
 800546a:	6323      	str	r3, [r4, #48]	; 0x30
 800546c:	4b0c      	ldr	r3, [pc, #48]	; (80054a0 <std+0x68>)
 800546e:	429c      	cmp	r4, r3
 8005470:	d006      	beq.n	8005480 <std+0x48>
 8005472:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005476:	4294      	cmp	r4, r2
 8005478:	d002      	beq.n	8005480 <std+0x48>
 800547a:	33d0      	adds	r3, #208	; 0xd0
 800547c:	429c      	cmp	r4, r3
 800547e:	d105      	bne.n	800548c <std+0x54>
 8005480:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005488:	f000 b978 	b.w	800577c <__retarget_lock_init_recursive>
 800548c:	bd10      	pop	{r4, pc}
 800548e:	bf00      	nop
 8005490:	080055fd 	.word	0x080055fd
 8005494:	0800561f 	.word	0x0800561f
 8005498:	08005657 	.word	0x08005657
 800549c:	0800567b 	.word	0x0800567b
 80054a0:	20000884 	.word	0x20000884

080054a4 <stdio_exit_handler>:
 80054a4:	4a02      	ldr	r2, [pc, #8]	; (80054b0 <stdio_exit_handler+0xc>)
 80054a6:	4903      	ldr	r1, [pc, #12]	; (80054b4 <stdio_exit_handler+0x10>)
 80054a8:	4803      	ldr	r0, [pc, #12]	; (80054b8 <stdio_exit_handler+0x14>)
 80054aa:	f000 b869 	b.w	8005580 <_fwalk_sglue>
 80054ae:	bf00      	nop
 80054b0:	2000007c 	.word	0x2000007c
 80054b4:	08007135 	.word	0x08007135
 80054b8:	20000088 	.word	0x20000088

080054bc <cleanup_stdio>:
 80054bc:	6841      	ldr	r1, [r0, #4]
 80054be:	4b0c      	ldr	r3, [pc, #48]	; (80054f0 <cleanup_stdio+0x34>)
 80054c0:	b510      	push	{r4, lr}
 80054c2:	4299      	cmp	r1, r3
 80054c4:	4604      	mov	r4, r0
 80054c6:	d001      	beq.n	80054cc <cleanup_stdio+0x10>
 80054c8:	f001 fe34 	bl	8007134 <_fflush_r>
 80054cc:	68a1      	ldr	r1, [r4, #8]
 80054ce:	4b09      	ldr	r3, [pc, #36]	; (80054f4 <cleanup_stdio+0x38>)
 80054d0:	4299      	cmp	r1, r3
 80054d2:	d002      	beq.n	80054da <cleanup_stdio+0x1e>
 80054d4:	4620      	mov	r0, r4
 80054d6:	f001 fe2d 	bl	8007134 <_fflush_r>
 80054da:	68e1      	ldr	r1, [r4, #12]
 80054dc:	4b06      	ldr	r3, [pc, #24]	; (80054f8 <cleanup_stdio+0x3c>)
 80054de:	4299      	cmp	r1, r3
 80054e0:	d004      	beq.n	80054ec <cleanup_stdio+0x30>
 80054e2:	4620      	mov	r0, r4
 80054e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054e8:	f001 be24 	b.w	8007134 <_fflush_r>
 80054ec:	bd10      	pop	{r4, pc}
 80054ee:	bf00      	nop
 80054f0:	20000884 	.word	0x20000884
 80054f4:	200008ec 	.word	0x200008ec
 80054f8:	20000954 	.word	0x20000954

080054fc <global_stdio_init.part.0>:
 80054fc:	b510      	push	{r4, lr}
 80054fe:	4b0b      	ldr	r3, [pc, #44]	; (800552c <global_stdio_init.part.0+0x30>)
 8005500:	4c0b      	ldr	r4, [pc, #44]	; (8005530 <global_stdio_init.part.0+0x34>)
 8005502:	4a0c      	ldr	r2, [pc, #48]	; (8005534 <global_stdio_init.part.0+0x38>)
 8005504:	4620      	mov	r0, r4
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	2104      	movs	r1, #4
 800550a:	2200      	movs	r2, #0
 800550c:	f7ff ff94 	bl	8005438 <std>
 8005510:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005514:	2201      	movs	r2, #1
 8005516:	2109      	movs	r1, #9
 8005518:	f7ff ff8e 	bl	8005438 <std>
 800551c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005520:	2202      	movs	r2, #2
 8005522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005526:	2112      	movs	r1, #18
 8005528:	f7ff bf86 	b.w	8005438 <std>
 800552c:	200009bc 	.word	0x200009bc
 8005530:	20000884 	.word	0x20000884
 8005534:	080054a5 	.word	0x080054a5

08005538 <__sfp_lock_acquire>:
 8005538:	4801      	ldr	r0, [pc, #4]	; (8005540 <__sfp_lock_acquire+0x8>)
 800553a:	f000 b920 	b.w	800577e <__retarget_lock_acquire_recursive>
 800553e:	bf00      	nop
 8005540:	200009c5 	.word	0x200009c5

08005544 <__sfp_lock_release>:
 8005544:	4801      	ldr	r0, [pc, #4]	; (800554c <__sfp_lock_release+0x8>)
 8005546:	f000 b91b 	b.w	8005780 <__retarget_lock_release_recursive>
 800554a:	bf00      	nop
 800554c:	200009c5 	.word	0x200009c5

08005550 <__sinit>:
 8005550:	b510      	push	{r4, lr}
 8005552:	4604      	mov	r4, r0
 8005554:	f7ff fff0 	bl	8005538 <__sfp_lock_acquire>
 8005558:	6a23      	ldr	r3, [r4, #32]
 800555a:	b11b      	cbz	r3, 8005564 <__sinit+0x14>
 800555c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005560:	f7ff bff0 	b.w	8005544 <__sfp_lock_release>
 8005564:	4b04      	ldr	r3, [pc, #16]	; (8005578 <__sinit+0x28>)
 8005566:	6223      	str	r3, [r4, #32]
 8005568:	4b04      	ldr	r3, [pc, #16]	; (800557c <__sinit+0x2c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1f5      	bne.n	800555c <__sinit+0xc>
 8005570:	f7ff ffc4 	bl	80054fc <global_stdio_init.part.0>
 8005574:	e7f2      	b.n	800555c <__sinit+0xc>
 8005576:	bf00      	nop
 8005578:	080054bd 	.word	0x080054bd
 800557c:	200009bc 	.word	0x200009bc

08005580 <_fwalk_sglue>:
 8005580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005584:	4607      	mov	r7, r0
 8005586:	4688      	mov	r8, r1
 8005588:	4614      	mov	r4, r2
 800558a:	2600      	movs	r6, #0
 800558c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005590:	f1b9 0901 	subs.w	r9, r9, #1
 8005594:	d505      	bpl.n	80055a2 <_fwalk_sglue+0x22>
 8005596:	6824      	ldr	r4, [r4, #0]
 8005598:	2c00      	cmp	r4, #0
 800559a:	d1f7      	bne.n	800558c <_fwalk_sglue+0xc>
 800559c:	4630      	mov	r0, r6
 800559e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055a2:	89ab      	ldrh	r3, [r5, #12]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d907      	bls.n	80055b8 <_fwalk_sglue+0x38>
 80055a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055ac:	3301      	adds	r3, #1
 80055ae:	d003      	beq.n	80055b8 <_fwalk_sglue+0x38>
 80055b0:	4629      	mov	r1, r5
 80055b2:	4638      	mov	r0, r7
 80055b4:	47c0      	blx	r8
 80055b6:	4306      	orrs	r6, r0
 80055b8:	3568      	adds	r5, #104	; 0x68
 80055ba:	e7e9      	b.n	8005590 <_fwalk_sglue+0x10>

080055bc <siprintf>:
 80055bc:	b40e      	push	{r1, r2, r3}
 80055be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055c2:	b500      	push	{lr}
 80055c4:	b09c      	sub	sp, #112	; 0x70
 80055c6:	ab1d      	add	r3, sp, #116	; 0x74
 80055c8:	9002      	str	r0, [sp, #8]
 80055ca:	9006      	str	r0, [sp, #24]
 80055cc:	9107      	str	r1, [sp, #28]
 80055ce:	9104      	str	r1, [sp, #16]
 80055d0:	4808      	ldr	r0, [pc, #32]	; (80055f4 <siprintf+0x38>)
 80055d2:	4909      	ldr	r1, [pc, #36]	; (80055f8 <siprintf+0x3c>)
 80055d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80055d8:	9105      	str	r1, [sp, #20]
 80055da:	6800      	ldr	r0, [r0, #0]
 80055dc:	a902      	add	r1, sp, #8
 80055de:	9301      	str	r3, [sp, #4]
 80055e0:	f001 fc28 	bl	8006e34 <_svfiprintf_r>
 80055e4:	2200      	movs	r2, #0
 80055e6:	9b02      	ldr	r3, [sp, #8]
 80055e8:	701a      	strb	r2, [r3, #0]
 80055ea:	b01c      	add	sp, #112	; 0x70
 80055ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80055f0:	b003      	add	sp, #12
 80055f2:	4770      	bx	lr
 80055f4:	200000d4 	.word	0x200000d4
 80055f8:	ffff0208 	.word	0xffff0208

080055fc <__sread>:
 80055fc:	b510      	push	{r4, lr}
 80055fe:	460c      	mov	r4, r1
 8005600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005604:	f000 f86c 	bl	80056e0 <_read_r>
 8005608:	2800      	cmp	r0, #0
 800560a:	bfab      	itete	ge
 800560c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800560e:	89a3      	ldrhlt	r3, [r4, #12]
 8005610:	181b      	addge	r3, r3, r0
 8005612:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005616:	bfac      	ite	ge
 8005618:	6563      	strge	r3, [r4, #84]	; 0x54
 800561a:	81a3      	strhlt	r3, [r4, #12]
 800561c:	bd10      	pop	{r4, pc}

0800561e <__swrite>:
 800561e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005622:	461f      	mov	r7, r3
 8005624:	898b      	ldrh	r3, [r1, #12]
 8005626:	4605      	mov	r5, r0
 8005628:	05db      	lsls	r3, r3, #23
 800562a:	460c      	mov	r4, r1
 800562c:	4616      	mov	r6, r2
 800562e:	d505      	bpl.n	800563c <__swrite+0x1e>
 8005630:	2302      	movs	r3, #2
 8005632:	2200      	movs	r2, #0
 8005634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005638:	f000 f840 	bl	80056bc <_lseek_r>
 800563c:	89a3      	ldrh	r3, [r4, #12]
 800563e:	4632      	mov	r2, r6
 8005640:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005644:	81a3      	strh	r3, [r4, #12]
 8005646:	4628      	mov	r0, r5
 8005648:	463b      	mov	r3, r7
 800564a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800564e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005652:	f000 b857 	b.w	8005704 <_write_r>

08005656 <__sseek>:
 8005656:	b510      	push	{r4, lr}
 8005658:	460c      	mov	r4, r1
 800565a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800565e:	f000 f82d 	bl	80056bc <_lseek_r>
 8005662:	1c43      	adds	r3, r0, #1
 8005664:	89a3      	ldrh	r3, [r4, #12]
 8005666:	bf15      	itete	ne
 8005668:	6560      	strne	r0, [r4, #84]	; 0x54
 800566a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800566e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005672:	81a3      	strheq	r3, [r4, #12]
 8005674:	bf18      	it	ne
 8005676:	81a3      	strhne	r3, [r4, #12]
 8005678:	bd10      	pop	{r4, pc}

0800567a <__sclose>:
 800567a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800567e:	f000 b80d 	b.w	800569c <_close_r>

08005682 <memset>:
 8005682:	4603      	mov	r3, r0
 8005684:	4402      	add	r2, r0
 8005686:	4293      	cmp	r3, r2
 8005688:	d100      	bne.n	800568c <memset+0xa>
 800568a:	4770      	bx	lr
 800568c:	f803 1b01 	strb.w	r1, [r3], #1
 8005690:	e7f9      	b.n	8005686 <memset+0x4>
	...

08005694 <_localeconv_r>:
 8005694:	4800      	ldr	r0, [pc, #0]	; (8005698 <_localeconv_r+0x4>)
 8005696:	4770      	bx	lr
 8005698:	200001c8 	.word	0x200001c8

0800569c <_close_r>:
 800569c:	b538      	push	{r3, r4, r5, lr}
 800569e:	2300      	movs	r3, #0
 80056a0:	4d05      	ldr	r5, [pc, #20]	; (80056b8 <_close_r+0x1c>)
 80056a2:	4604      	mov	r4, r0
 80056a4:	4608      	mov	r0, r1
 80056a6:	602b      	str	r3, [r5, #0]
 80056a8:	f7fc fa4e 	bl	8001b48 <_close>
 80056ac:	1c43      	adds	r3, r0, #1
 80056ae:	d102      	bne.n	80056b6 <_close_r+0x1a>
 80056b0:	682b      	ldr	r3, [r5, #0]
 80056b2:	b103      	cbz	r3, 80056b6 <_close_r+0x1a>
 80056b4:	6023      	str	r3, [r4, #0]
 80056b6:	bd38      	pop	{r3, r4, r5, pc}
 80056b8:	200009c0 	.word	0x200009c0

080056bc <_lseek_r>:
 80056bc:	b538      	push	{r3, r4, r5, lr}
 80056be:	4604      	mov	r4, r0
 80056c0:	4608      	mov	r0, r1
 80056c2:	4611      	mov	r1, r2
 80056c4:	2200      	movs	r2, #0
 80056c6:	4d05      	ldr	r5, [pc, #20]	; (80056dc <_lseek_r+0x20>)
 80056c8:	602a      	str	r2, [r5, #0]
 80056ca:	461a      	mov	r2, r3
 80056cc:	f7fc fa60 	bl	8001b90 <_lseek>
 80056d0:	1c43      	adds	r3, r0, #1
 80056d2:	d102      	bne.n	80056da <_lseek_r+0x1e>
 80056d4:	682b      	ldr	r3, [r5, #0]
 80056d6:	b103      	cbz	r3, 80056da <_lseek_r+0x1e>
 80056d8:	6023      	str	r3, [r4, #0]
 80056da:	bd38      	pop	{r3, r4, r5, pc}
 80056dc:	200009c0 	.word	0x200009c0

080056e0 <_read_r>:
 80056e0:	b538      	push	{r3, r4, r5, lr}
 80056e2:	4604      	mov	r4, r0
 80056e4:	4608      	mov	r0, r1
 80056e6:	4611      	mov	r1, r2
 80056e8:	2200      	movs	r2, #0
 80056ea:	4d05      	ldr	r5, [pc, #20]	; (8005700 <_read_r+0x20>)
 80056ec:	602a      	str	r2, [r5, #0]
 80056ee:	461a      	mov	r2, r3
 80056f0:	f7fc f9f1 	bl	8001ad6 <_read>
 80056f4:	1c43      	adds	r3, r0, #1
 80056f6:	d102      	bne.n	80056fe <_read_r+0x1e>
 80056f8:	682b      	ldr	r3, [r5, #0]
 80056fa:	b103      	cbz	r3, 80056fe <_read_r+0x1e>
 80056fc:	6023      	str	r3, [r4, #0]
 80056fe:	bd38      	pop	{r3, r4, r5, pc}
 8005700:	200009c0 	.word	0x200009c0

08005704 <_write_r>:
 8005704:	b538      	push	{r3, r4, r5, lr}
 8005706:	4604      	mov	r4, r0
 8005708:	4608      	mov	r0, r1
 800570a:	4611      	mov	r1, r2
 800570c:	2200      	movs	r2, #0
 800570e:	4d05      	ldr	r5, [pc, #20]	; (8005724 <_write_r+0x20>)
 8005710:	602a      	str	r2, [r5, #0]
 8005712:	461a      	mov	r2, r3
 8005714:	f7fc f9fc 	bl	8001b10 <_write>
 8005718:	1c43      	adds	r3, r0, #1
 800571a:	d102      	bne.n	8005722 <_write_r+0x1e>
 800571c:	682b      	ldr	r3, [r5, #0]
 800571e:	b103      	cbz	r3, 8005722 <_write_r+0x1e>
 8005720:	6023      	str	r3, [r4, #0]
 8005722:	bd38      	pop	{r3, r4, r5, pc}
 8005724:	200009c0 	.word	0x200009c0

08005728 <__errno>:
 8005728:	4b01      	ldr	r3, [pc, #4]	; (8005730 <__errno+0x8>)
 800572a:	6818      	ldr	r0, [r3, #0]
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	200000d4 	.word	0x200000d4

08005734 <__libc_init_array>:
 8005734:	b570      	push	{r4, r5, r6, lr}
 8005736:	2600      	movs	r6, #0
 8005738:	4d0c      	ldr	r5, [pc, #48]	; (800576c <__libc_init_array+0x38>)
 800573a:	4c0d      	ldr	r4, [pc, #52]	; (8005770 <__libc_init_array+0x3c>)
 800573c:	1b64      	subs	r4, r4, r5
 800573e:	10a4      	asrs	r4, r4, #2
 8005740:	42a6      	cmp	r6, r4
 8005742:	d109      	bne.n	8005758 <__libc_init_array+0x24>
 8005744:	f002 f888 	bl	8007858 <_init>
 8005748:	2600      	movs	r6, #0
 800574a:	4d0a      	ldr	r5, [pc, #40]	; (8005774 <__libc_init_array+0x40>)
 800574c:	4c0a      	ldr	r4, [pc, #40]	; (8005778 <__libc_init_array+0x44>)
 800574e:	1b64      	subs	r4, r4, r5
 8005750:	10a4      	asrs	r4, r4, #2
 8005752:	42a6      	cmp	r6, r4
 8005754:	d105      	bne.n	8005762 <__libc_init_array+0x2e>
 8005756:	bd70      	pop	{r4, r5, r6, pc}
 8005758:	f855 3b04 	ldr.w	r3, [r5], #4
 800575c:	4798      	blx	r3
 800575e:	3601      	adds	r6, #1
 8005760:	e7ee      	b.n	8005740 <__libc_init_array+0xc>
 8005762:	f855 3b04 	ldr.w	r3, [r5], #4
 8005766:	4798      	blx	r3
 8005768:	3601      	adds	r6, #1
 800576a:	e7f2      	b.n	8005752 <__libc_init_array+0x1e>
 800576c:	08007cb4 	.word	0x08007cb4
 8005770:	08007cb4 	.word	0x08007cb4
 8005774:	08007cb4 	.word	0x08007cb4
 8005778:	08007cb8 	.word	0x08007cb8

0800577c <__retarget_lock_init_recursive>:
 800577c:	4770      	bx	lr

0800577e <__retarget_lock_acquire_recursive>:
 800577e:	4770      	bx	lr

08005780 <__retarget_lock_release_recursive>:
 8005780:	4770      	bx	lr

08005782 <memchr>:
 8005782:	4603      	mov	r3, r0
 8005784:	b510      	push	{r4, lr}
 8005786:	b2c9      	uxtb	r1, r1
 8005788:	4402      	add	r2, r0
 800578a:	4293      	cmp	r3, r2
 800578c:	4618      	mov	r0, r3
 800578e:	d101      	bne.n	8005794 <memchr+0x12>
 8005790:	2000      	movs	r0, #0
 8005792:	e003      	b.n	800579c <memchr+0x1a>
 8005794:	7804      	ldrb	r4, [r0, #0]
 8005796:	3301      	adds	r3, #1
 8005798:	428c      	cmp	r4, r1
 800579a:	d1f6      	bne.n	800578a <memchr+0x8>
 800579c:	bd10      	pop	{r4, pc}

0800579e <memcpy>:
 800579e:	440a      	add	r2, r1
 80057a0:	4291      	cmp	r1, r2
 80057a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80057a6:	d100      	bne.n	80057aa <memcpy+0xc>
 80057a8:	4770      	bx	lr
 80057aa:	b510      	push	{r4, lr}
 80057ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057b0:	4291      	cmp	r1, r2
 80057b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057b6:	d1f9      	bne.n	80057ac <memcpy+0xe>
 80057b8:	bd10      	pop	{r4, pc}

080057ba <quorem>:
 80057ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057be:	6903      	ldr	r3, [r0, #16]
 80057c0:	690c      	ldr	r4, [r1, #16]
 80057c2:	4607      	mov	r7, r0
 80057c4:	42a3      	cmp	r3, r4
 80057c6:	db7f      	blt.n	80058c8 <quorem+0x10e>
 80057c8:	3c01      	subs	r4, #1
 80057ca:	f100 0514 	add.w	r5, r0, #20
 80057ce:	f101 0814 	add.w	r8, r1, #20
 80057d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057d6:	9301      	str	r3, [sp, #4]
 80057d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80057dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057e0:	3301      	adds	r3, #1
 80057e2:	429a      	cmp	r2, r3
 80057e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80057e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80057ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80057f0:	d331      	bcc.n	8005856 <quorem+0x9c>
 80057f2:	f04f 0e00 	mov.w	lr, #0
 80057f6:	4640      	mov	r0, r8
 80057f8:	46ac      	mov	ip, r5
 80057fa:	46f2      	mov	sl, lr
 80057fc:	f850 2b04 	ldr.w	r2, [r0], #4
 8005800:	b293      	uxth	r3, r2
 8005802:	fb06 e303 	mla	r3, r6, r3, lr
 8005806:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800580a:	0c1a      	lsrs	r2, r3, #16
 800580c:	b29b      	uxth	r3, r3
 800580e:	fb06 220e 	mla	r2, r6, lr, r2
 8005812:	ebaa 0303 	sub.w	r3, sl, r3
 8005816:	f8dc a000 	ldr.w	sl, [ip]
 800581a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800581e:	fa1f fa8a 	uxth.w	sl, sl
 8005822:	4453      	add	r3, sl
 8005824:	f8dc a000 	ldr.w	sl, [ip]
 8005828:	b292      	uxth	r2, r2
 800582a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800582e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005832:	b29b      	uxth	r3, r3
 8005834:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005838:	4581      	cmp	r9, r0
 800583a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800583e:	f84c 3b04 	str.w	r3, [ip], #4
 8005842:	d2db      	bcs.n	80057fc <quorem+0x42>
 8005844:	f855 300b 	ldr.w	r3, [r5, fp]
 8005848:	b92b      	cbnz	r3, 8005856 <quorem+0x9c>
 800584a:	9b01      	ldr	r3, [sp, #4]
 800584c:	3b04      	subs	r3, #4
 800584e:	429d      	cmp	r5, r3
 8005850:	461a      	mov	r2, r3
 8005852:	d32d      	bcc.n	80058b0 <quorem+0xf6>
 8005854:	613c      	str	r4, [r7, #16]
 8005856:	4638      	mov	r0, r7
 8005858:	f001 f994 	bl	8006b84 <__mcmp>
 800585c:	2800      	cmp	r0, #0
 800585e:	db23      	blt.n	80058a8 <quorem+0xee>
 8005860:	4629      	mov	r1, r5
 8005862:	2000      	movs	r0, #0
 8005864:	3601      	adds	r6, #1
 8005866:	f858 2b04 	ldr.w	r2, [r8], #4
 800586a:	f8d1 c000 	ldr.w	ip, [r1]
 800586e:	b293      	uxth	r3, r2
 8005870:	1ac3      	subs	r3, r0, r3
 8005872:	0c12      	lsrs	r2, r2, #16
 8005874:	fa1f f08c 	uxth.w	r0, ip
 8005878:	4403      	add	r3, r0
 800587a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800587e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005882:	b29b      	uxth	r3, r3
 8005884:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005888:	45c1      	cmp	r9, r8
 800588a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800588e:	f841 3b04 	str.w	r3, [r1], #4
 8005892:	d2e8      	bcs.n	8005866 <quorem+0xac>
 8005894:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005898:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800589c:	b922      	cbnz	r2, 80058a8 <quorem+0xee>
 800589e:	3b04      	subs	r3, #4
 80058a0:	429d      	cmp	r5, r3
 80058a2:	461a      	mov	r2, r3
 80058a4:	d30a      	bcc.n	80058bc <quorem+0x102>
 80058a6:	613c      	str	r4, [r7, #16]
 80058a8:	4630      	mov	r0, r6
 80058aa:	b003      	add	sp, #12
 80058ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b0:	6812      	ldr	r2, [r2, #0]
 80058b2:	3b04      	subs	r3, #4
 80058b4:	2a00      	cmp	r2, #0
 80058b6:	d1cd      	bne.n	8005854 <quorem+0x9a>
 80058b8:	3c01      	subs	r4, #1
 80058ba:	e7c8      	b.n	800584e <quorem+0x94>
 80058bc:	6812      	ldr	r2, [r2, #0]
 80058be:	3b04      	subs	r3, #4
 80058c0:	2a00      	cmp	r2, #0
 80058c2:	d1f0      	bne.n	80058a6 <quorem+0xec>
 80058c4:	3c01      	subs	r4, #1
 80058c6:	e7eb      	b.n	80058a0 <quorem+0xe6>
 80058c8:	2000      	movs	r0, #0
 80058ca:	e7ee      	b.n	80058aa <quorem+0xf0>
 80058cc:	0000      	movs	r0, r0
	...

080058d0 <_dtoa_r>:
 80058d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d4:	4616      	mov	r6, r2
 80058d6:	461f      	mov	r7, r3
 80058d8:	69c4      	ldr	r4, [r0, #28]
 80058da:	b099      	sub	sp, #100	; 0x64
 80058dc:	4605      	mov	r5, r0
 80058de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80058e2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80058e6:	b974      	cbnz	r4, 8005906 <_dtoa_r+0x36>
 80058e8:	2010      	movs	r0, #16
 80058ea:	f000 fe1d 	bl	8006528 <malloc>
 80058ee:	4602      	mov	r2, r0
 80058f0:	61e8      	str	r0, [r5, #28]
 80058f2:	b920      	cbnz	r0, 80058fe <_dtoa_r+0x2e>
 80058f4:	21ef      	movs	r1, #239	; 0xef
 80058f6:	4bac      	ldr	r3, [pc, #688]	; (8005ba8 <_dtoa_r+0x2d8>)
 80058f8:	48ac      	ldr	r0, [pc, #688]	; (8005bac <_dtoa_r+0x2dc>)
 80058fa:	f001 fc6d 	bl	80071d8 <__assert_func>
 80058fe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005902:	6004      	str	r4, [r0, #0]
 8005904:	60c4      	str	r4, [r0, #12]
 8005906:	69eb      	ldr	r3, [r5, #28]
 8005908:	6819      	ldr	r1, [r3, #0]
 800590a:	b151      	cbz	r1, 8005922 <_dtoa_r+0x52>
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	2301      	movs	r3, #1
 8005910:	4093      	lsls	r3, r2
 8005912:	604a      	str	r2, [r1, #4]
 8005914:	608b      	str	r3, [r1, #8]
 8005916:	4628      	mov	r0, r5
 8005918:	f000 fefa 	bl	8006710 <_Bfree>
 800591c:	2200      	movs	r2, #0
 800591e:	69eb      	ldr	r3, [r5, #28]
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	1e3b      	subs	r3, r7, #0
 8005924:	bfaf      	iteee	ge
 8005926:	2300      	movge	r3, #0
 8005928:	2201      	movlt	r2, #1
 800592a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800592e:	9305      	strlt	r3, [sp, #20]
 8005930:	bfa8      	it	ge
 8005932:	f8c8 3000 	strge.w	r3, [r8]
 8005936:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800593a:	4b9d      	ldr	r3, [pc, #628]	; (8005bb0 <_dtoa_r+0x2e0>)
 800593c:	bfb8      	it	lt
 800593e:	f8c8 2000 	strlt.w	r2, [r8]
 8005942:	ea33 0309 	bics.w	r3, r3, r9
 8005946:	d119      	bne.n	800597c <_dtoa_r+0xac>
 8005948:	f242 730f 	movw	r3, #9999	; 0x270f
 800594c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800594e:	6013      	str	r3, [r2, #0]
 8005950:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005954:	4333      	orrs	r3, r6
 8005956:	f000 8589 	beq.w	800646c <_dtoa_r+0xb9c>
 800595a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800595c:	b953      	cbnz	r3, 8005974 <_dtoa_r+0xa4>
 800595e:	4b95      	ldr	r3, [pc, #596]	; (8005bb4 <_dtoa_r+0x2e4>)
 8005960:	e023      	b.n	80059aa <_dtoa_r+0xda>
 8005962:	4b95      	ldr	r3, [pc, #596]	; (8005bb8 <_dtoa_r+0x2e8>)
 8005964:	9303      	str	r3, [sp, #12]
 8005966:	3308      	adds	r3, #8
 8005968:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800596a:	6013      	str	r3, [r2, #0]
 800596c:	9803      	ldr	r0, [sp, #12]
 800596e:	b019      	add	sp, #100	; 0x64
 8005970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005974:	4b8f      	ldr	r3, [pc, #572]	; (8005bb4 <_dtoa_r+0x2e4>)
 8005976:	9303      	str	r3, [sp, #12]
 8005978:	3303      	adds	r3, #3
 800597a:	e7f5      	b.n	8005968 <_dtoa_r+0x98>
 800597c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005980:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005984:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005988:	2200      	movs	r2, #0
 800598a:	2300      	movs	r3, #0
 800598c:	f7fb f80c 	bl	80009a8 <__aeabi_dcmpeq>
 8005990:	4680      	mov	r8, r0
 8005992:	b160      	cbz	r0, 80059ae <_dtoa_r+0xde>
 8005994:	2301      	movs	r3, #1
 8005996:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005998:	6013      	str	r3, [r2, #0]
 800599a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 8562 	beq.w	8006466 <_dtoa_r+0xb96>
 80059a2:	4b86      	ldr	r3, [pc, #536]	; (8005bbc <_dtoa_r+0x2ec>)
 80059a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80059a6:	6013      	str	r3, [r2, #0]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	9303      	str	r3, [sp, #12]
 80059ac:	e7de      	b.n	800596c <_dtoa_r+0x9c>
 80059ae:	ab16      	add	r3, sp, #88	; 0x58
 80059b0:	9301      	str	r3, [sp, #4]
 80059b2:	ab17      	add	r3, sp, #92	; 0x5c
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	4628      	mov	r0, r5
 80059b8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80059bc:	f001 f98a 	bl	8006cd4 <__d2b>
 80059c0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80059c4:	4682      	mov	sl, r0
 80059c6:	2c00      	cmp	r4, #0
 80059c8:	d07e      	beq.n	8005ac8 <_dtoa_r+0x1f8>
 80059ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80059ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059d0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80059d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059d8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80059dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80059e0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80059e4:	4619      	mov	r1, r3
 80059e6:	2200      	movs	r2, #0
 80059e8:	4b75      	ldr	r3, [pc, #468]	; (8005bc0 <_dtoa_r+0x2f0>)
 80059ea:	f7fa fbbd 	bl	8000168 <__aeabi_dsub>
 80059ee:	a368      	add	r3, pc, #416	; (adr r3, 8005b90 <_dtoa_r+0x2c0>)
 80059f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f4:	f7fa fd70 	bl	80004d8 <__aeabi_dmul>
 80059f8:	a367      	add	r3, pc, #412	; (adr r3, 8005b98 <_dtoa_r+0x2c8>)
 80059fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fe:	f7fa fbb5 	bl	800016c <__adddf3>
 8005a02:	4606      	mov	r6, r0
 8005a04:	4620      	mov	r0, r4
 8005a06:	460f      	mov	r7, r1
 8005a08:	f7fa fcfc 	bl	8000404 <__aeabi_i2d>
 8005a0c:	a364      	add	r3, pc, #400	; (adr r3, 8005ba0 <_dtoa_r+0x2d0>)
 8005a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a12:	f7fa fd61 	bl	80004d8 <__aeabi_dmul>
 8005a16:	4602      	mov	r2, r0
 8005a18:	460b      	mov	r3, r1
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	4639      	mov	r1, r7
 8005a1e:	f7fa fba5 	bl	800016c <__adddf3>
 8005a22:	4606      	mov	r6, r0
 8005a24:	460f      	mov	r7, r1
 8005a26:	f7fb f807 	bl	8000a38 <__aeabi_d2iz>
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	4683      	mov	fp, r0
 8005a2e:	2300      	movs	r3, #0
 8005a30:	4630      	mov	r0, r6
 8005a32:	4639      	mov	r1, r7
 8005a34:	f7fa ffc2 	bl	80009bc <__aeabi_dcmplt>
 8005a38:	b148      	cbz	r0, 8005a4e <_dtoa_r+0x17e>
 8005a3a:	4658      	mov	r0, fp
 8005a3c:	f7fa fce2 	bl	8000404 <__aeabi_i2d>
 8005a40:	4632      	mov	r2, r6
 8005a42:	463b      	mov	r3, r7
 8005a44:	f7fa ffb0 	bl	80009a8 <__aeabi_dcmpeq>
 8005a48:	b908      	cbnz	r0, 8005a4e <_dtoa_r+0x17e>
 8005a4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005a4e:	f1bb 0f16 	cmp.w	fp, #22
 8005a52:	d857      	bhi.n	8005b04 <_dtoa_r+0x234>
 8005a54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a58:	4b5a      	ldr	r3, [pc, #360]	; (8005bc4 <_dtoa_r+0x2f4>)
 8005a5a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a62:	f7fa ffab 	bl	80009bc <__aeabi_dcmplt>
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d04e      	beq.n	8005b08 <_dtoa_r+0x238>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005a70:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a72:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005a74:	1b1b      	subs	r3, r3, r4
 8005a76:	1e5a      	subs	r2, r3, #1
 8005a78:	bf46      	itte	mi
 8005a7a:	f1c3 0901 	rsbmi	r9, r3, #1
 8005a7e:	2300      	movmi	r3, #0
 8005a80:	f04f 0900 	movpl.w	r9, #0
 8005a84:	9209      	str	r2, [sp, #36]	; 0x24
 8005a86:	bf48      	it	mi
 8005a88:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005a8a:	f1bb 0f00 	cmp.w	fp, #0
 8005a8e:	db3d      	blt.n	8005b0c <_dtoa_r+0x23c>
 8005a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a92:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005a96:	445b      	add	r3, fp
 8005a98:	9309      	str	r3, [sp, #36]	; 0x24
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	930a      	str	r3, [sp, #40]	; 0x28
 8005a9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005aa0:	2b09      	cmp	r3, #9
 8005aa2:	d867      	bhi.n	8005b74 <_dtoa_r+0x2a4>
 8005aa4:	2b05      	cmp	r3, #5
 8005aa6:	bfc4      	itt	gt
 8005aa8:	3b04      	subgt	r3, #4
 8005aaa:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005aac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005aae:	bfc8      	it	gt
 8005ab0:	2400      	movgt	r4, #0
 8005ab2:	f1a3 0302 	sub.w	r3, r3, #2
 8005ab6:	bfd8      	it	le
 8005ab8:	2401      	movle	r4, #1
 8005aba:	2b03      	cmp	r3, #3
 8005abc:	f200 8086 	bhi.w	8005bcc <_dtoa_r+0x2fc>
 8005ac0:	e8df f003 	tbb	[pc, r3]
 8005ac4:	5637392c 	.word	0x5637392c
 8005ac8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005acc:	441c      	add	r4, r3
 8005ace:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005ad2:	2b20      	cmp	r3, #32
 8005ad4:	bfc1      	itttt	gt
 8005ad6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005ada:	fa09 f903 	lslgt.w	r9, r9, r3
 8005ade:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005ae2:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005ae6:	bfd6      	itet	le
 8005ae8:	f1c3 0320 	rsble	r3, r3, #32
 8005aec:	ea49 0003 	orrgt.w	r0, r9, r3
 8005af0:	fa06 f003 	lslle.w	r0, r6, r3
 8005af4:	f7fa fc76 	bl	80003e4 <__aeabi_ui2d>
 8005af8:	2201      	movs	r2, #1
 8005afa:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005afe:	3c01      	subs	r4, #1
 8005b00:	9213      	str	r2, [sp, #76]	; 0x4c
 8005b02:	e76f      	b.n	80059e4 <_dtoa_r+0x114>
 8005b04:	2301      	movs	r3, #1
 8005b06:	e7b3      	b.n	8005a70 <_dtoa_r+0x1a0>
 8005b08:	900f      	str	r0, [sp, #60]	; 0x3c
 8005b0a:	e7b2      	b.n	8005a72 <_dtoa_r+0x1a2>
 8005b0c:	f1cb 0300 	rsb	r3, fp, #0
 8005b10:	930a      	str	r3, [sp, #40]	; 0x28
 8005b12:	2300      	movs	r3, #0
 8005b14:	eba9 090b 	sub.w	r9, r9, fp
 8005b18:	930e      	str	r3, [sp, #56]	; 0x38
 8005b1a:	e7c0      	b.n	8005a9e <_dtoa_r+0x1ce>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b20:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	dc55      	bgt.n	8005bd2 <_dtoa_r+0x302>
 8005b26:	2301      	movs	r3, #1
 8005b28:	461a      	mov	r2, r3
 8005b2a:	9306      	str	r3, [sp, #24]
 8005b2c:	9308      	str	r3, [sp, #32]
 8005b2e:	9223      	str	r2, [sp, #140]	; 0x8c
 8005b30:	e00b      	b.n	8005b4a <_dtoa_r+0x27a>
 8005b32:	2301      	movs	r3, #1
 8005b34:	e7f3      	b.n	8005b1e <_dtoa_r+0x24e>
 8005b36:	2300      	movs	r3, #0
 8005b38:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b3c:	445b      	add	r3, fp
 8005b3e:	9306      	str	r3, [sp, #24]
 8005b40:	3301      	adds	r3, #1
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	9308      	str	r3, [sp, #32]
 8005b46:	bfb8      	it	lt
 8005b48:	2301      	movlt	r3, #1
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	2204      	movs	r2, #4
 8005b4e:	69e8      	ldr	r0, [r5, #28]
 8005b50:	f102 0614 	add.w	r6, r2, #20
 8005b54:	429e      	cmp	r6, r3
 8005b56:	d940      	bls.n	8005bda <_dtoa_r+0x30a>
 8005b58:	6041      	str	r1, [r0, #4]
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	f000 fd98 	bl	8006690 <_Balloc>
 8005b60:	9003      	str	r0, [sp, #12]
 8005b62:	2800      	cmp	r0, #0
 8005b64:	d13c      	bne.n	8005be0 <_dtoa_r+0x310>
 8005b66:	4602      	mov	r2, r0
 8005b68:	f240 11af 	movw	r1, #431	; 0x1af
 8005b6c:	4b16      	ldr	r3, [pc, #88]	; (8005bc8 <_dtoa_r+0x2f8>)
 8005b6e:	e6c3      	b.n	80058f8 <_dtoa_r+0x28>
 8005b70:	2301      	movs	r3, #1
 8005b72:	e7e1      	b.n	8005b38 <_dtoa_r+0x268>
 8005b74:	2401      	movs	r4, #1
 8005b76:	2300      	movs	r3, #0
 8005b78:	940b      	str	r4, [sp, #44]	; 0x2c
 8005b7a:	9322      	str	r3, [sp, #136]	; 0x88
 8005b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b80:	2200      	movs	r2, #0
 8005b82:	9306      	str	r3, [sp, #24]
 8005b84:	9308      	str	r3, [sp, #32]
 8005b86:	2312      	movs	r3, #18
 8005b88:	e7d1      	b.n	8005b2e <_dtoa_r+0x25e>
 8005b8a:	bf00      	nop
 8005b8c:	f3af 8000 	nop.w
 8005b90:	636f4361 	.word	0x636f4361
 8005b94:	3fd287a7 	.word	0x3fd287a7
 8005b98:	8b60c8b3 	.word	0x8b60c8b3
 8005b9c:	3fc68a28 	.word	0x3fc68a28
 8005ba0:	509f79fb 	.word	0x509f79fb
 8005ba4:	3fd34413 	.word	0x3fd34413
 8005ba8:	08007983 	.word	0x08007983
 8005bac:	0800799a 	.word	0x0800799a
 8005bb0:	7ff00000 	.word	0x7ff00000
 8005bb4:	0800797f 	.word	0x0800797f
 8005bb8:	08007976 	.word	0x08007976
 8005bbc:	08007953 	.word	0x08007953
 8005bc0:	3ff80000 	.word	0x3ff80000
 8005bc4:	08007a88 	.word	0x08007a88
 8005bc8:	080079f2 	.word	0x080079f2
 8005bcc:	2301      	movs	r3, #1
 8005bce:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bd0:	e7d4      	b.n	8005b7c <_dtoa_r+0x2ac>
 8005bd2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005bd4:	9306      	str	r3, [sp, #24]
 8005bd6:	9308      	str	r3, [sp, #32]
 8005bd8:	e7b7      	b.n	8005b4a <_dtoa_r+0x27a>
 8005bda:	3101      	adds	r1, #1
 8005bdc:	0052      	lsls	r2, r2, #1
 8005bde:	e7b7      	b.n	8005b50 <_dtoa_r+0x280>
 8005be0:	69eb      	ldr	r3, [r5, #28]
 8005be2:	9a03      	ldr	r2, [sp, #12]
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	9b08      	ldr	r3, [sp, #32]
 8005be8:	2b0e      	cmp	r3, #14
 8005bea:	f200 80a8 	bhi.w	8005d3e <_dtoa_r+0x46e>
 8005bee:	2c00      	cmp	r4, #0
 8005bf0:	f000 80a5 	beq.w	8005d3e <_dtoa_r+0x46e>
 8005bf4:	f1bb 0f00 	cmp.w	fp, #0
 8005bf8:	dd34      	ble.n	8005c64 <_dtoa_r+0x394>
 8005bfa:	4b9a      	ldr	r3, [pc, #616]	; (8005e64 <_dtoa_r+0x594>)
 8005bfc:	f00b 020f 	and.w	r2, fp, #15
 8005c00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c04:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005c08:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c0c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005c10:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005c14:	d016      	beq.n	8005c44 <_dtoa_r+0x374>
 8005c16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c1a:	4b93      	ldr	r3, [pc, #588]	; (8005e68 <_dtoa_r+0x598>)
 8005c1c:	2703      	movs	r7, #3
 8005c1e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c22:	f7fa fd83 	bl	800072c <__aeabi_ddiv>
 8005c26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c2a:	f004 040f 	and.w	r4, r4, #15
 8005c2e:	4e8e      	ldr	r6, [pc, #568]	; (8005e68 <_dtoa_r+0x598>)
 8005c30:	b954      	cbnz	r4, 8005c48 <_dtoa_r+0x378>
 8005c32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005c36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c3a:	f7fa fd77 	bl	800072c <__aeabi_ddiv>
 8005c3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c42:	e029      	b.n	8005c98 <_dtoa_r+0x3c8>
 8005c44:	2702      	movs	r7, #2
 8005c46:	e7f2      	b.n	8005c2e <_dtoa_r+0x35e>
 8005c48:	07e1      	lsls	r1, r4, #31
 8005c4a:	d508      	bpl.n	8005c5e <_dtoa_r+0x38e>
 8005c4c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005c50:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005c54:	f7fa fc40 	bl	80004d8 <__aeabi_dmul>
 8005c58:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005c5c:	3701      	adds	r7, #1
 8005c5e:	1064      	asrs	r4, r4, #1
 8005c60:	3608      	adds	r6, #8
 8005c62:	e7e5      	b.n	8005c30 <_dtoa_r+0x360>
 8005c64:	f000 80a5 	beq.w	8005db2 <_dtoa_r+0x4e2>
 8005c68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c6c:	f1cb 0400 	rsb	r4, fp, #0
 8005c70:	4b7c      	ldr	r3, [pc, #496]	; (8005e64 <_dtoa_r+0x594>)
 8005c72:	f004 020f 	and.w	r2, r4, #15
 8005c76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7e:	f7fa fc2b 	bl	80004d8 <__aeabi_dmul>
 8005c82:	2702      	movs	r7, #2
 8005c84:	2300      	movs	r3, #0
 8005c86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c8a:	4e77      	ldr	r6, [pc, #476]	; (8005e68 <_dtoa_r+0x598>)
 8005c8c:	1124      	asrs	r4, r4, #4
 8005c8e:	2c00      	cmp	r4, #0
 8005c90:	f040 8084 	bne.w	8005d9c <_dtoa_r+0x4cc>
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1d2      	bne.n	8005c3e <_dtoa_r+0x36e>
 8005c98:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005c9c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005ca0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f000 8087 	beq.w	8005db6 <_dtoa_r+0x4e6>
 8005ca8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005cac:	2200      	movs	r2, #0
 8005cae:	4b6f      	ldr	r3, [pc, #444]	; (8005e6c <_dtoa_r+0x59c>)
 8005cb0:	f7fa fe84 	bl	80009bc <__aeabi_dcmplt>
 8005cb4:	2800      	cmp	r0, #0
 8005cb6:	d07e      	beq.n	8005db6 <_dtoa_r+0x4e6>
 8005cb8:	9b08      	ldr	r3, [sp, #32]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d07b      	beq.n	8005db6 <_dtoa_r+0x4e6>
 8005cbe:	9b06      	ldr	r3, [sp, #24]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	dd38      	ble.n	8005d36 <_dtoa_r+0x466>
 8005cc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005cc8:	2200      	movs	r2, #0
 8005cca:	4b69      	ldr	r3, [pc, #420]	; (8005e70 <_dtoa_r+0x5a0>)
 8005ccc:	f7fa fc04 	bl	80004d8 <__aeabi_dmul>
 8005cd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005cd4:	9c06      	ldr	r4, [sp, #24]
 8005cd6:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005cda:	3701      	adds	r7, #1
 8005cdc:	4638      	mov	r0, r7
 8005cde:	f7fa fb91 	bl	8000404 <__aeabi_i2d>
 8005ce2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ce6:	f7fa fbf7 	bl	80004d8 <__aeabi_dmul>
 8005cea:	2200      	movs	r2, #0
 8005cec:	4b61      	ldr	r3, [pc, #388]	; (8005e74 <_dtoa_r+0x5a4>)
 8005cee:	f7fa fa3d 	bl	800016c <__adddf3>
 8005cf2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005cf6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005cfa:	9611      	str	r6, [sp, #68]	; 0x44
 8005cfc:	2c00      	cmp	r4, #0
 8005cfe:	d15d      	bne.n	8005dbc <_dtoa_r+0x4ec>
 8005d00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d04:	2200      	movs	r2, #0
 8005d06:	4b5c      	ldr	r3, [pc, #368]	; (8005e78 <_dtoa_r+0x5a8>)
 8005d08:	f7fa fa2e 	bl	8000168 <__aeabi_dsub>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	460b      	mov	r3, r1
 8005d10:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005d14:	4633      	mov	r3, r6
 8005d16:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005d18:	f7fa fe6e 	bl	80009f8 <__aeabi_dcmpgt>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	f040 8295 	bne.w	800624c <_dtoa_r+0x97c>
 8005d22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d26:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005d28:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005d2c:	f7fa fe46 	bl	80009bc <__aeabi_dcmplt>
 8005d30:	2800      	cmp	r0, #0
 8005d32:	f040 8289 	bne.w	8006248 <_dtoa_r+0x978>
 8005d36:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005d3a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005d3e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f2c0 8151 	blt.w	8005fe8 <_dtoa_r+0x718>
 8005d46:	f1bb 0f0e 	cmp.w	fp, #14
 8005d4a:	f300 814d 	bgt.w	8005fe8 <_dtoa_r+0x718>
 8005d4e:	4b45      	ldr	r3, [pc, #276]	; (8005e64 <_dtoa_r+0x594>)
 8005d50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005d54:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d58:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005d5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f280 80da 	bge.w	8005f18 <_dtoa_r+0x648>
 8005d64:	9b08      	ldr	r3, [sp, #32]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f300 80d6 	bgt.w	8005f18 <_dtoa_r+0x648>
 8005d6c:	f040 826b 	bne.w	8006246 <_dtoa_r+0x976>
 8005d70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d74:	2200      	movs	r2, #0
 8005d76:	4b40      	ldr	r3, [pc, #256]	; (8005e78 <_dtoa_r+0x5a8>)
 8005d78:	f7fa fbae 	bl	80004d8 <__aeabi_dmul>
 8005d7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d80:	f7fa fe30 	bl	80009e4 <__aeabi_dcmpge>
 8005d84:	9c08      	ldr	r4, [sp, #32]
 8005d86:	4626      	mov	r6, r4
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	f040 8241 	bne.w	8006210 <_dtoa_r+0x940>
 8005d8e:	2331      	movs	r3, #49	; 0x31
 8005d90:	9f03      	ldr	r7, [sp, #12]
 8005d92:	f10b 0b01 	add.w	fp, fp, #1
 8005d96:	f807 3b01 	strb.w	r3, [r7], #1
 8005d9a:	e23d      	b.n	8006218 <_dtoa_r+0x948>
 8005d9c:	07e2      	lsls	r2, r4, #31
 8005d9e:	d505      	bpl.n	8005dac <_dtoa_r+0x4dc>
 8005da0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005da4:	f7fa fb98 	bl	80004d8 <__aeabi_dmul>
 8005da8:	2301      	movs	r3, #1
 8005daa:	3701      	adds	r7, #1
 8005dac:	1064      	asrs	r4, r4, #1
 8005dae:	3608      	adds	r6, #8
 8005db0:	e76d      	b.n	8005c8e <_dtoa_r+0x3be>
 8005db2:	2702      	movs	r7, #2
 8005db4:	e770      	b.n	8005c98 <_dtoa_r+0x3c8>
 8005db6:	46d8      	mov	r8, fp
 8005db8:	9c08      	ldr	r4, [sp, #32]
 8005dba:	e78f      	b.n	8005cdc <_dtoa_r+0x40c>
 8005dbc:	9903      	ldr	r1, [sp, #12]
 8005dbe:	4b29      	ldr	r3, [pc, #164]	; (8005e64 <_dtoa_r+0x594>)
 8005dc0:	4421      	add	r1, r4
 8005dc2:	9112      	str	r1, [sp, #72]	; 0x48
 8005dc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005dc6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005dca:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005dce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005dd2:	2900      	cmp	r1, #0
 8005dd4:	d054      	beq.n	8005e80 <_dtoa_r+0x5b0>
 8005dd6:	2000      	movs	r0, #0
 8005dd8:	4928      	ldr	r1, [pc, #160]	; (8005e7c <_dtoa_r+0x5ac>)
 8005dda:	f7fa fca7 	bl	800072c <__aeabi_ddiv>
 8005dde:	463b      	mov	r3, r7
 8005de0:	4632      	mov	r2, r6
 8005de2:	f7fa f9c1 	bl	8000168 <__aeabi_dsub>
 8005de6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005dea:	9f03      	ldr	r7, [sp, #12]
 8005dec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005df0:	f7fa fe22 	bl	8000a38 <__aeabi_d2iz>
 8005df4:	4604      	mov	r4, r0
 8005df6:	f7fa fb05 	bl	8000404 <__aeabi_i2d>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e02:	f7fa f9b1 	bl	8000168 <__aeabi_dsub>
 8005e06:	4602      	mov	r2, r0
 8005e08:	460b      	mov	r3, r1
 8005e0a:	3430      	adds	r4, #48	; 0x30
 8005e0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e14:	f807 4b01 	strb.w	r4, [r7], #1
 8005e18:	f7fa fdd0 	bl	80009bc <__aeabi_dcmplt>
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	d173      	bne.n	8005f08 <_dtoa_r+0x638>
 8005e20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e24:	2000      	movs	r0, #0
 8005e26:	4911      	ldr	r1, [pc, #68]	; (8005e6c <_dtoa_r+0x59c>)
 8005e28:	f7fa f99e 	bl	8000168 <__aeabi_dsub>
 8005e2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e30:	f7fa fdc4 	bl	80009bc <__aeabi_dcmplt>
 8005e34:	2800      	cmp	r0, #0
 8005e36:	f040 80b6 	bne.w	8005fa6 <_dtoa_r+0x6d6>
 8005e3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e3c:	429f      	cmp	r7, r3
 8005e3e:	f43f af7a 	beq.w	8005d36 <_dtoa_r+0x466>
 8005e42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e46:	2200      	movs	r2, #0
 8005e48:	4b09      	ldr	r3, [pc, #36]	; (8005e70 <_dtoa_r+0x5a0>)
 8005e4a:	f7fa fb45 	bl	80004d8 <__aeabi_dmul>
 8005e4e:	2200      	movs	r2, #0
 8005e50:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e58:	4b05      	ldr	r3, [pc, #20]	; (8005e70 <_dtoa_r+0x5a0>)
 8005e5a:	f7fa fb3d 	bl	80004d8 <__aeabi_dmul>
 8005e5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e62:	e7c3      	b.n	8005dec <_dtoa_r+0x51c>
 8005e64:	08007a88 	.word	0x08007a88
 8005e68:	08007a60 	.word	0x08007a60
 8005e6c:	3ff00000 	.word	0x3ff00000
 8005e70:	40240000 	.word	0x40240000
 8005e74:	401c0000 	.word	0x401c0000
 8005e78:	40140000 	.word	0x40140000
 8005e7c:	3fe00000 	.word	0x3fe00000
 8005e80:	4630      	mov	r0, r6
 8005e82:	4639      	mov	r1, r7
 8005e84:	f7fa fb28 	bl	80004d8 <__aeabi_dmul>
 8005e88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e8a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e8e:	9c03      	ldr	r4, [sp, #12]
 8005e90:	9314      	str	r3, [sp, #80]	; 0x50
 8005e92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e96:	f7fa fdcf 	bl	8000a38 <__aeabi_d2iz>
 8005e9a:	9015      	str	r0, [sp, #84]	; 0x54
 8005e9c:	f7fa fab2 	bl	8000404 <__aeabi_i2d>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ea8:	f7fa f95e 	bl	8000168 <__aeabi_dsub>
 8005eac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005eae:	4606      	mov	r6, r0
 8005eb0:	3330      	adds	r3, #48	; 0x30
 8005eb2:	f804 3b01 	strb.w	r3, [r4], #1
 8005eb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005eb8:	460f      	mov	r7, r1
 8005eba:	429c      	cmp	r4, r3
 8005ebc:	f04f 0200 	mov.w	r2, #0
 8005ec0:	d124      	bne.n	8005f0c <_dtoa_r+0x63c>
 8005ec2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ec6:	4baf      	ldr	r3, [pc, #700]	; (8006184 <_dtoa_r+0x8b4>)
 8005ec8:	f7fa f950 	bl	800016c <__adddf3>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	460b      	mov	r3, r1
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	4639      	mov	r1, r7
 8005ed4:	f7fa fd90 	bl	80009f8 <__aeabi_dcmpgt>
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	d163      	bne.n	8005fa4 <_dtoa_r+0x6d4>
 8005edc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005ee0:	2000      	movs	r0, #0
 8005ee2:	49a8      	ldr	r1, [pc, #672]	; (8006184 <_dtoa_r+0x8b4>)
 8005ee4:	f7fa f940 	bl	8000168 <__aeabi_dsub>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4630      	mov	r0, r6
 8005eee:	4639      	mov	r1, r7
 8005ef0:	f7fa fd64 	bl	80009bc <__aeabi_dcmplt>
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	f43f af1e 	beq.w	8005d36 <_dtoa_r+0x466>
 8005efa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005efc:	1e7b      	subs	r3, r7, #1
 8005efe:	9314      	str	r3, [sp, #80]	; 0x50
 8005f00:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005f04:	2b30      	cmp	r3, #48	; 0x30
 8005f06:	d0f8      	beq.n	8005efa <_dtoa_r+0x62a>
 8005f08:	46c3      	mov	fp, r8
 8005f0a:	e03b      	b.n	8005f84 <_dtoa_r+0x6b4>
 8005f0c:	4b9e      	ldr	r3, [pc, #632]	; (8006188 <_dtoa_r+0x8b8>)
 8005f0e:	f7fa fae3 	bl	80004d8 <__aeabi_dmul>
 8005f12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f16:	e7bc      	b.n	8005e92 <_dtoa_r+0x5c2>
 8005f18:	9f03      	ldr	r7, [sp, #12]
 8005f1a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005f1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f22:	4640      	mov	r0, r8
 8005f24:	4649      	mov	r1, r9
 8005f26:	f7fa fc01 	bl	800072c <__aeabi_ddiv>
 8005f2a:	f7fa fd85 	bl	8000a38 <__aeabi_d2iz>
 8005f2e:	4604      	mov	r4, r0
 8005f30:	f7fa fa68 	bl	8000404 <__aeabi_i2d>
 8005f34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f38:	f7fa face 	bl	80004d8 <__aeabi_dmul>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	460b      	mov	r3, r1
 8005f40:	4640      	mov	r0, r8
 8005f42:	4649      	mov	r1, r9
 8005f44:	f7fa f910 	bl	8000168 <__aeabi_dsub>
 8005f48:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005f4c:	f807 6b01 	strb.w	r6, [r7], #1
 8005f50:	9e03      	ldr	r6, [sp, #12]
 8005f52:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005f56:	1bbe      	subs	r6, r7, r6
 8005f58:	45b4      	cmp	ip, r6
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	d136      	bne.n	8005fce <_dtoa_r+0x6fe>
 8005f60:	f7fa f904 	bl	800016c <__adddf3>
 8005f64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f68:	4680      	mov	r8, r0
 8005f6a:	4689      	mov	r9, r1
 8005f6c:	f7fa fd44 	bl	80009f8 <__aeabi_dcmpgt>
 8005f70:	bb58      	cbnz	r0, 8005fca <_dtoa_r+0x6fa>
 8005f72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f76:	4640      	mov	r0, r8
 8005f78:	4649      	mov	r1, r9
 8005f7a:	f7fa fd15 	bl	80009a8 <__aeabi_dcmpeq>
 8005f7e:	b108      	cbz	r0, 8005f84 <_dtoa_r+0x6b4>
 8005f80:	07e3      	lsls	r3, r4, #31
 8005f82:	d422      	bmi.n	8005fca <_dtoa_r+0x6fa>
 8005f84:	4651      	mov	r1, sl
 8005f86:	4628      	mov	r0, r5
 8005f88:	f000 fbc2 	bl	8006710 <_Bfree>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005f90:	703b      	strb	r3, [r7, #0]
 8005f92:	f10b 0301 	add.w	r3, fp, #1
 8005f96:	6013      	str	r3, [r2, #0]
 8005f98:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f43f ace6 	beq.w	800596c <_dtoa_r+0x9c>
 8005fa0:	601f      	str	r7, [r3, #0]
 8005fa2:	e4e3      	b.n	800596c <_dtoa_r+0x9c>
 8005fa4:	4627      	mov	r7, r4
 8005fa6:	463b      	mov	r3, r7
 8005fa8:	461f      	mov	r7, r3
 8005faa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005fae:	2a39      	cmp	r2, #57	; 0x39
 8005fb0:	d107      	bne.n	8005fc2 <_dtoa_r+0x6f2>
 8005fb2:	9a03      	ldr	r2, [sp, #12]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d1f7      	bne.n	8005fa8 <_dtoa_r+0x6d8>
 8005fb8:	2230      	movs	r2, #48	; 0x30
 8005fba:	9903      	ldr	r1, [sp, #12]
 8005fbc:	f108 0801 	add.w	r8, r8, #1
 8005fc0:	700a      	strb	r2, [r1, #0]
 8005fc2:	781a      	ldrb	r2, [r3, #0]
 8005fc4:	3201      	adds	r2, #1
 8005fc6:	701a      	strb	r2, [r3, #0]
 8005fc8:	e79e      	b.n	8005f08 <_dtoa_r+0x638>
 8005fca:	46d8      	mov	r8, fp
 8005fcc:	e7eb      	b.n	8005fa6 <_dtoa_r+0x6d6>
 8005fce:	2200      	movs	r2, #0
 8005fd0:	4b6d      	ldr	r3, [pc, #436]	; (8006188 <_dtoa_r+0x8b8>)
 8005fd2:	f7fa fa81 	bl	80004d8 <__aeabi_dmul>
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	2300      	movs	r3, #0
 8005fda:	4680      	mov	r8, r0
 8005fdc:	4689      	mov	r9, r1
 8005fde:	f7fa fce3 	bl	80009a8 <__aeabi_dcmpeq>
 8005fe2:	2800      	cmp	r0, #0
 8005fe4:	d09b      	beq.n	8005f1e <_dtoa_r+0x64e>
 8005fe6:	e7cd      	b.n	8005f84 <_dtoa_r+0x6b4>
 8005fe8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005fea:	2a00      	cmp	r2, #0
 8005fec:	f000 80c4 	beq.w	8006178 <_dtoa_r+0x8a8>
 8005ff0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005ff2:	2a01      	cmp	r2, #1
 8005ff4:	f300 80a8 	bgt.w	8006148 <_dtoa_r+0x878>
 8005ff8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005ffa:	2a00      	cmp	r2, #0
 8005ffc:	f000 80a0 	beq.w	8006140 <_dtoa_r+0x870>
 8006000:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006004:	464f      	mov	r7, r9
 8006006:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006008:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800600a:	2101      	movs	r1, #1
 800600c:	441a      	add	r2, r3
 800600e:	4628      	mov	r0, r5
 8006010:	4499      	add	r9, r3
 8006012:	9209      	str	r2, [sp, #36]	; 0x24
 8006014:	f000 fc32 	bl	800687c <__i2b>
 8006018:	4606      	mov	r6, r0
 800601a:	b15f      	cbz	r7, 8006034 <_dtoa_r+0x764>
 800601c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800601e:	2b00      	cmp	r3, #0
 8006020:	dd08      	ble.n	8006034 <_dtoa_r+0x764>
 8006022:	42bb      	cmp	r3, r7
 8006024:	bfa8      	it	ge
 8006026:	463b      	movge	r3, r7
 8006028:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800602a:	eba9 0903 	sub.w	r9, r9, r3
 800602e:	1aff      	subs	r7, r7, r3
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	9309      	str	r3, [sp, #36]	; 0x24
 8006034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006036:	b1f3      	cbz	r3, 8006076 <_dtoa_r+0x7a6>
 8006038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800603a:	2b00      	cmp	r3, #0
 800603c:	f000 80a0 	beq.w	8006180 <_dtoa_r+0x8b0>
 8006040:	2c00      	cmp	r4, #0
 8006042:	dd10      	ble.n	8006066 <_dtoa_r+0x796>
 8006044:	4631      	mov	r1, r6
 8006046:	4622      	mov	r2, r4
 8006048:	4628      	mov	r0, r5
 800604a:	f000 fcd5 	bl	80069f8 <__pow5mult>
 800604e:	4652      	mov	r2, sl
 8006050:	4601      	mov	r1, r0
 8006052:	4606      	mov	r6, r0
 8006054:	4628      	mov	r0, r5
 8006056:	f000 fc27 	bl	80068a8 <__multiply>
 800605a:	4680      	mov	r8, r0
 800605c:	4651      	mov	r1, sl
 800605e:	4628      	mov	r0, r5
 8006060:	f000 fb56 	bl	8006710 <_Bfree>
 8006064:	46c2      	mov	sl, r8
 8006066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006068:	1b1a      	subs	r2, r3, r4
 800606a:	d004      	beq.n	8006076 <_dtoa_r+0x7a6>
 800606c:	4651      	mov	r1, sl
 800606e:	4628      	mov	r0, r5
 8006070:	f000 fcc2 	bl	80069f8 <__pow5mult>
 8006074:	4682      	mov	sl, r0
 8006076:	2101      	movs	r1, #1
 8006078:	4628      	mov	r0, r5
 800607a:	f000 fbff 	bl	800687c <__i2b>
 800607e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006080:	4604      	mov	r4, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	f340 8082 	ble.w	800618c <_dtoa_r+0x8bc>
 8006088:	461a      	mov	r2, r3
 800608a:	4601      	mov	r1, r0
 800608c:	4628      	mov	r0, r5
 800608e:	f000 fcb3 	bl	80069f8 <__pow5mult>
 8006092:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006094:	4604      	mov	r4, r0
 8006096:	2b01      	cmp	r3, #1
 8006098:	dd7b      	ble.n	8006192 <_dtoa_r+0x8c2>
 800609a:	f04f 0800 	mov.w	r8, #0
 800609e:	6923      	ldr	r3, [r4, #16]
 80060a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80060a4:	6918      	ldr	r0, [r3, #16]
 80060a6:	f000 fb9b 	bl	80067e0 <__hi0bits>
 80060aa:	f1c0 0020 	rsb	r0, r0, #32
 80060ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060b0:	4418      	add	r0, r3
 80060b2:	f010 001f 	ands.w	r0, r0, #31
 80060b6:	f000 8092 	beq.w	80061de <_dtoa_r+0x90e>
 80060ba:	f1c0 0320 	rsb	r3, r0, #32
 80060be:	2b04      	cmp	r3, #4
 80060c0:	f340 8085 	ble.w	80061ce <_dtoa_r+0x8fe>
 80060c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060c6:	f1c0 001c 	rsb	r0, r0, #28
 80060ca:	4403      	add	r3, r0
 80060cc:	4481      	add	r9, r0
 80060ce:	4407      	add	r7, r0
 80060d0:	9309      	str	r3, [sp, #36]	; 0x24
 80060d2:	f1b9 0f00 	cmp.w	r9, #0
 80060d6:	dd05      	ble.n	80060e4 <_dtoa_r+0x814>
 80060d8:	4651      	mov	r1, sl
 80060da:	464a      	mov	r2, r9
 80060dc:	4628      	mov	r0, r5
 80060de:	f000 fce5 	bl	8006aac <__lshift>
 80060e2:	4682      	mov	sl, r0
 80060e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	dd05      	ble.n	80060f6 <_dtoa_r+0x826>
 80060ea:	4621      	mov	r1, r4
 80060ec:	461a      	mov	r2, r3
 80060ee:	4628      	mov	r0, r5
 80060f0:	f000 fcdc 	bl	8006aac <__lshift>
 80060f4:	4604      	mov	r4, r0
 80060f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d072      	beq.n	80061e2 <_dtoa_r+0x912>
 80060fc:	4621      	mov	r1, r4
 80060fe:	4650      	mov	r0, sl
 8006100:	f000 fd40 	bl	8006b84 <__mcmp>
 8006104:	2800      	cmp	r0, #0
 8006106:	da6c      	bge.n	80061e2 <_dtoa_r+0x912>
 8006108:	2300      	movs	r3, #0
 800610a:	4651      	mov	r1, sl
 800610c:	220a      	movs	r2, #10
 800610e:	4628      	mov	r0, r5
 8006110:	f000 fb20 	bl	8006754 <__multadd>
 8006114:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006116:	4682      	mov	sl, r0
 8006118:	f10b 3bff 	add.w	fp, fp, #4294967295
 800611c:	2b00      	cmp	r3, #0
 800611e:	f000 81ac 	beq.w	800647a <_dtoa_r+0xbaa>
 8006122:	2300      	movs	r3, #0
 8006124:	4631      	mov	r1, r6
 8006126:	220a      	movs	r2, #10
 8006128:	4628      	mov	r0, r5
 800612a:	f000 fb13 	bl	8006754 <__multadd>
 800612e:	9b06      	ldr	r3, [sp, #24]
 8006130:	4606      	mov	r6, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	f300 8093 	bgt.w	800625e <_dtoa_r+0x98e>
 8006138:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800613a:	2b02      	cmp	r3, #2
 800613c:	dc59      	bgt.n	80061f2 <_dtoa_r+0x922>
 800613e:	e08e      	b.n	800625e <_dtoa_r+0x98e>
 8006140:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006142:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006146:	e75d      	b.n	8006004 <_dtoa_r+0x734>
 8006148:	9b08      	ldr	r3, [sp, #32]
 800614a:	1e5c      	subs	r4, r3, #1
 800614c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800614e:	42a3      	cmp	r3, r4
 8006150:	bfbf      	itttt	lt
 8006152:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006154:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006156:	1ae3      	sublt	r3, r4, r3
 8006158:	18d2      	addlt	r2, r2, r3
 800615a:	bfa8      	it	ge
 800615c:	1b1c      	subge	r4, r3, r4
 800615e:	9b08      	ldr	r3, [sp, #32]
 8006160:	bfbe      	ittt	lt
 8006162:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006164:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006166:	2400      	movlt	r4, #0
 8006168:	2b00      	cmp	r3, #0
 800616a:	bfb5      	itete	lt
 800616c:	eba9 0703 	sublt.w	r7, r9, r3
 8006170:	464f      	movge	r7, r9
 8006172:	2300      	movlt	r3, #0
 8006174:	9b08      	ldrge	r3, [sp, #32]
 8006176:	e747      	b.n	8006008 <_dtoa_r+0x738>
 8006178:	464f      	mov	r7, r9
 800617a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800617c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800617e:	e74c      	b.n	800601a <_dtoa_r+0x74a>
 8006180:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006182:	e773      	b.n	800606c <_dtoa_r+0x79c>
 8006184:	3fe00000 	.word	0x3fe00000
 8006188:	40240000 	.word	0x40240000
 800618c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800618e:	2b01      	cmp	r3, #1
 8006190:	dc18      	bgt.n	80061c4 <_dtoa_r+0x8f4>
 8006192:	9b04      	ldr	r3, [sp, #16]
 8006194:	b9b3      	cbnz	r3, 80061c4 <_dtoa_r+0x8f4>
 8006196:	9b05      	ldr	r3, [sp, #20]
 8006198:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800619c:	b993      	cbnz	r3, 80061c4 <_dtoa_r+0x8f4>
 800619e:	9b05      	ldr	r3, [sp, #20]
 80061a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061a4:	0d1b      	lsrs	r3, r3, #20
 80061a6:	051b      	lsls	r3, r3, #20
 80061a8:	b17b      	cbz	r3, 80061ca <_dtoa_r+0x8fa>
 80061aa:	f04f 0801 	mov.w	r8, #1
 80061ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061b0:	f109 0901 	add.w	r9, r9, #1
 80061b4:	3301      	adds	r3, #1
 80061b6:	9309      	str	r3, [sp, #36]	; 0x24
 80061b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f47f af6f 	bne.w	800609e <_dtoa_r+0x7ce>
 80061c0:	2001      	movs	r0, #1
 80061c2:	e774      	b.n	80060ae <_dtoa_r+0x7de>
 80061c4:	f04f 0800 	mov.w	r8, #0
 80061c8:	e7f6      	b.n	80061b8 <_dtoa_r+0x8e8>
 80061ca:	4698      	mov	r8, r3
 80061cc:	e7f4      	b.n	80061b8 <_dtoa_r+0x8e8>
 80061ce:	d080      	beq.n	80060d2 <_dtoa_r+0x802>
 80061d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061d2:	331c      	adds	r3, #28
 80061d4:	441a      	add	r2, r3
 80061d6:	4499      	add	r9, r3
 80061d8:	441f      	add	r7, r3
 80061da:	9209      	str	r2, [sp, #36]	; 0x24
 80061dc:	e779      	b.n	80060d2 <_dtoa_r+0x802>
 80061de:	4603      	mov	r3, r0
 80061e0:	e7f6      	b.n	80061d0 <_dtoa_r+0x900>
 80061e2:	9b08      	ldr	r3, [sp, #32]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	dc34      	bgt.n	8006252 <_dtoa_r+0x982>
 80061e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	dd31      	ble.n	8006252 <_dtoa_r+0x982>
 80061ee:	9b08      	ldr	r3, [sp, #32]
 80061f0:	9306      	str	r3, [sp, #24]
 80061f2:	9b06      	ldr	r3, [sp, #24]
 80061f4:	b963      	cbnz	r3, 8006210 <_dtoa_r+0x940>
 80061f6:	4621      	mov	r1, r4
 80061f8:	2205      	movs	r2, #5
 80061fa:	4628      	mov	r0, r5
 80061fc:	f000 faaa 	bl	8006754 <__multadd>
 8006200:	4601      	mov	r1, r0
 8006202:	4604      	mov	r4, r0
 8006204:	4650      	mov	r0, sl
 8006206:	f000 fcbd 	bl	8006b84 <__mcmp>
 800620a:	2800      	cmp	r0, #0
 800620c:	f73f adbf 	bgt.w	8005d8e <_dtoa_r+0x4be>
 8006210:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006212:	9f03      	ldr	r7, [sp, #12]
 8006214:	ea6f 0b03 	mvn.w	fp, r3
 8006218:	f04f 0800 	mov.w	r8, #0
 800621c:	4621      	mov	r1, r4
 800621e:	4628      	mov	r0, r5
 8006220:	f000 fa76 	bl	8006710 <_Bfree>
 8006224:	2e00      	cmp	r6, #0
 8006226:	f43f aead 	beq.w	8005f84 <_dtoa_r+0x6b4>
 800622a:	f1b8 0f00 	cmp.w	r8, #0
 800622e:	d005      	beq.n	800623c <_dtoa_r+0x96c>
 8006230:	45b0      	cmp	r8, r6
 8006232:	d003      	beq.n	800623c <_dtoa_r+0x96c>
 8006234:	4641      	mov	r1, r8
 8006236:	4628      	mov	r0, r5
 8006238:	f000 fa6a 	bl	8006710 <_Bfree>
 800623c:	4631      	mov	r1, r6
 800623e:	4628      	mov	r0, r5
 8006240:	f000 fa66 	bl	8006710 <_Bfree>
 8006244:	e69e      	b.n	8005f84 <_dtoa_r+0x6b4>
 8006246:	2400      	movs	r4, #0
 8006248:	4626      	mov	r6, r4
 800624a:	e7e1      	b.n	8006210 <_dtoa_r+0x940>
 800624c:	46c3      	mov	fp, r8
 800624e:	4626      	mov	r6, r4
 8006250:	e59d      	b.n	8005d8e <_dtoa_r+0x4be>
 8006252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 80c8 	beq.w	80063ea <_dtoa_r+0xb1a>
 800625a:	9b08      	ldr	r3, [sp, #32]
 800625c:	9306      	str	r3, [sp, #24]
 800625e:	2f00      	cmp	r7, #0
 8006260:	dd05      	ble.n	800626e <_dtoa_r+0x99e>
 8006262:	4631      	mov	r1, r6
 8006264:	463a      	mov	r2, r7
 8006266:	4628      	mov	r0, r5
 8006268:	f000 fc20 	bl	8006aac <__lshift>
 800626c:	4606      	mov	r6, r0
 800626e:	f1b8 0f00 	cmp.w	r8, #0
 8006272:	d05b      	beq.n	800632c <_dtoa_r+0xa5c>
 8006274:	4628      	mov	r0, r5
 8006276:	6871      	ldr	r1, [r6, #4]
 8006278:	f000 fa0a 	bl	8006690 <_Balloc>
 800627c:	4607      	mov	r7, r0
 800627e:	b928      	cbnz	r0, 800628c <_dtoa_r+0x9bc>
 8006280:	4602      	mov	r2, r0
 8006282:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006286:	4b81      	ldr	r3, [pc, #516]	; (800648c <_dtoa_r+0xbbc>)
 8006288:	f7ff bb36 	b.w	80058f8 <_dtoa_r+0x28>
 800628c:	6932      	ldr	r2, [r6, #16]
 800628e:	f106 010c 	add.w	r1, r6, #12
 8006292:	3202      	adds	r2, #2
 8006294:	0092      	lsls	r2, r2, #2
 8006296:	300c      	adds	r0, #12
 8006298:	f7ff fa81 	bl	800579e <memcpy>
 800629c:	2201      	movs	r2, #1
 800629e:	4639      	mov	r1, r7
 80062a0:	4628      	mov	r0, r5
 80062a2:	f000 fc03 	bl	8006aac <__lshift>
 80062a6:	46b0      	mov	r8, r6
 80062a8:	4606      	mov	r6, r0
 80062aa:	9b03      	ldr	r3, [sp, #12]
 80062ac:	9a03      	ldr	r2, [sp, #12]
 80062ae:	3301      	adds	r3, #1
 80062b0:	9308      	str	r3, [sp, #32]
 80062b2:	9b06      	ldr	r3, [sp, #24]
 80062b4:	4413      	add	r3, r2
 80062b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80062b8:	9b04      	ldr	r3, [sp, #16]
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	930a      	str	r3, [sp, #40]	; 0x28
 80062c0:	9b08      	ldr	r3, [sp, #32]
 80062c2:	4621      	mov	r1, r4
 80062c4:	3b01      	subs	r3, #1
 80062c6:	4650      	mov	r0, sl
 80062c8:	9304      	str	r3, [sp, #16]
 80062ca:	f7ff fa76 	bl	80057ba <quorem>
 80062ce:	4641      	mov	r1, r8
 80062d0:	9006      	str	r0, [sp, #24]
 80062d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80062d6:	4650      	mov	r0, sl
 80062d8:	f000 fc54 	bl	8006b84 <__mcmp>
 80062dc:	4632      	mov	r2, r6
 80062de:	9009      	str	r0, [sp, #36]	; 0x24
 80062e0:	4621      	mov	r1, r4
 80062e2:	4628      	mov	r0, r5
 80062e4:	f000 fc6a 	bl	8006bbc <__mdiff>
 80062e8:	68c2      	ldr	r2, [r0, #12]
 80062ea:	4607      	mov	r7, r0
 80062ec:	bb02      	cbnz	r2, 8006330 <_dtoa_r+0xa60>
 80062ee:	4601      	mov	r1, r0
 80062f0:	4650      	mov	r0, sl
 80062f2:	f000 fc47 	bl	8006b84 <__mcmp>
 80062f6:	4602      	mov	r2, r0
 80062f8:	4639      	mov	r1, r7
 80062fa:	4628      	mov	r0, r5
 80062fc:	920c      	str	r2, [sp, #48]	; 0x30
 80062fe:	f000 fa07 	bl	8006710 <_Bfree>
 8006302:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006304:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006306:	9f08      	ldr	r7, [sp, #32]
 8006308:	ea43 0102 	orr.w	r1, r3, r2
 800630c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800630e:	4319      	orrs	r1, r3
 8006310:	d110      	bne.n	8006334 <_dtoa_r+0xa64>
 8006312:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006316:	d029      	beq.n	800636c <_dtoa_r+0xa9c>
 8006318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800631a:	2b00      	cmp	r3, #0
 800631c:	dd02      	ble.n	8006324 <_dtoa_r+0xa54>
 800631e:	9b06      	ldr	r3, [sp, #24]
 8006320:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006324:	9b04      	ldr	r3, [sp, #16]
 8006326:	f883 9000 	strb.w	r9, [r3]
 800632a:	e777      	b.n	800621c <_dtoa_r+0x94c>
 800632c:	4630      	mov	r0, r6
 800632e:	e7ba      	b.n	80062a6 <_dtoa_r+0x9d6>
 8006330:	2201      	movs	r2, #1
 8006332:	e7e1      	b.n	80062f8 <_dtoa_r+0xa28>
 8006334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006336:	2b00      	cmp	r3, #0
 8006338:	db04      	blt.n	8006344 <_dtoa_r+0xa74>
 800633a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800633c:	430b      	orrs	r3, r1
 800633e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006340:	430b      	orrs	r3, r1
 8006342:	d120      	bne.n	8006386 <_dtoa_r+0xab6>
 8006344:	2a00      	cmp	r2, #0
 8006346:	dded      	ble.n	8006324 <_dtoa_r+0xa54>
 8006348:	4651      	mov	r1, sl
 800634a:	2201      	movs	r2, #1
 800634c:	4628      	mov	r0, r5
 800634e:	f000 fbad 	bl	8006aac <__lshift>
 8006352:	4621      	mov	r1, r4
 8006354:	4682      	mov	sl, r0
 8006356:	f000 fc15 	bl	8006b84 <__mcmp>
 800635a:	2800      	cmp	r0, #0
 800635c:	dc03      	bgt.n	8006366 <_dtoa_r+0xa96>
 800635e:	d1e1      	bne.n	8006324 <_dtoa_r+0xa54>
 8006360:	f019 0f01 	tst.w	r9, #1
 8006364:	d0de      	beq.n	8006324 <_dtoa_r+0xa54>
 8006366:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800636a:	d1d8      	bne.n	800631e <_dtoa_r+0xa4e>
 800636c:	2339      	movs	r3, #57	; 0x39
 800636e:	9a04      	ldr	r2, [sp, #16]
 8006370:	7013      	strb	r3, [r2, #0]
 8006372:	463b      	mov	r3, r7
 8006374:	461f      	mov	r7, r3
 8006376:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800637a:	3b01      	subs	r3, #1
 800637c:	2a39      	cmp	r2, #57	; 0x39
 800637e:	d06b      	beq.n	8006458 <_dtoa_r+0xb88>
 8006380:	3201      	adds	r2, #1
 8006382:	701a      	strb	r2, [r3, #0]
 8006384:	e74a      	b.n	800621c <_dtoa_r+0x94c>
 8006386:	2a00      	cmp	r2, #0
 8006388:	dd07      	ble.n	800639a <_dtoa_r+0xaca>
 800638a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800638e:	d0ed      	beq.n	800636c <_dtoa_r+0xa9c>
 8006390:	9a04      	ldr	r2, [sp, #16]
 8006392:	f109 0301 	add.w	r3, r9, #1
 8006396:	7013      	strb	r3, [r2, #0]
 8006398:	e740      	b.n	800621c <_dtoa_r+0x94c>
 800639a:	9b08      	ldr	r3, [sp, #32]
 800639c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800639e:	f803 9c01 	strb.w	r9, [r3, #-1]
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d042      	beq.n	800642c <_dtoa_r+0xb5c>
 80063a6:	4651      	mov	r1, sl
 80063a8:	2300      	movs	r3, #0
 80063aa:	220a      	movs	r2, #10
 80063ac:	4628      	mov	r0, r5
 80063ae:	f000 f9d1 	bl	8006754 <__multadd>
 80063b2:	45b0      	cmp	r8, r6
 80063b4:	4682      	mov	sl, r0
 80063b6:	f04f 0300 	mov.w	r3, #0
 80063ba:	f04f 020a 	mov.w	r2, #10
 80063be:	4641      	mov	r1, r8
 80063c0:	4628      	mov	r0, r5
 80063c2:	d107      	bne.n	80063d4 <_dtoa_r+0xb04>
 80063c4:	f000 f9c6 	bl	8006754 <__multadd>
 80063c8:	4680      	mov	r8, r0
 80063ca:	4606      	mov	r6, r0
 80063cc:	9b08      	ldr	r3, [sp, #32]
 80063ce:	3301      	adds	r3, #1
 80063d0:	9308      	str	r3, [sp, #32]
 80063d2:	e775      	b.n	80062c0 <_dtoa_r+0x9f0>
 80063d4:	f000 f9be 	bl	8006754 <__multadd>
 80063d8:	4631      	mov	r1, r6
 80063da:	4680      	mov	r8, r0
 80063dc:	2300      	movs	r3, #0
 80063de:	220a      	movs	r2, #10
 80063e0:	4628      	mov	r0, r5
 80063e2:	f000 f9b7 	bl	8006754 <__multadd>
 80063e6:	4606      	mov	r6, r0
 80063e8:	e7f0      	b.n	80063cc <_dtoa_r+0xafc>
 80063ea:	9b08      	ldr	r3, [sp, #32]
 80063ec:	9306      	str	r3, [sp, #24]
 80063ee:	9f03      	ldr	r7, [sp, #12]
 80063f0:	4621      	mov	r1, r4
 80063f2:	4650      	mov	r0, sl
 80063f4:	f7ff f9e1 	bl	80057ba <quorem>
 80063f8:	9b03      	ldr	r3, [sp, #12]
 80063fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80063fe:	f807 9b01 	strb.w	r9, [r7], #1
 8006402:	1afa      	subs	r2, r7, r3
 8006404:	9b06      	ldr	r3, [sp, #24]
 8006406:	4293      	cmp	r3, r2
 8006408:	dd07      	ble.n	800641a <_dtoa_r+0xb4a>
 800640a:	4651      	mov	r1, sl
 800640c:	2300      	movs	r3, #0
 800640e:	220a      	movs	r2, #10
 8006410:	4628      	mov	r0, r5
 8006412:	f000 f99f 	bl	8006754 <__multadd>
 8006416:	4682      	mov	sl, r0
 8006418:	e7ea      	b.n	80063f0 <_dtoa_r+0xb20>
 800641a:	9b06      	ldr	r3, [sp, #24]
 800641c:	f04f 0800 	mov.w	r8, #0
 8006420:	2b00      	cmp	r3, #0
 8006422:	bfcc      	ite	gt
 8006424:	461f      	movgt	r7, r3
 8006426:	2701      	movle	r7, #1
 8006428:	9b03      	ldr	r3, [sp, #12]
 800642a:	441f      	add	r7, r3
 800642c:	4651      	mov	r1, sl
 800642e:	2201      	movs	r2, #1
 8006430:	4628      	mov	r0, r5
 8006432:	f000 fb3b 	bl	8006aac <__lshift>
 8006436:	4621      	mov	r1, r4
 8006438:	4682      	mov	sl, r0
 800643a:	f000 fba3 	bl	8006b84 <__mcmp>
 800643e:	2800      	cmp	r0, #0
 8006440:	dc97      	bgt.n	8006372 <_dtoa_r+0xaa2>
 8006442:	d102      	bne.n	800644a <_dtoa_r+0xb7a>
 8006444:	f019 0f01 	tst.w	r9, #1
 8006448:	d193      	bne.n	8006372 <_dtoa_r+0xaa2>
 800644a:	463b      	mov	r3, r7
 800644c:	461f      	mov	r7, r3
 800644e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006452:	2a30      	cmp	r2, #48	; 0x30
 8006454:	d0fa      	beq.n	800644c <_dtoa_r+0xb7c>
 8006456:	e6e1      	b.n	800621c <_dtoa_r+0x94c>
 8006458:	9a03      	ldr	r2, [sp, #12]
 800645a:	429a      	cmp	r2, r3
 800645c:	d18a      	bne.n	8006374 <_dtoa_r+0xaa4>
 800645e:	2331      	movs	r3, #49	; 0x31
 8006460:	f10b 0b01 	add.w	fp, fp, #1
 8006464:	e797      	b.n	8006396 <_dtoa_r+0xac6>
 8006466:	4b0a      	ldr	r3, [pc, #40]	; (8006490 <_dtoa_r+0xbc0>)
 8006468:	f7ff ba9f 	b.w	80059aa <_dtoa_r+0xda>
 800646c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800646e:	2b00      	cmp	r3, #0
 8006470:	f47f aa77 	bne.w	8005962 <_dtoa_r+0x92>
 8006474:	4b07      	ldr	r3, [pc, #28]	; (8006494 <_dtoa_r+0xbc4>)
 8006476:	f7ff ba98 	b.w	80059aa <_dtoa_r+0xda>
 800647a:	9b06      	ldr	r3, [sp, #24]
 800647c:	2b00      	cmp	r3, #0
 800647e:	dcb6      	bgt.n	80063ee <_dtoa_r+0xb1e>
 8006480:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006482:	2b02      	cmp	r3, #2
 8006484:	f73f aeb5 	bgt.w	80061f2 <_dtoa_r+0x922>
 8006488:	e7b1      	b.n	80063ee <_dtoa_r+0xb1e>
 800648a:	bf00      	nop
 800648c:	080079f2 	.word	0x080079f2
 8006490:	08007952 	.word	0x08007952
 8006494:	08007976 	.word	0x08007976

08006498 <_free_r>:
 8006498:	b538      	push	{r3, r4, r5, lr}
 800649a:	4605      	mov	r5, r0
 800649c:	2900      	cmp	r1, #0
 800649e:	d040      	beq.n	8006522 <_free_r+0x8a>
 80064a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064a4:	1f0c      	subs	r4, r1, #4
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	bfb8      	it	lt
 80064aa:	18e4      	addlt	r4, r4, r3
 80064ac:	f000 f8e4 	bl	8006678 <__malloc_lock>
 80064b0:	4a1c      	ldr	r2, [pc, #112]	; (8006524 <_free_r+0x8c>)
 80064b2:	6813      	ldr	r3, [r2, #0]
 80064b4:	b933      	cbnz	r3, 80064c4 <_free_r+0x2c>
 80064b6:	6063      	str	r3, [r4, #4]
 80064b8:	6014      	str	r4, [r2, #0]
 80064ba:	4628      	mov	r0, r5
 80064bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064c0:	f000 b8e0 	b.w	8006684 <__malloc_unlock>
 80064c4:	42a3      	cmp	r3, r4
 80064c6:	d908      	bls.n	80064da <_free_r+0x42>
 80064c8:	6820      	ldr	r0, [r4, #0]
 80064ca:	1821      	adds	r1, r4, r0
 80064cc:	428b      	cmp	r3, r1
 80064ce:	bf01      	itttt	eq
 80064d0:	6819      	ldreq	r1, [r3, #0]
 80064d2:	685b      	ldreq	r3, [r3, #4]
 80064d4:	1809      	addeq	r1, r1, r0
 80064d6:	6021      	streq	r1, [r4, #0]
 80064d8:	e7ed      	b.n	80064b6 <_free_r+0x1e>
 80064da:	461a      	mov	r2, r3
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	b10b      	cbz	r3, 80064e4 <_free_r+0x4c>
 80064e0:	42a3      	cmp	r3, r4
 80064e2:	d9fa      	bls.n	80064da <_free_r+0x42>
 80064e4:	6811      	ldr	r1, [r2, #0]
 80064e6:	1850      	adds	r0, r2, r1
 80064e8:	42a0      	cmp	r0, r4
 80064ea:	d10b      	bne.n	8006504 <_free_r+0x6c>
 80064ec:	6820      	ldr	r0, [r4, #0]
 80064ee:	4401      	add	r1, r0
 80064f0:	1850      	adds	r0, r2, r1
 80064f2:	4283      	cmp	r3, r0
 80064f4:	6011      	str	r1, [r2, #0]
 80064f6:	d1e0      	bne.n	80064ba <_free_r+0x22>
 80064f8:	6818      	ldr	r0, [r3, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	4408      	add	r0, r1
 80064fe:	6010      	str	r0, [r2, #0]
 8006500:	6053      	str	r3, [r2, #4]
 8006502:	e7da      	b.n	80064ba <_free_r+0x22>
 8006504:	d902      	bls.n	800650c <_free_r+0x74>
 8006506:	230c      	movs	r3, #12
 8006508:	602b      	str	r3, [r5, #0]
 800650a:	e7d6      	b.n	80064ba <_free_r+0x22>
 800650c:	6820      	ldr	r0, [r4, #0]
 800650e:	1821      	adds	r1, r4, r0
 8006510:	428b      	cmp	r3, r1
 8006512:	bf01      	itttt	eq
 8006514:	6819      	ldreq	r1, [r3, #0]
 8006516:	685b      	ldreq	r3, [r3, #4]
 8006518:	1809      	addeq	r1, r1, r0
 800651a:	6021      	streq	r1, [r4, #0]
 800651c:	6063      	str	r3, [r4, #4]
 800651e:	6054      	str	r4, [r2, #4]
 8006520:	e7cb      	b.n	80064ba <_free_r+0x22>
 8006522:	bd38      	pop	{r3, r4, r5, pc}
 8006524:	200009c8 	.word	0x200009c8

08006528 <malloc>:
 8006528:	4b02      	ldr	r3, [pc, #8]	; (8006534 <malloc+0xc>)
 800652a:	4601      	mov	r1, r0
 800652c:	6818      	ldr	r0, [r3, #0]
 800652e:	f000 b823 	b.w	8006578 <_malloc_r>
 8006532:	bf00      	nop
 8006534:	200000d4 	.word	0x200000d4

08006538 <sbrk_aligned>:
 8006538:	b570      	push	{r4, r5, r6, lr}
 800653a:	4e0e      	ldr	r6, [pc, #56]	; (8006574 <sbrk_aligned+0x3c>)
 800653c:	460c      	mov	r4, r1
 800653e:	6831      	ldr	r1, [r6, #0]
 8006540:	4605      	mov	r5, r0
 8006542:	b911      	cbnz	r1, 800654a <sbrk_aligned+0x12>
 8006544:	f000 fe38 	bl	80071b8 <_sbrk_r>
 8006548:	6030      	str	r0, [r6, #0]
 800654a:	4621      	mov	r1, r4
 800654c:	4628      	mov	r0, r5
 800654e:	f000 fe33 	bl	80071b8 <_sbrk_r>
 8006552:	1c43      	adds	r3, r0, #1
 8006554:	d00a      	beq.n	800656c <sbrk_aligned+0x34>
 8006556:	1cc4      	adds	r4, r0, #3
 8006558:	f024 0403 	bic.w	r4, r4, #3
 800655c:	42a0      	cmp	r0, r4
 800655e:	d007      	beq.n	8006570 <sbrk_aligned+0x38>
 8006560:	1a21      	subs	r1, r4, r0
 8006562:	4628      	mov	r0, r5
 8006564:	f000 fe28 	bl	80071b8 <_sbrk_r>
 8006568:	3001      	adds	r0, #1
 800656a:	d101      	bne.n	8006570 <sbrk_aligned+0x38>
 800656c:	f04f 34ff 	mov.w	r4, #4294967295
 8006570:	4620      	mov	r0, r4
 8006572:	bd70      	pop	{r4, r5, r6, pc}
 8006574:	200009cc 	.word	0x200009cc

08006578 <_malloc_r>:
 8006578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800657c:	1ccd      	adds	r5, r1, #3
 800657e:	f025 0503 	bic.w	r5, r5, #3
 8006582:	3508      	adds	r5, #8
 8006584:	2d0c      	cmp	r5, #12
 8006586:	bf38      	it	cc
 8006588:	250c      	movcc	r5, #12
 800658a:	2d00      	cmp	r5, #0
 800658c:	4607      	mov	r7, r0
 800658e:	db01      	blt.n	8006594 <_malloc_r+0x1c>
 8006590:	42a9      	cmp	r1, r5
 8006592:	d905      	bls.n	80065a0 <_malloc_r+0x28>
 8006594:	230c      	movs	r3, #12
 8006596:	2600      	movs	r6, #0
 8006598:	603b      	str	r3, [r7, #0]
 800659a:	4630      	mov	r0, r6
 800659c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006674 <_malloc_r+0xfc>
 80065a4:	f000 f868 	bl	8006678 <__malloc_lock>
 80065a8:	f8d8 3000 	ldr.w	r3, [r8]
 80065ac:	461c      	mov	r4, r3
 80065ae:	bb5c      	cbnz	r4, 8006608 <_malloc_r+0x90>
 80065b0:	4629      	mov	r1, r5
 80065b2:	4638      	mov	r0, r7
 80065b4:	f7ff ffc0 	bl	8006538 <sbrk_aligned>
 80065b8:	1c43      	adds	r3, r0, #1
 80065ba:	4604      	mov	r4, r0
 80065bc:	d155      	bne.n	800666a <_malloc_r+0xf2>
 80065be:	f8d8 4000 	ldr.w	r4, [r8]
 80065c2:	4626      	mov	r6, r4
 80065c4:	2e00      	cmp	r6, #0
 80065c6:	d145      	bne.n	8006654 <_malloc_r+0xdc>
 80065c8:	2c00      	cmp	r4, #0
 80065ca:	d048      	beq.n	800665e <_malloc_r+0xe6>
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	4631      	mov	r1, r6
 80065d0:	4638      	mov	r0, r7
 80065d2:	eb04 0903 	add.w	r9, r4, r3
 80065d6:	f000 fdef 	bl	80071b8 <_sbrk_r>
 80065da:	4581      	cmp	r9, r0
 80065dc:	d13f      	bne.n	800665e <_malloc_r+0xe6>
 80065de:	6821      	ldr	r1, [r4, #0]
 80065e0:	4638      	mov	r0, r7
 80065e2:	1a6d      	subs	r5, r5, r1
 80065e4:	4629      	mov	r1, r5
 80065e6:	f7ff ffa7 	bl	8006538 <sbrk_aligned>
 80065ea:	3001      	adds	r0, #1
 80065ec:	d037      	beq.n	800665e <_malloc_r+0xe6>
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	442b      	add	r3, r5
 80065f2:	6023      	str	r3, [r4, #0]
 80065f4:	f8d8 3000 	ldr.w	r3, [r8]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d038      	beq.n	800666e <_malloc_r+0xf6>
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	42a2      	cmp	r2, r4
 8006600:	d12b      	bne.n	800665a <_malloc_r+0xe2>
 8006602:	2200      	movs	r2, #0
 8006604:	605a      	str	r2, [r3, #4]
 8006606:	e00f      	b.n	8006628 <_malloc_r+0xb0>
 8006608:	6822      	ldr	r2, [r4, #0]
 800660a:	1b52      	subs	r2, r2, r5
 800660c:	d41f      	bmi.n	800664e <_malloc_r+0xd6>
 800660e:	2a0b      	cmp	r2, #11
 8006610:	d917      	bls.n	8006642 <_malloc_r+0xca>
 8006612:	1961      	adds	r1, r4, r5
 8006614:	42a3      	cmp	r3, r4
 8006616:	6025      	str	r5, [r4, #0]
 8006618:	bf18      	it	ne
 800661a:	6059      	strne	r1, [r3, #4]
 800661c:	6863      	ldr	r3, [r4, #4]
 800661e:	bf08      	it	eq
 8006620:	f8c8 1000 	streq.w	r1, [r8]
 8006624:	5162      	str	r2, [r4, r5]
 8006626:	604b      	str	r3, [r1, #4]
 8006628:	4638      	mov	r0, r7
 800662a:	f104 060b 	add.w	r6, r4, #11
 800662e:	f000 f829 	bl	8006684 <__malloc_unlock>
 8006632:	f026 0607 	bic.w	r6, r6, #7
 8006636:	1d23      	adds	r3, r4, #4
 8006638:	1af2      	subs	r2, r6, r3
 800663a:	d0ae      	beq.n	800659a <_malloc_r+0x22>
 800663c:	1b9b      	subs	r3, r3, r6
 800663e:	50a3      	str	r3, [r4, r2]
 8006640:	e7ab      	b.n	800659a <_malloc_r+0x22>
 8006642:	42a3      	cmp	r3, r4
 8006644:	6862      	ldr	r2, [r4, #4]
 8006646:	d1dd      	bne.n	8006604 <_malloc_r+0x8c>
 8006648:	f8c8 2000 	str.w	r2, [r8]
 800664c:	e7ec      	b.n	8006628 <_malloc_r+0xb0>
 800664e:	4623      	mov	r3, r4
 8006650:	6864      	ldr	r4, [r4, #4]
 8006652:	e7ac      	b.n	80065ae <_malloc_r+0x36>
 8006654:	4634      	mov	r4, r6
 8006656:	6876      	ldr	r6, [r6, #4]
 8006658:	e7b4      	b.n	80065c4 <_malloc_r+0x4c>
 800665a:	4613      	mov	r3, r2
 800665c:	e7cc      	b.n	80065f8 <_malloc_r+0x80>
 800665e:	230c      	movs	r3, #12
 8006660:	4638      	mov	r0, r7
 8006662:	603b      	str	r3, [r7, #0]
 8006664:	f000 f80e 	bl	8006684 <__malloc_unlock>
 8006668:	e797      	b.n	800659a <_malloc_r+0x22>
 800666a:	6025      	str	r5, [r4, #0]
 800666c:	e7dc      	b.n	8006628 <_malloc_r+0xb0>
 800666e:	605b      	str	r3, [r3, #4]
 8006670:	deff      	udf	#255	; 0xff
 8006672:	bf00      	nop
 8006674:	200009c8 	.word	0x200009c8

08006678 <__malloc_lock>:
 8006678:	4801      	ldr	r0, [pc, #4]	; (8006680 <__malloc_lock+0x8>)
 800667a:	f7ff b880 	b.w	800577e <__retarget_lock_acquire_recursive>
 800667e:	bf00      	nop
 8006680:	200009c4 	.word	0x200009c4

08006684 <__malloc_unlock>:
 8006684:	4801      	ldr	r0, [pc, #4]	; (800668c <__malloc_unlock+0x8>)
 8006686:	f7ff b87b 	b.w	8005780 <__retarget_lock_release_recursive>
 800668a:	bf00      	nop
 800668c:	200009c4 	.word	0x200009c4

08006690 <_Balloc>:
 8006690:	b570      	push	{r4, r5, r6, lr}
 8006692:	69c6      	ldr	r6, [r0, #28]
 8006694:	4604      	mov	r4, r0
 8006696:	460d      	mov	r5, r1
 8006698:	b976      	cbnz	r6, 80066b8 <_Balloc+0x28>
 800669a:	2010      	movs	r0, #16
 800669c:	f7ff ff44 	bl	8006528 <malloc>
 80066a0:	4602      	mov	r2, r0
 80066a2:	61e0      	str	r0, [r4, #28]
 80066a4:	b920      	cbnz	r0, 80066b0 <_Balloc+0x20>
 80066a6:	216b      	movs	r1, #107	; 0x6b
 80066a8:	4b17      	ldr	r3, [pc, #92]	; (8006708 <_Balloc+0x78>)
 80066aa:	4818      	ldr	r0, [pc, #96]	; (800670c <_Balloc+0x7c>)
 80066ac:	f000 fd94 	bl	80071d8 <__assert_func>
 80066b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066b4:	6006      	str	r6, [r0, #0]
 80066b6:	60c6      	str	r6, [r0, #12]
 80066b8:	69e6      	ldr	r6, [r4, #28]
 80066ba:	68f3      	ldr	r3, [r6, #12]
 80066bc:	b183      	cbz	r3, 80066e0 <_Balloc+0x50>
 80066be:	69e3      	ldr	r3, [r4, #28]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80066c6:	b9b8      	cbnz	r0, 80066f8 <_Balloc+0x68>
 80066c8:	2101      	movs	r1, #1
 80066ca:	fa01 f605 	lsl.w	r6, r1, r5
 80066ce:	1d72      	adds	r2, r6, #5
 80066d0:	4620      	mov	r0, r4
 80066d2:	0092      	lsls	r2, r2, #2
 80066d4:	f000 fd9e 	bl	8007214 <_calloc_r>
 80066d8:	b160      	cbz	r0, 80066f4 <_Balloc+0x64>
 80066da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80066de:	e00e      	b.n	80066fe <_Balloc+0x6e>
 80066e0:	2221      	movs	r2, #33	; 0x21
 80066e2:	2104      	movs	r1, #4
 80066e4:	4620      	mov	r0, r4
 80066e6:	f000 fd95 	bl	8007214 <_calloc_r>
 80066ea:	69e3      	ldr	r3, [r4, #28]
 80066ec:	60f0      	str	r0, [r6, #12]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1e4      	bne.n	80066be <_Balloc+0x2e>
 80066f4:	2000      	movs	r0, #0
 80066f6:	bd70      	pop	{r4, r5, r6, pc}
 80066f8:	6802      	ldr	r2, [r0, #0]
 80066fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80066fe:	2300      	movs	r3, #0
 8006700:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006704:	e7f7      	b.n	80066f6 <_Balloc+0x66>
 8006706:	bf00      	nop
 8006708:	08007983 	.word	0x08007983
 800670c:	08007a03 	.word	0x08007a03

08006710 <_Bfree>:
 8006710:	b570      	push	{r4, r5, r6, lr}
 8006712:	69c6      	ldr	r6, [r0, #28]
 8006714:	4605      	mov	r5, r0
 8006716:	460c      	mov	r4, r1
 8006718:	b976      	cbnz	r6, 8006738 <_Bfree+0x28>
 800671a:	2010      	movs	r0, #16
 800671c:	f7ff ff04 	bl	8006528 <malloc>
 8006720:	4602      	mov	r2, r0
 8006722:	61e8      	str	r0, [r5, #28]
 8006724:	b920      	cbnz	r0, 8006730 <_Bfree+0x20>
 8006726:	218f      	movs	r1, #143	; 0x8f
 8006728:	4b08      	ldr	r3, [pc, #32]	; (800674c <_Bfree+0x3c>)
 800672a:	4809      	ldr	r0, [pc, #36]	; (8006750 <_Bfree+0x40>)
 800672c:	f000 fd54 	bl	80071d8 <__assert_func>
 8006730:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006734:	6006      	str	r6, [r0, #0]
 8006736:	60c6      	str	r6, [r0, #12]
 8006738:	b13c      	cbz	r4, 800674a <_Bfree+0x3a>
 800673a:	69eb      	ldr	r3, [r5, #28]
 800673c:	6862      	ldr	r2, [r4, #4]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006744:	6021      	str	r1, [r4, #0]
 8006746:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800674a:	bd70      	pop	{r4, r5, r6, pc}
 800674c:	08007983 	.word	0x08007983
 8006750:	08007a03 	.word	0x08007a03

08006754 <__multadd>:
 8006754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006758:	4607      	mov	r7, r0
 800675a:	460c      	mov	r4, r1
 800675c:	461e      	mov	r6, r3
 800675e:	2000      	movs	r0, #0
 8006760:	690d      	ldr	r5, [r1, #16]
 8006762:	f101 0c14 	add.w	ip, r1, #20
 8006766:	f8dc 3000 	ldr.w	r3, [ip]
 800676a:	3001      	adds	r0, #1
 800676c:	b299      	uxth	r1, r3
 800676e:	fb02 6101 	mla	r1, r2, r1, r6
 8006772:	0c1e      	lsrs	r6, r3, #16
 8006774:	0c0b      	lsrs	r3, r1, #16
 8006776:	fb02 3306 	mla	r3, r2, r6, r3
 800677a:	b289      	uxth	r1, r1
 800677c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006780:	4285      	cmp	r5, r0
 8006782:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006786:	f84c 1b04 	str.w	r1, [ip], #4
 800678a:	dcec      	bgt.n	8006766 <__multadd+0x12>
 800678c:	b30e      	cbz	r6, 80067d2 <__multadd+0x7e>
 800678e:	68a3      	ldr	r3, [r4, #8]
 8006790:	42ab      	cmp	r3, r5
 8006792:	dc19      	bgt.n	80067c8 <__multadd+0x74>
 8006794:	6861      	ldr	r1, [r4, #4]
 8006796:	4638      	mov	r0, r7
 8006798:	3101      	adds	r1, #1
 800679a:	f7ff ff79 	bl	8006690 <_Balloc>
 800679e:	4680      	mov	r8, r0
 80067a0:	b928      	cbnz	r0, 80067ae <__multadd+0x5a>
 80067a2:	4602      	mov	r2, r0
 80067a4:	21ba      	movs	r1, #186	; 0xba
 80067a6:	4b0c      	ldr	r3, [pc, #48]	; (80067d8 <__multadd+0x84>)
 80067a8:	480c      	ldr	r0, [pc, #48]	; (80067dc <__multadd+0x88>)
 80067aa:	f000 fd15 	bl	80071d8 <__assert_func>
 80067ae:	6922      	ldr	r2, [r4, #16]
 80067b0:	f104 010c 	add.w	r1, r4, #12
 80067b4:	3202      	adds	r2, #2
 80067b6:	0092      	lsls	r2, r2, #2
 80067b8:	300c      	adds	r0, #12
 80067ba:	f7fe fff0 	bl	800579e <memcpy>
 80067be:	4621      	mov	r1, r4
 80067c0:	4638      	mov	r0, r7
 80067c2:	f7ff ffa5 	bl	8006710 <_Bfree>
 80067c6:	4644      	mov	r4, r8
 80067c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80067cc:	3501      	adds	r5, #1
 80067ce:	615e      	str	r6, [r3, #20]
 80067d0:	6125      	str	r5, [r4, #16]
 80067d2:	4620      	mov	r0, r4
 80067d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067d8:	080079f2 	.word	0x080079f2
 80067dc:	08007a03 	.word	0x08007a03

080067e0 <__hi0bits>:
 80067e0:	0c02      	lsrs	r2, r0, #16
 80067e2:	0412      	lsls	r2, r2, #16
 80067e4:	4603      	mov	r3, r0
 80067e6:	b9ca      	cbnz	r2, 800681c <__hi0bits+0x3c>
 80067e8:	0403      	lsls	r3, r0, #16
 80067ea:	2010      	movs	r0, #16
 80067ec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80067f0:	bf04      	itt	eq
 80067f2:	021b      	lsleq	r3, r3, #8
 80067f4:	3008      	addeq	r0, #8
 80067f6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80067fa:	bf04      	itt	eq
 80067fc:	011b      	lsleq	r3, r3, #4
 80067fe:	3004      	addeq	r0, #4
 8006800:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006804:	bf04      	itt	eq
 8006806:	009b      	lsleq	r3, r3, #2
 8006808:	3002      	addeq	r0, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	db05      	blt.n	800681a <__hi0bits+0x3a>
 800680e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006812:	f100 0001 	add.w	r0, r0, #1
 8006816:	bf08      	it	eq
 8006818:	2020      	moveq	r0, #32
 800681a:	4770      	bx	lr
 800681c:	2000      	movs	r0, #0
 800681e:	e7e5      	b.n	80067ec <__hi0bits+0xc>

08006820 <__lo0bits>:
 8006820:	6803      	ldr	r3, [r0, #0]
 8006822:	4602      	mov	r2, r0
 8006824:	f013 0007 	ands.w	r0, r3, #7
 8006828:	d00b      	beq.n	8006842 <__lo0bits+0x22>
 800682a:	07d9      	lsls	r1, r3, #31
 800682c:	d421      	bmi.n	8006872 <__lo0bits+0x52>
 800682e:	0798      	lsls	r0, r3, #30
 8006830:	bf49      	itett	mi
 8006832:	085b      	lsrmi	r3, r3, #1
 8006834:	089b      	lsrpl	r3, r3, #2
 8006836:	2001      	movmi	r0, #1
 8006838:	6013      	strmi	r3, [r2, #0]
 800683a:	bf5c      	itt	pl
 800683c:	2002      	movpl	r0, #2
 800683e:	6013      	strpl	r3, [r2, #0]
 8006840:	4770      	bx	lr
 8006842:	b299      	uxth	r1, r3
 8006844:	b909      	cbnz	r1, 800684a <__lo0bits+0x2a>
 8006846:	2010      	movs	r0, #16
 8006848:	0c1b      	lsrs	r3, r3, #16
 800684a:	b2d9      	uxtb	r1, r3
 800684c:	b909      	cbnz	r1, 8006852 <__lo0bits+0x32>
 800684e:	3008      	adds	r0, #8
 8006850:	0a1b      	lsrs	r3, r3, #8
 8006852:	0719      	lsls	r1, r3, #28
 8006854:	bf04      	itt	eq
 8006856:	091b      	lsreq	r3, r3, #4
 8006858:	3004      	addeq	r0, #4
 800685a:	0799      	lsls	r1, r3, #30
 800685c:	bf04      	itt	eq
 800685e:	089b      	lsreq	r3, r3, #2
 8006860:	3002      	addeq	r0, #2
 8006862:	07d9      	lsls	r1, r3, #31
 8006864:	d403      	bmi.n	800686e <__lo0bits+0x4e>
 8006866:	085b      	lsrs	r3, r3, #1
 8006868:	f100 0001 	add.w	r0, r0, #1
 800686c:	d003      	beq.n	8006876 <__lo0bits+0x56>
 800686e:	6013      	str	r3, [r2, #0]
 8006870:	4770      	bx	lr
 8006872:	2000      	movs	r0, #0
 8006874:	4770      	bx	lr
 8006876:	2020      	movs	r0, #32
 8006878:	4770      	bx	lr
	...

0800687c <__i2b>:
 800687c:	b510      	push	{r4, lr}
 800687e:	460c      	mov	r4, r1
 8006880:	2101      	movs	r1, #1
 8006882:	f7ff ff05 	bl	8006690 <_Balloc>
 8006886:	4602      	mov	r2, r0
 8006888:	b928      	cbnz	r0, 8006896 <__i2b+0x1a>
 800688a:	f240 1145 	movw	r1, #325	; 0x145
 800688e:	4b04      	ldr	r3, [pc, #16]	; (80068a0 <__i2b+0x24>)
 8006890:	4804      	ldr	r0, [pc, #16]	; (80068a4 <__i2b+0x28>)
 8006892:	f000 fca1 	bl	80071d8 <__assert_func>
 8006896:	2301      	movs	r3, #1
 8006898:	6144      	str	r4, [r0, #20]
 800689a:	6103      	str	r3, [r0, #16]
 800689c:	bd10      	pop	{r4, pc}
 800689e:	bf00      	nop
 80068a0:	080079f2 	.word	0x080079f2
 80068a4:	08007a03 	.word	0x08007a03

080068a8 <__multiply>:
 80068a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ac:	4691      	mov	r9, r2
 80068ae:	690a      	ldr	r2, [r1, #16]
 80068b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80068b4:	460c      	mov	r4, r1
 80068b6:	429a      	cmp	r2, r3
 80068b8:	bfbe      	ittt	lt
 80068ba:	460b      	movlt	r3, r1
 80068bc:	464c      	movlt	r4, r9
 80068be:	4699      	movlt	r9, r3
 80068c0:	6927      	ldr	r7, [r4, #16]
 80068c2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80068c6:	68a3      	ldr	r3, [r4, #8]
 80068c8:	6861      	ldr	r1, [r4, #4]
 80068ca:	eb07 060a 	add.w	r6, r7, sl
 80068ce:	42b3      	cmp	r3, r6
 80068d0:	b085      	sub	sp, #20
 80068d2:	bfb8      	it	lt
 80068d4:	3101      	addlt	r1, #1
 80068d6:	f7ff fedb 	bl	8006690 <_Balloc>
 80068da:	b930      	cbnz	r0, 80068ea <__multiply+0x42>
 80068dc:	4602      	mov	r2, r0
 80068de:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80068e2:	4b43      	ldr	r3, [pc, #268]	; (80069f0 <__multiply+0x148>)
 80068e4:	4843      	ldr	r0, [pc, #268]	; (80069f4 <__multiply+0x14c>)
 80068e6:	f000 fc77 	bl	80071d8 <__assert_func>
 80068ea:	f100 0514 	add.w	r5, r0, #20
 80068ee:	462b      	mov	r3, r5
 80068f0:	2200      	movs	r2, #0
 80068f2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80068f6:	4543      	cmp	r3, r8
 80068f8:	d321      	bcc.n	800693e <__multiply+0x96>
 80068fa:	f104 0314 	add.w	r3, r4, #20
 80068fe:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006902:	f109 0314 	add.w	r3, r9, #20
 8006906:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800690a:	9202      	str	r2, [sp, #8]
 800690c:	1b3a      	subs	r2, r7, r4
 800690e:	3a15      	subs	r2, #21
 8006910:	f022 0203 	bic.w	r2, r2, #3
 8006914:	3204      	adds	r2, #4
 8006916:	f104 0115 	add.w	r1, r4, #21
 800691a:	428f      	cmp	r7, r1
 800691c:	bf38      	it	cc
 800691e:	2204      	movcc	r2, #4
 8006920:	9201      	str	r2, [sp, #4]
 8006922:	9a02      	ldr	r2, [sp, #8]
 8006924:	9303      	str	r3, [sp, #12]
 8006926:	429a      	cmp	r2, r3
 8006928:	d80c      	bhi.n	8006944 <__multiply+0x9c>
 800692a:	2e00      	cmp	r6, #0
 800692c:	dd03      	ble.n	8006936 <__multiply+0x8e>
 800692e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006932:	2b00      	cmp	r3, #0
 8006934:	d05a      	beq.n	80069ec <__multiply+0x144>
 8006936:	6106      	str	r6, [r0, #16]
 8006938:	b005      	add	sp, #20
 800693a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800693e:	f843 2b04 	str.w	r2, [r3], #4
 8006942:	e7d8      	b.n	80068f6 <__multiply+0x4e>
 8006944:	f8b3 a000 	ldrh.w	sl, [r3]
 8006948:	f1ba 0f00 	cmp.w	sl, #0
 800694c:	d023      	beq.n	8006996 <__multiply+0xee>
 800694e:	46a9      	mov	r9, r5
 8006950:	f04f 0c00 	mov.w	ip, #0
 8006954:	f104 0e14 	add.w	lr, r4, #20
 8006958:	f85e 2b04 	ldr.w	r2, [lr], #4
 800695c:	f8d9 1000 	ldr.w	r1, [r9]
 8006960:	fa1f fb82 	uxth.w	fp, r2
 8006964:	b289      	uxth	r1, r1
 8006966:	fb0a 110b 	mla	r1, sl, fp, r1
 800696a:	4461      	add	r1, ip
 800696c:	f8d9 c000 	ldr.w	ip, [r9]
 8006970:	0c12      	lsrs	r2, r2, #16
 8006972:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006976:	fb0a c202 	mla	r2, sl, r2, ip
 800697a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800697e:	b289      	uxth	r1, r1
 8006980:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006984:	4577      	cmp	r7, lr
 8006986:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800698a:	f849 1b04 	str.w	r1, [r9], #4
 800698e:	d8e3      	bhi.n	8006958 <__multiply+0xb0>
 8006990:	9a01      	ldr	r2, [sp, #4]
 8006992:	f845 c002 	str.w	ip, [r5, r2]
 8006996:	9a03      	ldr	r2, [sp, #12]
 8006998:	3304      	adds	r3, #4
 800699a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800699e:	f1b9 0f00 	cmp.w	r9, #0
 80069a2:	d021      	beq.n	80069e8 <__multiply+0x140>
 80069a4:	46ae      	mov	lr, r5
 80069a6:	f04f 0a00 	mov.w	sl, #0
 80069aa:	6829      	ldr	r1, [r5, #0]
 80069ac:	f104 0c14 	add.w	ip, r4, #20
 80069b0:	f8bc b000 	ldrh.w	fp, [ip]
 80069b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80069b8:	b289      	uxth	r1, r1
 80069ba:	fb09 220b 	mla	r2, r9, fp, r2
 80069be:	4452      	add	r2, sl
 80069c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80069c4:	f84e 1b04 	str.w	r1, [lr], #4
 80069c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80069cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80069d0:	f8be 1000 	ldrh.w	r1, [lr]
 80069d4:	4567      	cmp	r7, ip
 80069d6:	fb09 110a 	mla	r1, r9, sl, r1
 80069da:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80069de:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80069e2:	d8e5      	bhi.n	80069b0 <__multiply+0x108>
 80069e4:	9a01      	ldr	r2, [sp, #4]
 80069e6:	50a9      	str	r1, [r5, r2]
 80069e8:	3504      	adds	r5, #4
 80069ea:	e79a      	b.n	8006922 <__multiply+0x7a>
 80069ec:	3e01      	subs	r6, #1
 80069ee:	e79c      	b.n	800692a <__multiply+0x82>
 80069f0:	080079f2 	.word	0x080079f2
 80069f4:	08007a03 	.word	0x08007a03

080069f8 <__pow5mult>:
 80069f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069fc:	4615      	mov	r5, r2
 80069fe:	f012 0203 	ands.w	r2, r2, #3
 8006a02:	4606      	mov	r6, r0
 8006a04:	460f      	mov	r7, r1
 8006a06:	d007      	beq.n	8006a18 <__pow5mult+0x20>
 8006a08:	4c25      	ldr	r4, [pc, #148]	; (8006aa0 <__pow5mult+0xa8>)
 8006a0a:	3a01      	subs	r2, #1
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006a12:	f7ff fe9f 	bl	8006754 <__multadd>
 8006a16:	4607      	mov	r7, r0
 8006a18:	10ad      	asrs	r5, r5, #2
 8006a1a:	d03d      	beq.n	8006a98 <__pow5mult+0xa0>
 8006a1c:	69f4      	ldr	r4, [r6, #28]
 8006a1e:	b97c      	cbnz	r4, 8006a40 <__pow5mult+0x48>
 8006a20:	2010      	movs	r0, #16
 8006a22:	f7ff fd81 	bl	8006528 <malloc>
 8006a26:	4602      	mov	r2, r0
 8006a28:	61f0      	str	r0, [r6, #28]
 8006a2a:	b928      	cbnz	r0, 8006a38 <__pow5mult+0x40>
 8006a2c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006a30:	4b1c      	ldr	r3, [pc, #112]	; (8006aa4 <__pow5mult+0xac>)
 8006a32:	481d      	ldr	r0, [pc, #116]	; (8006aa8 <__pow5mult+0xb0>)
 8006a34:	f000 fbd0 	bl	80071d8 <__assert_func>
 8006a38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a3c:	6004      	str	r4, [r0, #0]
 8006a3e:	60c4      	str	r4, [r0, #12]
 8006a40:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006a44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a48:	b94c      	cbnz	r4, 8006a5e <__pow5mult+0x66>
 8006a4a:	f240 2171 	movw	r1, #625	; 0x271
 8006a4e:	4630      	mov	r0, r6
 8006a50:	f7ff ff14 	bl	800687c <__i2b>
 8006a54:	2300      	movs	r3, #0
 8006a56:	4604      	mov	r4, r0
 8006a58:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a5c:	6003      	str	r3, [r0, #0]
 8006a5e:	f04f 0900 	mov.w	r9, #0
 8006a62:	07eb      	lsls	r3, r5, #31
 8006a64:	d50a      	bpl.n	8006a7c <__pow5mult+0x84>
 8006a66:	4639      	mov	r1, r7
 8006a68:	4622      	mov	r2, r4
 8006a6a:	4630      	mov	r0, r6
 8006a6c:	f7ff ff1c 	bl	80068a8 <__multiply>
 8006a70:	4680      	mov	r8, r0
 8006a72:	4639      	mov	r1, r7
 8006a74:	4630      	mov	r0, r6
 8006a76:	f7ff fe4b 	bl	8006710 <_Bfree>
 8006a7a:	4647      	mov	r7, r8
 8006a7c:	106d      	asrs	r5, r5, #1
 8006a7e:	d00b      	beq.n	8006a98 <__pow5mult+0xa0>
 8006a80:	6820      	ldr	r0, [r4, #0]
 8006a82:	b938      	cbnz	r0, 8006a94 <__pow5mult+0x9c>
 8006a84:	4622      	mov	r2, r4
 8006a86:	4621      	mov	r1, r4
 8006a88:	4630      	mov	r0, r6
 8006a8a:	f7ff ff0d 	bl	80068a8 <__multiply>
 8006a8e:	6020      	str	r0, [r4, #0]
 8006a90:	f8c0 9000 	str.w	r9, [r0]
 8006a94:	4604      	mov	r4, r0
 8006a96:	e7e4      	b.n	8006a62 <__pow5mult+0x6a>
 8006a98:	4638      	mov	r0, r7
 8006a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a9e:	bf00      	nop
 8006aa0:	08007b50 	.word	0x08007b50
 8006aa4:	08007983 	.word	0x08007983
 8006aa8:	08007a03 	.word	0x08007a03

08006aac <__lshift>:
 8006aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab0:	460c      	mov	r4, r1
 8006ab2:	4607      	mov	r7, r0
 8006ab4:	4691      	mov	r9, r2
 8006ab6:	6923      	ldr	r3, [r4, #16]
 8006ab8:	6849      	ldr	r1, [r1, #4]
 8006aba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006abe:	68a3      	ldr	r3, [r4, #8]
 8006ac0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ac4:	f108 0601 	add.w	r6, r8, #1
 8006ac8:	42b3      	cmp	r3, r6
 8006aca:	db0b      	blt.n	8006ae4 <__lshift+0x38>
 8006acc:	4638      	mov	r0, r7
 8006ace:	f7ff fddf 	bl	8006690 <_Balloc>
 8006ad2:	4605      	mov	r5, r0
 8006ad4:	b948      	cbnz	r0, 8006aea <__lshift+0x3e>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006adc:	4b27      	ldr	r3, [pc, #156]	; (8006b7c <__lshift+0xd0>)
 8006ade:	4828      	ldr	r0, [pc, #160]	; (8006b80 <__lshift+0xd4>)
 8006ae0:	f000 fb7a 	bl	80071d8 <__assert_func>
 8006ae4:	3101      	adds	r1, #1
 8006ae6:	005b      	lsls	r3, r3, #1
 8006ae8:	e7ee      	b.n	8006ac8 <__lshift+0x1c>
 8006aea:	2300      	movs	r3, #0
 8006aec:	f100 0114 	add.w	r1, r0, #20
 8006af0:	f100 0210 	add.w	r2, r0, #16
 8006af4:	4618      	mov	r0, r3
 8006af6:	4553      	cmp	r3, sl
 8006af8:	db33      	blt.n	8006b62 <__lshift+0xb6>
 8006afa:	6920      	ldr	r0, [r4, #16]
 8006afc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b00:	f104 0314 	add.w	r3, r4, #20
 8006b04:	f019 091f 	ands.w	r9, r9, #31
 8006b08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006b0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006b10:	d02b      	beq.n	8006b6a <__lshift+0xbe>
 8006b12:	468a      	mov	sl, r1
 8006b14:	2200      	movs	r2, #0
 8006b16:	f1c9 0e20 	rsb	lr, r9, #32
 8006b1a:	6818      	ldr	r0, [r3, #0]
 8006b1c:	fa00 f009 	lsl.w	r0, r0, r9
 8006b20:	4310      	orrs	r0, r2
 8006b22:	f84a 0b04 	str.w	r0, [sl], #4
 8006b26:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b2a:	459c      	cmp	ip, r3
 8006b2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006b30:	d8f3      	bhi.n	8006b1a <__lshift+0x6e>
 8006b32:	ebac 0304 	sub.w	r3, ip, r4
 8006b36:	3b15      	subs	r3, #21
 8006b38:	f023 0303 	bic.w	r3, r3, #3
 8006b3c:	3304      	adds	r3, #4
 8006b3e:	f104 0015 	add.w	r0, r4, #21
 8006b42:	4584      	cmp	ip, r0
 8006b44:	bf38      	it	cc
 8006b46:	2304      	movcc	r3, #4
 8006b48:	50ca      	str	r2, [r1, r3]
 8006b4a:	b10a      	cbz	r2, 8006b50 <__lshift+0xa4>
 8006b4c:	f108 0602 	add.w	r6, r8, #2
 8006b50:	3e01      	subs	r6, #1
 8006b52:	4638      	mov	r0, r7
 8006b54:	4621      	mov	r1, r4
 8006b56:	612e      	str	r6, [r5, #16]
 8006b58:	f7ff fdda 	bl	8006710 <_Bfree>
 8006b5c:	4628      	mov	r0, r5
 8006b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b62:	f842 0f04 	str.w	r0, [r2, #4]!
 8006b66:	3301      	adds	r3, #1
 8006b68:	e7c5      	b.n	8006af6 <__lshift+0x4a>
 8006b6a:	3904      	subs	r1, #4
 8006b6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b70:	459c      	cmp	ip, r3
 8006b72:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b76:	d8f9      	bhi.n	8006b6c <__lshift+0xc0>
 8006b78:	e7ea      	b.n	8006b50 <__lshift+0xa4>
 8006b7a:	bf00      	nop
 8006b7c:	080079f2 	.word	0x080079f2
 8006b80:	08007a03 	.word	0x08007a03

08006b84 <__mcmp>:
 8006b84:	4603      	mov	r3, r0
 8006b86:	690a      	ldr	r2, [r1, #16]
 8006b88:	6900      	ldr	r0, [r0, #16]
 8006b8a:	b530      	push	{r4, r5, lr}
 8006b8c:	1a80      	subs	r0, r0, r2
 8006b8e:	d10d      	bne.n	8006bac <__mcmp+0x28>
 8006b90:	3314      	adds	r3, #20
 8006b92:	3114      	adds	r1, #20
 8006b94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006b98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006b9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006ba0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006ba4:	4295      	cmp	r5, r2
 8006ba6:	d002      	beq.n	8006bae <__mcmp+0x2a>
 8006ba8:	d304      	bcc.n	8006bb4 <__mcmp+0x30>
 8006baa:	2001      	movs	r0, #1
 8006bac:	bd30      	pop	{r4, r5, pc}
 8006bae:	42a3      	cmp	r3, r4
 8006bb0:	d3f4      	bcc.n	8006b9c <__mcmp+0x18>
 8006bb2:	e7fb      	b.n	8006bac <__mcmp+0x28>
 8006bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb8:	e7f8      	b.n	8006bac <__mcmp+0x28>
	...

08006bbc <__mdiff>:
 8006bbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc0:	460d      	mov	r5, r1
 8006bc2:	4607      	mov	r7, r0
 8006bc4:	4611      	mov	r1, r2
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	4614      	mov	r4, r2
 8006bca:	f7ff ffdb 	bl	8006b84 <__mcmp>
 8006bce:	1e06      	subs	r6, r0, #0
 8006bd0:	d111      	bne.n	8006bf6 <__mdiff+0x3a>
 8006bd2:	4631      	mov	r1, r6
 8006bd4:	4638      	mov	r0, r7
 8006bd6:	f7ff fd5b 	bl	8006690 <_Balloc>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	b928      	cbnz	r0, 8006bea <__mdiff+0x2e>
 8006bde:	f240 2137 	movw	r1, #567	; 0x237
 8006be2:	4b3a      	ldr	r3, [pc, #232]	; (8006ccc <__mdiff+0x110>)
 8006be4:	483a      	ldr	r0, [pc, #232]	; (8006cd0 <__mdiff+0x114>)
 8006be6:	f000 faf7 	bl	80071d8 <__assert_func>
 8006bea:	2301      	movs	r3, #1
 8006bec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006bf0:	4610      	mov	r0, r2
 8006bf2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bf6:	bfa4      	itt	ge
 8006bf8:	4623      	movge	r3, r4
 8006bfa:	462c      	movge	r4, r5
 8006bfc:	4638      	mov	r0, r7
 8006bfe:	6861      	ldr	r1, [r4, #4]
 8006c00:	bfa6      	itte	ge
 8006c02:	461d      	movge	r5, r3
 8006c04:	2600      	movge	r6, #0
 8006c06:	2601      	movlt	r6, #1
 8006c08:	f7ff fd42 	bl	8006690 <_Balloc>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	b918      	cbnz	r0, 8006c18 <__mdiff+0x5c>
 8006c10:	f240 2145 	movw	r1, #581	; 0x245
 8006c14:	4b2d      	ldr	r3, [pc, #180]	; (8006ccc <__mdiff+0x110>)
 8006c16:	e7e5      	b.n	8006be4 <__mdiff+0x28>
 8006c18:	f102 0814 	add.w	r8, r2, #20
 8006c1c:	46c2      	mov	sl, r8
 8006c1e:	f04f 0c00 	mov.w	ip, #0
 8006c22:	6927      	ldr	r7, [r4, #16]
 8006c24:	60c6      	str	r6, [r0, #12]
 8006c26:	692e      	ldr	r6, [r5, #16]
 8006c28:	f104 0014 	add.w	r0, r4, #20
 8006c2c:	f105 0914 	add.w	r9, r5, #20
 8006c30:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006c34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006c38:	3410      	adds	r4, #16
 8006c3a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006c3e:	f859 3b04 	ldr.w	r3, [r9], #4
 8006c42:	fa1f f18b 	uxth.w	r1, fp
 8006c46:	4461      	add	r1, ip
 8006c48:	fa1f fc83 	uxth.w	ip, r3
 8006c4c:	0c1b      	lsrs	r3, r3, #16
 8006c4e:	eba1 010c 	sub.w	r1, r1, ip
 8006c52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006c56:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006c5a:	b289      	uxth	r1, r1
 8006c5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006c60:	454e      	cmp	r6, r9
 8006c62:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006c66:	f84a 1b04 	str.w	r1, [sl], #4
 8006c6a:	d8e6      	bhi.n	8006c3a <__mdiff+0x7e>
 8006c6c:	1b73      	subs	r3, r6, r5
 8006c6e:	3b15      	subs	r3, #21
 8006c70:	f023 0303 	bic.w	r3, r3, #3
 8006c74:	3515      	adds	r5, #21
 8006c76:	3304      	adds	r3, #4
 8006c78:	42ae      	cmp	r6, r5
 8006c7a:	bf38      	it	cc
 8006c7c:	2304      	movcc	r3, #4
 8006c7e:	4418      	add	r0, r3
 8006c80:	4443      	add	r3, r8
 8006c82:	461e      	mov	r6, r3
 8006c84:	4605      	mov	r5, r0
 8006c86:	4575      	cmp	r5, lr
 8006c88:	d30e      	bcc.n	8006ca8 <__mdiff+0xec>
 8006c8a:	f10e 0103 	add.w	r1, lr, #3
 8006c8e:	1a09      	subs	r1, r1, r0
 8006c90:	f021 0103 	bic.w	r1, r1, #3
 8006c94:	3803      	subs	r0, #3
 8006c96:	4586      	cmp	lr, r0
 8006c98:	bf38      	it	cc
 8006c9a:	2100      	movcc	r1, #0
 8006c9c:	440b      	add	r3, r1
 8006c9e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006ca2:	b189      	cbz	r1, 8006cc8 <__mdiff+0x10c>
 8006ca4:	6117      	str	r7, [r2, #16]
 8006ca6:	e7a3      	b.n	8006bf0 <__mdiff+0x34>
 8006ca8:	f855 8b04 	ldr.w	r8, [r5], #4
 8006cac:	fa1f f188 	uxth.w	r1, r8
 8006cb0:	4461      	add	r1, ip
 8006cb2:	140c      	asrs	r4, r1, #16
 8006cb4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006cb8:	b289      	uxth	r1, r1
 8006cba:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006cbe:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006cc2:	f846 1b04 	str.w	r1, [r6], #4
 8006cc6:	e7de      	b.n	8006c86 <__mdiff+0xca>
 8006cc8:	3f01      	subs	r7, #1
 8006cca:	e7e8      	b.n	8006c9e <__mdiff+0xe2>
 8006ccc:	080079f2 	.word	0x080079f2
 8006cd0:	08007a03 	.word	0x08007a03

08006cd4 <__d2b>:
 8006cd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	4617      	mov	r7, r2
 8006cda:	461c      	mov	r4, r3
 8006cdc:	9e08      	ldr	r6, [sp, #32]
 8006cde:	f7ff fcd7 	bl	8006690 <_Balloc>
 8006ce2:	4605      	mov	r5, r0
 8006ce4:	b930      	cbnz	r0, 8006cf4 <__d2b+0x20>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	f240 310f 	movw	r1, #783	; 0x30f
 8006cec:	4b22      	ldr	r3, [pc, #136]	; (8006d78 <__d2b+0xa4>)
 8006cee:	4823      	ldr	r0, [pc, #140]	; (8006d7c <__d2b+0xa8>)
 8006cf0:	f000 fa72 	bl	80071d8 <__assert_func>
 8006cf4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006cf8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006cfc:	bb24      	cbnz	r4, 8006d48 <__d2b+0x74>
 8006cfe:	2f00      	cmp	r7, #0
 8006d00:	9301      	str	r3, [sp, #4]
 8006d02:	d026      	beq.n	8006d52 <__d2b+0x7e>
 8006d04:	4668      	mov	r0, sp
 8006d06:	9700      	str	r7, [sp, #0]
 8006d08:	f7ff fd8a 	bl	8006820 <__lo0bits>
 8006d0c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006d10:	b1e8      	cbz	r0, 8006d4e <__d2b+0x7a>
 8006d12:	f1c0 0320 	rsb	r3, r0, #32
 8006d16:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1a:	430b      	orrs	r3, r1
 8006d1c:	40c2      	lsrs	r2, r0
 8006d1e:	616b      	str	r3, [r5, #20]
 8006d20:	9201      	str	r2, [sp, #4]
 8006d22:	9b01      	ldr	r3, [sp, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	bf14      	ite	ne
 8006d28:	2102      	movne	r1, #2
 8006d2a:	2101      	moveq	r1, #1
 8006d2c:	61ab      	str	r3, [r5, #24]
 8006d2e:	6129      	str	r1, [r5, #16]
 8006d30:	b1bc      	cbz	r4, 8006d62 <__d2b+0x8e>
 8006d32:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006d36:	4404      	add	r4, r0
 8006d38:	6034      	str	r4, [r6, #0]
 8006d3a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d40:	6018      	str	r0, [r3, #0]
 8006d42:	4628      	mov	r0, r5
 8006d44:	b003      	add	sp, #12
 8006d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d4c:	e7d7      	b.n	8006cfe <__d2b+0x2a>
 8006d4e:	6169      	str	r1, [r5, #20]
 8006d50:	e7e7      	b.n	8006d22 <__d2b+0x4e>
 8006d52:	a801      	add	r0, sp, #4
 8006d54:	f7ff fd64 	bl	8006820 <__lo0bits>
 8006d58:	9b01      	ldr	r3, [sp, #4]
 8006d5a:	2101      	movs	r1, #1
 8006d5c:	616b      	str	r3, [r5, #20]
 8006d5e:	3020      	adds	r0, #32
 8006d60:	e7e5      	b.n	8006d2e <__d2b+0x5a>
 8006d62:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006d66:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8006d6a:	6030      	str	r0, [r6, #0]
 8006d6c:	6918      	ldr	r0, [r3, #16]
 8006d6e:	f7ff fd37 	bl	80067e0 <__hi0bits>
 8006d72:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006d76:	e7e2      	b.n	8006d3e <__d2b+0x6a>
 8006d78:	080079f2 	.word	0x080079f2
 8006d7c:	08007a03 	.word	0x08007a03

08006d80 <__ssputs_r>:
 8006d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d84:	461f      	mov	r7, r3
 8006d86:	688e      	ldr	r6, [r1, #8]
 8006d88:	4682      	mov	sl, r0
 8006d8a:	42be      	cmp	r6, r7
 8006d8c:	460c      	mov	r4, r1
 8006d8e:	4690      	mov	r8, r2
 8006d90:	680b      	ldr	r3, [r1, #0]
 8006d92:	d82c      	bhi.n	8006dee <__ssputs_r+0x6e>
 8006d94:	898a      	ldrh	r2, [r1, #12]
 8006d96:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d9a:	d026      	beq.n	8006dea <__ssputs_r+0x6a>
 8006d9c:	6965      	ldr	r5, [r4, #20]
 8006d9e:	6909      	ldr	r1, [r1, #16]
 8006da0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006da4:	eba3 0901 	sub.w	r9, r3, r1
 8006da8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006dac:	1c7b      	adds	r3, r7, #1
 8006dae:	444b      	add	r3, r9
 8006db0:	106d      	asrs	r5, r5, #1
 8006db2:	429d      	cmp	r5, r3
 8006db4:	bf38      	it	cc
 8006db6:	461d      	movcc	r5, r3
 8006db8:	0553      	lsls	r3, r2, #21
 8006dba:	d527      	bpl.n	8006e0c <__ssputs_r+0x8c>
 8006dbc:	4629      	mov	r1, r5
 8006dbe:	f7ff fbdb 	bl	8006578 <_malloc_r>
 8006dc2:	4606      	mov	r6, r0
 8006dc4:	b360      	cbz	r0, 8006e20 <__ssputs_r+0xa0>
 8006dc6:	464a      	mov	r2, r9
 8006dc8:	6921      	ldr	r1, [r4, #16]
 8006dca:	f7fe fce8 	bl	800579e <memcpy>
 8006dce:	89a3      	ldrh	r3, [r4, #12]
 8006dd0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dd8:	81a3      	strh	r3, [r4, #12]
 8006dda:	6126      	str	r6, [r4, #16]
 8006ddc:	444e      	add	r6, r9
 8006dde:	6026      	str	r6, [r4, #0]
 8006de0:	463e      	mov	r6, r7
 8006de2:	6165      	str	r5, [r4, #20]
 8006de4:	eba5 0509 	sub.w	r5, r5, r9
 8006de8:	60a5      	str	r5, [r4, #8]
 8006dea:	42be      	cmp	r6, r7
 8006dec:	d900      	bls.n	8006df0 <__ssputs_r+0x70>
 8006dee:	463e      	mov	r6, r7
 8006df0:	4632      	mov	r2, r6
 8006df2:	4641      	mov	r1, r8
 8006df4:	6820      	ldr	r0, [r4, #0]
 8006df6:	f000 f9c5 	bl	8007184 <memmove>
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	68a3      	ldr	r3, [r4, #8]
 8006dfe:	1b9b      	subs	r3, r3, r6
 8006e00:	60a3      	str	r3, [r4, #8]
 8006e02:	6823      	ldr	r3, [r4, #0]
 8006e04:	4433      	add	r3, r6
 8006e06:	6023      	str	r3, [r4, #0]
 8006e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e0c:	462a      	mov	r2, r5
 8006e0e:	f000 fa27 	bl	8007260 <_realloc_r>
 8006e12:	4606      	mov	r6, r0
 8006e14:	2800      	cmp	r0, #0
 8006e16:	d1e0      	bne.n	8006dda <__ssputs_r+0x5a>
 8006e18:	4650      	mov	r0, sl
 8006e1a:	6921      	ldr	r1, [r4, #16]
 8006e1c:	f7ff fb3c 	bl	8006498 <_free_r>
 8006e20:	230c      	movs	r3, #12
 8006e22:	f8ca 3000 	str.w	r3, [sl]
 8006e26:	89a3      	ldrh	r3, [r4, #12]
 8006e28:	f04f 30ff 	mov.w	r0, #4294967295
 8006e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e30:	81a3      	strh	r3, [r4, #12]
 8006e32:	e7e9      	b.n	8006e08 <__ssputs_r+0x88>

08006e34 <_svfiprintf_r>:
 8006e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e38:	4698      	mov	r8, r3
 8006e3a:	898b      	ldrh	r3, [r1, #12]
 8006e3c:	4607      	mov	r7, r0
 8006e3e:	061b      	lsls	r3, r3, #24
 8006e40:	460d      	mov	r5, r1
 8006e42:	4614      	mov	r4, r2
 8006e44:	b09d      	sub	sp, #116	; 0x74
 8006e46:	d50e      	bpl.n	8006e66 <_svfiprintf_r+0x32>
 8006e48:	690b      	ldr	r3, [r1, #16]
 8006e4a:	b963      	cbnz	r3, 8006e66 <_svfiprintf_r+0x32>
 8006e4c:	2140      	movs	r1, #64	; 0x40
 8006e4e:	f7ff fb93 	bl	8006578 <_malloc_r>
 8006e52:	6028      	str	r0, [r5, #0]
 8006e54:	6128      	str	r0, [r5, #16]
 8006e56:	b920      	cbnz	r0, 8006e62 <_svfiprintf_r+0x2e>
 8006e58:	230c      	movs	r3, #12
 8006e5a:	603b      	str	r3, [r7, #0]
 8006e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e60:	e0d0      	b.n	8007004 <_svfiprintf_r+0x1d0>
 8006e62:	2340      	movs	r3, #64	; 0x40
 8006e64:	616b      	str	r3, [r5, #20]
 8006e66:	2300      	movs	r3, #0
 8006e68:	9309      	str	r3, [sp, #36]	; 0x24
 8006e6a:	2320      	movs	r3, #32
 8006e6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e70:	2330      	movs	r3, #48	; 0x30
 8006e72:	f04f 0901 	mov.w	r9, #1
 8006e76:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e7a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800701c <_svfiprintf_r+0x1e8>
 8006e7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e82:	4623      	mov	r3, r4
 8006e84:	469a      	mov	sl, r3
 8006e86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e8a:	b10a      	cbz	r2, 8006e90 <_svfiprintf_r+0x5c>
 8006e8c:	2a25      	cmp	r2, #37	; 0x25
 8006e8e:	d1f9      	bne.n	8006e84 <_svfiprintf_r+0x50>
 8006e90:	ebba 0b04 	subs.w	fp, sl, r4
 8006e94:	d00b      	beq.n	8006eae <_svfiprintf_r+0x7a>
 8006e96:	465b      	mov	r3, fp
 8006e98:	4622      	mov	r2, r4
 8006e9a:	4629      	mov	r1, r5
 8006e9c:	4638      	mov	r0, r7
 8006e9e:	f7ff ff6f 	bl	8006d80 <__ssputs_r>
 8006ea2:	3001      	adds	r0, #1
 8006ea4:	f000 80a9 	beq.w	8006ffa <_svfiprintf_r+0x1c6>
 8006ea8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eaa:	445a      	add	r2, fp
 8006eac:	9209      	str	r2, [sp, #36]	; 0x24
 8006eae:	f89a 3000 	ldrb.w	r3, [sl]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f000 80a1 	beq.w	8006ffa <_svfiprintf_r+0x1c6>
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f04f 32ff 	mov.w	r2, #4294967295
 8006ebe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ec2:	f10a 0a01 	add.w	sl, sl, #1
 8006ec6:	9304      	str	r3, [sp, #16]
 8006ec8:	9307      	str	r3, [sp, #28]
 8006eca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ece:	931a      	str	r3, [sp, #104]	; 0x68
 8006ed0:	4654      	mov	r4, sl
 8006ed2:	2205      	movs	r2, #5
 8006ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ed8:	4850      	ldr	r0, [pc, #320]	; (800701c <_svfiprintf_r+0x1e8>)
 8006eda:	f7fe fc52 	bl	8005782 <memchr>
 8006ede:	9a04      	ldr	r2, [sp, #16]
 8006ee0:	b9d8      	cbnz	r0, 8006f1a <_svfiprintf_r+0xe6>
 8006ee2:	06d0      	lsls	r0, r2, #27
 8006ee4:	bf44      	itt	mi
 8006ee6:	2320      	movmi	r3, #32
 8006ee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006eec:	0711      	lsls	r1, r2, #28
 8006eee:	bf44      	itt	mi
 8006ef0:	232b      	movmi	r3, #43	; 0x2b
 8006ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8006efa:	2b2a      	cmp	r3, #42	; 0x2a
 8006efc:	d015      	beq.n	8006f2a <_svfiprintf_r+0xf6>
 8006efe:	4654      	mov	r4, sl
 8006f00:	2000      	movs	r0, #0
 8006f02:	f04f 0c0a 	mov.w	ip, #10
 8006f06:	9a07      	ldr	r2, [sp, #28]
 8006f08:	4621      	mov	r1, r4
 8006f0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f0e:	3b30      	subs	r3, #48	; 0x30
 8006f10:	2b09      	cmp	r3, #9
 8006f12:	d94d      	bls.n	8006fb0 <_svfiprintf_r+0x17c>
 8006f14:	b1b0      	cbz	r0, 8006f44 <_svfiprintf_r+0x110>
 8006f16:	9207      	str	r2, [sp, #28]
 8006f18:	e014      	b.n	8006f44 <_svfiprintf_r+0x110>
 8006f1a:	eba0 0308 	sub.w	r3, r0, r8
 8006f1e:	fa09 f303 	lsl.w	r3, r9, r3
 8006f22:	4313      	orrs	r3, r2
 8006f24:	46a2      	mov	sl, r4
 8006f26:	9304      	str	r3, [sp, #16]
 8006f28:	e7d2      	b.n	8006ed0 <_svfiprintf_r+0x9c>
 8006f2a:	9b03      	ldr	r3, [sp, #12]
 8006f2c:	1d19      	adds	r1, r3, #4
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	9103      	str	r1, [sp, #12]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	bfbb      	ittet	lt
 8006f36:	425b      	neglt	r3, r3
 8006f38:	f042 0202 	orrlt.w	r2, r2, #2
 8006f3c:	9307      	strge	r3, [sp, #28]
 8006f3e:	9307      	strlt	r3, [sp, #28]
 8006f40:	bfb8      	it	lt
 8006f42:	9204      	strlt	r2, [sp, #16]
 8006f44:	7823      	ldrb	r3, [r4, #0]
 8006f46:	2b2e      	cmp	r3, #46	; 0x2e
 8006f48:	d10c      	bne.n	8006f64 <_svfiprintf_r+0x130>
 8006f4a:	7863      	ldrb	r3, [r4, #1]
 8006f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8006f4e:	d134      	bne.n	8006fba <_svfiprintf_r+0x186>
 8006f50:	9b03      	ldr	r3, [sp, #12]
 8006f52:	3402      	adds	r4, #2
 8006f54:	1d1a      	adds	r2, r3, #4
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	9203      	str	r2, [sp, #12]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	bfb8      	it	lt
 8006f5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f62:	9305      	str	r3, [sp, #20]
 8006f64:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007020 <_svfiprintf_r+0x1ec>
 8006f68:	2203      	movs	r2, #3
 8006f6a:	4650      	mov	r0, sl
 8006f6c:	7821      	ldrb	r1, [r4, #0]
 8006f6e:	f7fe fc08 	bl	8005782 <memchr>
 8006f72:	b138      	cbz	r0, 8006f84 <_svfiprintf_r+0x150>
 8006f74:	2240      	movs	r2, #64	; 0x40
 8006f76:	9b04      	ldr	r3, [sp, #16]
 8006f78:	eba0 000a 	sub.w	r0, r0, sl
 8006f7c:	4082      	lsls	r2, r0
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	3401      	adds	r4, #1
 8006f82:	9304      	str	r3, [sp, #16]
 8006f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f88:	2206      	movs	r2, #6
 8006f8a:	4826      	ldr	r0, [pc, #152]	; (8007024 <_svfiprintf_r+0x1f0>)
 8006f8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f90:	f7fe fbf7 	bl	8005782 <memchr>
 8006f94:	2800      	cmp	r0, #0
 8006f96:	d038      	beq.n	800700a <_svfiprintf_r+0x1d6>
 8006f98:	4b23      	ldr	r3, [pc, #140]	; (8007028 <_svfiprintf_r+0x1f4>)
 8006f9a:	bb1b      	cbnz	r3, 8006fe4 <_svfiprintf_r+0x1b0>
 8006f9c:	9b03      	ldr	r3, [sp, #12]
 8006f9e:	3307      	adds	r3, #7
 8006fa0:	f023 0307 	bic.w	r3, r3, #7
 8006fa4:	3308      	adds	r3, #8
 8006fa6:	9303      	str	r3, [sp, #12]
 8006fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006faa:	4433      	add	r3, r6
 8006fac:	9309      	str	r3, [sp, #36]	; 0x24
 8006fae:	e768      	b.n	8006e82 <_svfiprintf_r+0x4e>
 8006fb0:	460c      	mov	r4, r1
 8006fb2:	2001      	movs	r0, #1
 8006fb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fb8:	e7a6      	b.n	8006f08 <_svfiprintf_r+0xd4>
 8006fba:	2300      	movs	r3, #0
 8006fbc:	f04f 0c0a 	mov.w	ip, #10
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	3401      	adds	r4, #1
 8006fc4:	9305      	str	r3, [sp, #20]
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fcc:	3a30      	subs	r2, #48	; 0x30
 8006fce:	2a09      	cmp	r2, #9
 8006fd0:	d903      	bls.n	8006fda <_svfiprintf_r+0x1a6>
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d0c6      	beq.n	8006f64 <_svfiprintf_r+0x130>
 8006fd6:	9105      	str	r1, [sp, #20]
 8006fd8:	e7c4      	b.n	8006f64 <_svfiprintf_r+0x130>
 8006fda:	4604      	mov	r4, r0
 8006fdc:	2301      	movs	r3, #1
 8006fde:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fe2:	e7f0      	b.n	8006fc6 <_svfiprintf_r+0x192>
 8006fe4:	ab03      	add	r3, sp, #12
 8006fe6:	9300      	str	r3, [sp, #0]
 8006fe8:	462a      	mov	r2, r5
 8006fea:	4638      	mov	r0, r7
 8006fec:	4b0f      	ldr	r3, [pc, #60]	; (800702c <_svfiprintf_r+0x1f8>)
 8006fee:	a904      	add	r1, sp, #16
 8006ff0:	f7fd fe60 	bl	8004cb4 <_printf_float>
 8006ff4:	1c42      	adds	r2, r0, #1
 8006ff6:	4606      	mov	r6, r0
 8006ff8:	d1d6      	bne.n	8006fa8 <_svfiprintf_r+0x174>
 8006ffa:	89ab      	ldrh	r3, [r5, #12]
 8006ffc:	065b      	lsls	r3, r3, #25
 8006ffe:	f53f af2d 	bmi.w	8006e5c <_svfiprintf_r+0x28>
 8007002:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007004:	b01d      	add	sp, #116	; 0x74
 8007006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800700a:	ab03      	add	r3, sp, #12
 800700c:	9300      	str	r3, [sp, #0]
 800700e:	462a      	mov	r2, r5
 8007010:	4638      	mov	r0, r7
 8007012:	4b06      	ldr	r3, [pc, #24]	; (800702c <_svfiprintf_r+0x1f8>)
 8007014:	a904      	add	r1, sp, #16
 8007016:	f7fe f8ed 	bl	80051f4 <_printf_i>
 800701a:	e7eb      	b.n	8006ff4 <_svfiprintf_r+0x1c0>
 800701c:	08007b5c 	.word	0x08007b5c
 8007020:	08007b62 	.word	0x08007b62
 8007024:	08007b66 	.word	0x08007b66
 8007028:	08004cb5 	.word	0x08004cb5
 800702c:	08006d81 	.word	0x08006d81

08007030 <__sflush_r>:
 8007030:	898a      	ldrh	r2, [r1, #12]
 8007032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007034:	4605      	mov	r5, r0
 8007036:	0710      	lsls	r0, r2, #28
 8007038:	460c      	mov	r4, r1
 800703a:	d457      	bmi.n	80070ec <__sflush_r+0xbc>
 800703c:	684b      	ldr	r3, [r1, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	dc04      	bgt.n	800704c <__sflush_r+0x1c>
 8007042:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007044:	2b00      	cmp	r3, #0
 8007046:	dc01      	bgt.n	800704c <__sflush_r+0x1c>
 8007048:	2000      	movs	r0, #0
 800704a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800704c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800704e:	2e00      	cmp	r6, #0
 8007050:	d0fa      	beq.n	8007048 <__sflush_r+0x18>
 8007052:	2300      	movs	r3, #0
 8007054:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007058:	682f      	ldr	r7, [r5, #0]
 800705a:	6a21      	ldr	r1, [r4, #32]
 800705c:	602b      	str	r3, [r5, #0]
 800705e:	d032      	beq.n	80070c6 <__sflush_r+0x96>
 8007060:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007062:	89a3      	ldrh	r3, [r4, #12]
 8007064:	075a      	lsls	r2, r3, #29
 8007066:	d505      	bpl.n	8007074 <__sflush_r+0x44>
 8007068:	6863      	ldr	r3, [r4, #4]
 800706a:	1ac0      	subs	r0, r0, r3
 800706c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800706e:	b10b      	cbz	r3, 8007074 <__sflush_r+0x44>
 8007070:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007072:	1ac0      	subs	r0, r0, r3
 8007074:	2300      	movs	r3, #0
 8007076:	4602      	mov	r2, r0
 8007078:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800707a:	4628      	mov	r0, r5
 800707c:	6a21      	ldr	r1, [r4, #32]
 800707e:	47b0      	blx	r6
 8007080:	1c43      	adds	r3, r0, #1
 8007082:	89a3      	ldrh	r3, [r4, #12]
 8007084:	d106      	bne.n	8007094 <__sflush_r+0x64>
 8007086:	6829      	ldr	r1, [r5, #0]
 8007088:	291d      	cmp	r1, #29
 800708a:	d82b      	bhi.n	80070e4 <__sflush_r+0xb4>
 800708c:	4a28      	ldr	r2, [pc, #160]	; (8007130 <__sflush_r+0x100>)
 800708e:	410a      	asrs	r2, r1
 8007090:	07d6      	lsls	r6, r2, #31
 8007092:	d427      	bmi.n	80070e4 <__sflush_r+0xb4>
 8007094:	2200      	movs	r2, #0
 8007096:	6062      	str	r2, [r4, #4]
 8007098:	6922      	ldr	r2, [r4, #16]
 800709a:	04d9      	lsls	r1, r3, #19
 800709c:	6022      	str	r2, [r4, #0]
 800709e:	d504      	bpl.n	80070aa <__sflush_r+0x7a>
 80070a0:	1c42      	adds	r2, r0, #1
 80070a2:	d101      	bne.n	80070a8 <__sflush_r+0x78>
 80070a4:	682b      	ldr	r3, [r5, #0]
 80070a6:	b903      	cbnz	r3, 80070aa <__sflush_r+0x7a>
 80070a8:	6560      	str	r0, [r4, #84]	; 0x54
 80070aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070ac:	602f      	str	r7, [r5, #0]
 80070ae:	2900      	cmp	r1, #0
 80070b0:	d0ca      	beq.n	8007048 <__sflush_r+0x18>
 80070b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070b6:	4299      	cmp	r1, r3
 80070b8:	d002      	beq.n	80070c0 <__sflush_r+0x90>
 80070ba:	4628      	mov	r0, r5
 80070bc:	f7ff f9ec 	bl	8006498 <_free_r>
 80070c0:	2000      	movs	r0, #0
 80070c2:	6360      	str	r0, [r4, #52]	; 0x34
 80070c4:	e7c1      	b.n	800704a <__sflush_r+0x1a>
 80070c6:	2301      	movs	r3, #1
 80070c8:	4628      	mov	r0, r5
 80070ca:	47b0      	blx	r6
 80070cc:	1c41      	adds	r1, r0, #1
 80070ce:	d1c8      	bne.n	8007062 <__sflush_r+0x32>
 80070d0:	682b      	ldr	r3, [r5, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d0c5      	beq.n	8007062 <__sflush_r+0x32>
 80070d6:	2b1d      	cmp	r3, #29
 80070d8:	d001      	beq.n	80070de <__sflush_r+0xae>
 80070da:	2b16      	cmp	r3, #22
 80070dc:	d101      	bne.n	80070e2 <__sflush_r+0xb2>
 80070de:	602f      	str	r7, [r5, #0]
 80070e0:	e7b2      	b.n	8007048 <__sflush_r+0x18>
 80070e2:	89a3      	ldrh	r3, [r4, #12]
 80070e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070e8:	81a3      	strh	r3, [r4, #12]
 80070ea:	e7ae      	b.n	800704a <__sflush_r+0x1a>
 80070ec:	690f      	ldr	r7, [r1, #16]
 80070ee:	2f00      	cmp	r7, #0
 80070f0:	d0aa      	beq.n	8007048 <__sflush_r+0x18>
 80070f2:	0793      	lsls	r3, r2, #30
 80070f4:	bf18      	it	ne
 80070f6:	2300      	movne	r3, #0
 80070f8:	680e      	ldr	r6, [r1, #0]
 80070fa:	bf08      	it	eq
 80070fc:	694b      	ldreq	r3, [r1, #20]
 80070fe:	1bf6      	subs	r6, r6, r7
 8007100:	600f      	str	r7, [r1, #0]
 8007102:	608b      	str	r3, [r1, #8]
 8007104:	2e00      	cmp	r6, #0
 8007106:	dd9f      	ble.n	8007048 <__sflush_r+0x18>
 8007108:	4633      	mov	r3, r6
 800710a:	463a      	mov	r2, r7
 800710c:	4628      	mov	r0, r5
 800710e:	6a21      	ldr	r1, [r4, #32]
 8007110:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007114:	47e0      	blx	ip
 8007116:	2800      	cmp	r0, #0
 8007118:	dc06      	bgt.n	8007128 <__sflush_r+0xf8>
 800711a:	89a3      	ldrh	r3, [r4, #12]
 800711c:	f04f 30ff 	mov.w	r0, #4294967295
 8007120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007124:	81a3      	strh	r3, [r4, #12]
 8007126:	e790      	b.n	800704a <__sflush_r+0x1a>
 8007128:	4407      	add	r7, r0
 800712a:	1a36      	subs	r6, r6, r0
 800712c:	e7ea      	b.n	8007104 <__sflush_r+0xd4>
 800712e:	bf00      	nop
 8007130:	dfbffffe 	.word	0xdfbffffe

08007134 <_fflush_r>:
 8007134:	b538      	push	{r3, r4, r5, lr}
 8007136:	690b      	ldr	r3, [r1, #16]
 8007138:	4605      	mov	r5, r0
 800713a:	460c      	mov	r4, r1
 800713c:	b913      	cbnz	r3, 8007144 <_fflush_r+0x10>
 800713e:	2500      	movs	r5, #0
 8007140:	4628      	mov	r0, r5
 8007142:	bd38      	pop	{r3, r4, r5, pc}
 8007144:	b118      	cbz	r0, 800714e <_fflush_r+0x1a>
 8007146:	6a03      	ldr	r3, [r0, #32]
 8007148:	b90b      	cbnz	r3, 800714e <_fflush_r+0x1a>
 800714a:	f7fe fa01 	bl	8005550 <__sinit>
 800714e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d0f3      	beq.n	800713e <_fflush_r+0xa>
 8007156:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007158:	07d0      	lsls	r0, r2, #31
 800715a:	d404      	bmi.n	8007166 <_fflush_r+0x32>
 800715c:	0599      	lsls	r1, r3, #22
 800715e:	d402      	bmi.n	8007166 <_fflush_r+0x32>
 8007160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007162:	f7fe fb0c 	bl	800577e <__retarget_lock_acquire_recursive>
 8007166:	4628      	mov	r0, r5
 8007168:	4621      	mov	r1, r4
 800716a:	f7ff ff61 	bl	8007030 <__sflush_r>
 800716e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007170:	4605      	mov	r5, r0
 8007172:	07da      	lsls	r2, r3, #31
 8007174:	d4e4      	bmi.n	8007140 <_fflush_r+0xc>
 8007176:	89a3      	ldrh	r3, [r4, #12]
 8007178:	059b      	lsls	r3, r3, #22
 800717a:	d4e1      	bmi.n	8007140 <_fflush_r+0xc>
 800717c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800717e:	f7fe faff 	bl	8005780 <__retarget_lock_release_recursive>
 8007182:	e7dd      	b.n	8007140 <_fflush_r+0xc>

08007184 <memmove>:
 8007184:	4288      	cmp	r0, r1
 8007186:	b510      	push	{r4, lr}
 8007188:	eb01 0402 	add.w	r4, r1, r2
 800718c:	d902      	bls.n	8007194 <memmove+0x10>
 800718e:	4284      	cmp	r4, r0
 8007190:	4623      	mov	r3, r4
 8007192:	d807      	bhi.n	80071a4 <memmove+0x20>
 8007194:	1e43      	subs	r3, r0, #1
 8007196:	42a1      	cmp	r1, r4
 8007198:	d008      	beq.n	80071ac <memmove+0x28>
 800719a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800719e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071a2:	e7f8      	b.n	8007196 <memmove+0x12>
 80071a4:	4601      	mov	r1, r0
 80071a6:	4402      	add	r2, r0
 80071a8:	428a      	cmp	r2, r1
 80071aa:	d100      	bne.n	80071ae <memmove+0x2a>
 80071ac:	bd10      	pop	{r4, pc}
 80071ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071b6:	e7f7      	b.n	80071a8 <memmove+0x24>

080071b8 <_sbrk_r>:
 80071b8:	b538      	push	{r3, r4, r5, lr}
 80071ba:	2300      	movs	r3, #0
 80071bc:	4d05      	ldr	r5, [pc, #20]	; (80071d4 <_sbrk_r+0x1c>)
 80071be:	4604      	mov	r4, r0
 80071c0:	4608      	mov	r0, r1
 80071c2:	602b      	str	r3, [r5, #0]
 80071c4:	f7fa fcf0 	bl	8001ba8 <_sbrk>
 80071c8:	1c43      	adds	r3, r0, #1
 80071ca:	d102      	bne.n	80071d2 <_sbrk_r+0x1a>
 80071cc:	682b      	ldr	r3, [r5, #0]
 80071ce:	b103      	cbz	r3, 80071d2 <_sbrk_r+0x1a>
 80071d0:	6023      	str	r3, [r4, #0]
 80071d2:	bd38      	pop	{r3, r4, r5, pc}
 80071d4:	200009c0 	.word	0x200009c0

080071d8 <__assert_func>:
 80071d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071da:	4614      	mov	r4, r2
 80071dc:	461a      	mov	r2, r3
 80071de:	4b09      	ldr	r3, [pc, #36]	; (8007204 <__assert_func+0x2c>)
 80071e0:	4605      	mov	r5, r0
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68d8      	ldr	r0, [r3, #12]
 80071e6:	b14c      	cbz	r4, 80071fc <__assert_func+0x24>
 80071e8:	4b07      	ldr	r3, [pc, #28]	; (8007208 <__assert_func+0x30>)
 80071ea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80071ee:	9100      	str	r1, [sp, #0]
 80071f0:	462b      	mov	r3, r5
 80071f2:	4906      	ldr	r1, [pc, #24]	; (800720c <__assert_func+0x34>)
 80071f4:	f000 f870 	bl	80072d8 <fiprintf>
 80071f8:	f000 f880 	bl	80072fc <abort>
 80071fc:	4b04      	ldr	r3, [pc, #16]	; (8007210 <__assert_func+0x38>)
 80071fe:	461c      	mov	r4, r3
 8007200:	e7f3      	b.n	80071ea <__assert_func+0x12>
 8007202:	bf00      	nop
 8007204:	200000d4 	.word	0x200000d4
 8007208:	08007b77 	.word	0x08007b77
 800720c:	08007b84 	.word	0x08007b84
 8007210:	08007bb2 	.word	0x08007bb2

08007214 <_calloc_r>:
 8007214:	b570      	push	{r4, r5, r6, lr}
 8007216:	fba1 5402 	umull	r5, r4, r1, r2
 800721a:	b934      	cbnz	r4, 800722a <_calloc_r+0x16>
 800721c:	4629      	mov	r1, r5
 800721e:	f7ff f9ab 	bl	8006578 <_malloc_r>
 8007222:	4606      	mov	r6, r0
 8007224:	b928      	cbnz	r0, 8007232 <_calloc_r+0x1e>
 8007226:	4630      	mov	r0, r6
 8007228:	bd70      	pop	{r4, r5, r6, pc}
 800722a:	220c      	movs	r2, #12
 800722c:	2600      	movs	r6, #0
 800722e:	6002      	str	r2, [r0, #0]
 8007230:	e7f9      	b.n	8007226 <_calloc_r+0x12>
 8007232:	462a      	mov	r2, r5
 8007234:	4621      	mov	r1, r4
 8007236:	f7fe fa24 	bl	8005682 <memset>
 800723a:	e7f4      	b.n	8007226 <_calloc_r+0x12>

0800723c <__ascii_mbtowc>:
 800723c:	b082      	sub	sp, #8
 800723e:	b901      	cbnz	r1, 8007242 <__ascii_mbtowc+0x6>
 8007240:	a901      	add	r1, sp, #4
 8007242:	b142      	cbz	r2, 8007256 <__ascii_mbtowc+0x1a>
 8007244:	b14b      	cbz	r3, 800725a <__ascii_mbtowc+0x1e>
 8007246:	7813      	ldrb	r3, [r2, #0]
 8007248:	600b      	str	r3, [r1, #0]
 800724a:	7812      	ldrb	r2, [r2, #0]
 800724c:	1e10      	subs	r0, r2, #0
 800724e:	bf18      	it	ne
 8007250:	2001      	movne	r0, #1
 8007252:	b002      	add	sp, #8
 8007254:	4770      	bx	lr
 8007256:	4610      	mov	r0, r2
 8007258:	e7fb      	b.n	8007252 <__ascii_mbtowc+0x16>
 800725a:	f06f 0001 	mvn.w	r0, #1
 800725e:	e7f8      	b.n	8007252 <__ascii_mbtowc+0x16>

08007260 <_realloc_r>:
 8007260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007264:	4680      	mov	r8, r0
 8007266:	4614      	mov	r4, r2
 8007268:	460e      	mov	r6, r1
 800726a:	b921      	cbnz	r1, 8007276 <_realloc_r+0x16>
 800726c:	4611      	mov	r1, r2
 800726e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007272:	f7ff b981 	b.w	8006578 <_malloc_r>
 8007276:	b92a      	cbnz	r2, 8007284 <_realloc_r+0x24>
 8007278:	f7ff f90e 	bl	8006498 <_free_r>
 800727c:	4625      	mov	r5, r4
 800727e:	4628      	mov	r0, r5
 8007280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007284:	f000 f841 	bl	800730a <_malloc_usable_size_r>
 8007288:	4284      	cmp	r4, r0
 800728a:	4607      	mov	r7, r0
 800728c:	d802      	bhi.n	8007294 <_realloc_r+0x34>
 800728e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007292:	d812      	bhi.n	80072ba <_realloc_r+0x5a>
 8007294:	4621      	mov	r1, r4
 8007296:	4640      	mov	r0, r8
 8007298:	f7ff f96e 	bl	8006578 <_malloc_r>
 800729c:	4605      	mov	r5, r0
 800729e:	2800      	cmp	r0, #0
 80072a0:	d0ed      	beq.n	800727e <_realloc_r+0x1e>
 80072a2:	42bc      	cmp	r4, r7
 80072a4:	4622      	mov	r2, r4
 80072a6:	4631      	mov	r1, r6
 80072a8:	bf28      	it	cs
 80072aa:	463a      	movcs	r2, r7
 80072ac:	f7fe fa77 	bl	800579e <memcpy>
 80072b0:	4631      	mov	r1, r6
 80072b2:	4640      	mov	r0, r8
 80072b4:	f7ff f8f0 	bl	8006498 <_free_r>
 80072b8:	e7e1      	b.n	800727e <_realloc_r+0x1e>
 80072ba:	4635      	mov	r5, r6
 80072bc:	e7df      	b.n	800727e <_realloc_r+0x1e>

080072be <__ascii_wctomb>:
 80072be:	4603      	mov	r3, r0
 80072c0:	4608      	mov	r0, r1
 80072c2:	b141      	cbz	r1, 80072d6 <__ascii_wctomb+0x18>
 80072c4:	2aff      	cmp	r2, #255	; 0xff
 80072c6:	d904      	bls.n	80072d2 <__ascii_wctomb+0x14>
 80072c8:	228a      	movs	r2, #138	; 0x8a
 80072ca:	f04f 30ff 	mov.w	r0, #4294967295
 80072ce:	601a      	str	r2, [r3, #0]
 80072d0:	4770      	bx	lr
 80072d2:	2001      	movs	r0, #1
 80072d4:	700a      	strb	r2, [r1, #0]
 80072d6:	4770      	bx	lr

080072d8 <fiprintf>:
 80072d8:	b40e      	push	{r1, r2, r3}
 80072da:	b503      	push	{r0, r1, lr}
 80072dc:	4601      	mov	r1, r0
 80072de:	ab03      	add	r3, sp, #12
 80072e0:	4805      	ldr	r0, [pc, #20]	; (80072f8 <fiprintf+0x20>)
 80072e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80072e6:	6800      	ldr	r0, [r0, #0]
 80072e8:	9301      	str	r3, [sp, #4]
 80072ea:	f000 f83d 	bl	8007368 <_vfiprintf_r>
 80072ee:	b002      	add	sp, #8
 80072f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80072f4:	b003      	add	sp, #12
 80072f6:	4770      	bx	lr
 80072f8:	200000d4 	.word	0x200000d4

080072fc <abort>:
 80072fc:	2006      	movs	r0, #6
 80072fe:	b508      	push	{r3, lr}
 8007300:	f000 fa0a 	bl	8007718 <raise>
 8007304:	2001      	movs	r0, #1
 8007306:	f7fa fbdc 	bl	8001ac2 <_exit>

0800730a <_malloc_usable_size_r>:
 800730a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800730e:	1f18      	subs	r0, r3, #4
 8007310:	2b00      	cmp	r3, #0
 8007312:	bfbc      	itt	lt
 8007314:	580b      	ldrlt	r3, [r1, r0]
 8007316:	18c0      	addlt	r0, r0, r3
 8007318:	4770      	bx	lr

0800731a <__sfputc_r>:
 800731a:	6893      	ldr	r3, [r2, #8]
 800731c:	b410      	push	{r4}
 800731e:	3b01      	subs	r3, #1
 8007320:	2b00      	cmp	r3, #0
 8007322:	6093      	str	r3, [r2, #8]
 8007324:	da07      	bge.n	8007336 <__sfputc_r+0x1c>
 8007326:	6994      	ldr	r4, [r2, #24]
 8007328:	42a3      	cmp	r3, r4
 800732a:	db01      	blt.n	8007330 <__sfputc_r+0x16>
 800732c:	290a      	cmp	r1, #10
 800732e:	d102      	bne.n	8007336 <__sfputc_r+0x1c>
 8007330:	bc10      	pop	{r4}
 8007332:	f000 b933 	b.w	800759c <__swbuf_r>
 8007336:	6813      	ldr	r3, [r2, #0]
 8007338:	1c58      	adds	r0, r3, #1
 800733a:	6010      	str	r0, [r2, #0]
 800733c:	7019      	strb	r1, [r3, #0]
 800733e:	4608      	mov	r0, r1
 8007340:	bc10      	pop	{r4}
 8007342:	4770      	bx	lr

08007344 <__sfputs_r>:
 8007344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007346:	4606      	mov	r6, r0
 8007348:	460f      	mov	r7, r1
 800734a:	4614      	mov	r4, r2
 800734c:	18d5      	adds	r5, r2, r3
 800734e:	42ac      	cmp	r4, r5
 8007350:	d101      	bne.n	8007356 <__sfputs_r+0x12>
 8007352:	2000      	movs	r0, #0
 8007354:	e007      	b.n	8007366 <__sfputs_r+0x22>
 8007356:	463a      	mov	r2, r7
 8007358:	4630      	mov	r0, r6
 800735a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800735e:	f7ff ffdc 	bl	800731a <__sfputc_r>
 8007362:	1c43      	adds	r3, r0, #1
 8007364:	d1f3      	bne.n	800734e <__sfputs_r+0xa>
 8007366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007368 <_vfiprintf_r>:
 8007368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800736c:	460d      	mov	r5, r1
 800736e:	4614      	mov	r4, r2
 8007370:	4698      	mov	r8, r3
 8007372:	4606      	mov	r6, r0
 8007374:	b09d      	sub	sp, #116	; 0x74
 8007376:	b118      	cbz	r0, 8007380 <_vfiprintf_r+0x18>
 8007378:	6a03      	ldr	r3, [r0, #32]
 800737a:	b90b      	cbnz	r3, 8007380 <_vfiprintf_r+0x18>
 800737c:	f7fe f8e8 	bl	8005550 <__sinit>
 8007380:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007382:	07d9      	lsls	r1, r3, #31
 8007384:	d405      	bmi.n	8007392 <_vfiprintf_r+0x2a>
 8007386:	89ab      	ldrh	r3, [r5, #12]
 8007388:	059a      	lsls	r2, r3, #22
 800738a:	d402      	bmi.n	8007392 <_vfiprintf_r+0x2a>
 800738c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800738e:	f7fe f9f6 	bl	800577e <__retarget_lock_acquire_recursive>
 8007392:	89ab      	ldrh	r3, [r5, #12]
 8007394:	071b      	lsls	r3, r3, #28
 8007396:	d501      	bpl.n	800739c <_vfiprintf_r+0x34>
 8007398:	692b      	ldr	r3, [r5, #16]
 800739a:	b99b      	cbnz	r3, 80073c4 <_vfiprintf_r+0x5c>
 800739c:	4629      	mov	r1, r5
 800739e:	4630      	mov	r0, r6
 80073a0:	f000 f93a 	bl	8007618 <__swsetup_r>
 80073a4:	b170      	cbz	r0, 80073c4 <_vfiprintf_r+0x5c>
 80073a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073a8:	07dc      	lsls	r4, r3, #31
 80073aa:	d504      	bpl.n	80073b6 <_vfiprintf_r+0x4e>
 80073ac:	f04f 30ff 	mov.w	r0, #4294967295
 80073b0:	b01d      	add	sp, #116	; 0x74
 80073b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b6:	89ab      	ldrh	r3, [r5, #12]
 80073b8:	0598      	lsls	r0, r3, #22
 80073ba:	d4f7      	bmi.n	80073ac <_vfiprintf_r+0x44>
 80073bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073be:	f7fe f9df 	bl	8005780 <__retarget_lock_release_recursive>
 80073c2:	e7f3      	b.n	80073ac <_vfiprintf_r+0x44>
 80073c4:	2300      	movs	r3, #0
 80073c6:	9309      	str	r3, [sp, #36]	; 0x24
 80073c8:	2320      	movs	r3, #32
 80073ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073ce:	2330      	movs	r3, #48	; 0x30
 80073d0:	f04f 0901 	mov.w	r9, #1
 80073d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80073d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007588 <_vfiprintf_r+0x220>
 80073dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073e0:	4623      	mov	r3, r4
 80073e2:	469a      	mov	sl, r3
 80073e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073e8:	b10a      	cbz	r2, 80073ee <_vfiprintf_r+0x86>
 80073ea:	2a25      	cmp	r2, #37	; 0x25
 80073ec:	d1f9      	bne.n	80073e2 <_vfiprintf_r+0x7a>
 80073ee:	ebba 0b04 	subs.w	fp, sl, r4
 80073f2:	d00b      	beq.n	800740c <_vfiprintf_r+0xa4>
 80073f4:	465b      	mov	r3, fp
 80073f6:	4622      	mov	r2, r4
 80073f8:	4629      	mov	r1, r5
 80073fa:	4630      	mov	r0, r6
 80073fc:	f7ff ffa2 	bl	8007344 <__sfputs_r>
 8007400:	3001      	adds	r0, #1
 8007402:	f000 80a9 	beq.w	8007558 <_vfiprintf_r+0x1f0>
 8007406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007408:	445a      	add	r2, fp
 800740a:	9209      	str	r2, [sp, #36]	; 0x24
 800740c:	f89a 3000 	ldrb.w	r3, [sl]
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 80a1 	beq.w	8007558 <_vfiprintf_r+0x1f0>
 8007416:	2300      	movs	r3, #0
 8007418:	f04f 32ff 	mov.w	r2, #4294967295
 800741c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007420:	f10a 0a01 	add.w	sl, sl, #1
 8007424:	9304      	str	r3, [sp, #16]
 8007426:	9307      	str	r3, [sp, #28]
 8007428:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800742c:	931a      	str	r3, [sp, #104]	; 0x68
 800742e:	4654      	mov	r4, sl
 8007430:	2205      	movs	r2, #5
 8007432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007436:	4854      	ldr	r0, [pc, #336]	; (8007588 <_vfiprintf_r+0x220>)
 8007438:	f7fe f9a3 	bl	8005782 <memchr>
 800743c:	9a04      	ldr	r2, [sp, #16]
 800743e:	b9d8      	cbnz	r0, 8007478 <_vfiprintf_r+0x110>
 8007440:	06d1      	lsls	r1, r2, #27
 8007442:	bf44      	itt	mi
 8007444:	2320      	movmi	r3, #32
 8007446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800744a:	0713      	lsls	r3, r2, #28
 800744c:	bf44      	itt	mi
 800744e:	232b      	movmi	r3, #43	; 0x2b
 8007450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007454:	f89a 3000 	ldrb.w	r3, [sl]
 8007458:	2b2a      	cmp	r3, #42	; 0x2a
 800745a:	d015      	beq.n	8007488 <_vfiprintf_r+0x120>
 800745c:	4654      	mov	r4, sl
 800745e:	2000      	movs	r0, #0
 8007460:	f04f 0c0a 	mov.w	ip, #10
 8007464:	9a07      	ldr	r2, [sp, #28]
 8007466:	4621      	mov	r1, r4
 8007468:	f811 3b01 	ldrb.w	r3, [r1], #1
 800746c:	3b30      	subs	r3, #48	; 0x30
 800746e:	2b09      	cmp	r3, #9
 8007470:	d94d      	bls.n	800750e <_vfiprintf_r+0x1a6>
 8007472:	b1b0      	cbz	r0, 80074a2 <_vfiprintf_r+0x13a>
 8007474:	9207      	str	r2, [sp, #28]
 8007476:	e014      	b.n	80074a2 <_vfiprintf_r+0x13a>
 8007478:	eba0 0308 	sub.w	r3, r0, r8
 800747c:	fa09 f303 	lsl.w	r3, r9, r3
 8007480:	4313      	orrs	r3, r2
 8007482:	46a2      	mov	sl, r4
 8007484:	9304      	str	r3, [sp, #16]
 8007486:	e7d2      	b.n	800742e <_vfiprintf_r+0xc6>
 8007488:	9b03      	ldr	r3, [sp, #12]
 800748a:	1d19      	adds	r1, r3, #4
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	9103      	str	r1, [sp, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	bfbb      	ittet	lt
 8007494:	425b      	neglt	r3, r3
 8007496:	f042 0202 	orrlt.w	r2, r2, #2
 800749a:	9307      	strge	r3, [sp, #28]
 800749c:	9307      	strlt	r3, [sp, #28]
 800749e:	bfb8      	it	lt
 80074a0:	9204      	strlt	r2, [sp, #16]
 80074a2:	7823      	ldrb	r3, [r4, #0]
 80074a4:	2b2e      	cmp	r3, #46	; 0x2e
 80074a6:	d10c      	bne.n	80074c2 <_vfiprintf_r+0x15a>
 80074a8:	7863      	ldrb	r3, [r4, #1]
 80074aa:	2b2a      	cmp	r3, #42	; 0x2a
 80074ac:	d134      	bne.n	8007518 <_vfiprintf_r+0x1b0>
 80074ae:	9b03      	ldr	r3, [sp, #12]
 80074b0:	3402      	adds	r4, #2
 80074b2:	1d1a      	adds	r2, r3, #4
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	9203      	str	r2, [sp, #12]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	bfb8      	it	lt
 80074bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80074c0:	9305      	str	r3, [sp, #20]
 80074c2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800758c <_vfiprintf_r+0x224>
 80074c6:	2203      	movs	r2, #3
 80074c8:	4650      	mov	r0, sl
 80074ca:	7821      	ldrb	r1, [r4, #0]
 80074cc:	f7fe f959 	bl	8005782 <memchr>
 80074d0:	b138      	cbz	r0, 80074e2 <_vfiprintf_r+0x17a>
 80074d2:	2240      	movs	r2, #64	; 0x40
 80074d4:	9b04      	ldr	r3, [sp, #16]
 80074d6:	eba0 000a 	sub.w	r0, r0, sl
 80074da:	4082      	lsls	r2, r0
 80074dc:	4313      	orrs	r3, r2
 80074de:	3401      	adds	r4, #1
 80074e0:	9304      	str	r3, [sp, #16]
 80074e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074e6:	2206      	movs	r2, #6
 80074e8:	4829      	ldr	r0, [pc, #164]	; (8007590 <_vfiprintf_r+0x228>)
 80074ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074ee:	f7fe f948 	bl	8005782 <memchr>
 80074f2:	2800      	cmp	r0, #0
 80074f4:	d03f      	beq.n	8007576 <_vfiprintf_r+0x20e>
 80074f6:	4b27      	ldr	r3, [pc, #156]	; (8007594 <_vfiprintf_r+0x22c>)
 80074f8:	bb1b      	cbnz	r3, 8007542 <_vfiprintf_r+0x1da>
 80074fa:	9b03      	ldr	r3, [sp, #12]
 80074fc:	3307      	adds	r3, #7
 80074fe:	f023 0307 	bic.w	r3, r3, #7
 8007502:	3308      	adds	r3, #8
 8007504:	9303      	str	r3, [sp, #12]
 8007506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007508:	443b      	add	r3, r7
 800750a:	9309      	str	r3, [sp, #36]	; 0x24
 800750c:	e768      	b.n	80073e0 <_vfiprintf_r+0x78>
 800750e:	460c      	mov	r4, r1
 8007510:	2001      	movs	r0, #1
 8007512:	fb0c 3202 	mla	r2, ip, r2, r3
 8007516:	e7a6      	b.n	8007466 <_vfiprintf_r+0xfe>
 8007518:	2300      	movs	r3, #0
 800751a:	f04f 0c0a 	mov.w	ip, #10
 800751e:	4619      	mov	r1, r3
 8007520:	3401      	adds	r4, #1
 8007522:	9305      	str	r3, [sp, #20]
 8007524:	4620      	mov	r0, r4
 8007526:	f810 2b01 	ldrb.w	r2, [r0], #1
 800752a:	3a30      	subs	r2, #48	; 0x30
 800752c:	2a09      	cmp	r2, #9
 800752e:	d903      	bls.n	8007538 <_vfiprintf_r+0x1d0>
 8007530:	2b00      	cmp	r3, #0
 8007532:	d0c6      	beq.n	80074c2 <_vfiprintf_r+0x15a>
 8007534:	9105      	str	r1, [sp, #20]
 8007536:	e7c4      	b.n	80074c2 <_vfiprintf_r+0x15a>
 8007538:	4604      	mov	r4, r0
 800753a:	2301      	movs	r3, #1
 800753c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007540:	e7f0      	b.n	8007524 <_vfiprintf_r+0x1bc>
 8007542:	ab03      	add	r3, sp, #12
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	462a      	mov	r2, r5
 8007548:	4630      	mov	r0, r6
 800754a:	4b13      	ldr	r3, [pc, #76]	; (8007598 <_vfiprintf_r+0x230>)
 800754c:	a904      	add	r1, sp, #16
 800754e:	f7fd fbb1 	bl	8004cb4 <_printf_float>
 8007552:	4607      	mov	r7, r0
 8007554:	1c78      	adds	r0, r7, #1
 8007556:	d1d6      	bne.n	8007506 <_vfiprintf_r+0x19e>
 8007558:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800755a:	07d9      	lsls	r1, r3, #31
 800755c:	d405      	bmi.n	800756a <_vfiprintf_r+0x202>
 800755e:	89ab      	ldrh	r3, [r5, #12]
 8007560:	059a      	lsls	r2, r3, #22
 8007562:	d402      	bmi.n	800756a <_vfiprintf_r+0x202>
 8007564:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007566:	f7fe f90b 	bl	8005780 <__retarget_lock_release_recursive>
 800756a:	89ab      	ldrh	r3, [r5, #12]
 800756c:	065b      	lsls	r3, r3, #25
 800756e:	f53f af1d 	bmi.w	80073ac <_vfiprintf_r+0x44>
 8007572:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007574:	e71c      	b.n	80073b0 <_vfiprintf_r+0x48>
 8007576:	ab03      	add	r3, sp, #12
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	462a      	mov	r2, r5
 800757c:	4630      	mov	r0, r6
 800757e:	4b06      	ldr	r3, [pc, #24]	; (8007598 <_vfiprintf_r+0x230>)
 8007580:	a904      	add	r1, sp, #16
 8007582:	f7fd fe37 	bl	80051f4 <_printf_i>
 8007586:	e7e4      	b.n	8007552 <_vfiprintf_r+0x1ea>
 8007588:	08007b5c 	.word	0x08007b5c
 800758c:	08007b62 	.word	0x08007b62
 8007590:	08007b66 	.word	0x08007b66
 8007594:	08004cb5 	.word	0x08004cb5
 8007598:	08007345 	.word	0x08007345

0800759c <__swbuf_r>:
 800759c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800759e:	460e      	mov	r6, r1
 80075a0:	4614      	mov	r4, r2
 80075a2:	4605      	mov	r5, r0
 80075a4:	b118      	cbz	r0, 80075ae <__swbuf_r+0x12>
 80075a6:	6a03      	ldr	r3, [r0, #32]
 80075a8:	b90b      	cbnz	r3, 80075ae <__swbuf_r+0x12>
 80075aa:	f7fd ffd1 	bl	8005550 <__sinit>
 80075ae:	69a3      	ldr	r3, [r4, #24]
 80075b0:	60a3      	str	r3, [r4, #8]
 80075b2:	89a3      	ldrh	r3, [r4, #12]
 80075b4:	071a      	lsls	r2, r3, #28
 80075b6:	d525      	bpl.n	8007604 <__swbuf_r+0x68>
 80075b8:	6923      	ldr	r3, [r4, #16]
 80075ba:	b31b      	cbz	r3, 8007604 <__swbuf_r+0x68>
 80075bc:	6823      	ldr	r3, [r4, #0]
 80075be:	6922      	ldr	r2, [r4, #16]
 80075c0:	b2f6      	uxtb	r6, r6
 80075c2:	1a98      	subs	r0, r3, r2
 80075c4:	6963      	ldr	r3, [r4, #20]
 80075c6:	4637      	mov	r7, r6
 80075c8:	4283      	cmp	r3, r0
 80075ca:	dc04      	bgt.n	80075d6 <__swbuf_r+0x3a>
 80075cc:	4621      	mov	r1, r4
 80075ce:	4628      	mov	r0, r5
 80075d0:	f7ff fdb0 	bl	8007134 <_fflush_r>
 80075d4:	b9e0      	cbnz	r0, 8007610 <__swbuf_r+0x74>
 80075d6:	68a3      	ldr	r3, [r4, #8]
 80075d8:	3b01      	subs	r3, #1
 80075da:	60a3      	str	r3, [r4, #8]
 80075dc:	6823      	ldr	r3, [r4, #0]
 80075de:	1c5a      	adds	r2, r3, #1
 80075e0:	6022      	str	r2, [r4, #0]
 80075e2:	701e      	strb	r6, [r3, #0]
 80075e4:	6962      	ldr	r2, [r4, #20]
 80075e6:	1c43      	adds	r3, r0, #1
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d004      	beq.n	80075f6 <__swbuf_r+0x5a>
 80075ec:	89a3      	ldrh	r3, [r4, #12]
 80075ee:	07db      	lsls	r3, r3, #31
 80075f0:	d506      	bpl.n	8007600 <__swbuf_r+0x64>
 80075f2:	2e0a      	cmp	r6, #10
 80075f4:	d104      	bne.n	8007600 <__swbuf_r+0x64>
 80075f6:	4621      	mov	r1, r4
 80075f8:	4628      	mov	r0, r5
 80075fa:	f7ff fd9b 	bl	8007134 <_fflush_r>
 80075fe:	b938      	cbnz	r0, 8007610 <__swbuf_r+0x74>
 8007600:	4638      	mov	r0, r7
 8007602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007604:	4621      	mov	r1, r4
 8007606:	4628      	mov	r0, r5
 8007608:	f000 f806 	bl	8007618 <__swsetup_r>
 800760c:	2800      	cmp	r0, #0
 800760e:	d0d5      	beq.n	80075bc <__swbuf_r+0x20>
 8007610:	f04f 37ff 	mov.w	r7, #4294967295
 8007614:	e7f4      	b.n	8007600 <__swbuf_r+0x64>
	...

08007618 <__swsetup_r>:
 8007618:	b538      	push	{r3, r4, r5, lr}
 800761a:	4b2a      	ldr	r3, [pc, #168]	; (80076c4 <__swsetup_r+0xac>)
 800761c:	4605      	mov	r5, r0
 800761e:	6818      	ldr	r0, [r3, #0]
 8007620:	460c      	mov	r4, r1
 8007622:	b118      	cbz	r0, 800762c <__swsetup_r+0x14>
 8007624:	6a03      	ldr	r3, [r0, #32]
 8007626:	b90b      	cbnz	r3, 800762c <__swsetup_r+0x14>
 8007628:	f7fd ff92 	bl	8005550 <__sinit>
 800762c:	89a3      	ldrh	r3, [r4, #12]
 800762e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007632:	0718      	lsls	r0, r3, #28
 8007634:	d422      	bmi.n	800767c <__swsetup_r+0x64>
 8007636:	06d9      	lsls	r1, r3, #27
 8007638:	d407      	bmi.n	800764a <__swsetup_r+0x32>
 800763a:	2309      	movs	r3, #9
 800763c:	602b      	str	r3, [r5, #0]
 800763e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007642:	f04f 30ff 	mov.w	r0, #4294967295
 8007646:	81a3      	strh	r3, [r4, #12]
 8007648:	e034      	b.n	80076b4 <__swsetup_r+0x9c>
 800764a:	0758      	lsls	r0, r3, #29
 800764c:	d512      	bpl.n	8007674 <__swsetup_r+0x5c>
 800764e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007650:	b141      	cbz	r1, 8007664 <__swsetup_r+0x4c>
 8007652:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007656:	4299      	cmp	r1, r3
 8007658:	d002      	beq.n	8007660 <__swsetup_r+0x48>
 800765a:	4628      	mov	r0, r5
 800765c:	f7fe ff1c 	bl	8006498 <_free_r>
 8007660:	2300      	movs	r3, #0
 8007662:	6363      	str	r3, [r4, #52]	; 0x34
 8007664:	89a3      	ldrh	r3, [r4, #12]
 8007666:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800766a:	81a3      	strh	r3, [r4, #12]
 800766c:	2300      	movs	r3, #0
 800766e:	6063      	str	r3, [r4, #4]
 8007670:	6923      	ldr	r3, [r4, #16]
 8007672:	6023      	str	r3, [r4, #0]
 8007674:	89a3      	ldrh	r3, [r4, #12]
 8007676:	f043 0308 	orr.w	r3, r3, #8
 800767a:	81a3      	strh	r3, [r4, #12]
 800767c:	6923      	ldr	r3, [r4, #16]
 800767e:	b94b      	cbnz	r3, 8007694 <__swsetup_r+0x7c>
 8007680:	89a3      	ldrh	r3, [r4, #12]
 8007682:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800768a:	d003      	beq.n	8007694 <__swsetup_r+0x7c>
 800768c:	4621      	mov	r1, r4
 800768e:	4628      	mov	r0, r5
 8007690:	f000 f883 	bl	800779a <__smakebuf_r>
 8007694:	89a0      	ldrh	r0, [r4, #12]
 8007696:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800769a:	f010 0301 	ands.w	r3, r0, #1
 800769e:	d00a      	beq.n	80076b6 <__swsetup_r+0x9e>
 80076a0:	2300      	movs	r3, #0
 80076a2:	60a3      	str	r3, [r4, #8]
 80076a4:	6963      	ldr	r3, [r4, #20]
 80076a6:	425b      	negs	r3, r3
 80076a8:	61a3      	str	r3, [r4, #24]
 80076aa:	6923      	ldr	r3, [r4, #16]
 80076ac:	b943      	cbnz	r3, 80076c0 <__swsetup_r+0xa8>
 80076ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80076b2:	d1c4      	bne.n	800763e <__swsetup_r+0x26>
 80076b4:	bd38      	pop	{r3, r4, r5, pc}
 80076b6:	0781      	lsls	r1, r0, #30
 80076b8:	bf58      	it	pl
 80076ba:	6963      	ldrpl	r3, [r4, #20]
 80076bc:	60a3      	str	r3, [r4, #8]
 80076be:	e7f4      	b.n	80076aa <__swsetup_r+0x92>
 80076c0:	2000      	movs	r0, #0
 80076c2:	e7f7      	b.n	80076b4 <__swsetup_r+0x9c>
 80076c4:	200000d4 	.word	0x200000d4

080076c8 <_raise_r>:
 80076c8:	291f      	cmp	r1, #31
 80076ca:	b538      	push	{r3, r4, r5, lr}
 80076cc:	4604      	mov	r4, r0
 80076ce:	460d      	mov	r5, r1
 80076d0:	d904      	bls.n	80076dc <_raise_r+0x14>
 80076d2:	2316      	movs	r3, #22
 80076d4:	6003      	str	r3, [r0, #0]
 80076d6:	f04f 30ff 	mov.w	r0, #4294967295
 80076da:	bd38      	pop	{r3, r4, r5, pc}
 80076dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80076de:	b112      	cbz	r2, 80076e6 <_raise_r+0x1e>
 80076e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80076e4:	b94b      	cbnz	r3, 80076fa <_raise_r+0x32>
 80076e6:	4620      	mov	r0, r4
 80076e8:	f000 f830 	bl	800774c <_getpid_r>
 80076ec:	462a      	mov	r2, r5
 80076ee:	4601      	mov	r1, r0
 80076f0:	4620      	mov	r0, r4
 80076f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076f6:	f000 b817 	b.w	8007728 <_kill_r>
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d00a      	beq.n	8007714 <_raise_r+0x4c>
 80076fe:	1c59      	adds	r1, r3, #1
 8007700:	d103      	bne.n	800770a <_raise_r+0x42>
 8007702:	2316      	movs	r3, #22
 8007704:	6003      	str	r3, [r0, #0]
 8007706:	2001      	movs	r0, #1
 8007708:	e7e7      	b.n	80076da <_raise_r+0x12>
 800770a:	2400      	movs	r4, #0
 800770c:	4628      	mov	r0, r5
 800770e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007712:	4798      	blx	r3
 8007714:	2000      	movs	r0, #0
 8007716:	e7e0      	b.n	80076da <_raise_r+0x12>

08007718 <raise>:
 8007718:	4b02      	ldr	r3, [pc, #8]	; (8007724 <raise+0xc>)
 800771a:	4601      	mov	r1, r0
 800771c:	6818      	ldr	r0, [r3, #0]
 800771e:	f7ff bfd3 	b.w	80076c8 <_raise_r>
 8007722:	bf00      	nop
 8007724:	200000d4 	.word	0x200000d4

08007728 <_kill_r>:
 8007728:	b538      	push	{r3, r4, r5, lr}
 800772a:	2300      	movs	r3, #0
 800772c:	4d06      	ldr	r5, [pc, #24]	; (8007748 <_kill_r+0x20>)
 800772e:	4604      	mov	r4, r0
 8007730:	4608      	mov	r0, r1
 8007732:	4611      	mov	r1, r2
 8007734:	602b      	str	r3, [r5, #0]
 8007736:	f7fa f9b4 	bl	8001aa2 <_kill>
 800773a:	1c43      	adds	r3, r0, #1
 800773c:	d102      	bne.n	8007744 <_kill_r+0x1c>
 800773e:	682b      	ldr	r3, [r5, #0]
 8007740:	b103      	cbz	r3, 8007744 <_kill_r+0x1c>
 8007742:	6023      	str	r3, [r4, #0]
 8007744:	bd38      	pop	{r3, r4, r5, pc}
 8007746:	bf00      	nop
 8007748:	200009c0 	.word	0x200009c0

0800774c <_getpid_r>:
 800774c:	f7fa b9a2 	b.w	8001a94 <_getpid>

08007750 <__swhatbuf_r>:
 8007750:	b570      	push	{r4, r5, r6, lr}
 8007752:	460c      	mov	r4, r1
 8007754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007758:	4615      	mov	r5, r2
 800775a:	2900      	cmp	r1, #0
 800775c:	461e      	mov	r6, r3
 800775e:	b096      	sub	sp, #88	; 0x58
 8007760:	da0c      	bge.n	800777c <__swhatbuf_r+0x2c>
 8007762:	89a3      	ldrh	r3, [r4, #12]
 8007764:	2100      	movs	r1, #0
 8007766:	f013 0f80 	tst.w	r3, #128	; 0x80
 800776a:	bf0c      	ite	eq
 800776c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007770:	2340      	movne	r3, #64	; 0x40
 8007772:	2000      	movs	r0, #0
 8007774:	6031      	str	r1, [r6, #0]
 8007776:	602b      	str	r3, [r5, #0]
 8007778:	b016      	add	sp, #88	; 0x58
 800777a:	bd70      	pop	{r4, r5, r6, pc}
 800777c:	466a      	mov	r2, sp
 800777e:	f000 f849 	bl	8007814 <_fstat_r>
 8007782:	2800      	cmp	r0, #0
 8007784:	dbed      	blt.n	8007762 <__swhatbuf_r+0x12>
 8007786:	9901      	ldr	r1, [sp, #4]
 8007788:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800778c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007790:	4259      	negs	r1, r3
 8007792:	4159      	adcs	r1, r3
 8007794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007798:	e7eb      	b.n	8007772 <__swhatbuf_r+0x22>

0800779a <__smakebuf_r>:
 800779a:	898b      	ldrh	r3, [r1, #12]
 800779c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800779e:	079d      	lsls	r5, r3, #30
 80077a0:	4606      	mov	r6, r0
 80077a2:	460c      	mov	r4, r1
 80077a4:	d507      	bpl.n	80077b6 <__smakebuf_r+0x1c>
 80077a6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077aa:	6023      	str	r3, [r4, #0]
 80077ac:	6123      	str	r3, [r4, #16]
 80077ae:	2301      	movs	r3, #1
 80077b0:	6163      	str	r3, [r4, #20]
 80077b2:	b002      	add	sp, #8
 80077b4:	bd70      	pop	{r4, r5, r6, pc}
 80077b6:	466a      	mov	r2, sp
 80077b8:	ab01      	add	r3, sp, #4
 80077ba:	f7ff ffc9 	bl	8007750 <__swhatbuf_r>
 80077be:	9900      	ldr	r1, [sp, #0]
 80077c0:	4605      	mov	r5, r0
 80077c2:	4630      	mov	r0, r6
 80077c4:	f7fe fed8 	bl	8006578 <_malloc_r>
 80077c8:	b948      	cbnz	r0, 80077de <__smakebuf_r+0x44>
 80077ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077ce:	059a      	lsls	r2, r3, #22
 80077d0:	d4ef      	bmi.n	80077b2 <__smakebuf_r+0x18>
 80077d2:	f023 0303 	bic.w	r3, r3, #3
 80077d6:	f043 0302 	orr.w	r3, r3, #2
 80077da:	81a3      	strh	r3, [r4, #12]
 80077dc:	e7e3      	b.n	80077a6 <__smakebuf_r+0xc>
 80077de:	89a3      	ldrh	r3, [r4, #12]
 80077e0:	6020      	str	r0, [r4, #0]
 80077e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077e6:	81a3      	strh	r3, [r4, #12]
 80077e8:	9b00      	ldr	r3, [sp, #0]
 80077ea:	6120      	str	r0, [r4, #16]
 80077ec:	6163      	str	r3, [r4, #20]
 80077ee:	9b01      	ldr	r3, [sp, #4]
 80077f0:	b15b      	cbz	r3, 800780a <__smakebuf_r+0x70>
 80077f2:	4630      	mov	r0, r6
 80077f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077f8:	f000 f81e 	bl	8007838 <_isatty_r>
 80077fc:	b128      	cbz	r0, 800780a <__smakebuf_r+0x70>
 80077fe:	89a3      	ldrh	r3, [r4, #12]
 8007800:	f023 0303 	bic.w	r3, r3, #3
 8007804:	f043 0301 	orr.w	r3, r3, #1
 8007808:	81a3      	strh	r3, [r4, #12]
 800780a:	89a3      	ldrh	r3, [r4, #12]
 800780c:	431d      	orrs	r5, r3
 800780e:	81a5      	strh	r5, [r4, #12]
 8007810:	e7cf      	b.n	80077b2 <__smakebuf_r+0x18>
	...

08007814 <_fstat_r>:
 8007814:	b538      	push	{r3, r4, r5, lr}
 8007816:	2300      	movs	r3, #0
 8007818:	4d06      	ldr	r5, [pc, #24]	; (8007834 <_fstat_r+0x20>)
 800781a:	4604      	mov	r4, r0
 800781c:	4608      	mov	r0, r1
 800781e:	4611      	mov	r1, r2
 8007820:	602b      	str	r3, [r5, #0]
 8007822:	f7fa f99c 	bl	8001b5e <_fstat>
 8007826:	1c43      	adds	r3, r0, #1
 8007828:	d102      	bne.n	8007830 <_fstat_r+0x1c>
 800782a:	682b      	ldr	r3, [r5, #0]
 800782c:	b103      	cbz	r3, 8007830 <_fstat_r+0x1c>
 800782e:	6023      	str	r3, [r4, #0]
 8007830:	bd38      	pop	{r3, r4, r5, pc}
 8007832:	bf00      	nop
 8007834:	200009c0 	.word	0x200009c0

08007838 <_isatty_r>:
 8007838:	b538      	push	{r3, r4, r5, lr}
 800783a:	2300      	movs	r3, #0
 800783c:	4d05      	ldr	r5, [pc, #20]	; (8007854 <_isatty_r+0x1c>)
 800783e:	4604      	mov	r4, r0
 8007840:	4608      	mov	r0, r1
 8007842:	602b      	str	r3, [r5, #0]
 8007844:	f7fa f99a 	bl	8001b7c <_isatty>
 8007848:	1c43      	adds	r3, r0, #1
 800784a:	d102      	bne.n	8007852 <_isatty_r+0x1a>
 800784c:	682b      	ldr	r3, [r5, #0]
 800784e:	b103      	cbz	r3, 8007852 <_isatty_r+0x1a>
 8007850:	6023      	str	r3, [r4, #0]
 8007852:	bd38      	pop	{r3, r4, r5, pc}
 8007854:	200009c0 	.word	0x200009c0

08007858 <_init>:
 8007858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800785a:	bf00      	nop
 800785c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800785e:	bc08      	pop	{r3}
 8007860:	469e      	mov	lr, r3
 8007862:	4770      	bx	lr

08007864 <_fini>:
 8007864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007866:	bf00      	nop
 8007868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800786a:	bc08      	pop	{r3}
 800786c:	469e      	mov	lr, r3
 800786e:	4770      	bx	lr
