
STM32F103C8T6_Deneme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080023e8  080023e8  000123e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002414  08002414  0002014c  2**0
                  CONTENTS
  4 .ARM          00000000  08002414  08002414  0002014c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002414  08002414  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002414  08002414  00012414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002418  08002418  00012418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  0800241c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000014c  08002568  0002014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08002568  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020175  2**0
                  CONTENTS, READONLY
 13 .debug_info   000077f8  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017cd  00000000  00000000  000279b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006b8  00000000  00000000  00029180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000051e  00000000  00000000  00029838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016e5f  00000000  00000000  00029d56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008cd2  00000000  00000000  00040bb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081742  00000000  00000000  00049887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000019b4  00000000  00000000  000cafcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000cc980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000014c 	.word	0x2000014c
 8000128:	00000000 	.word	0x00000000
 800012c:	080023d0 	.word	0x080023d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000150 	.word	0x20000150
 8000148:	080023d0 	.word	0x080023d0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <test3>:
	ans=Check_OK();
	return ans;
}

void test3()
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));
 8000160:	48b2      	ldr	r0, [pc, #712]	; (800042c <test3+0x2d0>)
 8000162:	f7ff fff3 	bl	800014c <strlen>
 8000166:	4603      	mov	r3, r0
 8000168:	461a      	mov	r2, r3
 800016a:	2100      	movs	r1, #0
 800016c:	48af      	ldr	r0, [pc, #700]	; (800042c <test3+0x2d0>)
 800016e:	f002 f903 	bl	8002378 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command1,strlen(Command1),100);
 8000172:	48af      	ldr	r0, [pc, #700]	; (8000430 <test3+0x2d4>)
 8000174:	f7ff ffea 	bl	800014c <strlen>
 8000178:	4603      	mov	r3, r0
 800017a:	b29a      	uxth	r2, r3
 800017c:	2364      	movs	r3, #100	; 0x64
 800017e:	49ac      	ldr	r1, [pc, #688]	; (8000430 <test3+0x2d4>)
 8000180:	48ac      	ldr	r0, [pc, #688]	; (8000434 <test3+0x2d8>)
 8000182:	f001 fd0d 	bl	8001ba0 <HAL_UART_Transmit>
	HAL_Delay(50);
 8000186:	2032      	movs	r0, #50	; 0x32
 8000188:	f000 fbd4 	bl	8000934 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));
 800018c:	48a7      	ldr	r0, [pc, #668]	; (800042c <test3+0x2d0>)
 800018e:	f7ff ffdd 	bl	800014c <strlen>
 8000192:	4603      	mov	r3, r0
 8000194:	461a      	mov	r2, r3
 8000196:	2100      	movs	r1, #0
 8000198:	48a4      	ldr	r0, [pc, #656]	; (800042c <test3+0x2d0>)
 800019a:	f002 f8ed 	bl	8002378 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command2,strlen(Command2),100);
 800019e:	48a6      	ldr	r0, [pc, #664]	; (8000438 <test3+0x2dc>)
 80001a0:	f7ff ffd4 	bl	800014c <strlen>
 80001a4:	4603      	mov	r3, r0
 80001a6:	b29a      	uxth	r2, r3
 80001a8:	2364      	movs	r3, #100	; 0x64
 80001aa:	49a3      	ldr	r1, [pc, #652]	; (8000438 <test3+0x2dc>)
 80001ac:	48a1      	ldr	r0, [pc, #644]	; (8000434 <test3+0x2d8>)
 80001ae:	f001 fcf7 	bl	8001ba0 <HAL_UART_Transmit>
	HAL_Delay(50);
 80001b2:	2032      	movs	r0, #50	; 0x32
 80001b4:	f000 fbbe 	bl	8000934 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));
 80001b8:	489c      	ldr	r0, [pc, #624]	; (800042c <test3+0x2d0>)
 80001ba:	f7ff ffc7 	bl	800014c <strlen>
 80001be:	4603      	mov	r3, r0
 80001c0:	461a      	mov	r2, r3
 80001c2:	2100      	movs	r1, #0
 80001c4:	4899      	ldr	r0, [pc, #612]	; (800042c <test3+0x2d0>)
 80001c6:	f002 f8d7 	bl	8002378 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command3,strlen(Command3),100);
 80001ca:	489c      	ldr	r0, [pc, #624]	; (800043c <test3+0x2e0>)
 80001cc:	f7ff ffbe 	bl	800014c <strlen>
 80001d0:	4603      	mov	r3, r0
 80001d2:	b29a      	uxth	r2, r3
 80001d4:	2364      	movs	r3, #100	; 0x64
 80001d6:	4999      	ldr	r1, [pc, #612]	; (800043c <test3+0x2e0>)
 80001d8:	4896      	ldr	r0, [pc, #600]	; (8000434 <test3+0x2d8>)
 80001da:	f001 fce1 	bl	8001ba0 <HAL_UART_Transmit>
	HAL_Delay(50);
 80001de:	2032      	movs	r0, #50	; 0x32
 80001e0:	f000 fba8 	bl	8000934 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));
 80001e4:	4891      	ldr	r0, [pc, #580]	; (800042c <test3+0x2d0>)
 80001e6:	f7ff ffb1 	bl	800014c <strlen>
 80001ea:	4603      	mov	r3, r0
 80001ec:	461a      	mov	r2, r3
 80001ee:	2100      	movs	r1, #0
 80001f0:	488e      	ldr	r0, [pc, #568]	; (800042c <test3+0x2d0>)
 80001f2:	f002 f8c1 	bl	8002378 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command4,strlen(Command4),100);
 80001f6:	4892      	ldr	r0, [pc, #584]	; (8000440 <test3+0x2e4>)
 80001f8:	f7ff ffa8 	bl	800014c <strlen>
 80001fc:	4603      	mov	r3, r0
 80001fe:	b29a      	uxth	r2, r3
 8000200:	2364      	movs	r3, #100	; 0x64
 8000202:	498f      	ldr	r1, [pc, #572]	; (8000440 <test3+0x2e4>)
 8000204:	488b      	ldr	r0, [pc, #556]	; (8000434 <test3+0x2d8>)
 8000206:	f001 fccb 	bl	8001ba0 <HAL_UART_Transmit>
	HAL_Delay(50);
 800020a:	2032      	movs	r0, #50	; 0x32
 800020c:	f000 fb92 	bl	8000934 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));
 8000210:	4886      	ldr	r0, [pc, #536]	; (800042c <test3+0x2d0>)
 8000212:	f7ff ff9b 	bl	800014c <strlen>
 8000216:	4603      	mov	r3, r0
 8000218:	461a      	mov	r2, r3
 800021a:	2100      	movs	r1, #0
 800021c:	4883      	ldr	r0, [pc, #524]	; (800042c <test3+0x2d0>)
 800021e:	f002 f8ab 	bl	8002378 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command5,strlen(Command5),100);
 8000222:	4888      	ldr	r0, [pc, #544]	; (8000444 <test3+0x2e8>)
 8000224:	f7ff ff92 	bl	800014c <strlen>
 8000228:	4603      	mov	r3, r0
 800022a:	b29a      	uxth	r2, r3
 800022c:	2364      	movs	r3, #100	; 0x64
 800022e:	4985      	ldr	r1, [pc, #532]	; (8000444 <test3+0x2e8>)
 8000230:	4880      	ldr	r0, [pc, #512]	; (8000434 <test3+0x2d8>)
 8000232:	f001 fcb5 	bl	8001ba0 <HAL_UART_Transmit>
	HAL_Delay(100);
 8000236:	2064      	movs	r0, #100	; 0x64
 8000238:	f000 fb7c 	bl	8000934 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));
 800023c:	487b      	ldr	r0, [pc, #492]	; (800042c <test3+0x2d0>)
 800023e:	f7ff ff85 	bl	800014c <strlen>
 8000242:	4603      	mov	r3, r0
 8000244:	461a      	mov	r2, r3
 8000246:	2100      	movs	r1, #0
 8000248:	4878      	ldr	r0, [pc, #480]	; (800042c <test3+0x2d0>)
 800024a:	f002 f895 	bl	8002378 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command6,strlen(Command6),100);
 800024e:	487e      	ldr	r0, [pc, #504]	; (8000448 <test3+0x2ec>)
 8000250:	f7ff ff7c 	bl	800014c <strlen>
 8000254:	4603      	mov	r3, r0
 8000256:	b29a      	uxth	r2, r3
 8000258:	2364      	movs	r3, #100	; 0x64
 800025a:	497b      	ldr	r1, [pc, #492]	; (8000448 <test3+0x2ec>)
 800025c:	4875      	ldr	r0, [pc, #468]	; (8000434 <test3+0x2d8>)
 800025e:	f001 fc9f 	bl	8001ba0 <HAL_UART_Transmit>
	HAL_Delay(250);
 8000262:	20fa      	movs	r0, #250	; 0xfa
 8000264:	f000 fb66 	bl	8000934 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));
 8000268:	4870      	ldr	r0, [pc, #448]	; (800042c <test3+0x2d0>)
 800026a:	f7ff ff6f 	bl	800014c <strlen>
 800026e:	4603      	mov	r3, r0
 8000270:	461a      	mov	r2, r3
 8000272:	2100      	movs	r1, #0
 8000274:	486d      	ldr	r0, [pc, #436]	; (800042c <test3+0x2d0>)
 8000276:	f002 f87f 	bl	8002378 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command7,strlen(Command7),100);
 800027a:	4874      	ldr	r0, [pc, #464]	; (800044c <test3+0x2f0>)
 800027c:	f7ff ff66 	bl	800014c <strlen>
 8000280:	4603      	mov	r3, r0
 8000282:	b29a      	uxth	r2, r3
 8000284:	2364      	movs	r3, #100	; 0x64
 8000286:	4971      	ldr	r1, [pc, #452]	; (800044c <test3+0x2f0>)
 8000288:	486a      	ldr	r0, [pc, #424]	; (8000434 <test3+0x2d8>)
 800028a:	f001 fc89 	bl	8001ba0 <HAL_UART_Transmit>
	HAL_Delay(250);
 800028e:	20fa      	movs	r0, #250	; 0xfa
 8000290:	f000 fb50 	bl	8000934 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));
 8000294:	4865      	ldr	r0, [pc, #404]	; (800042c <test3+0x2d0>)
 8000296:	f7ff ff59 	bl	800014c <strlen>
 800029a:	4603      	mov	r3, r0
 800029c:	461a      	mov	r2, r3
 800029e:	2100      	movs	r1, #0
 80002a0:	4862      	ldr	r0, [pc, #392]	; (800042c <test3+0x2d0>)
 80002a2:	f002 f869 	bl	8002378 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command8,strlen(Command8),1000);
 80002a6:	486a      	ldr	r0, [pc, #424]	; (8000450 <test3+0x2f4>)
 80002a8:	f7ff ff50 	bl	800014c <strlen>
 80002ac:	4603      	mov	r3, r0
 80002ae:	b29a      	uxth	r2, r3
 80002b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002b4:	4966      	ldr	r1, [pc, #408]	; (8000450 <test3+0x2f4>)
 80002b6:	485f      	ldr	r0, [pc, #380]	; (8000434 <test3+0x2d8>)
 80002b8:	f001 fc72 	bl	8001ba0 <HAL_UART_Transmit>
	HAL_Delay(250);
 80002bc:	20fa      	movs	r0, #250	; 0xfa
 80002be:	f000 fb39 	bl	8000934 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));
 80002c2:	485a      	ldr	r0, [pc, #360]	; (800042c <test3+0x2d0>)
 80002c4:	f7ff ff42 	bl	800014c <strlen>
 80002c8:	4603      	mov	r3, r0
 80002ca:	461a      	mov	r2, r3
 80002cc:	2100      	movs	r1, #0
 80002ce:	4857      	ldr	r0, [pc, #348]	; (800042c <test3+0x2d0>)
 80002d0:	f002 f852 	bl	8002378 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command9,strlen(Command9),1000);
 80002d4:	485f      	ldr	r0, [pc, #380]	; (8000454 <test3+0x2f8>)
 80002d6:	f7ff ff39 	bl	800014c <strlen>
 80002da:	4603      	mov	r3, r0
 80002dc:	b29a      	uxth	r2, r3
 80002de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002e2:	495c      	ldr	r1, [pc, #368]	; (8000454 <test3+0x2f8>)
 80002e4:	4853      	ldr	r0, [pc, #332]	; (8000434 <test3+0x2d8>)
 80002e6:	f001 fc5b 	bl	8001ba0 <HAL_UART_Transmit>
	HAL_Delay(250);
 80002ea:	20fa      	movs	r0, #250	; 0xfa
 80002ec:	f000 fb22 	bl	8000934 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));
 80002f0:	484e      	ldr	r0, [pc, #312]	; (800042c <test3+0x2d0>)
 80002f2:	f7ff ff2b 	bl	800014c <strlen>
 80002f6:	4603      	mov	r3, r0
 80002f8:	461a      	mov	r2, r3
 80002fa:	2100      	movs	r1, #0
 80002fc:	484b      	ldr	r0, [pc, #300]	; (800042c <test3+0x2d0>)
 80002fe:	f002 f83b 	bl	8002378 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command10,strlen(Command10),1000);
 8000302:	4855      	ldr	r0, [pc, #340]	; (8000458 <test3+0x2fc>)
 8000304:	f7ff ff22 	bl	800014c <strlen>
 8000308:	4603      	mov	r3, r0
 800030a:	b29a      	uxth	r2, r3
 800030c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000310:	4951      	ldr	r1, [pc, #324]	; (8000458 <test3+0x2fc>)
 8000312:	4848      	ldr	r0, [pc, #288]	; (8000434 <test3+0x2d8>)
 8000314:	f001 fc44 	bl	8001ba0 <HAL_UART_Transmit>
	HAL_Delay(250);
 8000318:	20fa      	movs	r0, #250	; 0xfa
 800031a:	f000 fb0b 	bl	8000934 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));
 800031e:	4843      	ldr	r0, [pc, #268]	; (800042c <test3+0x2d0>)
 8000320:	f7ff ff14 	bl	800014c <strlen>
 8000324:	4603      	mov	r3, r0
 8000326:	461a      	mov	r2, r3
 8000328:	2100      	movs	r1, #0
 800032a:	4840      	ldr	r0, [pc, #256]	; (800042c <test3+0x2d0>)
 800032c:	f002 f824 	bl	8002378 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command11,strlen(Command11),100);
 8000330:	484a      	ldr	r0, [pc, #296]	; (800045c <test3+0x300>)
 8000332:	f7ff ff0b 	bl	800014c <strlen>
 8000336:	4603      	mov	r3, r0
 8000338:	b29a      	uxth	r2, r3
 800033a:	2364      	movs	r3, #100	; 0x64
 800033c:	4947      	ldr	r1, [pc, #284]	; (800045c <test3+0x300>)
 800033e:	483d      	ldr	r0, [pc, #244]	; (8000434 <test3+0x2d8>)
 8000340:	f001 fc2e 	bl	8001ba0 <HAL_UART_Transmit>
	HAL_Delay(250);
 8000344:	20fa      	movs	r0, #250	; 0xfa
 8000346:	f000 faf5 	bl	8000934 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));
 800034a:	4838      	ldr	r0, [pc, #224]	; (800042c <test3+0x2d0>)
 800034c:	f7ff fefe 	bl	800014c <strlen>
 8000350:	4603      	mov	r3, r0
 8000352:	461a      	mov	r2, r3
 8000354:	2100      	movs	r1, #0
 8000356:	4835      	ldr	r0, [pc, #212]	; (800042c <test3+0x2d0>)
 8000358:	f002 f80e 	bl	8002378 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command12,strlen(Command12),100);
 800035c:	4840      	ldr	r0, [pc, #256]	; (8000460 <test3+0x304>)
 800035e:	f7ff fef5 	bl	800014c <strlen>
 8000362:	4603      	mov	r3, r0
 8000364:	b29a      	uxth	r2, r3
 8000366:	2364      	movs	r3, #100	; 0x64
 8000368:	493d      	ldr	r1, [pc, #244]	; (8000460 <test3+0x304>)
 800036a:	4832      	ldr	r0, [pc, #200]	; (8000434 <test3+0x2d8>)
 800036c:	f001 fc18 	bl	8001ba0 <HAL_UART_Transmit>
	HAL_Delay(250);
 8000370:	20fa      	movs	r0, #250	; 0xfa
 8000372:	f000 fadf 	bl	8000934 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));
 8000376:	482d      	ldr	r0, [pc, #180]	; (800042c <test3+0x2d0>)
 8000378:	f7ff fee8 	bl	800014c <strlen>
 800037c:	4603      	mov	r3, r0
 800037e:	461a      	mov	r2, r3
 8000380:	2100      	movs	r1, #0
 8000382:	482a      	ldr	r0, [pc, #168]	; (800042c <test3+0x2d0>)
 8000384:	f001 fff8 	bl	8002378 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command13,strlen(Command13),100);
 8000388:	4836      	ldr	r0, [pc, #216]	; (8000464 <test3+0x308>)
 800038a:	f7ff fedf 	bl	800014c <strlen>
 800038e:	4603      	mov	r3, r0
 8000390:	b29a      	uxth	r2, r3
 8000392:	2364      	movs	r3, #100	; 0x64
 8000394:	4933      	ldr	r1, [pc, #204]	; (8000464 <test3+0x308>)
 8000396:	4827      	ldr	r0, [pc, #156]	; (8000434 <test3+0x2d8>)
 8000398:	f001 fc02 	bl	8001ba0 <HAL_UART_Transmit>
	HAL_Delay(250);
 800039c:	20fa      	movs	r0, #250	; 0xfa
 800039e:	f000 fac9 	bl	8000934 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));
 80003a2:	4822      	ldr	r0, [pc, #136]	; (800042c <test3+0x2d0>)
 80003a4:	f7ff fed2 	bl	800014c <strlen>
 80003a8:	4603      	mov	r3, r0
 80003aa:	461a      	mov	r2, r3
 80003ac:	2100      	movs	r1, #0
 80003ae:	481f      	ldr	r0, [pc, #124]	; (800042c <test3+0x2d0>)
 80003b0:	f001 ffe2 	bl	8002378 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command14,strlen(Command14),100);
 80003b4:	482c      	ldr	r0, [pc, #176]	; (8000468 <test3+0x30c>)
 80003b6:	f7ff fec9 	bl	800014c <strlen>
 80003ba:	4603      	mov	r3, r0
 80003bc:	b29a      	uxth	r2, r3
 80003be:	2364      	movs	r3, #100	; 0x64
 80003c0:	4929      	ldr	r1, [pc, #164]	; (8000468 <test3+0x30c>)
 80003c2:	481c      	ldr	r0, [pc, #112]	; (8000434 <test3+0x2d8>)
 80003c4:	f001 fbec 	bl	8001ba0 <HAL_UART_Transmit>
	HAL_Delay(250);
 80003c8:	20fa      	movs	r0, #250	; 0xfa
 80003ca:	f000 fab3 	bl	8000934 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));
 80003ce:	4817      	ldr	r0, [pc, #92]	; (800042c <test3+0x2d0>)
 80003d0:	f7ff febc 	bl	800014c <strlen>
 80003d4:	4603      	mov	r3, r0
 80003d6:	461a      	mov	r2, r3
 80003d8:	2100      	movs	r1, #0
 80003da:	4814      	ldr	r0, [pc, #80]	; (800042c <test3+0x2d0>)
 80003dc:	f001 ffcc 	bl	8002378 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command15,strlen(Command15),100);
 80003e0:	4822      	ldr	r0, [pc, #136]	; (800046c <test3+0x310>)
 80003e2:	f7ff feb3 	bl	800014c <strlen>
 80003e6:	4603      	mov	r3, r0
 80003e8:	b29a      	uxth	r2, r3
 80003ea:	2364      	movs	r3, #100	; 0x64
 80003ec:	491f      	ldr	r1, [pc, #124]	; (800046c <test3+0x310>)
 80003ee:	4811      	ldr	r0, [pc, #68]	; (8000434 <test3+0x2d8>)
 80003f0:	f001 fbd6 	bl	8001ba0 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80003f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003f8:	f000 fa9c 	bl	8000934 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));
 80003fc:	480b      	ldr	r0, [pc, #44]	; (800042c <test3+0x2d0>)
 80003fe:	f7ff fea5 	bl	800014c <strlen>
 8000402:	4603      	mov	r3, r0
 8000404:	461a      	mov	r2, r3
 8000406:	2100      	movs	r1, #0
 8000408:	4808      	ldr	r0, [pc, #32]	; (800042c <test3+0x2d0>)
 800040a:	f001 ffb5 	bl	8002378 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command16,strlen(Command16),100);
 800040e:	4818      	ldr	r0, [pc, #96]	; (8000470 <test3+0x314>)
 8000410:	f7ff fe9c 	bl	800014c <strlen>
 8000414:	4603      	mov	r3, r0
 8000416:	b29a      	uxth	r2, r3
 8000418:	2364      	movs	r3, #100	; 0x64
 800041a:	4915      	ldr	r1, [pc, #84]	; (8000470 <test3+0x314>)
 800041c:	4805      	ldr	r0, [pc, #20]	; (8000434 <test3+0x2d8>)
 800041e:	f001 fbbf 	bl	8001ba0 <HAL_UART_Transmit>
	HAL_Delay(100);
 8000422:	2064      	movs	r0, #100	; 0x64
 8000424:	f000 fa86 	bl	8000934 <HAL_Delay>

}
 8000428:	bf00      	nop
 800042a:	bd80      	pop	{r7, pc}
 800042c:	200001f4 	.word	0x200001f4
 8000430:	20000000 	.word	0x20000000
 8000434:	20000168 	.word	0x20000168
 8000438:	20000008 	.word	0x20000008
 800043c:	20000014 	.word	0x20000014
 8000440:	20000020 	.word	0x20000020
 8000444:	2000002c 	.word	0x2000002c
 8000448:	2000003c 	.word	0x2000003c
 800044c:	2000004c 	.word	0x2000004c
 8000450:	2000005c 	.word	0x2000005c
 8000454:	20000074 	.word	0x20000074
 8000458:	20000080 	.word	0x20000080
 800045c:	2000008c 	.word	0x2000008c
 8000460:	2000009c 	.word	0x2000009c
 8000464:	200000cc 	.word	0x200000cc
 8000468:	200000dc 	.word	0x200000dc
 800046c:	20000128 	.word	0x20000128
 8000470:	20000130 	.word	0x20000130

08000474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000478:	f000 f9fa 	bl	8000870 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047c:	f000 f81e 	bl	80004bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000480:	f000 f89e 	bl	80005c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000484:	f000 f87e 	bl	8000584 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000488:	f000 f852 	bl	8000530 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
 // HAL_UART_Receive_IT(&huart1, (uint8_t*)RxBuffer,2);

  HAL_UART_Receive_DMA(&huart1, (uint8_t*)RxBuffer,25);
 800048c:	2219      	movs	r2, #25
 800048e:	4908      	ldr	r1, [pc, #32]	; (80004b0 <main+0x3c>)
 8000490:	4808      	ldr	r0, [pc, #32]	; (80004b4 <main+0x40>)
 8000492:	f001 fc08 	bl	8001ca6 <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 8000496:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800049a:	f000 fa4b 	bl	8000934 <HAL_Delay>
	  HAL_GPIO_TogglePin(Blink_GPIO_Port,Blink_Pin);
 800049e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004a2:	4805      	ldr	r0, [pc, #20]	; (80004b8 <main+0x44>)
 80004a4:	f000 ff02 	bl	80012ac <HAL_GPIO_TogglePin>
	//  check_val=test();
      //check_val=test2();
      test3();
 80004a8:	f7ff fe58 	bl	800015c <test3>
  {
 80004ac:	e7f3      	b.n	8000496 <main+0x22>
 80004ae:	bf00      	nop
 80004b0:	200001f4 	.word	0x200001f4
 80004b4:	20000168 	.word	0x20000168
 80004b8:	40011000 	.word	0x40011000

080004bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b090      	sub	sp, #64	; 0x40
 80004c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c2:	f107 0318 	add.w	r3, r7, #24
 80004c6:	2228      	movs	r2, #40	; 0x28
 80004c8:	2100      	movs	r1, #0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f001 ff54 	bl	8002378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d0:	1d3b      	adds	r3, r7, #4
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004de:	2301      	movs	r3, #1
 80004e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004e8:	2300      	movs	r3, #0
 80004ea:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ec:	f107 0318 	add.w	r3, r7, #24
 80004f0:	4618      	mov	r0, r3
 80004f2:	f000 fef5 	bl	80012e0 <HAL_RCC_OscConfig>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <SystemClock_Config+0x44>
  {
    Error_Handler();
 80004fc:	f000 f8ac 	bl	8000658 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000500:	230f      	movs	r3, #15
 8000502:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000504:	2301      	movs	r3, #1
 8000506:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000508:	2300      	movs	r3, #0
 800050a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800050c:	2300      	movs	r3, #0
 800050e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	2100      	movs	r1, #0
 8000518:	4618      	mov	r0, r3
 800051a:	f001 f963 	bl	80017e4 <HAL_RCC_ClockConfig>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000524:	f000 f898 	bl	8000658 <Error_Handler>
  }
}
 8000528:	bf00      	nop
 800052a:	3740      	adds	r7, #64	; 0x40
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <MX_USART1_UART_Init+0x4c>)
 8000536:	4a12      	ldr	r2, [pc, #72]	; (8000580 <MX_USART1_UART_Init+0x50>)
 8000538:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800053a:	4b10      	ldr	r3, [pc, #64]	; (800057c <MX_USART1_UART_Init+0x4c>)
 800053c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000540:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000542:	4b0e      	ldr	r3, [pc, #56]	; (800057c <MX_USART1_UART_Init+0x4c>)
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <MX_USART1_UART_Init+0x4c>)
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <MX_USART1_UART_Init+0x4c>)
 8000550:	2200      	movs	r2, #0
 8000552:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000554:	4b09      	ldr	r3, [pc, #36]	; (800057c <MX_USART1_UART_Init+0x4c>)
 8000556:	220c      	movs	r2, #12
 8000558:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800055a:	4b08      	ldr	r3, [pc, #32]	; (800057c <MX_USART1_UART_Init+0x4c>)
 800055c:	2200      	movs	r2, #0
 800055e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <MX_USART1_UART_Init+0x4c>)
 8000562:	2200      	movs	r2, #0
 8000564:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000566:	4805      	ldr	r0, [pc, #20]	; (800057c <MX_USART1_UART_Init+0x4c>)
 8000568:	f001 faca 	bl	8001b00 <HAL_UART_Init>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000572:	f000 f871 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000168 	.word	0x20000168
 8000580:	40013800 	.word	0x40013800

08000584 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <MX_DMA_Init+0x38>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	4a0b      	ldr	r2, [pc, #44]	; (80005bc <MX_DMA_Init+0x38>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6153      	str	r3, [r2, #20]
 8000596:	4b09      	ldr	r3, [pc, #36]	; (80005bc <MX_DMA_Init+0x38>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2100      	movs	r1, #0
 80005a6:	200f      	movs	r0, #15
 80005a8:	f000 fabf 	bl	8000b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80005ac:	200f      	movs	r0, #15
 80005ae:	f000 fad8 	bl	8000b62 <HAL_NVIC_EnableIRQ>

}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000

080005c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	f107 0310 	add.w	r3, r7, #16
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d4:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <MX_GPIO_Init+0x90>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	4a1d      	ldr	r2, [pc, #116]	; (8000650 <MX_GPIO_Init+0x90>)
 80005da:	f043 0310 	orr.w	r3, r3, #16
 80005de:	6193      	str	r3, [r2, #24]
 80005e0:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <MX_GPIO_Init+0x90>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	f003 0310 	and.w	r3, r3, #16
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ec:	4b18      	ldr	r3, [pc, #96]	; (8000650 <MX_GPIO_Init+0x90>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	4a17      	ldr	r2, [pc, #92]	; (8000650 <MX_GPIO_Init+0x90>)
 80005f2:	f043 0320 	orr.w	r3, r3, #32
 80005f6:	6193      	str	r3, [r2, #24]
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <MX_GPIO_Init+0x90>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f003 0320 	and.w	r3, r3, #32
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <MX_GPIO_Init+0x90>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a11      	ldr	r2, [pc, #68]	; (8000650 <MX_GPIO_Init+0x90>)
 800060a:	f043 0304 	orr.w	r3, r3, #4
 800060e:	6193      	str	r3, [r2, #24]
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_GPIO_Init+0x90>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f003 0304 	and.w	r3, r3, #4
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Blink_GPIO_Port, Blink_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000622:	480c      	ldr	r0, [pc, #48]	; (8000654 <MX_GPIO_Init+0x94>)
 8000624:	f000 fe2a 	bl	800127c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blink_Pin */
  GPIO_InitStruct.Pin = Blink_Pin;
 8000628:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800062c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062e:	2301      	movs	r3, #1
 8000630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000636:	2302      	movs	r3, #2
 8000638:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Blink_GPIO_Port, &GPIO_InitStruct);
 800063a:	f107 0310 	add.w	r3, r7, #16
 800063e:	4619      	mov	r1, r3
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_GPIO_Init+0x94>)
 8000642:	f000 fc97 	bl	8000f74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000646:	bf00      	nop
 8000648:	3720      	adds	r7, #32
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40021000 	.word	0x40021000
 8000654:	40011000 	.word	0x40011000

08000658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800065c:	b672      	cpsid	i
}
 800065e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000660:	e7fe      	b.n	8000660 <Error_Handler+0x8>
	...

08000664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <HAL_MspInit+0x5c>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	4a14      	ldr	r2, [pc, #80]	; (80006c0 <HAL_MspInit+0x5c>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6193      	str	r3, [r2, #24]
 8000676:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <HAL_MspInit+0x5c>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <HAL_MspInit+0x5c>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <HAL_MspInit+0x5c>)
 8000688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068c:	61d3      	str	r3, [r2, #28]
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <HAL_MspInit+0x5c>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800069a:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <HAL_MspInit+0x60>)
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	4a04      	ldr	r2, [pc, #16]	; (80006c4 <HAL_MspInit+0x60>)
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b6:	bf00      	nop
 80006b8:	3714      	adds	r7, #20
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr
 80006c0:	40021000 	.word	0x40021000
 80006c4:	40010000 	.word	0x40010000

080006c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a2f      	ldr	r2, [pc, #188]	; (80007a0 <HAL_UART_MspInit+0xd8>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d157      	bne.n	8000798 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006e8:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <HAL_UART_MspInit+0xdc>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a2d      	ldr	r2, [pc, #180]	; (80007a4 <HAL_UART_MspInit+0xdc>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <HAL_UART_MspInit+0xdc>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000700:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <HAL_UART_MspInit+0xdc>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a27      	ldr	r2, [pc, #156]	; (80007a4 <HAL_UART_MspInit+0xdc>)
 8000706:	f043 0304 	orr.w	r3, r3, #4
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <HAL_UART_MspInit+0xdc>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f003 0304 	and.w	r3, r3, #4
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000718:	f44f 7300 	mov.w	r3, #512	; 0x200
 800071c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071e:	2302      	movs	r3, #2
 8000720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000722:	2303      	movs	r3, #3
 8000724:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000726:	f107 0310 	add.w	r3, r7, #16
 800072a:	4619      	mov	r1, r3
 800072c:	481e      	ldr	r0, [pc, #120]	; (80007a8 <HAL_UART_MspInit+0xe0>)
 800072e:	f000 fc21 	bl	8000f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000736:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	4619      	mov	r1, r3
 8000746:	4818      	ldr	r0, [pc, #96]	; (80007a8 <HAL_UART_MspInit+0xe0>)
 8000748:	f000 fc14 	bl	8000f74 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <HAL_UART_MspInit+0xe4>)
 800074e:	4a18      	ldr	r2, [pc, #96]	; (80007b0 <HAL_UART_MspInit+0xe8>)
 8000750:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000752:	4b16      	ldr	r3, [pc, #88]	; (80007ac <HAL_UART_MspInit+0xe4>)
 8000754:	2200      	movs	r2, #0
 8000756:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <HAL_UART_MspInit+0xe4>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <HAL_UART_MspInit+0xe4>)
 8000760:	2280      	movs	r2, #128	; 0x80
 8000762:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <HAL_UART_MspInit+0xe4>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <HAL_UART_MspInit+0xe4>)
 800076c:	2200      	movs	r2, #0
 800076e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000770:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <HAL_UART_MspInit+0xe4>)
 8000772:	2220      	movs	r2, #32
 8000774:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000776:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <HAL_UART_MspInit+0xe4>)
 8000778:	2200      	movs	r2, #0
 800077a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800077c:	480b      	ldr	r0, [pc, #44]	; (80007ac <HAL_UART_MspInit+0xe4>)
 800077e:	f000 fa0b 	bl	8000b98 <HAL_DMA_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000788:	f7ff ff66 	bl	8000658 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a07      	ldr	r2, [pc, #28]	; (80007ac <HAL_UART_MspInit+0xe4>)
 8000790:	63da      	str	r2, [r3, #60]	; 0x3c
 8000792:	4a06      	ldr	r2, [pc, #24]	; (80007ac <HAL_UART_MspInit+0xe4>)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000798:	bf00      	nop
 800079a:	3720      	adds	r7, #32
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40013800 	.word	0x40013800
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40010800 	.word	0x40010800
 80007ac:	200001b0 	.word	0x200001b0
 80007b0:	40020058 	.word	0x40020058

080007b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <NMI_Handler+0x4>

080007ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <HardFault_Handler+0x4>

080007c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <MemManage_Handler+0x4>

080007c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <BusFault_Handler+0x4>

080007cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <UsageFault_Handler+0x4>

080007d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr

080007de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr

080007ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr

080007f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007fa:	f000 f87f 	bl	80008fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000808:	4802      	ldr	r0, [pc, #8]	; (8000814 <DMA1_Channel5_IRQHandler+0x10>)
 800080a:	f000 fa7f 	bl	8000d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200001b0 	.word	0x200001b0

08000818 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000824:	f7ff fff8 	bl	8000818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000828:	480b      	ldr	r0, [pc, #44]	; (8000858 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800082a:	490c      	ldr	r1, [pc, #48]	; (800085c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800082c:	4a0c      	ldr	r2, [pc, #48]	; (8000860 <LoopFillZerobss+0x16>)
  movs r3, #0
 800082e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000830:	e002      	b.n	8000838 <LoopCopyDataInit>

08000832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000836:	3304      	adds	r3, #4

08000838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800083c:	d3f9      	bcc.n	8000832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083e:	4a09      	ldr	r2, [pc, #36]	; (8000864 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000840:	4c09      	ldr	r4, [pc, #36]	; (8000868 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000844:	e001      	b.n	800084a <LoopFillZerobss>

08000846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000848:	3204      	adds	r2, #4

0800084a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800084c:	d3fb      	bcc.n	8000846 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800084e:	f001 fd9b 	bl	8002388 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000852:	f7ff fe0f 	bl	8000474 <main>
  bx lr
 8000856:	4770      	bx	lr
  ldr r0, =_sdata
 8000858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800085c:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000860:	0800241c 	.word	0x0800241c
  ldr r2, =_sbss
 8000864:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000868:	20000214 	.word	0x20000214

0800086c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800086c:	e7fe      	b.n	800086c <ADC1_2_IRQHandler>
	...

08000870 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <HAL_Init+0x28>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a07      	ldr	r2, [pc, #28]	; (8000898 <HAL_Init+0x28>)
 800087a:	f043 0310 	orr.w	r3, r3, #16
 800087e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000880:	2003      	movs	r0, #3
 8000882:	f000 f947 	bl	8000b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000886:	200f      	movs	r0, #15
 8000888:	f000 f808 	bl	800089c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800088c:	f7ff feea 	bl	8000664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40022000 	.word	0x40022000

0800089c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <HAL_InitTick+0x54>)
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_InitTick+0x58>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	4619      	mov	r1, r3
 80008ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 f95f 	bl	8000b7e <HAL_SYSTICK_Config>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
 80008c8:	e00e      	b.n	80008e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2b0f      	cmp	r3, #15
 80008ce:	d80a      	bhi.n	80008e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d0:	2200      	movs	r2, #0
 80008d2:	6879      	ldr	r1, [r7, #4]
 80008d4:	f04f 30ff 	mov.w	r0, #4294967295
 80008d8:	f000 f927 	bl	8000b2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008dc:	4a06      	ldr	r2, [pc, #24]	; (80008f8 <HAL_InitTick+0x5c>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008e2:	2300      	movs	r3, #0
 80008e4:	e000      	b.n	80008e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000140 	.word	0x20000140
 80008f4:	20000148 	.word	0x20000148
 80008f8:	20000144 	.word	0x20000144

080008fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <HAL_IncTick+0x1c>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	461a      	mov	r2, r3
 8000906:	4b05      	ldr	r3, [pc, #20]	; (800091c <HAL_IncTick+0x20>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4413      	add	r3, r2
 800090c:	4a03      	ldr	r2, [pc, #12]	; (800091c <HAL_IncTick+0x20>)
 800090e:	6013      	str	r3, [r2, #0]
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr
 8000918:	20000148 	.word	0x20000148
 800091c:	20000210 	.word	0x20000210

08000920 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  return uwTick;
 8000924:	4b02      	ldr	r3, [pc, #8]	; (8000930 <HAL_GetTick+0x10>)
 8000926:	681b      	ldr	r3, [r3, #0]
}
 8000928:	4618      	mov	r0, r3
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	20000210 	.word	0x20000210

08000934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800093c:	f7ff fff0 	bl	8000920 <HAL_GetTick>
 8000940:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800094c:	d005      	beq.n	800095a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <HAL_Delay+0x44>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	461a      	mov	r2, r3
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	4413      	add	r3, r2
 8000958:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800095a:	bf00      	nop
 800095c:	f7ff ffe0 	bl	8000920 <HAL_GetTick>
 8000960:	4602      	mov	r2, r0
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	429a      	cmp	r2, r3
 800096a:	d8f7      	bhi.n	800095c <HAL_Delay+0x28>
  {
  }
}
 800096c:	bf00      	nop
 800096e:	bf00      	nop
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000148 	.word	0x20000148

0800097c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f003 0307 	and.w	r3, r3, #7
 800098a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <__NVIC_SetPriorityGrouping+0x44>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000992:	68ba      	ldr	r2, [r7, #8]
 8000994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000998:	4013      	ands	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ae:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <__NVIC_SetPriorityGrouping+0x44>)
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	60d3      	str	r3, [r2, #12]
}
 80009b4:	bf00      	nop
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <__NVIC_GetPriorityGrouping+0x18>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	0a1b      	lsrs	r3, r3, #8
 80009ce:	f003 0307 	and.w	r3, r3, #7
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	db0b      	blt.n	8000a0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	f003 021f 	and.w	r2, r3, #31
 80009f8:	4906      	ldr	r1, [pc, #24]	; (8000a14 <__NVIC_EnableIRQ+0x34>)
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	095b      	lsrs	r3, r3, #5
 8000a00:	2001      	movs	r0, #1
 8000a02:	fa00 f202 	lsl.w	r2, r0, r2
 8000a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	e000e100 	.word	0xe000e100

08000a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	6039      	str	r1, [r7, #0]
 8000a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	db0a      	blt.n	8000a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	490c      	ldr	r1, [pc, #48]	; (8000a64 <__NVIC_SetPriority+0x4c>)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	0112      	lsls	r2, r2, #4
 8000a38:	b2d2      	uxtb	r2, r2
 8000a3a:	440b      	add	r3, r1
 8000a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a40:	e00a      	b.n	8000a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4908      	ldr	r1, [pc, #32]	; (8000a68 <__NVIC_SetPriority+0x50>)
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	f003 030f 	and.w	r3, r3, #15
 8000a4e:	3b04      	subs	r3, #4
 8000a50:	0112      	lsls	r2, r2, #4
 8000a52:	b2d2      	uxtb	r2, r2
 8000a54:	440b      	add	r3, r1
 8000a56:	761a      	strb	r2, [r3, #24]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000e100 	.word	0xe000e100
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b089      	sub	sp, #36	; 0x24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	f1c3 0307 	rsb	r3, r3, #7
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	bf28      	it	cs
 8000a8a:	2304      	movcs	r3, #4
 8000a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3304      	adds	r3, #4
 8000a92:	2b06      	cmp	r3, #6
 8000a94:	d902      	bls.n	8000a9c <NVIC_EncodePriority+0x30>
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3b03      	subs	r3, #3
 8000a9a:	e000      	b.n	8000a9e <NVIC_EncodePriority+0x32>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43da      	mvns	r2, r3
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	401a      	ands	r2, r3
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	fa01 f303 	lsl.w	r3, r1, r3
 8000abe:	43d9      	mvns	r1, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac4:	4313      	orrs	r3, r2
         );
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3724      	adds	r7, #36	; 0x24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ae0:	d301      	bcc.n	8000ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00f      	b.n	8000b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <SysTick_Config+0x40>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aee:	210f      	movs	r1, #15
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f7ff ff90 	bl	8000a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <SysTick_Config+0x40>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afe:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <SysTick_Config+0x40>)
 8000b00:	2207      	movs	r2, #7
 8000b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	e000e010 	.word	0xe000e010

08000b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ff2d 	bl	800097c <__NVIC_SetPriorityGrouping>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b086      	sub	sp, #24
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	4603      	mov	r3, r0
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
 8000b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b3c:	f7ff ff42 	bl	80009c4 <__NVIC_GetPriorityGrouping>
 8000b40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	68b9      	ldr	r1, [r7, #8]
 8000b46:	6978      	ldr	r0, [r7, #20]
 8000b48:	f7ff ff90 	bl	8000a6c <NVIC_EncodePriority>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b52:	4611      	mov	r1, r2
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ff5f 	bl	8000a18 <__NVIC_SetPriority>
}
 8000b5a:	bf00      	nop
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	4603      	mov	r3, r0
 8000b6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff35 	bl	80009e0 <__NVIC_EnableIRQ>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ffa2 	bl	8000ad0 <SysTick_Config>
 8000b8c:	4603      	mov	r3, r0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d101      	bne.n	8000bae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e043      	b.n	8000c36 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	4b22      	ldr	r3, [pc, #136]	; (8000c40 <HAL_DMA_Init+0xa8>)
 8000bb6:	4413      	add	r3, r2
 8000bb8:	4a22      	ldr	r2, [pc, #136]	; (8000c44 <HAL_DMA_Init+0xac>)
 8000bba:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbe:	091b      	lsrs	r3, r3, #4
 8000bc0:	009a      	lsls	r2, r3, #2
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a1f      	ldr	r2, [pc, #124]	; (8000c48 <HAL_DMA_Init+0xb0>)
 8000bca:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2202      	movs	r2, #2
 8000bd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000be2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000be6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000bf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c10:	68fa      	ldr	r2, [r7, #12]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2200      	movs	r2, #0
 8000c22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2201      	movs	r2, #1
 8000c28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	bffdfff8 	.word	0xbffdfff8
 8000c44:	cccccccd 	.word	0xcccccccd
 8000c48:	40020000 	.word	0x40020000

08000c4c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
 8000c58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d101      	bne.n	8000c6c <HAL_DMA_Start_IT+0x20>
 8000c68:	2302      	movs	r3, #2
 8000c6a:	e04b      	b.n	8000d04 <HAL_DMA_Start_IT+0xb8>
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d13a      	bne.n	8000cf6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2202      	movs	r2, #2
 8000c84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f022 0201 	bic.w	r2, r2, #1
 8000c9c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	68b9      	ldr	r1, [r7, #8]
 8000ca4:	68f8      	ldr	r0, [r7, #12]
 8000ca6:	f000 f937 	bl	8000f18 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d008      	beq.n	8000cc4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f042 020e 	orr.w	r2, r2, #14
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	e00f      	b.n	8000ce4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f022 0204 	bic.w	r2, r2, #4
 8000cd2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f042 020a 	orr.w	r2, r2, #10
 8000ce2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f042 0201 	orr.w	r2, r2, #1
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	e005      	b.n	8000d02 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d28:	2204      	movs	r2, #4
 8000d2a:	409a      	lsls	r2, r3
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d04f      	beq.n	8000dd4 <HAL_DMA_IRQHandler+0xc8>
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	f003 0304 	and.w	r3, r3, #4
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d04a      	beq.n	8000dd4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f003 0320 	and.w	r3, r3, #32
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d107      	bne.n	8000d5c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f022 0204 	bic.w	r2, r2, #4
 8000d5a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a66      	ldr	r2, [pc, #408]	; (8000efc <HAL_DMA_IRQHandler+0x1f0>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d029      	beq.n	8000dba <HAL_DMA_IRQHandler+0xae>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a65      	ldr	r2, [pc, #404]	; (8000f00 <HAL_DMA_IRQHandler+0x1f4>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d022      	beq.n	8000db6 <HAL_DMA_IRQHandler+0xaa>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a63      	ldr	r2, [pc, #396]	; (8000f04 <HAL_DMA_IRQHandler+0x1f8>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d01a      	beq.n	8000db0 <HAL_DMA_IRQHandler+0xa4>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a62      	ldr	r2, [pc, #392]	; (8000f08 <HAL_DMA_IRQHandler+0x1fc>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d012      	beq.n	8000daa <HAL_DMA_IRQHandler+0x9e>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a60      	ldr	r2, [pc, #384]	; (8000f0c <HAL_DMA_IRQHandler+0x200>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d00a      	beq.n	8000da4 <HAL_DMA_IRQHandler+0x98>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a5f      	ldr	r2, [pc, #380]	; (8000f10 <HAL_DMA_IRQHandler+0x204>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d102      	bne.n	8000d9e <HAL_DMA_IRQHandler+0x92>
 8000d98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d9c:	e00e      	b.n	8000dbc <HAL_DMA_IRQHandler+0xb0>
 8000d9e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000da2:	e00b      	b.n	8000dbc <HAL_DMA_IRQHandler+0xb0>
 8000da4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000da8:	e008      	b.n	8000dbc <HAL_DMA_IRQHandler+0xb0>
 8000daa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dae:	e005      	b.n	8000dbc <HAL_DMA_IRQHandler+0xb0>
 8000db0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000db4:	e002      	b.n	8000dbc <HAL_DMA_IRQHandler+0xb0>
 8000db6:	2340      	movs	r3, #64	; 0x40
 8000db8:	e000      	b.n	8000dbc <HAL_DMA_IRQHandler+0xb0>
 8000dba:	2304      	movs	r3, #4
 8000dbc:	4a55      	ldr	r2, [pc, #340]	; (8000f14 <HAL_DMA_IRQHandler+0x208>)
 8000dbe:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	f000 8094 	beq.w	8000ef2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000dd2:	e08e      	b.n	8000ef2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd8:	2202      	movs	r2, #2
 8000dda:	409a      	lsls	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4013      	ands	r3, r2
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d056      	beq.n	8000e92 <HAL_DMA_IRQHandler+0x186>
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d051      	beq.n	8000e92 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f003 0320 	and.w	r3, r3, #32
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d10b      	bne.n	8000e14 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f022 020a 	bic.w	r2, r2, #10
 8000e0a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a38      	ldr	r2, [pc, #224]	; (8000efc <HAL_DMA_IRQHandler+0x1f0>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d029      	beq.n	8000e72 <HAL_DMA_IRQHandler+0x166>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a37      	ldr	r2, [pc, #220]	; (8000f00 <HAL_DMA_IRQHandler+0x1f4>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d022      	beq.n	8000e6e <HAL_DMA_IRQHandler+0x162>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a35      	ldr	r2, [pc, #212]	; (8000f04 <HAL_DMA_IRQHandler+0x1f8>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d01a      	beq.n	8000e68 <HAL_DMA_IRQHandler+0x15c>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a34      	ldr	r2, [pc, #208]	; (8000f08 <HAL_DMA_IRQHandler+0x1fc>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d012      	beq.n	8000e62 <HAL_DMA_IRQHandler+0x156>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a32      	ldr	r2, [pc, #200]	; (8000f0c <HAL_DMA_IRQHandler+0x200>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d00a      	beq.n	8000e5c <HAL_DMA_IRQHandler+0x150>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a31      	ldr	r2, [pc, #196]	; (8000f10 <HAL_DMA_IRQHandler+0x204>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d102      	bne.n	8000e56 <HAL_DMA_IRQHandler+0x14a>
 8000e50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e54:	e00e      	b.n	8000e74 <HAL_DMA_IRQHandler+0x168>
 8000e56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e5a:	e00b      	b.n	8000e74 <HAL_DMA_IRQHandler+0x168>
 8000e5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e60:	e008      	b.n	8000e74 <HAL_DMA_IRQHandler+0x168>
 8000e62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e66:	e005      	b.n	8000e74 <HAL_DMA_IRQHandler+0x168>
 8000e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e6c:	e002      	b.n	8000e74 <HAL_DMA_IRQHandler+0x168>
 8000e6e:	2320      	movs	r3, #32
 8000e70:	e000      	b.n	8000e74 <HAL_DMA_IRQHandler+0x168>
 8000e72:	2302      	movs	r3, #2
 8000e74:	4a27      	ldr	r2, [pc, #156]	; (8000f14 <HAL_DMA_IRQHandler+0x208>)
 8000e76:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d034      	beq.n	8000ef2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000e90:	e02f      	b.n	8000ef2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	2208      	movs	r2, #8
 8000e98:	409a      	lsls	r2, r3
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d028      	beq.n	8000ef4 <HAL_DMA_IRQHandler+0x1e8>
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	f003 0308 	and.w	r3, r3, #8
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d023      	beq.n	8000ef4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 020e 	bic.w	r2, r2, #14
 8000eba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2201      	movs	r2, #1
 8000ed0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d004      	beq.n	8000ef4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	4798      	blx	r3
    }
  }
  return;
 8000ef2:	bf00      	nop
 8000ef4:	bf00      	nop
}
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40020008 	.word	0x40020008
 8000f00:	4002001c 	.word	0x4002001c
 8000f04:	40020030 	.word	0x40020030
 8000f08:	40020044 	.word	0x40020044
 8000f0c:	40020058 	.word	0x40020058
 8000f10:	4002006c 	.word	0x4002006c
 8000f14:	40020000 	.word	0x40020000

08000f18 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
 8000f24:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f2e:	2101      	movs	r1, #1
 8000f30:	fa01 f202 	lsl.w	r2, r1, r2
 8000f34:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	683a      	ldr	r2, [r7, #0]
 8000f3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b10      	cmp	r3, #16
 8000f44:	d108      	bne.n	8000f58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000f56:	e007      	b.n	8000f68 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	68ba      	ldr	r2, [r7, #8]
 8000f5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	60da      	str	r2, [r3, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
	...

08000f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b08b      	sub	sp, #44	; 0x2c
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f82:	2300      	movs	r3, #0
 8000f84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f86:	e169      	b.n	800125c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	69fa      	ldr	r2, [r7, #28]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	f040 8158 	bne.w	8001256 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	4a9a      	ldr	r2, [pc, #616]	; (8001214 <HAL_GPIO_Init+0x2a0>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d05e      	beq.n	800106e <HAL_GPIO_Init+0xfa>
 8000fb0:	4a98      	ldr	r2, [pc, #608]	; (8001214 <HAL_GPIO_Init+0x2a0>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d875      	bhi.n	80010a2 <HAL_GPIO_Init+0x12e>
 8000fb6:	4a98      	ldr	r2, [pc, #608]	; (8001218 <HAL_GPIO_Init+0x2a4>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d058      	beq.n	800106e <HAL_GPIO_Init+0xfa>
 8000fbc:	4a96      	ldr	r2, [pc, #600]	; (8001218 <HAL_GPIO_Init+0x2a4>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d86f      	bhi.n	80010a2 <HAL_GPIO_Init+0x12e>
 8000fc2:	4a96      	ldr	r2, [pc, #600]	; (800121c <HAL_GPIO_Init+0x2a8>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d052      	beq.n	800106e <HAL_GPIO_Init+0xfa>
 8000fc8:	4a94      	ldr	r2, [pc, #592]	; (800121c <HAL_GPIO_Init+0x2a8>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d869      	bhi.n	80010a2 <HAL_GPIO_Init+0x12e>
 8000fce:	4a94      	ldr	r2, [pc, #592]	; (8001220 <HAL_GPIO_Init+0x2ac>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d04c      	beq.n	800106e <HAL_GPIO_Init+0xfa>
 8000fd4:	4a92      	ldr	r2, [pc, #584]	; (8001220 <HAL_GPIO_Init+0x2ac>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d863      	bhi.n	80010a2 <HAL_GPIO_Init+0x12e>
 8000fda:	4a92      	ldr	r2, [pc, #584]	; (8001224 <HAL_GPIO_Init+0x2b0>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d046      	beq.n	800106e <HAL_GPIO_Init+0xfa>
 8000fe0:	4a90      	ldr	r2, [pc, #576]	; (8001224 <HAL_GPIO_Init+0x2b0>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d85d      	bhi.n	80010a2 <HAL_GPIO_Init+0x12e>
 8000fe6:	2b12      	cmp	r3, #18
 8000fe8:	d82a      	bhi.n	8001040 <HAL_GPIO_Init+0xcc>
 8000fea:	2b12      	cmp	r3, #18
 8000fec:	d859      	bhi.n	80010a2 <HAL_GPIO_Init+0x12e>
 8000fee:	a201      	add	r2, pc, #4	; (adr r2, 8000ff4 <HAL_GPIO_Init+0x80>)
 8000ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff4:	0800106f 	.word	0x0800106f
 8000ff8:	08001049 	.word	0x08001049
 8000ffc:	0800105b 	.word	0x0800105b
 8001000:	0800109d 	.word	0x0800109d
 8001004:	080010a3 	.word	0x080010a3
 8001008:	080010a3 	.word	0x080010a3
 800100c:	080010a3 	.word	0x080010a3
 8001010:	080010a3 	.word	0x080010a3
 8001014:	080010a3 	.word	0x080010a3
 8001018:	080010a3 	.word	0x080010a3
 800101c:	080010a3 	.word	0x080010a3
 8001020:	080010a3 	.word	0x080010a3
 8001024:	080010a3 	.word	0x080010a3
 8001028:	080010a3 	.word	0x080010a3
 800102c:	080010a3 	.word	0x080010a3
 8001030:	080010a3 	.word	0x080010a3
 8001034:	080010a3 	.word	0x080010a3
 8001038:	08001051 	.word	0x08001051
 800103c:	08001065 	.word	0x08001065
 8001040:	4a79      	ldr	r2, [pc, #484]	; (8001228 <HAL_GPIO_Init+0x2b4>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d013      	beq.n	800106e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001046:	e02c      	b.n	80010a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	623b      	str	r3, [r7, #32]
          break;
 800104e:	e029      	b.n	80010a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	3304      	adds	r3, #4
 8001056:	623b      	str	r3, [r7, #32]
          break;
 8001058:	e024      	b.n	80010a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	3308      	adds	r3, #8
 8001060:	623b      	str	r3, [r7, #32]
          break;
 8001062:	e01f      	b.n	80010a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	330c      	adds	r3, #12
 800106a:	623b      	str	r3, [r7, #32]
          break;
 800106c:	e01a      	b.n	80010a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d102      	bne.n	800107c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001076:	2304      	movs	r3, #4
 8001078:	623b      	str	r3, [r7, #32]
          break;
 800107a:	e013      	b.n	80010a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d105      	bne.n	8001090 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001084:	2308      	movs	r3, #8
 8001086:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	69fa      	ldr	r2, [r7, #28]
 800108c:	611a      	str	r2, [r3, #16]
          break;
 800108e:	e009      	b.n	80010a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001090:	2308      	movs	r3, #8
 8001092:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	69fa      	ldr	r2, [r7, #28]
 8001098:	615a      	str	r2, [r3, #20]
          break;
 800109a:	e003      	b.n	80010a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
          break;
 80010a0:	e000      	b.n	80010a4 <HAL_GPIO_Init+0x130>
          break;
 80010a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	2bff      	cmp	r3, #255	; 0xff
 80010a8:	d801      	bhi.n	80010ae <HAL_GPIO_Init+0x13a>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	e001      	b.n	80010b2 <HAL_GPIO_Init+0x13e>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3304      	adds	r3, #4
 80010b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	2bff      	cmp	r3, #255	; 0xff
 80010b8:	d802      	bhi.n	80010c0 <HAL_GPIO_Init+0x14c>
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	e002      	b.n	80010c6 <HAL_GPIO_Init+0x152>
 80010c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c2:	3b08      	subs	r3, #8
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	210f      	movs	r1, #15
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	fa01 f303 	lsl.w	r3, r1, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	401a      	ands	r2, r3
 80010d8:	6a39      	ldr	r1, [r7, #32]
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	fa01 f303 	lsl.w	r3, r1, r3
 80010e0:	431a      	orrs	r2, r3
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f000 80b1 	beq.w	8001256 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010f4:	4b4d      	ldr	r3, [pc, #308]	; (800122c <HAL_GPIO_Init+0x2b8>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	4a4c      	ldr	r2, [pc, #304]	; (800122c <HAL_GPIO_Init+0x2b8>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	6193      	str	r3, [r2, #24]
 8001100:	4b4a      	ldr	r3, [pc, #296]	; (800122c <HAL_GPIO_Init+0x2b8>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800110c:	4a48      	ldr	r2, [pc, #288]	; (8001230 <HAL_GPIO_Init+0x2bc>)
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	089b      	lsrs	r3, r3, #2
 8001112:	3302      	adds	r3, #2
 8001114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001118:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	220f      	movs	r2, #15
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	4013      	ands	r3, r2
 800112e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a40      	ldr	r2, [pc, #256]	; (8001234 <HAL_GPIO_Init+0x2c0>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d013      	beq.n	8001160 <HAL_GPIO_Init+0x1ec>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a3f      	ldr	r2, [pc, #252]	; (8001238 <HAL_GPIO_Init+0x2c4>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d00d      	beq.n	800115c <HAL_GPIO_Init+0x1e8>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a3e      	ldr	r2, [pc, #248]	; (800123c <HAL_GPIO_Init+0x2c8>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d007      	beq.n	8001158 <HAL_GPIO_Init+0x1e4>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a3d      	ldr	r2, [pc, #244]	; (8001240 <HAL_GPIO_Init+0x2cc>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d101      	bne.n	8001154 <HAL_GPIO_Init+0x1e0>
 8001150:	2303      	movs	r3, #3
 8001152:	e006      	b.n	8001162 <HAL_GPIO_Init+0x1ee>
 8001154:	2304      	movs	r3, #4
 8001156:	e004      	b.n	8001162 <HAL_GPIO_Init+0x1ee>
 8001158:	2302      	movs	r3, #2
 800115a:	e002      	b.n	8001162 <HAL_GPIO_Init+0x1ee>
 800115c:	2301      	movs	r3, #1
 800115e:	e000      	b.n	8001162 <HAL_GPIO_Init+0x1ee>
 8001160:	2300      	movs	r3, #0
 8001162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001164:	f002 0203 	and.w	r2, r2, #3
 8001168:	0092      	lsls	r2, r2, #2
 800116a:	4093      	lsls	r3, r2
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	4313      	orrs	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001172:	492f      	ldr	r1, [pc, #188]	; (8001230 <HAL_GPIO_Init+0x2bc>)
 8001174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001176:	089b      	lsrs	r3, r3, #2
 8001178:	3302      	adds	r3, #2
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d006      	beq.n	800119a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800118c:	4b2d      	ldr	r3, [pc, #180]	; (8001244 <HAL_GPIO_Init+0x2d0>)
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	492c      	ldr	r1, [pc, #176]	; (8001244 <HAL_GPIO_Init+0x2d0>)
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	4313      	orrs	r3, r2
 8001196:	608b      	str	r3, [r1, #8]
 8001198:	e006      	b.n	80011a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800119a:	4b2a      	ldr	r3, [pc, #168]	; (8001244 <HAL_GPIO_Init+0x2d0>)
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	4928      	ldr	r1, [pc, #160]	; (8001244 <HAL_GPIO_Init+0x2d0>)
 80011a4:	4013      	ands	r3, r2
 80011a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d006      	beq.n	80011c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011b4:	4b23      	ldr	r3, [pc, #140]	; (8001244 <HAL_GPIO_Init+0x2d0>)
 80011b6:	68da      	ldr	r2, [r3, #12]
 80011b8:	4922      	ldr	r1, [pc, #136]	; (8001244 <HAL_GPIO_Init+0x2d0>)
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	4313      	orrs	r3, r2
 80011be:	60cb      	str	r3, [r1, #12]
 80011c0:	e006      	b.n	80011d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011c2:	4b20      	ldr	r3, [pc, #128]	; (8001244 <HAL_GPIO_Init+0x2d0>)
 80011c4:	68da      	ldr	r2, [r3, #12]
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	43db      	mvns	r3, r3
 80011ca:	491e      	ldr	r1, [pc, #120]	; (8001244 <HAL_GPIO_Init+0x2d0>)
 80011cc:	4013      	ands	r3, r2
 80011ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d006      	beq.n	80011ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011dc:	4b19      	ldr	r3, [pc, #100]	; (8001244 <HAL_GPIO_Init+0x2d0>)
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	4918      	ldr	r1, [pc, #96]	; (8001244 <HAL_GPIO_Init+0x2d0>)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	604b      	str	r3, [r1, #4]
 80011e8:	e006      	b.n	80011f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011ea:	4b16      	ldr	r3, [pc, #88]	; (8001244 <HAL_GPIO_Init+0x2d0>)
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	43db      	mvns	r3, r3
 80011f2:	4914      	ldr	r1, [pc, #80]	; (8001244 <HAL_GPIO_Init+0x2d0>)
 80011f4:	4013      	ands	r3, r2
 80011f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d021      	beq.n	8001248 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <HAL_GPIO_Init+0x2d0>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	490e      	ldr	r1, [pc, #56]	; (8001244 <HAL_GPIO_Init+0x2d0>)
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	600b      	str	r3, [r1, #0]
 8001210:	e021      	b.n	8001256 <HAL_GPIO_Init+0x2e2>
 8001212:	bf00      	nop
 8001214:	10320000 	.word	0x10320000
 8001218:	10310000 	.word	0x10310000
 800121c:	10220000 	.word	0x10220000
 8001220:	10210000 	.word	0x10210000
 8001224:	10120000 	.word	0x10120000
 8001228:	10110000 	.word	0x10110000
 800122c:	40021000 	.word	0x40021000
 8001230:	40010000 	.word	0x40010000
 8001234:	40010800 	.word	0x40010800
 8001238:	40010c00 	.word	0x40010c00
 800123c:	40011000 	.word	0x40011000
 8001240:	40011400 	.word	0x40011400
 8001244:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001248:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <HAL_GPIO_Init+0x304>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	43db      	mvns	r3, r3
 8001250:	4909      	ldr	r1, [pc, #36]	; (8001278 <HAL_GPIO_Init+0x304>)
 8001252:	4013      	ands	r3, r2
 8001254:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	3301      	adds	r3, #1
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001262:	fa22 f303 	lsr.w	r3, r2, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	f47f ae8e 	bne.w	8000f88 <HAL_GPIO_Init+0x14>
  }
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	372c      	adds	r7, #44	; 0x2c
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr
 8001278:	40010400 	.word	0x40010400

0800127c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	807b      	strh	r3, [r7, #2]
 8001288:	4613      	mov	r3, r2
 800128a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800128c:	787b      	ldrb	r3, [r7, #1]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001292:	887a      	ldrh	r2, [r7, #2]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001298:	e003      	b.n	80012a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800129a:	887b      	ldrh	r3, [r7, #2]
 800129c:	041a      	lsls	r2, r3, #16
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	611a      	str	r2, [r3, #16]
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr

080012ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012be:	887a      	ldrh	r2, [r7, #2]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4013      	ands	r3, r2
 80012c4:	041a      	lsls	r2, r3, #16
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	43d9      	mvns	r1, r3
 80012ca:	887b      	ldrh	r3, [r7, #2]
 80012cc:	400b      	ands	r3, r1
 80012ce:	431a      	orrs	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	611a      	str	r2, [r3, #16]
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
	...

080012e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e272      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 8087 	beq.w	800140e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001300:	4b92      	ldr	r3, [pc, #584]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 030c 	and.w	r3, r3, #12
 8001308:	2b04      	cmp	r3, #4
 800130a:	d00c      	beq.n	8001326 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800130c:	4b8f      	ldr	r3, [pc, #572]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 030c 	and.w	r3, r3, #12
 8001314:	2b08      	cmp	r3, #8
 8001316:	d112      	bne.n	800133e <HAL_RCC_OscConfig+0x5e>
 8001318:	4b8c      	ldr	r3, [pc, #560]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001324:	d10b      	bne.n	800133e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001326:	4b89      	ldr	r3, [pc, #548]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d06c      	beq.n	800140c <HAL_RCC_OscConfig+0x12c>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d168      	bne.n	800140c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e24c      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001346:	d106      	bne.n	8001356 <HAL_RCC_OscConfig+0x76>
 8001348:	4b80      	ldr	r3, [pc, #512]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a7f      	ldr	r2, [pc, #508]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800134e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001352:	6013      	str	r3, [r2, #0]
 8001354:	e02e      	b.n	80013b4 <HAL_RCC_OscConfig+0xd4>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10c      	bne.n	8001378 <HAL_RCC_OscConfig+0x98>
 800135e:	4b7b      	ldr	r3, [pc, #492]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a7a      	ldr	r2, [pc, #488]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	4b78      	ldr	r3, [pc, #480]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a77      	ldr	r2, [pc, #476]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001370:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	e01d      	b.n	80013b4 <HAL_RCC_OscConfig+0xd4>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001380:	d10c      	bne.n	800139c <HAL_RCC_OscConfig+0xbc>
 8001382:	4b72      	ldr	r3, [pc, #456]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a71      	ldr	r2, [pc, #452]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	4b6f      	ldr	r3, [pc, #444]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a6e      	ldr	r2, [pc, #440]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e00b      	b.n	80013b4 <HAL_RCC_OscConfig+0xd4>
 800139c:	4b6b      	ldr	r3, [pc, #428]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a6a      	ldr	r2, [pc, #424]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80013a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	4b68      	ldr	r3, [pc, #416]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a67      	ldr	r2, [pc, #412]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80013ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d013      	beq.n	80013e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013bc:	f7ff fab0 	bl	8000920 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c4:	f7ff faac 	bl	8000920 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b64      	cmp	r3, #100	; 0x64
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e200      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	4b5d      	ldr	r3, [pc, #372]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f0      	beq.n	80013c4 <HAL_RCC_OscConfig+0xe4>
 80013e2:	e014      	b.n	800140e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e4:	f7ff fa9c 	bl	8000920 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013ec:	f7ff fa98 	bl	8000920 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b64      	cmp	r3, #100	; 0x64
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e1ec      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fe:	4b53      	ldr	r3, [pc, #332]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f0      	bne.n	80013ec <HAL_RCC_OscConfig+0x10c>
 800140a:	e000      	b.n	800140e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d063      	beq.n	80014e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800141a:	4b4c      	ldr	r3, [pc, #304]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 030c 	and.w	r3, r3, #12
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00b      	beq.n	800143e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001426:	4b49      	ldr	r3, [pc, #292]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 030c 	and.w	r3, r3, #12
 800142e:	2b08      	cmp	r3, #8
 8001430:	d11c      	bne.n	800146c <HAL_RCC_OscConfig+0x18c>
 8001432:	4b46      	ldr	r3, [pc, #280]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d116      	bne.n	800146c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143e:	4b43      	ldr	r3, [pc, #268]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d005      	beq.n	8001456 <HAL_RCC_OscConfig+0x176>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d001      	beq.n	8001456 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e1c0      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001456:	4b3d      	ldr	r3, [pc, #244]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4939      	ldr	r1, [pc, #228]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146a:	e03a      	b.n	80014e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d020      	beq.n	80014b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001474:	4b36      	ldr	r3, [pc, #216]	; (8001550 <HAL_RCC_OscConfig+0x270>)
 8001476:	2201      	movs	r2, #1
 8001478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147a:	f7ff fa51 	bl	8000920 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001482:	f7ff fa4d 	bl	8000920 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e1a1      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001494:	4b2d      	ldr	r3, [pc, #180]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f0      	beq.n	8001482 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a0:	4b2a      	ldr	r3, [pc, #168]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	4927      	ldr	r1, [pc, #156]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	600b      	str	r3, [r1, #0]
 80014b4:	e015      	b.n	80014e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014b6:	4b26      	ldr	r3, [pc, #152]	; (8001550 <HAL_RCC_OscConfig+0x270>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff fa30 	bl	8000920 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c4:	f7ff fa2c 	bl	8000920 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e180      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d03a      	beq.n	8001564 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d019      	beq.n	800152a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <HAL_RCC_OscConfig+0x274>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fc:	f7ff fa10 	bl	8000920 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001504:	f7ff fa0c 	bl	8000920 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e160      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001522:	2001      	movs	r0, #1
 8001524:	f000 face 	bl	8001ac4 <RCC_Delay>
 8001528:	e01c      	b.n	8001564 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_RCC_OscConfig+0x274>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001530:	f7ff f9f6 	bl	8000920 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001536:	e00f      	b.n	8001558 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001538:	f7ff f9f2 	bl	8000920 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d908      	bls.n	8001558 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e146      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
 800154a:	bf00      	nop
 800154c:	40021000 	.word	0x40021000
 8001550:	42420000 	.word	0x42420000
 8001554:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001558:	4b92      	ldr	r3, [pc, #584]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 800155a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1e9      	bne.n	8001538 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 80a6 	beq.w	80016be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001576:	4b8b      	ldr	r3, [pc, #556]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10d      	bne.n	800159e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001582:	4b88      	ldr	r3, [pc, #544]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	4a87      	ldr	r2, [pc, #540]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 8001588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158c:	61d3      	str	r3, [r2, #28]
 800158e:	4b85      	ldr	r3, [pc, #532]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800159a:	2301      	movs	r3, #1
 800159c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159e:	4b82      	ldr	r3, [pc, #520]	; (80017a8 <HAL_RCC_OscConfig+0x4c8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d118      	bne.n	80015dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015aa:	4b7f      	ldr	r3, [pc, #508]	; (80017a8 <HAL_RCC_OscConfig+0x4c8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a7e      	ldr	r2, [pc, #504]	; (80017a8 <HAL_RCC_OscConfig+0x4c8>)
 80015b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015b6:	f7ff f9b3 	bl	8000920 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015be:	f7ff f9af 	bl	8000920 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b64      	cmp	r3, #100	; 0x64
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e103      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d0:	4b75      	ldr	r3, [pc, #468]	; (80017a8 <HAL_RCC_OscConfig+0x4c8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0f0      	beq.n	80015be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d106      	bne.n	80015f2 <HAL_RCC_OscConfig+0x312>
 80015e4:	4b6f      	ldr	r3, [pc, #444]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	4a6e      	ldr	r2, [pc, #440]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	6213      	str	r3, [r2, #32]
 80015f0:	e02d      	b.n	800164e <HAL_RCC_OscConfig+0x36e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10c      	bne.n	8001614 <HAL_RCC_OscConfig+0x334>
 80015fa:	4b6a      	ldr	r3, [pc, #424]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	4a69      	ldr	r2, [pc, #420]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	6213      	str	r3, [r2, #32]
 8001606:	4b67      	ldr	r3, [pc, #412]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	4a66      	ldr	r2, [pc, #408]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 800160c:	f023 0304 	bic.w	r3, r3, #4
 8001610:	6213      	str	r3, [r2, #32]
 8001612:	e01c      	b.n	800164e <HAL_RCC_OscConfig+0x36e>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	2b05      	cmp	r3, #5
 800161a:	d10c      	bne.n	8001636 <HAL_RCC_OscConfig+0x356>
 800161c:	4b61      	ldr	r3, [pc, #388]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	4a60      	ldr	r2, [pc, #384]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 8001622:	f043 0304 	orr.w	r3, r3, #4
 8001626:	6213      	str	r3, [r2, #32]
 8001628:	4b5e      	ldr	r3, [pc, #376]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	4a5d      	ldr	r2, [pc, #372]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6213      	str	r3, [r2, #32]
 8001634:	e00b      	b.n	800164e <HAL_RCC_OscConfig+0x36e>
 8001636:	4b5b      	ldr	r3, [pc, #364]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	4a5a      	ldr	r2, [pc, #360]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 800163c:	f023 0301 	bic.w	r3, r3, #1
 8001640:	6213      	str	r3, [r2, #32]
 8001642:	4b58      	ldr	r3, [pc, #352]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	4a57      	ldr	r2, [pc, #348]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 8001648:	f023 0304 	bic.w	r3, r3, #4
 800164c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d015      	beq.n	8001682 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001656:	f7ff f963 	bl	8000920 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800165c:	e00a      	b.n	8001674 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800165e:	f7ff f95f 	bl	8000920 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	f241 3288 	movw	r2, #5000	; 0x1388
 800166c:	4293      	cmp	r3, r2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e0b1      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001674:	4b4b      	ldr	r3, [pc, #300]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0ee      	beq.n	800165e <HAL_RCC_OscConfig+0x37e>
 8001680:	e014      	b.n	80016ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001682:	f7ff f94d 	bl	8000920 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001688:	e00a      	b.n	80016a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168a:	f7ff f949 	bl	8000920 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	f241 3288 	movw	r2, #5000	; 0x1388
 8001698:	4293      	cmp	r3, r2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e09b      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a0:	4b40      	ldr	r3, [pc, #256]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1ee      	bne.n	800168a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016ac:	7dfb      	ldrb	r3, [r7, #23]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d105      	bne.n	80016be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b2:	4b3c      	ldr	r3, [pc, #240]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	4a3b      	ldr	r2, [pc, #236]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 80016b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 8087 	beq.w	80017d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016c8:	4b36      	ldr	r3, [pc, #216]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 030c 	and.w	r3, r3, #12
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	d061      	beq.n	8001798 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69db      	ldr	r3, [r3, #28]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d146      	bne.n	800176a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016dc:	4b33      	ldr	r3, [pc, #204]	; (80017ac <HAL_RCC_OscConfig+0x4cc>)
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e2:	f7ff f91d 	bl	8000920 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ea:	f7ff f919 	bl	8000920 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e06d      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016fc:	4b29      	ldr	r3, [pc, #164]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f0      	bne.n	80016ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001710:	d108      	bne.n	8001724 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001712:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	4921      	ldr	r1, [pc, #132]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 8001720:	4313      	orrs	r3, r2
 8001722:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001724:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a19      	ldr	r1, [r3, #32]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	430b      	orrs	r3, r1
 8001736:	491b      	ldr	r1, [pc, #108]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 8001738:	4313      	orrs	r3, r2
 800173a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800173c:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <HAL_RCC_OscConfig+0x4cc>)
 800173e:	2201      	movs	r2, #1
 8001740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001742:	f7ff f8ed 	bl	8000920 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174a:	f7ff f8e9 	bl	8000920 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e03d      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x46a>
 8001768:	e035      	b.n	80017d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <HAL_RCC_OscConfig+0x4cc>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7ff f8d6 	bl	8000920 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001778:	f7ff f8d2 	bl	8000920 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e026      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x498>
 8001796:	e01e      	b.n	80017d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d107      	bne.n	80017b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e019      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40007000 	.word	0x40007000
 80017ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017b0:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <HAL_RCC_OscConfig+0x500>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d106      	bne.n	80017d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d001      	beq.n	80017d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40021000 	.word	0x40021000

080017e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e0d0      	b.n	800199a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017f8:	4b6a      	ldr	r3, [pc, #424]	; (80019a4 <HAL_RCC_ClockConfig+0x1c0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	d910      	bls.n	8001828 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001806:	4b67      	ldr	r3, [pc, #412]	; (80019a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f023 0207 	bic.w	r2, r3, #7
 800180e:	4965      	ldr	r1, [pc, #404]	; (80019a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	4313      	orrs	r3, r2
 8001814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001816:	4b63      	ldr	r3, [pc, #396]	; (80019a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	429a      	cmp	r2, r3
 8001822:	d001      	beq.n	8001828 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e0b8      	b.n	800199a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d020      	beq.n	8001876 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	d005      	beq.n	800184c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001840:	4b59      	ldr	r3, [pc, #356]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	4a58      	ldr	r2, [pc, #352]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001846:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800184a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0308 	and.w	r3, r3, #8
 8001854:	2b00      	cmp	r3, #0
 8001856:	d005      	beq.n	8001864 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001858:	4b53      	ldr	r3, [pc, #332]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	4a52      	ldr	r2, [pc, #328]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 800185e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001862:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001864:	4b50      	ldr	r3, [pc, #320]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	494d      	ldr	r1, [pc, #308]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001872:	4313      	orrs	r3, r2
 8001874:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d040      	beq.n	8001904 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d107      	bne.n	800189a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188a:	4b47      	ldr	r3, [pc, #284]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d115      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e07f      	b.n	800199a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d107      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a2:	4b41      	ldr	r3, [pc, #260]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d109      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e073      	b.n	800199a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b2:	4b3d      	ldr	r3, [pc, #244]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e06b      	b.n	800199a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018c2:	4b39      	ldr	r3, [pc, #228]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f023 0203 	bic.w	r2, r3, #3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4936      	ldr	r1, [pc, #216]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d4:	f7ff f824 	bl	8000920 <HAL_GetTick>
 80018d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018da:	e00a      	b.n	80018f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018dc:	f7ff f820 	bl	8000920 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e053      	b.n	800199a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f2:	4b2d      	ldr	r3, [pc, #180]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 020c 	and.w	r2, r3, #12
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	429a      	cmp	r2, r3
 8001902:	d1eb      	bne.n	80018dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001904:	4b27      	ldr	r3, [pc, #156]	; (80019a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	429a      	cmp	r2, r3
 8001910:	d210      	bcs.n	8001934 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001912:	4b24      	ldr	r3, [pc, #144]	; (80019a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f023 0207 	bic.w	r2, r3, #7
 800191a:	4922      	ldr	r1, [pc, #136]	; (80019a4 <HAL_RCC_ClockConfig+0x1c0>)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	4313      	orrs	r3, r2
 8001920:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001922:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	429a      	cmp	r2, r3
 800192e:	d001      	beq.n	8001934 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e032      	b.n	800199a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	d008      	beq.n	8001952 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001940:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	4916      	ldr	r1, [pc, #88]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 800194e:	4313      	orrs	r3, r2
 8001950:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	2b00      	cmp	r3, #0
 800195c:	d009      	beq.n	8001972 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	490e      	ldr	r1, [pc, #56]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 800196e:	4313      	orrs	r3, r2
 8001970:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001972:	f000 f821 	bl	80019b8 <HAL_RCC_GetSysClockFreq>
 8001976:	4602      	mov	r2, r0
 8001978:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	091b      	lsrs	r3, r3, #4
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	490a      	ldr	r1, [pc, #40]	; (80019ac <HAL_RCC_ClockConfig+0x1c8>)
 8001984:	5ccb      	ldrb	r3, [r1, r3]
 8001986:	fa22 f303 	lsr.w	r3, r2, r3
 800198a:	4a09      	ldr	r2, [pc, #36]	; (80019b0 <HAL_RCC_ClockConfig+0x1cc>)
 800198c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_RCC_ClockConfig+0x1d0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe ff82 	bl	800089c <HAL_InitTick>

  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40022000 	.word	0x40022000
 80019a8:	40021000 	.word	0x40021000
 80019ac:	080023e8 	.word	0x080023e8
 80019b0:	20000140 	.word	0x20000140
 80019b4:	20000144 	.word	0x20000144

080019b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	2300      	movs	r3, #0
 80019cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019d2:	4b1e      	ldr	r3, [pc, #120]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x94>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f003 030c 	and.w	r3, r3, #12
 80019de:	2b04      	cmp	r3, #4
 80019e0:	d002      	beq.n	80019e8 <HAL_RCC_GetSysClockFreq+0x30>
 80019e2:	2b08      	cmp	r3, #8
 80019e4:	d003      	beq.n	80019ee <HAL_RCC_GetSysClockFreq+0x36>
 80019e6:	e027      	b.n	8001a38 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019e8:	4b19      	ldr	r3, [pc, #100]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x98>)
 80019ea:	613b      	str	r3, [r7, #16]
      break;
 80019ec:	e027      	b.n	8001a3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	0c9b      	lsrs	r3, r3, #18
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	4a17      	ldr	r2, [pc, #92]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019f8:	5cd3      	ldrb	r3, [r2, r3]
 80019fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d010      	beq.n	8001a28 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x94>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	0c5b      	lsrs	r3, r3, #17
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	4a11      	ldr	r2, [pc, #68]	; (8001a58 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a12:	5cd3      	ldrb	r3, [r2, r3]
 8001a14:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a0d      	ldr	r2, [pc, #52]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a1a:	fb03 f202 	mul.w	r2, r3, r2
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	e004      	b.n	8001a32 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a0c      	ldr	r2, [pc, #48]	; (8001a5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a2c:	fb02 f303 	mul.w	r3, r2, r3
 8001a30:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	613b      	str	r3, [r7, #16]
      break;
 8001a36:	e002      	b.n	8001a3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a3a:	613b      	str	r3, [r7, #16]
      break;
 8001a3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a3e:	693b      	ldr	r3, [r7, #16]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	371c      	adds	r7, #28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	007a1200 	.word	0x007a1200
 8001a54:	08002400 	.word	0x08002400
 8001a58:	08002410 	.word	0x08002410
 8001a5c:	003d0900 	.word	0x003d0900

08001a60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a64:	4b02      	ldr	r3, [pc, #8]	; (8001a70 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a66:	681b      	ldr	r3, [r3, #0]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	20000140 	.word	0x20000140

08001a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a78:	f7ff fff2 	bl	8001a60 <HAL_RCC_GetHCLKFreq>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	0a1b      	lsrs	r3, r3, #8
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	4903      	ldr	r1, [pc, #12]	; (8001a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a8a:	5ccb      	ldrb	r3, [r1, r3]
 8001a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40021000 	.word	0x40021000
 8001a98:	080023f8 	.word	0x080023f8

08001a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001aa0:	f7ff ffde 	bl	8001a60 <HAL_RCC_GetHCLKFreq>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	4b05      	ldr	r3, [pc, #20]	; (8001abc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	0adb      	lsrs	r3, r3, #11
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	4903      	ldr	r1, [pc, #12]	; (8001ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ab2:	5ccb      	ldrb	r3, [r1, r3]
 8001ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	080023f8 	.word	0x080023f8

08001ac4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001acc:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <RCC_Delay+0x34>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <RCC_Delay+0x38>)
 8001ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad6:	0a5b      	lsrs	r3, r3, #9
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	fb02 f303 	mul.w	r3, r2, r3
 8001ade:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ae0:	bf00      	nop
  }
  while (Delay --);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	1e5a      	subs	r2, r3, #1
 8001ae6:	60fa      	str	r2, [r7, #12]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f9      	bne.n	8001ae0 <RCC_Delay+0x1c>
}
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	20000140 	.word	0x20000140
 8001afc:	10624dd3 	.word	0x10624dd3

08001b00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e042      	b.n	8001b98 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d106      	bne.n	8001b2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7fe fdce 	bl	80006c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2224      	movs	r2, #36	; 0x24
 8001b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 fb89 	bl	800225c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	691a      	ldr	r2, [r3, #16]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	695a      	ldr	r2, [r3, #20]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2220      	movs	r2, #32
 8001b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	; 0x28
 8001ba4:	af02      	add	r7, sp, #8
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	603b      	str	r3, [r7, #0]
 8001bac:	4613      	mov	r3, r2
 8001bae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b20      	cmp	r3, #32
 8001bbe:	d16d      	bne.n	8001c9c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d002      	beq.n	8001bcc <HAL_UART_Transmit+0x2c>
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e066      	b.n	8001c9e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2221      	movs	r2, #33	; 0x21
 8001bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bde:	f7fe fe9f 	bl	8000920 <HAL_GetTick>
 8001be2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	88fa      	ldrh	r2, [r7, #6]
 8001be8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	88fa      	ldrh	r2, [r7, #6]
 8001bee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bf8:	d108      	bne.n	8001c0c <HAL_UART_Transmit+0x6c>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d104      	bne.n	8001c0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	61bb      	str	r3, [r7, #24]
 8001c0a:	e003      	b.n	8001c14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c14:	e02a      	b.n	8001c6c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2180      	movs	r1, #128	; 0x80
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f000 f989 	bl	8001f38 <UART_WaitOnFlagUntilTimeout>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e036      	b.n	8001c9e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10b      	bne.n	8001c4e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	3302      	adds	r3, #2
 8001c4a:	61bb      	str	r3, [r7, #24]
 8001c4c:	e007      	b.n	8001c5e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	781a      	ldrb	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	3b01      	subs	r3, #1
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1cf      	bne.n	8001c16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2140      	movs	r1, #64	; 0x40
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f000 f959 	bl	8001f38 <UART_WaitOnFlagUntilTimeout>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e006      	b.n	8001c9e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2220      	movs	r2, #32
 8001c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	e000      	b.n	8001c9e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001c9c:	2302      	movs	r3, #2
  }
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3720      	adds	r7, #32
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b084      	sub	sp, #16
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b20      	cmp	r3, #32
 8001cbe:	d112      	bne.n	8001ce6 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <HAL_UART_Receive_DMA+0x26>
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e00b      	b.n	8001ce8 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	68b9      	ldr	r1, [r7, #8]
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f000 f999 	bl	8002014 <UART_Start_Receive_DMA>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	e000      	b.n	8001ce8 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001ce6:	2302      	movs	r3, #2
  }
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr

08001d02 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr

08001d3c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b09c      	sub	sp, #112	; 0x70
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0320 	and.w	r3, r3, #32
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d172      	bne.n	8001e3e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8001d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	330c      	adds	r3, #12
 8001d64:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d68:	e853 3f00 	ldrex	r3, [r3]
 8001d6c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d74:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	330c      	adds	r3, #12
 8001d7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001d7e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001d80:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d86:	e841 2300 	strex	r3, r2, [r1]
 8001d8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001d8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1e5      	bne.n	8001d5e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	3314      	adds	r3, #20
 8001d98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d9c:	e853 3f00 	ldrex	r3, [r3]
 8001da0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da4:	f023 0301 	bic.w	r3, r3, #1
 8001da8:	667b      	str	r3, [r7, #100]	; 0x64
 8001daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	3314      	adds	r3, #20
 8001db0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001db2:	647a      	str	r2, [r7, #68]	; 0x44
 8001db4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001db6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001db8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001dba:	e841 2300 	strex	r3, r2, [r1]
 8001dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1e5      	bne.n	8001d92 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	3314      	adds	r3, #20
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	e853 3f00 	ldrex	r3, [r3]
 8001dd4:	623b      	str	r3, [r7, #32]
   return(result);
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ddc:	663b      	str	r3, [r7, #96]	; 0x60
 8001dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	3314      	adds	r3, #20
 8001de4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001de6:	633a      	str	r2, [r7, #48]	; 0x30
 8001de8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dee:	e841 2300 	strex	r3, r2, [r1]
 8001df2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1e5      	bne.n	8001dc6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d119      	bne.n	8001e3e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	330c      	adds	r3, #12
 8001e10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	e853 3f00 	ldrex	r3, [r3]
 8001e18:	60fb      	str	r3, [r7, #12]
   return(result);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f023 0310 	bic.w	r3, r3, #16
 8001e20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	330c      	adds	r3, #12
 8001e28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001e2a:	61fa      	str	r2, [r7, #28]
 8001e2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e2e:	69b9      	ldr	r1, [r7, #24]
 8001e30:	69fa      	ldr	r2, [r7, #28]
 8001e32:	e841 2300 	strex	r3, r2, [r1]
 8001e36:	617b      	str	r3, [r7, #20]
   return(result);
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1e5      	bne.n	8001e0a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e40:	2200      	movs	r2, #0
 8001e42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d106      	bne.n	8001e5a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001e50:	4619      	mov	r1, r3
 8001e52:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001e54:	f7ff ff67 	bl	8001d26 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001e58:	e002      	b.n	8001e60 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8001e5a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001e5c:	f7ff ff48 	bl	8001cf0 <HAL_UART_RxCpltCallback>
}
 8001e60:	bf00      	nop
 8001e62:	3770      	adds	r7, #112	; 0x70
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d108      	bne.n	8001e96 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001e88:	085b      	lsrs	r3, r3, #1
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f7ff ff49 	bl	8001d26 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001e94:	e002      	b.n	8001e9c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f7ff ff33 	bl	8001d02 <HAL_UART_RxHalfCpltCallback>
}
 8001e9c:	bf00      	nop
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	bf14      	ite	ne
 8001ec4:	2301      	movne	r3, #1
 8001ec6:	2300      	moveq	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b21      	cmp	r3, #33	; 0x21
 8001ed6:	d108      	bne.n	8001eea <UART_DMAError+0x46>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d005      	beq.n	8001eea <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8001ee4:	68b8      	ldr	r0, [r7, #8]
 8001ee6:	f000 f92f 	bl	8002148 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	bf14      	ite	ne
 8001ef8:	2301      	movne	r3, #1
 8001efa:	2300      	moveq	r3, #0
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b22      	cmp	r3, #34	; 0x22
 8001f0a:	d108      	bne.n	8001f1e <UART_DMAError+0x7a>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d005      	beq.n	8001f1e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	2200      	movs	r2, #0
 8001f16:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8001f18:	68b8      	ldr	r0, [r7, #8]
 8001f1a:	f000 f93c 	bl	8002196 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	f043 0210 	orr.w	r2, r3, #16
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001f2a:	68b8      	ldr	r0, [r7, #8]
 8001f2c:	f7ff fef2 	bl	8001d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001f30:	bf00      	nop
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b090      	sub	sp, #64	; 0x40
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	4613      	mov	r3, r2
 8001f46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f48:	e050      	b.n	8001fec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f50:	d04c      	beq.n	8001fec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d007      	beq.n	8001f68 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f58:	f7fe fce2 	bl	8000920 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d241      	bcs.n	8001fec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	330c      	adds	r3, #12
 8001f6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f72:	e853 3f00 	ldrex	r3, [r3]
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	330c      	adds	r3, #12
 8001f86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f88:	637a      	str	r2, [r7, #52]	; 0x34
 8001f8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f90:	e841 2300 	strex	r3, r2, [r1]
 8001f94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1e5      	bne.n	8001f68 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	3314      	adds	r3, #20
 8001fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	e853 3f00 	ldrex	r3, [r3]
 8001faa:	613b      	str	r3, [r7, #16]
   return(result);
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	f023 0301 	bic.w	r3, r3, #1
 8001fb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	3314      	adds	r3, #20
 8001fba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fbc:	623a      	str	r2, [r7, #32]
 8001fbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fc0:	69f9      	ldr	r1, [r7, #28]
 8001fc2:	6a3a      	ldr	r2, [r7, #32]
 8001fc4:	e841 2300 	strex	r3, r2, [r1]
 8001fc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1e5      	bne.n	8001f9c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2220      	movs	r2, #32
 8001fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e00f      	b.n	800200c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	bf0c      	ite	eq
 8001ffc:	2301      	moveq	r3, #1
 8001ffe:	2300      	movne	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	461a      	mov	r2, r3
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	429a      	cmp	r2, r3
 8002008:	d09f      	beq.n	8001f4a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3740      	adds	r7, #64	; 0x40
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b098      	sub	sp, #96	; 0x60
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	4613      	mov	r3, r2
 8002020:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	88fa      	ldrh	r2, [r7, #6]
 800202c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2222      	movs	r2, #34	; 0x22
 8002038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002040:	4a3e      	ldr	r2, [pc, #248]	; (800213c <UART_Start_Receive_DMA+0x128>)
 8002042:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002048:	4a3d      	ldr	r2, [pc, #244]	; (8002140 <UART_Start_Receive_DMA+0x12c>)
 800204a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002050:	4a3c      	ldr	r2, [pc, #240]	; (8002144 <UART_Start_Receive_DMA+0x130>)
 8002052:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002058:	2200      	movs	r2, #0
 800205a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800205c:	f107 0308 	add.w	r3, r7, #8
 8002060:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	3304      	adds	r3, #4
 800206c:	4619      	mov	r1, r3
 800206e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	f7fe fdea 	bl	8000c4c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002078:	2300      	movs	r3, #0
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d019      	beq.n	80020ca <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	330c      	adds	r3, #12
 800209c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800209e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020a0:	e853 3f00 	ldrex	r3, [r3]
 80020a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80020a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	330c      	adds	r3, #12
 80020b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020b6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80020b8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80020bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020be:	e841 2300 	strex	r3, r2, [r1]
 80020c2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80020c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1e5      	bne.n	8002096 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	3314      	adds	r3, #20
 80020d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d4:	e853 3f00 	ldrex	r3, [r3]
 80020d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80020da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	657b      	str	r3, [r7, #84]	; 0x54
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	3314      	adds	r3, #20
 80020e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020ea:	63ba      	str	r2, [r7, #56]	; 0x38
 80020ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80020f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020f2:	e841 2300 	strex	r3, r2, [r1]
 80020f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80020f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1e5      	bne.n	80020ca <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	3314      	adds	r3, #20
 8002104:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	e853 3f00 	ldrex	r3, [r3]
 800210c:	617b      	str	r3, [r7, #20]
   return(result);
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002114:	653b      	str	r3, [r7, #80]	; 0x50
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	3314      	adds	r3, #20
 800211c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800211e:	627a      	str	r2, [r7, #36]	; 0x24
 8002120:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002122:	6a39      	ldr	r1, [r7, #32]
 8002124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002126:	e841 2300 	strex	r3, r2, [r1]
 800212a:	61fb      	str	r3, [r7, #28]
   return(result);
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1e5      	bne.n	80020fe <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3760      	adds	r7, #96	; 0x60
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	08001d3d 	.word	0x08001d3d
 8002140:	08001e69 	.word	0x08001e69
 8002144:	08001ea5 	.word	0x08001ea5

08002148 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002148:	b480      	push	{r7}
 800214a:	b089      	sub	sp, #36	; 0x24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	330c      	adds	r3, #12
 8002156:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	e853 3f00 	ldrex	r3, [r3]
 800215e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002166:	61fb      	str	r3, [r7, #28]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	330c      	adds	r3, #12
 800216e:	69fa      	ldr	r2, [r7, #28]
 8002170:	61ba      	str	r2, [r7, #24]
 8002172:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002174:	6979      	ldr	r1, [r7, #20]
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	e841 2300 	strex	r3, r2, [r1]
 800217c:	613b      	str	r3, [r7, #16]
   return(result);
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1e5      	bne.n	8002150 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2220      	movs	r2, #32
 8002188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800218c:	bf00      	nop
 800218e:	3724      	adds	r7, #36	; 0x24
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr

08002196 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002196:	b480      	push	{r7}
 8002198:	b095      	sub	sp, #84	; 0x54
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	330c      	adds	r3, #12
 80021a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a8:	e853 3f00 	ldrex	r3, [r3]
 80021ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80021ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80021b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	330c      	adds	r3, #12
 80021bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021be:	643a      	str	r2, [r7, #64]	; 0x40
 80021c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80021c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80021c6:	e841 2300 	strex	r3, r2, [r1]
 80021ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80021cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1e5      	bne.n	800219e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	3314      	adds	r3, #20
 80021d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	e853 3f00 	ldrex	r3, [r3]
 80021e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	f023 0301 	bic.w	r3, r3, #1
 80021e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	3314      	adds	r3, #20
 80021f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80021f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021fa:	e841 2300 	strex	r3, r2, [r1]
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1e5      	bne.n	80021d2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	2b01      	cmp	r3, #1
 800220c:	d119      	bne.n	8002242 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	330c      	adds	r3, #12
 8002214:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	e853 3f00 	ldrex	r3, [r3]
 800221c:	60bb      	str	r3, [r7, #8]
   return(result);
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	f023 0310 	bic.w	r3, r3, #16
 8002224:	647b      	str	r3, [r7, #68]	; 0x44
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	330c      	adds	r3, #12
 800222c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800222e:	61ba      	str	r2, [r7, #24]
 8002230:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002232:	6979      	ldr	r1, [r7, #20]
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	e841 2300 	strex	r3, r2, [r1]
 800223a:	613b      	str	r3, [r7, #16]
   return(result);
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1e5      	bne.n	800220e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2220      	movs	r2, #32
 8002246:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002250:	bf00      	nop
 8002252:	3754      	adds	r7, #84	; 0x54
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr
	...

0800225c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	4313      	orrs	r3, r2
 800228a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002296:	f023 030c 	bic.w	r3, r3, #12
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6812      	ldr	r2, [r2, #0]
 800229e:	68b9      	ldr	r1, [r7, #8]
 80022a0:	430b      	orrs	r3, r1
 80022a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	699a      	ldr	r2, [r3, #24]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a2c      	ldr	r2, [pc, #176]	; (8002370 <UART_SetConfig+0x114>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d103      	bne.n	80022cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80022c4:	f7ff fbea 	bl	8001a9c <HAL_RCC_GetPCLK2Freq>
 80022c8:	60f8      	str	r0, [r7, #12]
 80022ca:	e002      	b.n	80022d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80022cc:	f7ff fbd2 	bl	8001a74 <HAL_RCC_GetPCLK1Freq>
 80022d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	4613      	mov	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	009a      	lsls	r2, r3, #2
 80022dc:	441a      	add	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e8:	4a22      	ldr	r2, [pc, #136]	; (8002374 <UART_SetConfig+0x118>)
 80022ea:	fba2 2303 	umull	r2, r3, r2, r3
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	0119      	lsls	r1, r3, #4
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	4613      	mov	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	009a      	lsls	r2, r3, #2
 80022fc:	441a      	add	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	fbb2 f2f3 	udiv	r2, r2, r3
 8002308:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <UART_SetConfig+0x118>)
 800230a:	fba3 0302 	umull	r0, r3, r3, r2
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	2064      	movs	r0, #100	; 0x64
 8002312:	fb00 f303 	mul.w	r3, r0, r3
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	011b      	lsls	r3, r3, #4
 800231a:	3332      	adds	r3, #50	; 0x32
 800231c:	4a15      	ldr	r2, [pc, #84]	; (8002374 <UART_SetConfig+0x118>)
 800231e:	fba2 2303 	umull	r2, r3, r2, r3
 8002322:	095b      	lsrs	r3, r3, #5
 8002324:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002328:	4419      	add	r1, r3
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	4613      	mov	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	009a      	lsls	r2, r3, #2
 8002334:	441a      	add	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <UART_SetConfig+0x118>)
 8002342:	fba3 0302 	umull	r0, r3, r3, r2
 8002346:	095b      	lsrs	r3, r3, #5
 8002348:	2064      	movs	r0, #100	; 0x64
 800234a:	fb00 f303 	mul.w	r3, r0, r3
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	3332      	adds	r3, #50	; 0x32
 8002354:	4a07      	ldr	r2, [pc, #28]	; (8002374 <UART_SetConfig+0x118>)
 8002356:	fba2 2303 	umull	r2, r3, r2, r3
 800235a:	095b      	lsrs	r3, r3, #5
 800235c:	f003 020f 	and.w	r2, r3, #15
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	440a      	add	r2, r1
 8002366:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002368:	bf00      	nop
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40013800 	.word	0x40013800
 8002374:	51eb851f 	.word	0x51eb851f

08002378 <memset>:
 8002378:	4603      	mov	r3, r0
 800237a:	4402      	add	r2, r0
 800237c:	4293      	cmp	r3, r2
 800237e:	d100      	bne.n	8002382 <memset+0xa>
 8002380:	4770      	bx	lr
 8002382:	f803 1b01 	strb.w	r1, [r3], #1
 8002386:	e7f9      	b.n	800237c <memset+0x4>

08002388 <__libc_init_array>:
 8002388:	b570      	push	{r4, r5, r6, lr}
 800238a:	2600      	movs	r6, #0
 800238c:	4d0c      	ldr	r5, [pc, #48]	; (80023c0 <__libc_init_array+0x38>)
 800238e:	4c0d      	ldr	r4, [pc, #52]	; (80023c4 <__libc_init_array+0x3c>)
 8002390:	1b64      	subs	r4, r4, r5
 8002392:	10a4      	asrs	r4, r4, #2
 8002394:	42a6      	cmp	r6, r4
 8002396:	d109      	bne.n	80023ac <__libc_init_array+0x24>
 8002398:	f000 f81a 	bl	80023d0 <_init>
 800239c:	2600      	movs	r6, #0
 800239e:	4d0a      	ldr	r5, [pc, #40]	; (80023c8 <__libc_init_array+0x40>)
 80023a0:	4c0a      	ldr	r4, [pc, #40]	; (80023cc <__libc_init_array+0x44>)
 80023a2:	1b64      	subs	r4, r4, r5
 80023a4:	10a4      	asrs	r4, r4, #2
 80023a6:	42a6      	cmp	r6, r4
 80023a8:	d105      	bne.n	80023b6 <__libc_init_array+0x2e>
 80023aa:	bd70      	pop	{r4, r5, r6, pc}
 80023ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80023b0:	4798      	blx	r3
 80023b2:	3601      	adds	r6, #1
 80023b4:	e7ee      	b.n	8002394 <__libc_init_array+0xc>
 80023b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80023ba:	4798      	blx	r3
 80023bc:	3601      	adds	r6, #1
 80023be:	e7f2      	b.n	80023a6 <__libc_init_array+0x1e>
 80023c0:	08002414 	.word	0x08002414
 80023c4:	08002414 	.word	0x08002414
 80023c8:	08002414 	.word	0x08002414
 80023cc:	08002418 	.word	0x08002418

080023d0 <_init>:
 80023d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d2:	bf00      	nop
 80023d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023d6:	bc08      	pop	{r3}
 80023d8:	469e      	mov	lr, r3
 80023da:	4770      	bx	lr

080023dc <_fini>:
 80023dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023de:	bf00      	nop
 80023e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023e2:	bc08      	pop	{r3}
 80023e4:	469e      	mov	lr, r3
 80023e6:	4770      	bx	lr
