
STM32F103C8T6_Deneme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007664  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08007778  08007778  00017778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bbc  08007bbc  000202c4  2**0
                  CONTENTS
  4 .ARM          00000000  08007bbc  08007bbc  000202c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007bbc  08007bbc  000202c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bbc  08007bbc  00017bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bc0  08007bc0  00017bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c4  20000000  08007bc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f0  200002c4  08007e88  000202c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008b4  08007e88  000208b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202ed  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d3d0  00000000  00000000  00020330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002279  00000000  00000000  0002d700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d68  00000000  00000000  0002f980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a71  00000000  00000000  000306e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018d7f  00000000  00000000  00031159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000112ef  00000000  00000000  00049ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c302  00000000  00000000  0005b1c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000048c8  00000000  00000000  000e74cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000ebd94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002c4 	.word	0x200002c4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800775c 	.word	0x0800775c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002c8 	.word	0x200002c8
 800014c:	0800775c 	.word	0x0800775c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <Set_Time>:
};

// ----------------------------------------------

void Set_Time()
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0

	uint8_t Comma_Trig=0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	71fb      	strb	r3, [r7, #7]
	uint16_t syc=0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	80bb      	strh	r3, [r7, #4]
/*  //ESKİ ALGORİTMA ++ÇALIŞIYOR
	Time.hh = ((GPGGA_Data[7]-'0')*10+(uint8_t)GPGGA_Data[8]-'0')+3; //GMT +3
	Time.mm = (GPGGA_Data[9]-'0')*10+(uint8_t)GPGGA_Data[10]-'0';
	Time.ss = (GPGGA_Data[11]-'0')*10+(uint8_t)GPGGA_Data[12]-'0';
*/
	Get_GGA();
 8000b36:	f000 fa7b 	bl	8001030 <Get_GGA>

	while(Comma_Trig<=0)//GPGGA_Data bufferındaki verilerin analizi ',' e göre yapılmıştır
 8000b3a:	e058      	b.n	8000bee <Set_Time+0xc6>
	{
		if(GPGGA_Data[syc]==',')
 8000b3c:	88bb      	ldrh	r3, [r7, #4]
 8000b3e:	4a30      	ldr	r2, [pc, #192]	; (8000c00 <Set_Time+0xd8>)
 8000b40:	5cd3      	ldrb	r3, [r2, r3]
 8000b42:	2b2c      	cmp	r3, #44	; 0x2c
 8000b44:	d150      	bne.n	8000be8 <Set_Time+0xc0>
		{
			if(GPGGA_Data[syc+1] == ',')//No data has received yet
 8000b46:	88bb      	ldrh	r3, [r7, #4]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	4a2d      	ldr	r2, [pc, #180]	; (8000c00 <Set_Time+0xd8>)
 8000b4c:	5cd3      	ldrb	r3, [r2, r3]
 8000b4e:	2b2c      	cmp	r3, #44	; 0x2c
 8000b50:	d109      	bne.n	8000b66 <Set_Time+0x3e>
			{
				Time.hh=0;
 8000b52:	4b2c      	ldr	r3, [pc, #176]	; (8000c04 <Set_Time+0xdc>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]
				Time.mm=0;
 8000b58:	4b2a      	ldr	r3, [pc, #168]	; (8000c04 <Set_Time+0xdc>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	705a      	strb	r2, [r3, #1]
				Time.ss=0;
 8000b5e:	4b29      	ldr	r3, [pc, #164]	; (8000c04 <Set_Time+0xdc>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	709a      	strb	r2, [r3, #2]
 8000b64:	e03e      	b.n	8000be4 <Set_Time+0xbc>

			}

			else
			{
				Time.hh= ((GPGGA_Data[syc+1]-'0')*10+(uint8_t)GPGGA_Data[syc+2]-'0')+3;
 8000b66:	88bb      	ldrh	r3, [r7, #4]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	4a25      	ldr	r2, [pc, #148]	; (8000c00 <Set_Time+0xd8>)
 8000b6c:	5cd3      	ldrb	r3, [r2, r3]
 8000b6e:	3b30      	subs	r3, #48	; 0x30
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	461a      	mov	r2, r3
 8000b74:	0092      	lsls	r2, r2, #2
 8000b76:	4413      	add	r3, r2
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	88bb      	ldrh	r3, [r7, #4]
 8000b7e:	3302      	adds	r3, #2
 8000b80:	491f      	ldr	r1, [pc, #124]	; (8000c00 <Set_Time+0xd8>)
 8000b82:	5ccb      	ldrb	r3, [r1, r3]
 8000b84:	4413      	add	r3, r2
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	3b2d      	subs	r3, #45	; 0x2d
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <Set_Time+0xdc>)
 8000b8e:	701a      	strb	r2, [r3, #0]
				Time.mm = (GPGGA_Data[syc+3]-'0')*10+(uint8_t)GPGGA_Data[syc+4]-'0';
 8000b90:	88bb      	ldrh	r3, [r7, #4]
 8000b92:	3303      	adds	r3, #3
 8000b94:	4a1a      	ldr	r2, [pc, #104]	; (8000c00 <Set_Time+0xd8>)
 8000b96:	5cd3      	ldrb	r3, [r2, r3]
 8000b98:	3b30      	subs	r3, #48	; 0x30
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	0092      	lsls	r2, r2, #2
 8000ba0:	4413      	add	r3, r2
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	88bb      	ldrh	r3, [r7, #4]
 8000ba8:	3304      	adds	r3, #4
 8000baa:	4915      	ldr	r1, [pc, #84]	; (8000c00 <Set_Time+0xd8>)
 8000bac:	5ccb      	ldrb	r3, [r1, r3]
 8000bae:	4413      	add	r3, r2
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	3b30      	subs	r3, #48	; 0x30
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <Set_Time+0xdc>)
 8000bb8:	705a      	strb	r2, [r3, #1]
				Time.ss = (GPGGA_Data[syc+5]-'0')*10+(uint8_t)GPGGA_Data[syc+6]-'0';
 8000bba:	88bb      	ldrh	r3, [r7, #4]
 8000bbc:	3305      	adds	r3, #5
 8000bbe:	4a10      	ldr	r2, [pc, #64]	; (8000c00 <Set_Time+0xd8>)
 8000bc0:	5cd3      	ldrb	r3, [r2, r3]
 8000bc2:	3b30      	subs	r3, #48	; 0x30
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	0092      	lsls	r2, r2, #2
 8000bca:	4413      	add	r3, r2
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	88bb      	ldrh	r3, [r7, #4]
 8000bd2:	3306      	adds	r3, #6
 8000bd4:	490a      	ldr	r1, [pc, #40]	; (8000c00 <Set_Time+0xd8>)
 8000bd6:	5ccb      	ldrb	r3, [r1, r3]
 8000bd8:	4413      	add	r3, r2
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	3b30      	subs	r3, #48	; 0x30
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <Set_Time+0xdc>)
 8000be2:	709a      	strb	r2, [r3, #2]
			}

			Comma_Trig=1;
 8000be4:	2301      	movs	r3, #1
 8000be6:	71fb      	strb	r3, [r7, #7]
		}

		syc++;
 8000be8:	88bb      	ldrh	r3, [r7, #4]
 8000bea:	3301      	adds	r3, #1
 8000bec:	80bb      	strh	r3, [r7, #4]
	while(Comma_Trig<=0)//GPGGA_Data bufferındaki verilerin analizi ',' e göre yapılmıştır
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d0a3      	beq.n	8000b3c <Set_Time+0x14>
	}

}
 8000bf4:	bf00      	nop
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000344 	.word	0x20000344
 8000c04:	200003ac 	.word	0x200003ac

08000c08 <Set_Location>:
void Send_Time()
{
	SIM800l_Send_Data(Time.mm);
}
void Set_Location()
{
 8000c08:	b5b0      	push	{r4, r5, r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0

	uint8_t Comma_Trig=0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	71fb      	strb	r3, [r7, #7]
	uint16_t syc=0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	80bb      	strh	r3, [r7, #4]

	while(Comma_Trig<2)//GPGGA_Data bufferındaki verilerin analizi ',' e göre yapılmıştır
 8000c16:	e00a      	b.n	8000c2e <Set_Location+0x26>
	{

		if(GPGGA_Data[syc]==',')
 8000c18:	88bb      	ldrh	r3, [r7, #4]
 8000c1a:	4a0c      	ldr	r2, [pc, #48]	; (8000c4c <Set_Location+0x44>)
 8000c1c:	5cd3      	ldrb	r3, [r2, r3]
 8000c1e:	2b2c      	cmp	r3, #44	; 0x2c
 8000c20:	d102      	bne.n	8000c28 <Set_Location+0x20>
		{



			Comma_Trig++;
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	3301      	adds	r3, #1
 8000c26:	71fb      	strb	r3, [r7, #7]
		}
			syc++;
 8000c28:	88bb      	ldrh	r3, [r7, #4]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	80bb      	strh	r3, [r7, #4]
	while(Comma_Trig<2)//GPGGA_Data bufferındaki verilerin analizi ',' e göre yapılmıştır
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d9f1      	bls.n	8000c18 <Set_Location+0x10>
	}


	if(Comma_Trig==2)
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d10f      	bne.n	8000c5a <Set_Location+0x52>
	{
		if(GPGGA_Data[syc]==',')//Any very hasn't received yet
 8000c3a:	88bb      	ldrh	r3, [r7, #4]
 8000c3c:	4a03      	ldr	r2, [pc, #12]	; (8000c4c <Set_Location+0x44>)
 8000c3e:	5cd3      	ldrb	r3, [r2, r3]
 8000c40:	2b2c      	cmp	r3, #44	; 0x2c
 8000c42:	d107      	bne.n	8000c54 <Set_Location+0x4c>
		{
			GPS_Location_Data_Received = false;
 8000c44:	4b02      	ldr	r3, [pc, #8]	; (8000c50 <Set_Location+0x48>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
 8000c4a:	e006      	b.n	8000c5a <Set_Location+0x52>
 8000c4c:	20000344 	.word	0x20000344
 8000c50:	200003a9 	.word	0x200003a9
		}
		else GPS_Location_Data_Received = true;
 8000c54:	4bdc      	ldr	r3, [pc, #880]	; (8000fc8 <Set_Location+0x3c0>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
	Coord.L_hemisphere=GPGGA_Data[syc+11];
	Coord.longitude= (GPGGA_Data[syc+14]-'0')*10 + (GPGGA_Data[syc+15]-'0')*1 + (GPGGA_Data[syc+16]-'0')*0.1 + (GPGGA_Data[syc+17]-'0')*0.01 + (GPGGA_Data[syc+18]-'0')*0.001 + (GPGGA_Data[syc+19]-'0')*0.0001 + (GPGGA_Data[syc+20]-'0')*0.00001 + (GPGGA_Data[syc+21]-'0')*0.000001 + (GPGGA_Data[syc+22]-'0')*0.0000001 + (GPGGA_Data-'0')[syc+23]*0.00000001;
	Coord.T_hemisphere = GPGGA_Data[syc+25];
*/
//----------------------------------
	Coord.latitude= (GPGGA_Data[17]-'0')*10 + (GPGGA_Data[18]-'0')*1 + (GPGGA_Data[19]-'0')*0.1 + (GPGGA_Data[20]-'0')*0.01 + (GPGGA_Data[21]-'0')*0.001 + (GPGGA_Data[22]-'0')*0.0001 + (GPGGA_Data[23]-'0')*0.00001 + (GPGGA_Data[24]-'0')*0.000001 + (GPGGA_Data[25]-'0')*0.0000001 + (GPGGA_Data[26]-'0')*0.00000001;
 8000c5a:	4bdc      	ldr	r3, [pc, #880]	; (8000fcc <Set_Location+0x3c4>)
 8000c5c:	7c5b      	ldrb	r3, [r3, #17]
 8000c5e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000c62:	4613      	mov	r3, r2
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	4413      	add	r3, r2
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	4bd7      	ldr	r3, [pc, #860]	; (8000fcc <Set_Location+0x3c4>)
 8000c6e:	7c9b      	ldrb	r3, [r3, #18]
 8000c70:	3b30      	subs	r3, #48	; 0x30
 8000c72:	4413      	add	r3, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fbc5 	bl	8000404 <__aeabi_i2d>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	460d      	mov	r5, r1
 8000c7e:	4bd3      	ldr	r3, [pc, #844]	; (8000fcc <Set_Location+0x3c4>)
 8000c80:	7cdb      	ldrb	r3, [r3, #19]
 8000c82:	3b30      	subs	r3, #48	; 0x30
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fbbd 	bl	8000404 <__aeabi_i2d>
 8000c8a:	a3bf      	add	r3, pc, #764	; (adr r3, 8000f88 <Set_Location+0x380>)
 8000c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c90:	f7ff fc22 	bl	80004d8 <__aeabi_dmul>
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	f7ff fa66 	bl	800016c <__adddf3>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	4614      	mov	r4, r2
 8000ca6:	461d      	mov	r5, r3
 8000ca8:	4bc8      	ldr	r3, [pc, #800]	; (8000fcc <Set_Location+0x3c4>)
 8000caa:	7d1b      	ldrb	r3, [r3, #20]
 8000cac:	3b30      	subs	r3, #48	; 0x30
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fba8 	bl	8000404 <__aeabi_i2d>
 8000cb4:	a3b6      	add	r3, pc, #728	; (adr r3, 8000f90 <Set_Location+0x388>)
 8000cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cba:	f7ff fc0d 	bl	80004d8 <__aeabi_dmul>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	4620      	mov	r0, r4
 8000cc4:	4629      	mov	r1, r5
 8000cc6:	f7ff fa51 	bl	800016c <__adddf3>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	460b      	mov	r3, r1
 8000cce:	4614      	mov	r4, r2
 8000cd0:	461d      	mov	r5, r3
 8000cd2:	4bbe      	ldr	r3, [pc, #760]	; (8000fcc <Set_Location+0x3c4>)
 8000cd4:	7d5b      	ldrb	r3, [r3, #21]
 8000cd6:	3b30      	subs	r3, #48	; 0x30
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fb93 	bl	8000404 <__aeabi_i2d>
 8000cde:	a3ae      	add	r3, pc, #696	; (adr r3, 8000f98 <Set_Location+0x390>)
 8000ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce4:	f7ff fbf8 	bl	80004d8 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4620      	mov	r0, r4
 8000cee:	4629      	mov	r1, r5
 8000cf0:	f7ff fa3c 	bl	800016c <__adddf3>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	4614      	mov	r4, r2
 8000cfa:	461d      	mov	r5, r3
 8000cfc:	4bb3      	ldr	r3, [pc, #716]	; (8000fcc <Set_Location+0x3c4>)
 8000cfe:	7d9b      	ldrb	r3, [r3, #22]
 8000d00:	3b30      	subs	r3, #48	; 0x30
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fb7e 	bl	8000404 <__aeabi_i2d>
 8000d08:	a3a5      	add	r3, pc, #660	; (adr r3, 8000fa0 <Set_Location+0x398>)
 8000d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0e:	f7ff fbe3 	bl	80004d8 <__aeabi_dmul>
 8000d12:	4602      	mov	r2, r0
 8000d14:	460b      	mov	r3, r1
 8000d16:	4620      	mov	r0, r4
 8000d18:	4629      	mov	r1, r5
 8000d1a:	f7ff fa27 	bl	800016c <__adddf3>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	460b      	mov	r3, r1
 8000d22:	4614      	mov	r4, r2
 8000d24:	461d      	mov	r5, r3
 8000d26:	4ba9      	ldr	r3, [pc, #676]	; (8000fcc <Set_Location+0x3c4>)
 8000d28:	7ddb      	ldrb	r3, [r3, #23]
 8000d2a:	3b30      	subs	r3, #48	; 0x30
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fb69 	bl	8000404 <__aeabi_i2d>
 8000d32:	a39d      	add	r3, pc, #628	; (adr r3, 8000fa8 <Set_Location+0x3a0>)
 8000d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d38:	f7ff fbce 	bl	80004d8 <__aeabi_dmul>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	4620      	mov	r0, r4
 8000d42:	4629      	mov	r1, r5
 8000d44:	f7ff fa12 	bl	800016c <__adddf3>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4614      	mov	r4, r2
 8000d4e:	461d      	mov	r5, r3
 8000d50:	4b9e      	ldr	r3, [pc, #632]	; (8000fcc <Set_Location+0x3c4>)
 8000d52:	7e1b      	ldrb	r3, [r3, #24]
 8000d54:	3b30      	subs	r3, #48	; 0x30
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fb54 	bl	8000404 <__aeabi_i2d>
 8000d5c:	a394      	add	r3, pc, #592	; (adr r3, 8000fb0 <Set_Location+0x3a8>)
 8000d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d62:	f7ff fbb9 	bl	80004d8 <__aeabi_dmul>
 8000d66:	4602      	mov	r2, r0
 8000d68:	460b      	mov	r3, r1
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	4629      	mov	r1, r5
 8000d6e:	f7ff f9fd 	bl	800016c <__adddf3>
 8000d72:	4602      	mov	r2, r0
 8000d74:	460b      	mov	r3, r1
 8000d76:	4614      	mov	r4, r2
 8000d78:	461d      	mov	r5, r3
 8000d7a:	4b94      	ldr	r3, [pc, #592]	; (8000fcc <Set_Location+0x3c4>)
 8000d7c:	7e5b      	ldrb	r3, [r3, #25]
 8000d7e:	3b30      	subs	r3, #48	; 0x30
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fb3f 	bl	8000404 <__aeabi_i2d>
 8000d86:	a38c      	add	r3, pc, #560	; (adr r3, 8000fb8 <Set_Location+0x3b0>)
 8000d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d8c:	f7ff fba4 	bl	80004d8 <__aeabi_dmul>
 8000d90:	4602      	mov	r2, r0
 8000d92:	460b      	mov	r3, r1
 8000d94:	4620      	mov	r0, r4
 8000d96:	4629      	mov	r1, r5
 8000d98:	f7ff f9e8 	bl	800016c <__adddf3>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	460b      	mov	r3, r1
 8000da0:	4614      	mov	r4, r2
 8000da2:	461d      	mov	r5, r3
 8000da4:	4b89      	ldr	r3, [pc, #548]	; (8000fcc <Set_Location+0x3c4>)
 8000da6:	7e9b      	ldrb	r3, [r3, #26]
 8000da8:	3b30      	subs	r3, #48	; 0x30
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fb2a 	bl	8000404 <__aeabi_i2d>
 8000db0:	a383      	add	r3, pc, #524	; (adr r3, 8000fc0 <Set_Location+0x3b8>)
 8000db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db6:	f7ff fb8f 	bl	80004d8 <__aeabi_dmul>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	4629      	mov	r1, r5
 8000dc2:	f7ff f9d3 	bl	800016c <__adddf3>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	460b      	mov	r3, r1
 8000dca:	4610      	mov	r0, r2
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f7ff fe5b 	bl	8000a88 <__aeabi_d2f>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4a7e      	ldr	r2, [pc, #504]	; (8000fd0 <Set_Location+0x3c8>)
 8000dd6:	6013      	str	r3, [r2, #0]
	Coord.L_hemisphere=GPGGA_Data[28];
 8000dd8:	4b7c      	ldr	r3, [pc, #496]	; (8000fcc <Set_Location+0x3c4>)
 8000dda:	7f1a      	ldrb	r2, [r3, #28]
 8000ddc:	4b7c      	ldr	r3, [pc, #496]	; (8000fd0 <Set_Location+0x3c8>)
 8000dde:	711a      	strb	r2, [r3, #4]
	Coord.longitude= (GPGGA_Data[31]-'0')*10 + (GPGGA_Data[32]-'0')*1 + (GPGGA_Data[33]-'0')*0.1 + (GPGGA_Data[34]-'0')*0.01 + (GPGGA_Data[35]-'0')*0.001 + (GPGGA_Data[36]-'0')*0.0001 + (GPGGA_Data[37]-'0')*0.00001 + (GPGGA_Data[38]-'0')*0.000001 + (GPGGA_Data[39]-'0')*0.0000001 + (GPGGA_Data-'0')[40]*0.00000001;
 8000de0:	4b7a      	ldr	r3, [pc, #488]	; (8000fcc <Set_Location+0x3c4>)
 8000de2:	7fdb      	ldrb	r3, [r3, #31]
 8000de4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000de8:	4613      	mov	r3, r2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4413      	add	r3, r2
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b76      	ldr	r3, [pc, #472]	; (8000fcc <Set_Location+0x3c4>)
 8000df4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000df8:	3b30      	subs	r3, #48	; 0x30
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fb01 	bl	8000404 <__aeabi_i2d>
 8000e02:	4604      	mov	r4, r0
 8000e04:	460d      	mov	r5, r1
 8000e06:	4b71      	ldr	r3, [pc, #452]	; (8000fcc <Set_Location+0x3c4>)
 8000e08:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e0c:	3b30      	subs	r3, #48	; 0x30
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff faf8 	bl	8000404 <__aeabi_i2d>
 8000e14:	a35c      	add	r3, pc, #368	; (adr r3, 8000f88 <Set_Location+0x380>)
 8000e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1a:	f7ff fb5d 	bl	80004d8 <__aeabi_dmul>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	460b      	mov	r3, r1
 8000e22:	4620      	mov	r0, r4
 8000e24:	4629      	mov	r1, r5
 8000e26:	f7ff f9a1 	bl	800016c <__adddf3>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	4614      	mov	r4, r2
 8000e30:	461d      	mov	r5, r3
 8000e32:	4b66      	ldr	r3, [pc, #408]	; (8000fcc <Set_Location+0x3c4>)
 8000e34:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000e38:	3b30      	subs	r3, #48	; 0x30
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fae2 	bl	8000404 <__aeabi_i2d>
 8000e40:	a353      	add	r3, pc, #332	; (adr r3, 8000f90 <Set_Location+0x388>)
 8000e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e46:	f7ff fb47 	bl	80004d8 <__aeabi_dmul>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	4620      	mov	r0, r4
 8000e50:	4629      	mov	r1, r5
 8000e52:	f7ff f98b 	bl	800016c <__adddf3>
 8000e56:	4602      	mov	r2, r0
 8000e58:	460b      	mov	r3, r1
 8000e5a:	4614      	mov	r4, r2
 8000e5c:	461d      	mov	r5, r3
 8000e5e:	4b5b      	ldr	r3, [pc, #364]	; (8000fcc <Set_Location+0x3c4>)
 8000e60:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000e64:	3b30      	subs	r3, #48	; 0x30
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff facc 	bl	8000404 <__aeabi_i2d>
 8000e6c:	a34a      	add	r3, pc, #296	; (adr r3, 8000f98 <Set_Location+0x390>)
 8000e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e72:	f7ff fb31 	bl	80004d8 <__aeabi_dmul>
 8000e76:	4602      	mov	r2, r0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	4629      	mov	r1, r5
 8000e7e:	f7ff f975 	bl	800016c <__adddf3>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	4614      	mov	r4, r2
 8000e88:	461d      	mov	r5, r3
 8000e8a:	4b50      	ldr	r3, [pc, #320]	; (8000fcc <Set_Location+0x3c4>)
 8000e8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e90:	3b30      	subs	r3, #48	; 0x30
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fab6 	bl	8000404 <__aeabi_i2d>
 8000e98:	a341      	add	r3, pc, #260	; (adr r3, 8000fa0 <Set_Location+0x398>)
 8000e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9e:	f7ff fb1b 	bl	80004d8 <__aeabi_dmul>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	4620      	mov	r0, r4
 8000ea8:	4629      	mov	r1, r5
 8000eaa:	f7ff f95f 	bl	800016c <__adddf3>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	4614      	mov	r4, r2
 8000eb4:	461d      	mov	r5, r3
 8000eb6:	4b45      	ldr	r3, [pc, #276]	; (8000fcc <Set_Location+0x3c4>)
 8000eb8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ebc:	3b30      	subs	r3, #48	; 0x30
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff faa0 	bl	8000404 <__aeabi_i2d>
 8000ec4:	a338      	add	r3, pc, #224	; (adr r3, 8000fa8 <Set_Location+0x3a0>)
 8000ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eca:	f7ff fb05 	bl	80004d8 <__aeabi_dmul>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	4620      	mov	r0, r4
 8000ed4:	4629      	mov	r1, r5
 8000ed6:	f7ff f949 	bl	800016c <__adddf3>
 8000eda:	4602      	mov	r2, r0
 8000edc:	460b      	mov	r3, r1
 8000ede:	4614      	mov	r4, r2
 8000ee0:	461d      	mov	r5, r3
 8000ee2:	4b3a      	ldr	r3, [pc, #232]	; (8000fcc <Set_Location+0x3c4>)
 8000ee4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000ee8:	3b30      	subs	r3, #48	; 0x30
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fa8a 	bl	8000404 <__aeabi_i2d>
 8000ef0:	a32f      	add	r3, pc, #188	; (adr r3, 8000fb0 <Set_Location+0x3a8>)
 8000ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef6:	f7ff faef 	bl	80004d8 <__aeabi_dmul>
 8000efa:	4602      	mov	r2, r0
 8000efc:	460b      	mov	r3, r1
 8000efe:	4620      	mov	r0, r4
 8000f00:	4629      	mov	r1, r5
 8000f02:	f7ff f933 	bl	800016c <__adddf3>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4614      	mov	r4, r2
 8000f0c:	461d      	mov	r5, r3
 8000f0e:	4b2f      	ldr	r3, [pc, #188]	; (8000fcc <Set_Location+0x3c4>)
 8000f10:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000f14:	3b30      	subs	r3, #48	; 0x30
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fa74 	bl	8000404 <__aeabi_i2d>
 8000f1c:	a326      	add	r3, pc, #152	; (adr r3, 8000fb8 <Set_Location+0x3b0>)
 8000f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f22:	f7ff fad9 	bl	80004d8 <__aeabi_dmul>
 8000f26:	4602      	mov	r2, r0
 8000f28:	460b      	mov	r3, r1
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	4629      	mov	r1, r5
 8000f2e:	f7ff f91d 	bl	800016c <__adddf3>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	4614      	mov	r4, r2
 8000f38:	461d      	mov	r5, r3
 8000f3a:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <Set_Location+0x3c4>)
 8000f3c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fa5f 	bl	8000404 <__aeabi_i2d>
 8000f46:	a31e      	add	r3, pc, #120	; (adr r3, 8000fc0 <Set_Location+0x3b8>)
 8000f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4c:	f7ff fac4 	bl	80004d8 <__aeabi_dmul>
 8000f50:	4602      	mov	r2, r0
 8000f52:	460b      	mov	r3, r1
 8000f54:	4620      	mov	r0, r4
 8000f56:	4629      	mov	r1, r5
 8000f58:	f7ff f908 	bl	800016c <__adddf3>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4610      	mov	r0, r2
 8000f62:	4619      	mov	r1, r3
 8000f64:	f7ff fd90 	bl	8000a88 <__aeabi_d2f>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	4a19      	ldr	r2, [pc, #100]	; (8000fd0 <Set_Location+0x3c8>)
 8000f6c:	6093      	str	r3, [r2, #8]
	Coord.T_hemisphere = GPGGA_Data[42];
 8000f6e:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <Set_Location+0x3c4>)
 8000f70:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <Set_Location+0x3c8>)
 8000f76:	731a      	strb	r2, [r3, #12]

	if(Coord.L_hemisphere == 'N' || Coord.L_hemisphere == 'S' && Coord.T_hemisphere == 'E'  || Coord.T_hemisphere == 'W')
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <Set_Location+0x3c8>)
 8000f7a:	791b      	ldrb	r3, [r3, #4]
 8000f7c:	2b4e      	cmp	r3, #78	; 0x4e
 8000f7e:	d032      	beq.n	8000fe6 <Set_Location+0x3de>
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <Set_Location+0x3c8>)
 8000f82:	791b      	ldrb	r3, [r3, #4]
 8000f84:	2b53      	cmp	r3, #83	; 0x53
 8000f86:	e025      	b.n	8000fd4 <Set_Location+0x3cc>
 8000f88:	9999999a 	.word	0x9999999a
 8000f8c:	3fb99999 	.word	0x3fb99999
 8000f90:	47ae147b 	.word	0x47ae147b
 8000f94:	3f847ae1 	.word	0x3f847ae1
 8000f98:	d2f1a9fc 	.word	0xd2f1a9fc
 8000f9c:	3f50624d 	.word	0x3f50624d
 8000fa0:	eb1c432d 	.word	0xeb1c432d
 8000fa4:	3f1a36e2 	.word	0x3f1a36e2
 8000fa8:	88e368f1 	.word	0x88e368f1
 8000fac:	3ee4f8b5 	.word	0x3ee4f8b5
 8000fb0:	a0b5ed8d 	.word	0xa0b5ed8d
 8000fb4:	3eb0c6f7 	.word	0x3eb0c6f7
 8000fb8:	9abcaf48 	.word	0x9abcaf48
 8000fbc:	3e7ad7f2 	.word	0x3e7ad7f2
 8000fc0:	e2308c3a 	.word	0xe2308c3a
 8000fc4:	3e45798e 	.word	0x3e45798e
 8000fc8:	200003a9 	.word	0x200003a9
 8000fcc:	20000344 	.word	0x20000344
 8000fd0:	200003bc 	.word	0x200003bc
 8000fd4:	d103      	bne.n	8000fde <Set_Location+0x3d6>
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <Set_Location+0x3f8>)
 8000fd8:	7b1b      	ldrb	r3, [r3, #12]
 8000fda:	2b45      	cmp	r3, #69	; 0x45
 8000fdc:	d003      	beq.n	8000fe6 <Set_Location+0x3de>
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <Set_Location+0x3f8>)
 8000fe0:	7b1b      	ldrb	r3, [r3, #12]
 8000fe2:	2b57      	cmp	r3, #87	; 0x57
 8000fe4:	d103      	bne.n	8000fee <Set_Location+0x3e6>
	{
		GPS_Connection_Stat = true;
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <Set_Location+0x3fc>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	701a      	strb	r2, [r3, #0]
 8000fec:	e003      	b.n	8000ff6 <Set_Location+0x3ee>
	}
	else GPS_Connection_Stat = false;
 8000fee:	4b05      	ldr	r3, [pc, #20]	; (8001004 <Set_Location+0x3fc>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bdb0      	pop	{r4, r5, r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200003bc 	.word	0x200003bc
 8001004:	200003a8 	.word	0x200003a8

08001008 <Send_Location>:
void Send_Location()
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	//SIM800l_Send_Data(Coord.latitude,Coord.longitude);
	SIM800l_Send_Location(5.22,9.44);
 800100c:	a304      	add	r3, pc, #16	; (adr r3, 8001020 <Send_Location+0x18>)
 800100e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001012:	a105      	add	r1, pc, #20	; (adr r1, 8001028 <Send_Location+0x20>)
 8001014:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001018:	f000 f9f4 	bl	8001404 <SIM800l_Send_Location>
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	ae147ae1 	.word	0xae147ae1
 8001024:	4022e147 	.word	0x4022e147
 8001028:	ae147ae1 	.word	0xae147ae1
 800102c:	4014e147 	.word	0x4014e147

08001030 <Get_GGA>:
	Reorder_data(Sp_finder(GPRMC),GPRMC);

}

void Get_GGA()//GLOBAL POSITIONING SYSTEM FIX DATA
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	//HAL_UART_Receive(&huart2,(uint8_t*)Buffer,500, 1000);
	Reorder_data(Sp_finder(GPGGA),GPGGA);
 8001034:	2002      	movs	r0, #2
 8001036:	f000 f807 	bl	8001048 <Sp_finder>
 800103a:	4603      	mov	r3, r0
 800103c:	2102      	movs	r1, #2
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f890 	bl	8001164 <Reorder_data>
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}

08001048 <Sp_finder>:

uint16_t Sp_finder(uint8_t s_case)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
	switch(s_case)
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2b05      	cmp	r3, #5
 8001056:	d87b      	bhi.n	8001150 <Sp_finder+0x108>
 8001058:	a201      	add	r2, pc, #4	; (adr r2, 8001060 <Sp_finder+0x18>)
 800105a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105e:	bf00      	nop
 8001060:	08001079 	.word	0x08001079
 8001064:	08001151 	.word	0x08001151
 8001068:	080010e5 	.word	0x080010e5
 800106c:	08001151 	.word	0x08001151
 8001070:	08001151 	.word	0x08001151
 8001074:	08001151 	.word	0x08001151
	{

		case 0:  //GPRMC
			for(int i=0;i<500;i++)
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	e02d      	b.n	80010da <Sp_finder+0x92>
			{
				if(Buffer[i]== '$')
 800107e:	4a37      	ldr	r2, [pc, #220]	; (800115c <Sp_finder+0x114>)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b24      	cmp	r3, #36	; 0x24
 8001088:	d124      	bne.n	80010d4 <Sp_finder+0x8c>
				{
					if(Buffer[i+1]== 'G')
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	3301      	adds	r3, #1
 800108e:	4a33      	ldr	r2, [pc, #204]	; (800115c <Sp_finder+0x114>)
 8001090:	5cd3      	ldrb	r3, [r2, r3]
 8001092:	2b47      	cmp	r3, #71	; 0x47
 8001094:	d11e      	bne.n	80010d4 <Sp_finder+0x8c>
					{
						if(Buffer[i+2]== 'P')
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	3302      	adds	r3, #2
 800109a:	4a30      	ldr	r2, [pc, #192]	; (800115c <Sp_finder+0x114>)
 800109c:	5cd3      	ldrb	r3, [r2, r3]
 800109e:	2b50      	cmp	r3, #80	; 0x50
 80010a0:	d118      	bne.n	80010d4 <Sp_finder+0x8c>
						{
							if(Buffer[i+3]== 'R')
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	3303      	adds	r3, #3
 80010a6:	4a2d      	ldr	r2, [pc, #180]	; (800115c <Sp_finder+0x114>)
 80010a8:	5cd3      	ldrb	r3, [r2, r3]
 80010aa:	2b52      	cmp	r3, #82	; 0x52
 80010ac:	d112      	bne.n	80010d4 <Sp_finder+0x8c>
							{
								if(Buffer[i+4]== 'M')
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	3304      	adds	r3, #4
 80010b2:	4a2a      	ldr	r2, [pc, #168]	; (800115c <Sp_finder+0x114>)
 80010b4:	5cd3      	ldrb	r3, [r2, r3]
 80010b6:	2b4d      	cmp	r3, #77	; 0x4d
 80010b8:	d10c      	bne.n	80010d4 <Sp_finder+0x8c>
								{
									if(Buffer[i+5]== 'C')
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3305      	adds	r3, #5
 80010be:	4a27      	ldr	r2, [pc, #156]	; (800115c <Sp_finder+0x114>)
 80010c0:	5cd3      	ldrb	r3, [r2, r3]
 80010c2:	2b43      	cmp	r3, #67	; 0x43
 80010c4:	d106      	bne.n	80010d4 <Sp_finder+0x8c>
									{
										Strting_point=i;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	4b25      	ldr	r3, [pc, #148]	; (8001160 <Sp_finder+0x118>)
 80010cc:	801a      	strh	r2, [r3, #0]
										return (uint16_t)i;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	e03e      	b.n	8001152 <Sp_finder+0x10a>
			for(int i=0;i<500;i++)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	3301      	adds	r3, #1
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010e0:	dbcd      	blt.n	800107e <Sp_finder+0x36>
							}
						}
					}
				}
			}
			break;
 80010e2:	e036      	b.n	8001152 <Sp_finder+0x10a>

			return;
			break;

		case 2://GPGGA
			for(int i=0;i<500;i++)
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	e02d      	b.n	8001146 <Sp_finder+0xfe>
			{
				if(Buffer[i]== '$')
 80010ea:	4a1c      	ldr	r2, [pc, #112]	; (800115c <Sp_finder+0x114>)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	4413      	add	r3, r2
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b24      	cmp	r3, #36	; 0x24
 80010f4:	d124      	bne.n	8001140 <Sp_finder+0xf8>
				{
					if(Buffer[i+1]== 'G')
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	3301      	adds	r3, #1
 80010fa:	4a18      	ldr	r2, [pc, #96]	; (800115c <Sp_finder+0x114>)
 80010fc:	5cd3      	ldrb	r3, [r2, r3]
 80010fe:	2b47      	cmp	r3, #71	; 0x47
 8001100:	d11e      	bne.n	8001140 <Sp_finder+0xf8>
					{
						if(Buffer[i+2]== 'P')
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	3302      	adds	r3, #2
 8001106:	4a15      	ldr	r2, [pc, #84]	; (800115c <Sp_finder+0x114>)
 8001108:	5cd3      	ldrb	r3, [r2, r3]
 800110a:	2b50      	cmp	r3, #80	; 0x50
 800110c:	d118      	bne.n	8001140 <Sp_finder+0xf8>
						{
							if(Buffer[i+3]== 'G')
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	3303      	adds	r3, #3
 8001112:	4a12      	ldr	r2, [pc, #72]	; (800115c <Sp_finder+0x114>)
 8001114:	5cd3      	ldrb	r3, [r2, r3]
 8001116:	2b47      	cmp	r3, #71	; 0x47
 8001118:	d112      	bne.n	8001140 <Sp_finder+0xf8>
							{
								if(Buffer[i+4]== 'G')
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	3304      	adds	r3, #4
 800111e:	4a0f      	ldr	r2, [pc, #60]	; (800115c <Sp_finder+0x114>)
 8001120:	5cd3      	ldrb	r3, [r2, r3]
 8001122:	2b47      	cmp	r3, #71	; 0x47
 8001124:	d10c      	bne.n	8001140 <Sp_finder+0xf8>
								{
									if(Buffer[i+5]== 'A')
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	3305      	adds	r3, #5
 800112a:	4a0c      	ldr	r2, [pc, #48]	; (800115c <Sp_finder+0x114>)
 800112c:	5cd3      	ldrb	r3, [r2, r3]
 800112e:	2b41      	cmp	r3, #65	; 0x41
 8001130:	d106      	bne.n	8001140 <Sp_finder+0xf8>
									{
										Strting_point=i;
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	b29a      	uxth	r2, r3
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <Sp_finder+0x118>)
 8001138:	801a      	strh	r2, [r3, #0]
										return (uint16_t)i;
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	b29b      	uxth	r3, r3
 800113e:	e008      	b.n	8001152 <Sp_finder+0x10a>
			for(int i=0;i<500;i++)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	3301      	adds	r3, #1
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800114c:	dbcd      	blt.n	80010ea <Sp_finder+0xa2>
							}
						}
					}
				}
			}
			return;
 800114e:	e000      	b.n	8001152 <Sp_finder+0x10a>

			return;
			break;

		default:
			return;
 8001150:	bf00      	nop
			break;

	}

}
 8001152:	4618      	mov	r0, r3
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	2000056c 	.word	0x2000056c
 8001160:	200003cc 	.word	0x200003cc

08001164 <Reorder_data>:

void Reorder_data(uint16_t sp,uint8_t s_case)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	460a      	mov	r2, r1
 800116e:	80fb      	strh	r3, [r7, #6]
 8001170:	4613      	mov	r3, r2
 8001172:	717b      	strb	r3, [r7, #5]
	uint16_t syc=0;
 8001174:	2300      	movs	r3, #0
 8001176:	81fb      	strh	r3, [r7, #14]
	while(Buffer[syc]!='\r'&& Buffer[syc+1]!='\n')
 8001178:	e027      	b.n	80011ca <Reorder_data+0x66>
	{

		syc++;
 800117a:	89fb      	ldrh	r3, [r7, #14]
 800117c:	3301      	adds	r3, #1
 800117e:	81fb      	strh	r3, [r7, #14]
		sp++;
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	3301      	adds	r3, #1
 8001184:	80fb      	strh	r3, [r7, #6]

		switch(s_case)
 8001186:	797b      	ldrb	r3, [r7, #5]
 8001188:	2b05      	cmp	r3, #5
 800118a:	d81d      	bhi.n	80011c8 <Reorder_data+0x64>
 800118c:	a201      	add	r2, pc, #4	; (adr r2, 8001194 <Reorder_data+0x30>)
 800118e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001192:	bf00      	nop
 8001194:	080011ad 	.word	0x080011ad
 8001198:	080011cb 	.word	0x080011cb
 800119c:	080011bb 	.word	0x080011bb
 80011a0:	080011cb 	.word	0x080011cb
 80011a4:	080011cb 	.word	0x080011cb
 80011a8:	080011cb 	.word	0x080011cb
		{

			case 0:
				GPRMC_Data[syc]=Buffer[sp];
 80011ac:	88fa      	ldrh	r2, [r7, #6]
 80011ae:	89fb      	ldrh	r3, [r7, #14]
 80011b0:	490e      	ldr	r1, [pc, #56]	; (80011ec <Reorder_data+0x88>)
 80011b2:	5c89      	ldrb	r1, [r1, r2]
 80011b4:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <Reorder_data+0x8c>)
 80011b6:	54d1      	strb	r1, [r2, r3]
				break;
 80011b8:	e007      	b.n	80011ca <Reorder_data+0x66>


				break;

			case 2:
				GPGGA_Data[syc]=Buffer[sp];
 80011ba:	88fa      	ldrh	r2, [r7, #6]
 80011bc:	89fb      	ldrh	r3, [r7, #14]
 80011be:	490b      	ldr	r1, [pc, #44]	; (80011ec <Reorder_data+0x88>)
 80011c0:	5c89      	ldrb	r1, [r1, r2]
 80011c2:	4a0c      	ldr	r2, [pc, #48]	; (80011f4 <Reorder_data+0x90>)
 80011c4:	54d1      	strb	r1, [r2, r3]

				break;
 80011c6:	e000      	b.n	80011ca <Reorder_data+0x66>

				break;

			default:

				break;
 80011c8:	bf00      	nop
	while(Buffer[syc]!='\r'&& Buffer[syc+1]!='\n')
 80011ca:	89fb      	ldrh	r3, [r7, #14]
 80011cc:	4a07      	ldr	r2, [pc, #28]	; (80011ec <Reorder_data+0x88>)
 80011ce:	5cd3      	ldrb	r3, [r2, r3]
 80011d0:	2b0d      	cmp	r3, #13
 80011d2:	d005      	beq.n	80011e0 <Reorder_data+0x7c>
 80011d4:	89fb      	ldrh	r3, [r7, #14]
 80011d6:	3301      	adds	r3, #1
 80011d8:	4a04      	ldr	r2, [pc, #16]	; (80011ec <Reorder_data+0x88>)
 80011da:	5cd3      	ldrb	r3, [r2, r3]
 80011dc:	2b0a      	cmp	r3, #10
 80011de:	d1cc      	bne.n	800117a <Reorder_data+0x16>

		}

	}
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	2000056c 	.word	0x2000056c
 80011f0:	200002e0 	.word	0x200002e0
 80011f4:	20000344 	.word	0x20000344

080011f8 <SIM800_Init>:
;
//------------------------


void SIM800_Init()//HER BİR KOMUT İÇİN KONTROL MEKANİZMASI EKLENECEK
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT+CIPSHUT --
 80011fc:	4876      	ldr	r0, [pc, #472]	; (80013d8 <SIM800_Init+0x1e0>)
 80011fe:	f7fe ffa7 	bl	8000150 <strlen>
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	2100      	movs	r1, #0
 8001208:	4873      	ldr	r0, [pc, #460]	; (80013d8 <SIM800_Init+0x1e0>)
 800120a:	f004 f9bc 	bl	8005586 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command5,strlen(Command5),1000);
 800120e:	4873      	ldr	r0, [pc, #460]	; (80013dc <SIM800_Init+0x1e4>)
 8001210:	f7fe ff9e 	bl	8000150 <strlen>
 8001214:	4603      	mov	r3, r0
 8001216:	b29a      	uxth	r2, r3
 8001218:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121c:	496f      	ldr	r1, [pc, #444]	; (80013dc <SIM800_Init+0x1e4>)
 800121e:	4870      	ldr	r0, [pc, #448]	; (80013e0 <SIM800_Init+0x1e8>)
 8001220:	f002 fc18 	bl	8003a54 <HAL_UART_Transmit>
	HAL_Delay(750);
 8001224:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001228:	f000 fe2c 	bl	8001e84 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT -- iletişim var
 800122c:	486a      	ldr	r0, [pc, #424]	; (80013d8 <SIM800_Init+0x1e0>)
 800122e:	f7fe ff8f 	bl	8000150 <strlen>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	2100      	movs	r1, #0
 8001238:	4867      	ldr	r0, [pc, #412]	; (80013d8 <SIM800_Init+0x1e0>)
 800123a:	f004 f9a4 	bl	8005586 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command1,strlen(Command1),100);
 800123e:	4869      	ldr	r0, [pc, #420]	; (80013e4 <SIM800_Init+0x1ec>)
 8001240:	f7fe ff86 	bl	8000150 <strlen>
 8001244:	4603      	mov	r3, r0
 8001246:	b29a      	uxth	r2, r3
 8001248:	2364      	movs	r3, #100	; 0x64
 800124a:	4966      	ldr	r1, [pc, #408]	; (80013e4 <SIM800_Init+0x1ec>)
 800124c:	4864      	ldr	r0, [pc, #400]	; (80013e0 <SIM800_Init+0x1e8>)
 800124e:	f002 fc01 	bl	8003a54 <HAL_UART_Transmit>
	HAL_Delay(750);
 8001252:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001256:	f000 fe15 	bl	8001e84 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT+CPIN? -- ready ise pin kodu istemiyor
 800125a:	485f      	ldr	r0, [pc, #380]	; (80013d8 <SIM800_Init+0x1e0>)
 800125c:	f7fe ff78 	bl	8000150 <strlen>
 8001260:	4603      	mov	r3, r0
 8001262:	461a      	mov	r2, r3
 8001264:	2100      	movs	r1, #0
 8001266:	485c      	ldr	r0, [pc, #368]	; (80013d8 <SIM800_Init+0x1e0>)
 8001268:	f004 f98d 	bl	8005586 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command2,strlen(Command2),100);
 800126c:	485e      	ldr	r0, [pc, #376]	; (80013e8 <SIM800_Init+0x1f0>)
 800126e:	f7fe ff6f 	bl	8000150 <strlen>
 8001272:	4603      	mov	r3, r0
 8001274:	b29a      	uxth	r2, r3
 8001276:	2364      	movs	r3, #100	; 0x64
 8001278:	495b      	ldr	r1, [pc, #364]	; (80013e8 <SIM800_Init+0x1f0>)
 800127a:	4859      	ldr	r0, [pc, #356]	; (80013e0 <SIM800_Init+0x1e8>)
 800127c:	f002 fbea 	bl	8003a54 <HAL_UART_Transmit>
	HAL_Delay(750);
 8001280:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001284:	f000 fdfe 	bl	8001e84 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT+CREG? --Ağ kayıtlı mı
 8001288:	4853      	ldr	r0, [pc, #332]	; (80013d8 <SIM800_Init+0x1e0>)
 800128a:	f7fe ff61 	bl	8000150 <strlen>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	2100      	movs	r1, #0
 8001294:	4850      	ldr	r0, [pc, #320]	; (80013d8 <SIM800_Init+0x1e0>)
 8001296:	f004 f976 	bl	8005586 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command3,strlen(Command3),100);
 800129a:	4854      	ldr	r0, [pc, #336]	; (80013ec <SIM800_Init+0x1f4>)
 800129c:	f7fe ff58 	bl	8000150 <strlen>
 80012a0:	4603      	mov	r3, r0
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	2364      	movs	r3, #100	; 0x64
 80012a6:	4951      	ldr	r1, [pc, #324]	; (80013ec <SIM800_Init+0x1f4>)
 80012a8:	484d      	ldr	r0, [pc, #308]	; (80013e0 <SIM800_Init+0x1e8>)
 80012aa:	f002 fbd3 	bl	8003a54 <HAL_UART_Transmit>
	HAL_Delay(750);
 80012ae:	f240 20ee 	movw	r0, #750	; 0x2ee
 80012b2:	f000 fde7 	bl	8001e84 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT+CGATT? --internet bağlası (GPRS) var mı yok mu?
 80012b6:	4848      	ldr	r0, [pc, #288]	; (80013d8 <SIM800_Init+0x1e0>)
 80012b8:	f7fe ff4a 	bl	8000150 <strlen>
 80012bc:	4603      	mov	r3, r0
 80012be:	461a      	mov	r2, r3
 80012c0:	2100      	movs	r1, #0
 80012c2:	4845      	ldr	r0, [pc, #276]	; (80013d8 <SIM800_Init+0x1e0>)
 80012c4:	f004 f95f 	bl	8005586 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command4,strlen(Command4),1000);
 80012c8:	4849      	ldr	r0, [pc, #292]	; (80013f0 <SIM800_Init+0x1f8>)
 80012ca:	f7fe ff41 	bl	8000150 <strlen>
 80012ce:	4603      	mov	r3, r0
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d6:	4946      	ldr	r1, [pc, #280]	; (80013f0 <SIM800_Init+0x1f8>)
 80012d8:	4841      	ldr	r0, [pc, #260]	; (80013e0 <SIM800_Init+0x1e8>)
 80012da:	f002 fbbb 	bl	8003a54 <HAL_UART_Transmit>
	HAL_Delay(750);
 80012de:	f240 20ee 	movw	r0, #750	; 0x2ee
 80012e2:	f000 fdcf 	bl	8001e84 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT+CIPSHUT --
 80012e6:	483c      	ldr	r0, [pc, #240]	; (80013d8 <SIM800_Init+0x1e0>)
 80012e8:	f7fe ff32 	bl	8000150 <strlen>
 80012ec:	4603      	mov	r3, r0
 80012ee:	461a      	mov	r2, r3
 80012f0:	2100      	movs	r1, #0
 80012f2:	4839      	ldr	r0, [pc, #228]	; (80013d8 <SIM800_Init+0x1e0>)
 80012f4:	f004 f947 	bl	8005586 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command5,strlen(Command5),1000);
 80012f8:	4838      	ldr	r0, [pc, #224]	; (80013dc <SIM800_Init+0x1e4>)
 80012fa:	f7fe ff29 	bl	8000150 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	b29a      	uxth	r2, r3
 8001302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001306:	4935      	ldr	r1, [pc, #212]	; (80013dc <SIM800_Init+0x1e4>)
 8001308:	4835      	ldr	r0, [pc, #212]	; (80013e0 <SIM800_Init+0x1e8>)
 800130a:	f002 fba3 	bl	8003a54 <HAL_UART_Transmit>
	HAL_Delay(750);
 800130e:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001312:	f000 fdb7 	bl	8001e84 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT+CIPSTATUS
 8001316:	4830      	ldr	r0, [pc, #192]	; (80013d8 <SIM800_Init+0x1e0>)
 8001318:	f7fe ff1a 	bl	8000150 <strlen>
 800131c:	4603      	mov	r3, r0
 800131e:	461a      	mov	r2, r3
 8001320:	2100      	movs	r1, #0
 8001322:	482d      	ldr	r0, [pc, #180]	; (80013d8 <SIM800_Init+0x1e0>)
 8001324:	f004 f92f 	bl	8005586 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command6,strlen(Command6),1000);
 8001328:	4832      	ldr	r0, [pc, #200]	; (80013f4 <SIM800_Init+0x1fc>)
 800132a:	f7fe ff11 	bl	8000150 <strlen>
 800132e:	4603      	mov	r3, r0
 8001330:	b29a      	uxth	r2, r3
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	492f      	ldr	r1, [pc, #188]	; (80013f4 <SIM800_Init+0x1fc>)
 8001338:	4829      	ldr	r0, [pc, #164]	; (80013e0 <SIM800_Init+0x1e8>)
 800133a:	f002 fb8b 	bl	8003a54 <HAL_UART_Transmit>
	HAL_Delay(750);
 800133e:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001342:	f000 fd9f 	bl	8001e84 <HAL_Delay>


	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT+CIPMUX=0 --çoklu bağlantı modu devre dışı
 8001346:	4824      	ldr	r0, [pc, #144]	; (80013d8 <SIM800_Init+0x1e0>)
 8001348:	f7fe ff02 	bl	8000150 <strlen>
 800134c:	4603      	mov	r3, r0
 800134e:	461a      	mov	r2, r3
 8001350:	2100      	movs	r1, #0
 8001352:	4821      	ldr	r0, [pc, #132]	; (80013d8 <SIM800_Init+0x1e0>)
 8001354:	f004 f917 	bl	8005586 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command7,strlen(Command7),100);
 8001358:	4827      	ldr	r0, [pc, #156]	; (80013f8 <SIM800_Init+0x200>)
 800135a:	f7fe fef9 	bl	8000150 <strlen>
 800135e:	4603      	mov	r3, r0
 8001360:	b29a      	uxth	r2, r3
 8001362:	2364      	movs	r3, #100	; 0x64
 8001364:	4924      	ldr	r1, [pc, #144]	; (80013f8 <SIM800_Init+0x200>)
 8001366:	481e      	ldr	r0, [pc, #120]	; (80013e0 <SIM800_Init+0x1e8>)
 8001368:	f002 fb74 	bl	8003a54 <HAL_UART_Transmit>
	HAL_Delay(750);
 800136c:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001370:	f000 fd88 	bl	8001e84 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT+CSTT=\"internet\" -- vodafone apn ayarı
 8001374:	4818      	ldr	r0, [pc, #96]	; (80013d8 <SIM800_Init+0x1e0>)
 8001376:	f7fe feeb 	bl	8000150 <strlen>
 800137a:	4603      	mov	r3, r0
 800137c:	461a      	mov	r2, r3
 800137e:	2100      	movs	r1, #0
 8001380:	4815      	ldr	r0, [pc, #84]	; (80013d8 <SIM800_Init+0x1e0>)
 8001382:	f004 f900 	bl	8005586 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command8,strlen(Command8),1000);
 8001386:	481d      	ldr	r0, [pc, #116]	; (80013fc <SIM800_Init+0x204>)
 8001388:	f7fe fee2 	bl	8000150 <strlen>
 800138c:	4603      	mov	r3, r0
 800138e:	b29a      	uxth	r2, r3
 8001390:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001394:	4919      	ldr	r1, [pc, #100]	; (80013fc <SIM800_Init+0x204>)
 8001396:	4812      	ldr	r0, [pc, #72]	; (80013e0 <SIM800_Init+0x1e8>)
 8001398:	f002 fb5c 	bl	8003a54 <HAL_UART_Transmit>
	HAL_Delay(750);
 800139c:	f240 20ee 	movw	r0, #750	; 0x2ee
 80013a0:	f000 fd70 	bl	8001e84 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT+CIICR -- GPRS Bağlantısı kurulmaya çalışılır.Başaralı bir şekilde kurulduğunda modül IP adresi alır.
 80013a4:	480c      	ldr	r0, [pc, #48]	; (80013d8 <SIM800_Init+0x1e0>)
 80013a6:	f7fe fed3 	bl	8000150 <strlen>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461a      	mov	r2, r3
 80013ae:	2100      	movs	r1, #0
 80013b0:	4809      	ldr	r0, [pc, #36]	; (80013d8 <SIM800_Init+0x1e0>)
 80013b2:	f004 f8e8 	bl	8005586 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command9,strlen(Command9),1000);
 80013b6:	4812      	ldr	r0, [pc, #72]	; (8001400 <SIM800_Init+0x208>)
 80013b8:	f7fe feca 	bl	8000150 <strlen>
 80013bc:	4603      	mov	r3, r0
 80013be:	b29a      	uxth	r2, r3
 80013c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c4:	490e      	ldr	r1, [pc, #56]	; (8001400 <SIM800_Init+0x208>)
 80013c6:	4806      	ldr	r0, [pc, #24]	; (80013e0 <SIM800_Init+0x1e8>)
 80013c8:	f002 fb44 	bl	8003a54 <HAL_UART_Transmit>
	HAL_Delay(750);
 80013cc:	f240 20ee 	movw	r0, #750	; 0x2ee
 80013d0:	f000 fd58 	bl	8001e84 <HAL_Delay>




}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	200004ec 	.word	0x200004ec
 80013dc:	2000002c 	.word	0x2000002c
 80013e0:	20000418 	.word	0x20000418
 80013e4:	20000000 	.word	0x20000000
 80013e8:	20000008 	.word	0x20000008
 80013ec:	20000014 	.word	0x20000014
 80013f0:	20000020 	.word	0x20000020
 80013f4:	2000003c 	.word	0x2000003c
 80013f8:	2000004c 	.word	0x2000004c
 80013fc:	2000005c 	.word	0x2000005c
 8001400:	20000074 	.word	0x20000074

08001404 <SIM800l_Send_Location>:
	HAL_Delay(750);

}

void SIM800l_Send_Location(float latitude,float longitude)
{
 8001404:	b5b0      	push	{r4, r5, r7, lr}
 8001406:	b0b0      	sub	sp, #192	; 0xc0
 8001408:	af02      	add	r7, sp, #8
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT+CIFSR --
 800140e:	4861      	ldr	r0, [pc, #388]	; (8001594 <SIM800l_Send_Location+0x190>)
 8001410:	f7fe fe9e 	bl	8000150 <strlen>
 8001414:	4603      	mov	r3, r0
 8001416:	461a      	mov	r2, r3
 8001418:	2100      	movs	r1, #0
 800141a:	485e      	ldr	r0, [pc, #376]	; (8001594 <SIM800l_Send_Location+0x190>)
 800141c:	f004 f8b3 	bl	8005586 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command10,strlen(Command10),1000);
 8001420:	485d      	ldr	r0, [pc, #372]	; (8001598 <SIM800l_Send_Location+0x194>)
 8001422:	f7fe fe95 	bl	8000150 <strlen>
 8001426:	4603      	mov	r3, r0
 8001428:	b29a      	uxth	r2, r3
 800142a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142e:	495a      	ldr	r1, [pc, #360]	; (8001598 <SIM800l_Send_Location+0x194>)
 8001430:	485a      	ldr	r0, [pc, #360]	; (800159c <SIM800l_Send_Location+0x198>)
 8001432:	f002 fb0f 	bl	8003a54 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001436:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800143a:	f000 fd23 	bl	8001e84 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT+CIPSPRT=0 --Seri port iletişimini devre dışı bırakır.Cihaz yalnızca AT komutları ile yönlendirilir.
 800143e:	4855      	ldr	r0, [pc, #340]	; (8001594 <SIM800l_Send_Location+0x190>)
 8001440:	f7fe fe86 	bl	8000150 <strlen>
 8001444:	4603      	mov	r3, r0
 8001446:	461a      	mov	r2, r3
 8001448:	2100      	movs	r1, #0
 800144a:	4852      	ldr	r0, [pc, #328]	; (8001594 <SIM800l_Send_Location+0x190>)
 800144c:	f004 f89b 	bl	8005586 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command11,strlen(Command11),1000);
 8001450:	4853      	ldr	r0, [pc, #332]	; (80015a0 <SIM800l_Send_Location+0x19c>)
 8001452:	f7fe fe7d 	bl	8000150 <strlen>
 8001456:	4603      	mov	r3, r0
 8001458:	b29a      	uxth	r2, r3
 800145a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145e:	4950      	ldr	r1, [pc, #320]	; (80015a0 <SIM800l_Send_Location+0x19c>)
 8001460:	484e      	ldr	r0, [pc, #312]	; (800159c <SIM800l_Send_Location+0x198>)
 8001462:	f002 faf7 	bl	8003a54 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001466:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800146a:	f000 fd0b 	bl	8001e84 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",\"80\"\r\n
 800146e:	4849      	ldr	r0, [pc, #292]	; (8001594 <SIM800l_Send_Location+0x190>)
 8001470:	f7fe fe6e 	bl	8000150 <strlen>
 8001474:	4603      	mov	r3, r0
 8001476:	461a      	mov	r2, r3
 8001478:	2100      	movs	r1, #0
 800147a:	4846      	ldr	r0, [pc, #280]	; (8001594 <SIM800l_Send_Location+0x190>)
 800147c:	f004 f883 	bl	8005586 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command12,strlen(Command12),1000);
 8001480:	4848      	ldr	r0, [pc, #288]	; (80015a4 <SIM800l_Send_Location+0x1a0>)
 8001482:	f7fe fe65 	bl	8000150 <strlen>
 8001486:	4603      	mov	r3, r0
 8001488:	b29a      	uxth	r2, r3
 800148a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148e:	4945      	ldr	r1, [pc, #276]	; (80015a4 <SIM800l_Send_Location+0x1a0>)
 8001490:	4842      	ldr	r0, [pc, #264]	; (800159c <SIM800l_Send_Location+0x198>)
 8001492:	f002 fadf 	bl	8003a54 <HAL_UART_Transmit>
	HAL_Delay(1500);//
 8001496:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800149a:	f000 fcf3 	bl	8001e84 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//AT+CIPSEND
 800149e:	483d      	ldr	r0, [pc, #244]	; (8001594 <SIM800l_Send_Location+0x190>)
 80014a0:	f7fe fe56 	bl	8000150 <strlen>
 80014a4:	4603      	mov	r3, r0
 80014a6:	461a      	mov	r2, r3
 80014a8:	2100      	movs	r1, #0
 80014aa:	483a      	ldr	r0, [pc, #232]	; (8001594 <SIM800l_Send_Location+0x190>)
 80014ac:	f004 f86b 	bl	8005586 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command13,strlen(Command13),1000);
 80014b0:	483d      	ldr	r0, [pc, #244]	; (80015a8 <SIM800l_Send_Location+0x1a4>)
 80014b2:	f7fe fe4d 	bl	8000150 <strlen>
 80014b6:	4603      	mov	r3, r0
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014be:	493a      	ldr	r1, [pc, #232]	; (80015a8 <SIM800l_Send_Location+0x1a4>)
 80014c0:	4836      	ldr	r0, [pc, #216]	; (800159c <SIM800l_Send_Location+0x198>)
 80014c2:	f002 fac7 	bl	8003a54 <HAL_UART_Transmit>
	HAL_Delay(1500);
 80014c6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80014ca:	f000 fcdb 	bl	8001e84 <HAL_Delay>

	char buffer[170];
	sprintf(buffer,"GET https://api.thingspeak.com/update?api_key=I7HHP47YNWI8PSM8&field1=%.2f&field2=%.2f\r\n",latitude,longitude);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7fe ffaa 	bl	8000428 <__aeabi_f2d>
 80014d4:	4604      	mov	r4, r0
 80014d6:	460d      	mov	r5, r1
 80014d8:	6838      	ldr	r0, [r7, #0]
 80014da:	f7fe ffa5 	bl	8000428 <__aeabi_f2d>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	f107 000c 	add.w	r0, r7, #12
 80014e6:	e9cd 2300 	strd	r2, r3, [sp]
 80014ea:	4622      	mov	r2, r4
 80014ec:	462b      	mov	r3, r5
 80014ee:	492f      	ldr	r1, [pc, #188]	; (80015ac <SIM800l_Send_Location+0x1a8>)
 80014f0:	f003 ffe6 	bl	80054c0 <siprintf>


	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//
 80014f4:	4827      	ldr	r0, [pc, #156]	; (8001594 <SIM800l_Send_Location+0x190>)
 80014f6:	f7fe fe2b 	bl	8000150 <strlen>
 80014fa:	4603      	mov	r3, r0
 80014fc:	461a      	mov	r2, r3
 80014fe:	2100      	movs	r1, #0
 8001500:	4824      	ldr	r0, [pc, #144]	; (8001594 <SIM800l_Send_Location+0x190>)
 8001502:	f004 f840 	bl	8005586 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)buffer,strlen(buffer),1000);
 8001506:	f107 030c 	add.w	r3, r7, #12
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe fe20 	bl	8000150 <strlen>
 8001510:	4603      	mov	r3, r0
 8001512:	b29a      	uxth	r2, r3
 8001514:	f107 010c 	add.w	r1, r7, #12
 8001518:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151c:	481f      	ldr	r0, [pc, #124]	; (800159c <SIM800l_Send_Location+0x198>)
 800151e:	f002 fa99 	bl	8003a54 <HAL_UART_Transmit>
	HAL_Delay(1500);
 8001522:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001526:	f000 fcad 	bl	8001e84 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//
 800152a:	481a      	ldr	r0, [pc, #104]	; (8001594 <SIM800l_Send_Location+0x190>)
 800152c:	f7fe fe10 	bl	8000150 <strlen>
 8001530:	4603      	mov	r3, r0
 8001532:	461a      	mov	r2, r3
 8001534:	2100      	movs	r1, #0
 8001536:	4817      	ldr	r0, [pc, #92]	; (8001594 <SIM800l_Send_Location+0x190>)
 8001538:	f004 f825 	bl	8005586 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command15,strlen(Command15),1000);
 800153c:	481c      	ldr	r0, [pc, #112]	; (80015b0 <SIM800l_Send_Location+0x1ac>)
 800153e:	f7fe fe07 	bl	8000150 <strlen>
 8001542:	4603      	mov	r3, r0
 8001544:	b29a      	uxth	r2, r3
 8001546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154a:	4919      	ldr	r1, [pc, #100]	; (80015b0 <SIM800l_Send_Location+0x1ac>)
 800154c:	4813      	ldr	r0, [pc, #76]	; (800159c <SIM800l_Send_Location+0x198>)
 800154e:	f002 fa81 	bl	8003a54 <HAL_UART_Transmit>
	HAL_Delay(1500);
 8001552:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001556:	f000 fc95 	bl	8001e84 <HAL_Delay>

	memset(RxBuffer,0,sizeof(char)*strlen(RxBuffer));//
 800155a:	480e      	ldr	r0, [pc, #56]	; (8001594 <SIM800l_Send_Location+0x190>)
 800155c:	f7fe fdf8 	bl	8000150 <strlen>
 8001560:	4603      	mov	r3, r0
 8001562:	461a      	mov	r2, r3
 8001564:	2100      	movs	r1, #0
 8001566:	480b      	ldr	r0, [pc, #44]	; (8001594 <SIM800l_Send_Location+0x190>)
 8001568:	f004 f80d 	bl	8005586 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t*)Command16,strlen(Command16),1000);
 800156c:	4811      	ldr	r0, [pc, #68]	; (80015b4 <SIM800l_Send_Location+0x1b0>)
 800156e:	f7fe fdef 	bl	8000150 <strlen>
 8001572:	4603      	mov	r3, r0
 8001574:	b29a      	uxth	r2, r3
 8001576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157a:	490e      	ldr	r1, [pc, #56]	; (80015b4 <SIM800l_Send_Location+0x1b0>)
 800157c:	4807      	ldr	r0, [pc, #28]	; (800159c <SIM800l_Send_Location+0x198>)
 800157e:	f002 fa69 	bl	8003a54 <HAL_UART_Transmit>
	HAL_Delay(750);
 8001582:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001586:	f000 fc7d 	bl	8001e84 <HAL_Delay>
}
 800158a:	bf00      	nop
 800158c:	37b8      	adds	r7, #184	; 0xb8
 800158e:	46bd      	mov	sp, r7
 8001590:	bdb0      	pop	{r4, r5, r7, pc}
 8001592:	bf00      	nop
 8001594:	200004ec 	.word	0x200004ec
 8001598:	20000080 	.word	0x20000080
 800159c:	20000418 	.word	0x20000418
 80015a0:	2000008c 	.word	0x2000008c
 80015a4:	2000009c 	.word	0x2000009c
 80015a8:	200000cc 	.word	0x200000cc
 80015ac:	080077c4 	.word	0x080077c4
 80015b0:	200000dc 	.word	0x200000dc
 80015b4:	200000e0 	.word	0x200000e0

080015b8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	//if(htim->Instance == htim1.Instance)
	if(htim == &htim1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a08      	ldr	r2, [pc, #32]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d108      	bne.n	80015da <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		HAL_GPIO_TogglePin(Blink_GPIO_Port,Blink_Pin);
 80015c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015cc:	4806      	ldr	r0, [pc, #24]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80015ce:	f001 f9c9 	bl	8002964 <HAL_GPIO_TogglePin>
		Set_Time();
 80015d2:	f7ff faa9 	bl	8000b28 <Set_Time>
		Set_Location();
 80015d6:	f7ff fb17 	bl	8000c08 <Set_Location>

	}
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200003d0 	.word	0x200003d0
 80015e8:	40011000 	.word	0x40011000

080015ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
	{

	}
	HAL_UART_Receive_IT(&huart1, RxBuffer,20);
 80015f4:	2214      	movs	r2, #20
 80015f6:	4904      	ldr	r1, [pc, #16]	; (8001608 <HAL_UART_RxCpltCallback+0x1c>)
 80015f8:	4804      	ldr	r0, [pc, #16]	; (800160c <HAL_UART_RxCpltCallback+0x20>)
 80015fa:	f002 faae 	bl	8003b5a <HAL_UART_Receive_IT>

}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200004ec 	.word	0x200004ec
 800160c:	20000418 	.word	0x20000418

08001610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001614:	f000 fbd4 	bl	8001dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001618:	f000 f836 	bl	8001688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800161c:	f000 f93e 	bl	800189c <MX_GPIO_Init>
  MX_DMA_Init();
 8001620:	f000 f91e 	bl	8001860 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001624:	f000 f8c8 	bl	80017b8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001628:	f000 f874 	bl	8001714 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800162c:	f000 f8ee 	bl	800180c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, Buffer, 500);
 8001630:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001634:	490e      	ldr	r1, [pc, #56]	; (8001670 <main+0x60>)
 8001636:	480f      	ldr	r0, [pc, #60]	; (8001674 <main+0x64>)
 8001638:	f002 fab4 	bl	8003ba4 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart1, RxBuffer,20);
 800163c:	2214      	movs	r2, #20
 800163e:	490e      	ldr	r1, [pc, #56]	; (8001678 <main+0x68>)
 8001640:	480e      	ldr	r0, [pc, #56]	; (800167c <main+0x6c>)
 8001642:	f002 fa8a 	bl	8003b5a <HAL_UART_Receive_IT>
  SIM800_Init();
 8001646:	f7ff fdd7 	bl	80011f8 <SIM800_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 800164a:	480d      	ldr	r0, [pc, #52]	; (8001680 <main+0x70>)
 800164c:	f001 fe04 	bl	8003258 <HAL_TIM_Base_Start_IT>

  memset(Data,0,100);
 8001650:	2264      	movs	r2, #100	; 0x64
 8001652:	2100      	movs	r1, #0
 8001654:	480b      	ldr	r0, [pc, #44]	; (8001684 <main+0x74>)
 8001656:	f003 ff96 	bl	8005586 <memset>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 800165a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800165e:	f000 fc11 	bl	8001e84 <HAL_Delay>
	/* for(int i=0;i<10;i++)
	  {
		  SIM800l_Send_Data(i);
		  HAL_Delay(1250);
	  }*/
      HAL_Delay(2000);
 8001662:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001666:	f000 fc0d 	bl	8001e84 <HAL_Delay>
      //test4();
	  //Send_Time();
      Send_Location();
 800166a:	f7ff fccd 	bl	8001008 <Send_Location>
  {
 800166e:	e7f4      	b.n	800165a <main+0x4a>
 8001670:	2000056c 	.word	0x2000056c
 8001674:	20000460 	.word	0x20000460
 8001678:	200004ec 	.word	0x200004ec
 800167c:	20000418 	.word	0x20000418
 8001680:	200003d0 	.word	0x200003d0
 8001684:	20000508 	.word	0x20000508

08001688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b090      	sub	sp, #64	; 0x40
 800168c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800168e:	f107 0318 	add.w	r3, r7, #24
 8001692:	2228      	movs	r2, #40	; 0x28
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f003 ff75 	bl	8005586 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016aa:	2301      	movs	r3, #1
 80016ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016b4:	2300      	movs	r3, #0
 80016b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016b8:	2301      	movs	r3, #1
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016bc:	2302      	movs	r3, #2
 80016be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016c6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80016ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016cc:	f107 0318 	add.w	r3, r7, #24
 80016d0:	4618      	mov	r0, r3
 80016d2:	f001 f961 	bl	8002998 <HAL_RCC_OscConfig>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80016dc:	f000 f92a 	bl	8001934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e0:	230f      	movs	r3, #15
 80016e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e4:	2302      	movs	r3, #2
 80016e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	2102      	movs	r1, #2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f001 fbce 	bl	8002e9c <HAL_RCC_ClockConfig>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001706:	f000 f915 	bl	8001934 <Error_Handler>
  }
}
 800170a:	bf00      	nop
 800170c:	3740      	adds	r7, #64	; 0x40
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800171a:	f107 0308 	add.w	r3, r7, #8
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001728:	463b      	mov	r3, r7
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001730:	4b1f      	ldr	r3, [pc, #124]	; (80017b0 <MX_TIM1_Init+0x9c>)
 8001732:	4a20      	ldr	r2, [pc, #128]	; (80017b4 <MX_TIM1_Init+0xa0>)
 8001734:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 8001736:	4b1e      	ldr	r3, [pc, #120]	; (80017b0 <MX_TIM1_Init+0x9c>)
 8001738:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800173c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173e:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <MX_TIM1_Init+0x9c>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8001744:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <MX_TIM1_Init+0x9c>)
 8001746:	f242 720f 	movw	r2, #9999	; 0x270f
 800174a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800174c:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <MX_TIM1_Init+0x9c>)
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001752:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <MX_TIM1_Init+0x9c>)
 8001754:	2200      	movs	r2, #0
 8001756:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001758:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <MX_TIM1_Init+0x9c>)
 800175a:	2200      	movs	r2, #0
 800175c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800175e:	4814      	ldr	r0, [pc, #80]	; (80017b0 <MX_TIM1_Init+0x9c>)
 8001760:	f001 fd2a 	bl	80031b8 <HAL_TIM_Base_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800176a:	f000 f8e3 	bl	8001934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800176e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001772:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001774:	f107 0308 	add.w	r3, r7, #8
 8001778:	4619      	mov	r1, r3
 800177a:	480d      	ldr	r0, [pc, #52]	; (80017b0 <MX_TIM1_Init+0x9c>)
 800177c:	f001 fec6 	bl	800350c <HAL_TIM_ConfigClockSource>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001786:	f000 f8d5 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178a:	2300      	movs	r3, #0
 800178c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001792:	463b      	mov	r3, r7
 8001794:	4619      	mov	r1, r3
 8001796:	4806      	ldr	r0, [pc, #24]	; (80017b0 <MX_TIM1_Init+0x9c>)
 8001798:	f002 f89c 	bl	80038d4 <HAL_TIMEx_MasterConfigSynchronization>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80017a2:	f000 f8c7 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200003d0 	.word	0x200003d0
 80017b4:	40012c00 	.word	0x40012c00

080017b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <MX_USART1_UART_Init+0x4c>)
 80017be:	4a12      	ldr	r2, [pc, #72]	; (8001808 <MX_USART1_UART_Init+0x50>)
 80017c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <MX_USART1_UART_Init+0x4c>)
 80017c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <MX_USART1_UART_Init+0x4c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <MX_USART1_UART_Init+0x4c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017d6:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <MX_USART1_UART_Init+0x4c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <MX_USART1_UART_Init+0x4c>)
 80017de:	220c      	movs	r2, #12
 80017e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <MX_USART1_UART_Init+0x4c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <MX_USART1_UART_Init+0x4c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <MX_USART1_UART_Init+0x4c>)
 80017f0:	f002 f8e0 	bl	80039b4 <HAL_UART_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017fa:	f000 f89b 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000418 	.word	0x20000418
 8001808:	40013800 	.word	0x40013800

0800180c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <MX_USART2_UART_Init+0x4c>)
 8001812:	4a12      	ldr	r2, [pc, #72]	; (800185c <MX_USART2_UART_Init+0x50>)
 8001814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <MX_USART2_UART_Init+0x4c>)
 8001818:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800181c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <MX_USART2_UART_Init+0x4c>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <MX_USART2_UART_Init+0x4c>)
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <MX_USART2_UART_Init+0x4c>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <MX_USART2_UART_Init+0x4c>)
 8001832:	220c      	movs	r2, #12
 8001834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <MX_USART2_UART_Init+0x4c>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <MX_USART2_UART_Init+0x4c>)
 800183e:	2200      	movs	r2, #0
 8001840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <MX_USART2_UART_Init+0x4c>)
 8001844:	f002 f8b6 	bl	80039b4 <HAL_UART_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800184e:	f000 f871 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000460 	.word	0x20000460
 800185c:	40004400 	.word	0x40004400

08001860 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <MX_DMA_Init+0x38>)
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	4a0b      	ldr	r2, [pc, #44]	; (8001898 <MX_DMA_Init+0x38>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6153      	str	r3, [r2, #20]
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <MX_DMA_Init+0x38>)
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2100      	movs	r1, #0
 8001882:	2010      	movs	r0, #16
 8001884:	f000 fbf9 	bl	800207a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001888:	2010      	movs	r0, #16
 800188a:	f000 fc12 	bl	80020b2 <HAL_NVIC_EnableIRQ>

}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40021000 	.word	0x40021000

0800189c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a2:	f107 0310 	add.w	r3, r7, #16
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018b0:	4b1e      	ldr	r3, [pc, #120]	; (800192c <MX_GPIO_Init+0x90>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	4a1d      	ldr	r2, [pc, #116]	; (800192c <MX_GPIO_Init+0x90>)
 80018b6:	f043 0310 	orr.w	r3, r3, #16
 80018ba:	6193      	str	r3, [r2, #24]
 80018bc:	4b1b      	ldr	r3, [pc, #108]	; (800192c <MX_GPIO_Init+0x90>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	f003 0310 	and.w	r3, r3, #16
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018c8:	4b18      	ldr	r3, [pc, #96]	; (800192c <MX_GPIO_Init+0x90>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	4a17      	ldr	r2, [pc, #92]	; (800192c <MX_GPIO_Init+0x90>)
 80018ce:	f043 0320 	orr.w	r3, r3, #32
 80018d2:	6193      	str	r3, [r2, #24]
 80018d4:	4b15      	ldr	r3, [pc, #84]	; (800192c <MX_GPIO_Init+0x90>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f003 0320 	and.w	r3, r3, #32
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <MX_GPIO_Init+0x90>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	4a11      	ldr	r2, [pc, #68]	; (800192c <MX_GPIO_Init+0x90>)
 80018e6:	f043 0304 	orr.w	r3, r3, #4
 80018ea:	6193      	str	r3, [r2, #24]
 80018ec:	4b0f      	ldr	r3, [pc, #60]	; (800192c <MX_GPIO_Init+0x90>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Blink_GPIO_Port, Blink_Pin, GPIO_PIN_RESET);
 80018f8:	2200      	movs	r2, #0
 80018fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018fe:	480c      	ldr	r0, [pc, #48]	; (8001930 <MX_GPIO_Init+0x94>)
 8001900:	f001 f818 	bl	8002934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blink_Pin */
  GPIO_InitStruct.Pin = Blink_Pin;
 8001904:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001908:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190a:	2301      	movs	r3, #1
 800190c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	2302      	movs	r3, #2
 8001914:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Blink_GPIO_Port, &GPIO_InitStruct);
 8001916:	f107 0310 	add.w	r3, r7, #16
 800191a:	4619      	mov	r1, r3
 800191c:	4804      	ldr	r0, [pc, #16]	; (8001930 <MX_GPIO_Init+0x94>)
 800191e:	f000 fe85 	bl	800262c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001922:	bf00      	nop
 8001924:	3720      	adds	r7, #32
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000
 8001930:	40011000 	.word	0x40011000

08001934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001938:	b672      	cpsid	i
}
 800193a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800193c:	e7fe      	b.n	800193c <Error_Handler+0x8>
	...

08001940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <HAL_MspInit+0x5c>)
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	4a14      	ldr	r2, [pc, #80]	; (800199c <HAL_MspInit+0x5c>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	6193      	str	r3, [r2, #24]
 8001952:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_MspInit+0x5c>)
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800195e:	4b0f      	ldr	r3, [pc, #60]	; (800199c <HAL_MspInit+0x5c>)
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	4a0e      	ldr	r2, [pc, #56]	; (800199c <HAL_MspInit+0x5c>)
 8001964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001968:	61d3      	str	r3, [r2, #28]
 800196a:	4b0c      	ldr	r3, [pc, #48]	; (800199c <HAL_MspInit+0x5c>)
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001976:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <HAL_MspInit+0x60>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	4a04      	ldr	r2, [pc, #16]	; (80019a0 <HAL_MspInit+0x60>)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001992:	bf00      	nop
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr
 800199c:	40021000 	.word	0x40021000
 80019a0:	40010000 	.word	0x40010000

080019a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a0d      	ldr	r2, [pc, #52]	; (80019e8 <HAL_TIM_Base_MspInit+0x44>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d113      	bne.n	80019de <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019b6:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <HAL_TIM_Base_MspInit+0x48>)
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	4a0c      	ldr	r2, [pc, #48]	; (80019ec <HAL_TIM_Base_MspInit+0x48>)
 80019bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019c0:	6193      	str	r3, [r2, #24]
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <HAL_TIM_Base_MspInit+0x48>)
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 1, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2101      	movs	r1, #1
 80019d2:	2019      	movs	r0, #25
 80019d4:	f000 fb51 	bl	800207a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80019d8:	2019      	movs	r0, #25
 80019da:	f000 fb6a 	bl	80020b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40012c00 	.word	0x40012c00
 80019ec:	40021000 	.word	0x40021000

080019f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	; 0x28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0318 	add.w	r3, r7, #24
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a4e      	ldr	r2, [pc, #312]	; (8001b44 <HAL_UART_MspInit+0x154>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d13a      	bne.n	8001a86 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a10:	4b4d      	ldr	r3, [pc, #308]	; (8001b48 <HAL_UART_MspInit+0x158>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	4a4c      	ldr	r2, [pc, #304]	; (8001b48 <HAL_UART_MspInit+0x158>)
 8001a16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a1a:	6193      	str	r3, [r2, #24]
 8001a1c:	4b4a      	ldr	r3, [pc, #296]	; (8001b48 <HAL_UART_MspInit+0x158>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a28:	4b47      	ldr	r3, [pc, #284]	; (8001b48 <HAL_UART_MspInit+0x158>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	4a46      	ldr	r2, [pc, #280]	; (8001b48 <HAL_UART_MspInit+0x158>)
 8001a2e:	f043 0304 	orr.w	r3, r3, #4
 8001a32:	6193      	str	r3, [r2, #24]
 8001a34:	4b44      	ldr	r3, [pc, #272]	; (8001b48 <HAL_UART_MspInit+0x158>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4e:	f107 0318 	add.w	r3, r7, #24
 8001a52:	4619      	mov	r1, r3
 8001a54:	483d      	ldr	r0, [pc, #244]	; (8001b4c <HAL_UART_MspInit+0x15c>)
 8001a56:	f000 fde9 	bl	800262c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a68:	f107 0318 	add.w	r3, r7, #24
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4837      	ldr	r0, [pc, #220]	; (8001b4c <HAL_UART_MspInit+0x15c>)
 8001a70:	f000 fddc 	bl	800262c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2100      	movs	r1, #0
 8001a78:	2025      	movs	r0, #37	; 0x25
 8001a7a:	f000 fafe 	bl	800207a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a7e:	2025      	movs	r0, #37	; 0x25
 8001a80:	f000 fb17 	bl	80020b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a84:	e05a      	b.n	8001b3c <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a31      	ldr	r2, [pc, #196]	; (8001b50 <HAL_UART_MspInit+0x160>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d155      	bne.n	8001b3c <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a90:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <HAL_UART_MspInit+0x158>)
 8001a92:	69db      	ldr	r3, [r3, #28]
 8001a94:	4a2c      	ldr	r2, [pc, #176]	; (8001b48 <HAL_UART_MspInit+0x158>)
 8001a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a9a:	61d3      	str	r3, [r2, #28]
 8001a9c:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <HAL_UART_MspInit+0x158>)
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa8:	4b27      	ldr	r3, [pc, #156]	; (8001b48 <HAL_UART_MspInit+0x158>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	4a26      	ldr	r2, [pc, #152]	; (8001b48 <HAL_UART_MspInit+0x158>)
 8001aae:	f043 0304 	orr.w	r3, r3, #4
 8001ab2:	6193      	str	r3, [r2, #24]
 8001ab4:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <HAL_UART_MspInit+0x158>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001acc:	f107 0318 	add.w	r3, r7, #24
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	481e      	ldr	r0, [pc, #120]	; (8001b4c <HAL_UART_MspInit+0x15c>)
 8001ad4:	f000 fdaa 	bl	800262c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ad8:	2308      	movs	r3, #8
 8001ada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae4:	f107 0318 	add.w	r3, r7, #24
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4818      	ldr	r0, [pc, #96]	; (8001b4c <HAL_UART_MspInit+0x15c>)
 8001aec:	f000 fd9e 	bl	800262c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001af0:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <HAL_UART_MspInit+0x164>)
 8001af2:	4a19      	ldr	r2, [pc, #100]	; (8001b58 <HAL_UART_MspInit+0x168>)
 8001af4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001af6:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <HAL_UART_MspInit+0x164>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001afc:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <HAL_UART_MspInit+0x164>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b02:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <HAL_UART_MspInit+0x164>)
 8001b04:	2280      	movs	r2, #128	; 0x80
 8001b06:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <HAL_UART_MspInit+0x164>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b0e:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_UART_MspInit+0x164>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001b14:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <HAL_UART_MspInit+0x164>)
 8001b16:	2220      	movs	r2, #32
 8001b18:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <HAL_UART_MspInit+0x164>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b20:	480c      	ldr	r0, [pc, #48]	; (8001b54 <HAL_UART_MspInit+0x164>)
 8001b22:	f000 fae1 	bl	80020e8 <HAL_DMA_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_UART_MspInit+0x140>
      Error_Handler();
 8001b2c:	f7ff ff02 	bl	8001934 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a08      	ldr	r2, [pc, #32]	; (8001b54 <HAL_UART_MspInit+0x164>)
 8001b34:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b36:	4a07      	ldr	r2, [pc, #28]	; (8001b54 <HAL_UART_MspInit+0x164>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001b3c:	bf00      	nop
 8001b3e:	3728      	adds	r7, #40	; 0x28
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40013800 	.word	0x40013800
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40010800 	.word	0x40010800
 8001b50:	40004400 	.word	0x40004400
 8001b54:	200004a8 	.word	0x200004a8
 8001b58:	4002006c 	.word	0x4002006c

08001b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <NMI_Handler+0x4>

08001b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b66:	e7fe      	b.n	8001b66 <HardFault_Handler+0x4>

08001b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <MemManage_Handler+0x4>

08001b6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <BusFault_Handler+0x4>

08001b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <UsageFault_Handler+0x4>

08001b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr

08001b86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr

08001b92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba2:	f000 f953 	bl	8001e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001bb0:	4802      	ldr	r0, [pc, #8]	; (8001bbc <DMA1_Channel6_IRQHandler+0x10>)
 8001bb2:	f000 fc07 	bl	80023c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200004a8 	.word	0x200004a8

08001bc0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <TIM1_UP_IRQHandler+0x10>)
 8001bc6:	f001 fb99 	bl	80032fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200003d0 	.word	0x200003d0

08001bd4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bd8:	4802      	ldr	r0, [pc, #8]	; (8001be4 <USART1_IRQHandler+0x10>)
 8001bda:	f002 f809 	bl	8003bf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000418 	.word	0x20000418

08001be8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return 1;
 8001bec:	2301      	movs	r3, #1
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr

08001bf6 <_kill>:

int _kill(int pid, int sig)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c00:	f003 fd14 	bl	800562c <__errno>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2216      	movs	r2, #22
 8001c08:	601a      	str	r2, [r3, #0]
  return -1;
 8001c0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <_exit>:

void _exit (int status)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c1e:	f04f 31ff 	mov.w	r1, #4294967295
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff ffe7 	bl	8001bf6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c28:	e7fe      	b.n	8001c28 <_exit+0x12>

08001c2a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b086      	sub	sp, #24
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	60f8      	str	r0, [r7, #12]
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	e00a      	b.n	8001c52 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c3c:	f3af 8000 	nop.w
 8001c40:	4601      	mov	r1, r0
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	1c5a      	adds	r2, r3, #1
 8001c46:	60ba      	str	r2, [r7, #8]
 8001c48:	b2ca      	uxtb	r2, r1
 8001c4a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	dbf0      	blt.n	8001c3c <_read+0x12>
  }

  return len;
 8001c5a:	687b      	ldr	r3, [r7, #4]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	e009      	b.n	8001c8a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	60ba      	str	r2, [r7, #8]
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	3301      	adds	r3, #1
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	dbf1      	blt.n	8001c76 <_write+0x12>
  }
  return len;
 8001c92:	687b      	ldr	r3, [r7, #4]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <_close>:

int _close(int file)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ca4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr

08001cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cc2:	605a      	str	r2, [r3, #4]
  return 0;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <_isatty>:

int _isatty(int file)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cd8:	2301      	movs	r3, #1
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr

08001cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d04:	4a14      	ldr	r2, [pc, #80]	; (8001d58 <_sbrk+0x5c>)
 8001d06:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <_sbrk+0x60>)
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d10:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <_sbrk+0x64>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d102      	bne.n	8001d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <_sbrk+0x64>)
 8001d1a:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <_sbrk+0x68>)
 8001d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <_sbrk+0x64>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d207      	bcs.n	8001d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d2c:	f003 fc7e 	bl	800562c <__errno>
 8001d30:	4603      	mov	r3, r0
 8001d32:	220c      	movs	r2, #12
 8001d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d36:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3a:	e009      	b.n	8001d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d3c:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <_sbrk+0x64>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d42:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <_sbrk+0x64>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	4a05      	ldr	r2, [pc, #20]	; (8001d60 <_sbrk+0x64>)
 8001d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20005000 	.word	0x20005000
 8001d5c:	00000400 	.word	0x00000400
 8001d60:	20000760 	.word	0x20000760
 8001d64:	200008b8 	.word	0x200008b8

08001d68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d74:	f7ff fff8 	bl	8001d68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d78:	480b      	ldr	r0, [pc, #44]	; (8001da8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d7a:	490c      	ldr	r1, [pc, #48]	; (8001dac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d7c:	4a0c      	ldr	r2, [pc, #48]	; (8001db0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d80:	e002      	b.n	8001d88 <LoopCopyDataInit>

08001d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d86:	3304      	adds	r3, #4

08001d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d8c:	d3f9      	bcc.n	8001d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d8e:	4a09      	ldr	r2, [pc, #36]	; (8001db4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d90:	4c09      	ldr	r4, [pc, #36]	; (8001db8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d94:	e001      	b.n	8001d9a <LoopFillZerobss>

08001d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d98:	3204      	adds	r2, #4

08001d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d9c:	d3fb      	bcc.n	8001d96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d9e:	f003 fc4b 	bl	8005638 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001da2:	f7ff fc35 	bl	8001610 <main>
  bx lr
 8001da6:	4770      	bx	lr
  ldr r0, =_sdata
 8001da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dac:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8001db0:	08007bc4 	.word	0x08007bc4
  ldr r2, =_sbss
 8001db4:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8001db8:	200008b4 	.word	0x200008b4

08001dbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dbc:	e7fe      	b.n	8001dbc <ADC1_2_IRQHandler>
	...

08001dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <HAL_Init+0x28>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a07      	ldr	r2, [pc, #28]	; (8001de8 <HAL_Init+0x28>)
 8001dca:	f043 0310 	orr.w	r3, r3, #16
 8001dce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd0:	2003      	movs	r0, #3
 8001dd2:	f000 f947 	bl	8002064 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dd6:	200f      	movs	r0, #15
 8001dd8:	f000 f808 	bl	8001dec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ddc:	f7ff fdb0 	bl	8001940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40022000 	.word	0x40022000

08001dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001df4:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_InitTick+0x54>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_InitTick+0x58>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 f95f 	bl	80020ce <HAL_SYSTICK_Config>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e00e      	b.n	8001e38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b0f      	cmp	r3, #15
 8001e1e:	d80a      	bhi.n	8001e36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e20:	2200      	movs	r2, #0
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295
 8001e28:	f000 f927 	bl	800207a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e2c:	4a06      	ldr	r2, [pc, #24]	; (8001e48 <HAL_InitTick+0x5c>)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	e000      	b.n	8001e38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	200000f0 	.word	0x200000f0
 8001e44:	200000f8 	.word	0x200000f8
 8001e48:	200000f4 	.word	0x200000f4

08001e4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <HAL_IncTick+0x1c>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	461a      	mov	r2, r3
 8001e56:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_IncTick+0x20>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	4a03      	ldr	r2, [pc, #12]	; (8001e6c <HAL_IncTick+0x20>)
 8001e5e:	6013      	str	r3, [r2, #0]
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr
 8001e68:	200000f8 	.word	0x200000f8
 8001e6c:	20000764 	.word	0x20000764

08001e70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return uwTick;
 8001e74:	4b02      	ldr	r3, [pc, #8]	; (8001e80 <HAL_GetTick+0x10>)
 8001e76:	681b      	ldr	r3, [r3, #0]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr
 8001e80:	20000764 	.word	0x20000764

08001e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e8c:	f7ff fff0 	bl	8001e70 <HAL_GetTick>
 8001e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9c:	d005      	beq.n	8001eaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <HAL_Delay+0x44>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eaa:	bf00      	nop
 8001eac:	f7ff ffe0 	bl	8001e70 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d8f7      	bhi.n	8001eac <HAL_Delay+0x28>
  {
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	bf00      	nop
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200000f8 	.word	0x200000f8

08001ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <__NVIC_SetPriorityGrouping+0x44>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efe:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <__NVIC_SetPriorityGrouping+0x44>)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	60d3      	str	r3, [r2, #12]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f18:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <__NVIC_GetPriorityGrouping+0x18>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	0a1b      	lsrs	r3, r3, #8
 8001f1e:	f003 0307 	and.w	r3, r3, #7
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	db0b      	blt.n	8001f5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	f003 021f 	and.w	r2, r3, #31
 8001f48:	4906      	ldr	r1, [pc, #24]	; (8001f64 <__NVIC_EnableIRQ+0x34>)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	095b      	lsrs	r3, r3, #5
 8001f50:	2001      	movs	r0, #1
 8001f52:	fa00 f202 	lsl.w	r2, r0, r2
 8001f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr
 8001f64:	e000e100 	.word	0xe000e100

08001f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	6039      	str	r1, [r7, #0]
 8001f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	db0a      	blt.n	8001f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	490c      	ldr	r1, [pc, #48]	; (8001fb4 <__NVIC_SetPriority+0x4c>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	0112      	lsls	r2, r2, #4
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f90:	e00a      	b.n	8001fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4908      	ldr	r1, [pc, #32]	; (8001fb8 <__NVIC_SetPriority+0x50>)
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	3b04      	subs	r3, #4
 8001fa0:	0112      	lsls	r2, r2, #4
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	761a      	strb	r2, [r3, #24]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000e100 	.word	0xe000e100
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	; 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f1c3 0307 	rsb	r3, r3, #7
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	bf28      	it	cs
 8001fda:	2304      	movcs	r3, #4
 8001fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	2b06      	cmp	r3, #6
 8001fe4:	d902      	bls.n	8001fec <NVIC_EncodePriority+0x30>
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3b03      	subs	r3, #3
 8001fea:	e000      	b.n	8001fee <NVIC_EncodePriority+0x32>
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43da      	mvns	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	401a      	ands	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002004:	f04f 31ff 	mov.w	r1, #4294967295
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	fa01 f303 	lsl.w	r3, r1, r3
 800200e:	43d9      	mvns	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	4313      	orrs	r3, r2
         );
}
 8002016:	4618      	mov	r0, r3
 8002018:	3724      	adds	r7, #36	; 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr

08002020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3b01      	subs	r3, #1
 800202c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002030:	d301      	bcc.n	8002036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002032:	2301      	movs	r3, #1
 8002034:	e00f      	b.n	8002056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002036:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <SysTick_Config+0x40>)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3b01      	subs	r3, #1
 800203c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800203e:	210f      	movs	r1, #15
 8002040:	f04f 30ff 	mov.w	r0, #4294967295
 8002044:	f7ff ff90 	bl	8001f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002048:	4b05      	ldr	r3, [pc, #20]	; (8002060 <SysTick_Config+0x40>)
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800204e:	4b04      	ldr	r3, [pc, #16]	; (8002060 <SysTick_Config+0x40>)
 8002050:	2207      	movs	r2, #7
 8002052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	e000e010 	.word	0xe000e010

08002064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff ff2d 	bl	8001ecc <__NVIC_SetPriorityGrouping>
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800207a:	b580      	push	{r7, lr}
 800207c:	b086      	sub	sp, #24
 800207e:	af00      	add	r7, sp, #0
 8002080:	4603      	mov	r3, r0
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	607a      	str	r2, [r7, #4]
 8002086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800208c:	f7ff ff42 	bl	8001f14 <__NVIC_GetPriorityGrouping>
 8002090:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	68b9      	ldr	r1, [r7, #8]
 8002096:	6978      	ldr	r0, [r7, #20]
 8002098:	f7ff ff90 	bl	8001fbc <NVIC_EncodePriority>
 800209c:	4602      	mov	r2, r0
 800209e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a2:	4611      	mov	r1, r2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff5f 	bl	8001f68 <__NVIC_SetPriority>
}
 80020aa:	bf00      	nop
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	4603      	mov	r3, r0
 80020ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff35 	bl	8001f30 <__NVIC_EnableIRQ>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff ffa2 	bl	8002020 <SysTick_Config>
 80020dc:	4603      	mov	r3, r0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e043      	b.n	8002186 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	4b22      	ldr	r3, [pc, #136]	; (8002190 <HAL_DMA_Init+0xa8>)
 8002106:	4413      	add	r3, r2
 8002108:	4a22      	ldr	r2, [pc, #136]	; (8002194 <HAL_DMA_Init+0xac>)
 800210a:	fba2 2303 	umull	r2, r3, r2, r3
 800210e:	091b      	lsrs	r3, r3, #4
 8002110:	009a      	lsls	r2, r3, #2
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a1f      	ldr	r2, [pc, #124]	; (8002198 <HAL_DMA_Init+0xb0>)
 800211a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2202      	movs	r2, #2
 8002120:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002132:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002136:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002140:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800214c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002158:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr
 8002190:	bffdfff8 	.word	0xbffdfff8
 8002194:	cccccccd 	.word	0xcccccccd
 8002198:	40020000 	.word	0x40020000

0800219c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
 80021a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <HAL_DMA_Start_IT+0x20>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e04b      	b.n	8002254 <HAL_DMA_Start_IT+0xb8>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d13a      	bne.n	8002246 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2202      	movs	r2, #2
 80021d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0201 	bic.w	r2, r2, #1
 80021ec:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	68b9      	ldr	r1, [r7, #8]
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f000 f9eb 	bl	80025d0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d008      	beq.n	8002214 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f042 020e 	orr.w	r2, r2, #14
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	e00f      	b.n	8002234 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0204 	bic.w	r2, r2, #4
 8002222:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 020a 	orr.w	r2, r2, #10
 8002232:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0201 	orr.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	e005      	b.n	8002252 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800224e:	2302      	movs	r3, #2
 8002250:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002252:	7dfb      	ldrb	r3, [r7, #23]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002264:	2300      	movs	r3, #0
 8002266:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d008      	beq.n	8002286 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2204      	movs	r2, #4
 8002278:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e020      	b.n	80022c8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 020e 	bic.w	r2, r2, #14
 8002294:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0201 	bic.w	r2, r2, #1
 80022a4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ae:	2101      	movs	r1, #1
 80022b0:	fa01 f202 	lsl.w	r2, r1, r2
 80022b4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr
	...

080022d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d005      	beq.n	80022f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2204      	movs	r2, #4
 80022f0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	73fb      	strb	r3, [r7, #15]
 80022f6:	e051      	b.n	800239c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 020e 	bic.w	r2, r2, #14
 8002306:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0201 	bic.w	r2, r2, #1
 8002316:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a22      	ldr	r2, [pc, #136]	; (80023a8 <HAL_DMA_Abort_IT+0xd4>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d029      	beq.n	8002376 <HAL_DMA_Abort_IT+0xa2>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a21      	ldr	r2, [pc, #132]	; (80023ac <HAL_DMA_Abort_IT+0xd8>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d022      	beq.n	8002372 <HAL_DMA_Abort_IT+0x9e>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a1f      	ldr	r2, [pc, #124]	; (80023b0 <HAL_DMA_Abort_IT+0xdc>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d01a      	beq.n	800236c <HAL_DMA_Abort_IT+0x98>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a1e      	ldr	r2, [pc, #120]	; (80023b4 <HAL_DMA_Abort_IT+0xe0>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d012      	beq.n	8002366 <HAL_DMA_Abort_IT+0x92>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a1c      	ldr	r2, [pc, #112]	; (80023b8 <HAL_DMA_Abort_IT+0xe4>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d00a      	beq.n	8002360 <HAL_DMA_Abort_IT+0x8c>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a1b      	ldr	r2, [pc, #108]	; (80023bc <HAL_DMA_Abort_IT+0xe8>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d102      	bne.n	800235a <HAL_DMA_Abort_IT+0x86>
 8002354:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002358:	e00e      	b.n	8002378 <HAL_DMA_Abort_IT+0xa4>
 800235a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800235e:	e00b      	b.n	8002378 <HAL_DMA_Abort_IT+0xa4>
 8002360:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002364:	e008      	b.n	8002378 <HAL_DMA_Abort_IT+0xa4>
 8002366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800236a:	e005      	b.n	8002378 <HAL_DMA_Abort_IT+0xa4>
 800236c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002370:	e002      	b.n	8002378 <HAL_DMA_Abort_IT+0xa4>
 8002372:	2310      	movs	r3, #16
 8002374:	e000      	b.n	8002378 <HAL_DMA_Abort_IT+0xa4>
 8002376:	2301      	movs	r3, #1
 8002378:	4a11      	ldr	r2, [pc, #68]	; (80023c0 <HAL_DMA_Abort_IT+0xec>)
 800237a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	4798      	blx	r3
    } 
  }
  return status;
 800239c:	7bfb      	ldrb	r3, [r7, #15]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40020008 	.word	0x40020008
 80023ac:	4002001c 	.word	0x4002001c
 80023b0:	40020030 	.word	0x40020030
 80023b4:	40020044 	.word	0x40020044
 80023b8:	40020058 	.word	0x40020058
 80023bc:	4002006c 	.word	0x4002006c
 80023c0:	40020000 	.word	0x40020000

080023c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	2204      	movs	r2, #4
 80023e2:	409a      	lsls	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4013      	ands	r3, r2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d04f      	beq.n	800248c <HAL_DMA_IRQHandler+0xc8>
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d04a      	beq.n	800248c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0320 	and.w	r3, r3, #32
 8002400:	2b00      	cmp	r3, #0
 8002402:	d107      	bne.n	8002414 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0204 	bic.w	r2, r2, #4
 8002412:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a66      	ldr	r2, [pc, #408]	; (80025b4 <HAL_DMA_IRQHandler+0x1f0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d029      	beq.n	8002472 <HAL_DMA_IRQHandler+0xae>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a65      	ldr	r2, [pc, #404]	; (80025b8 <HAL_DMA_IRQHandler+0x1f4>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d022      	beq.n	800246e <HAL_DMA_IRQHandler+0xaa>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a63      	ldr	r2, [pc, #396]	; (80025bc <HAL_DMA_IRQHandler+0x1f8>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d01a      	beq.n	8002468 <HAL_DMA_IRQHandler+0xa4>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a62      	ldr	r2, [pc, #392]	; (80025c0 <HAL_DMA_IRQHandler+0x1fc>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d012      	beq.n	8002462 <HAL_DMA_IRQHandler+0x9e>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a60      	ldr	r2, [pc, #384]	; (80025c4 <HAL_DMA_IRQHandler+0x200>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d00a      	beq.n	800245c <HAL_DMA_IRQHandler+0x98>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a5f      	ldr	r2, [pc, #380]	; (80025c8 <HAL_DMA_IRQHandler+0x204>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d102      	bne.n	8002456 <HAL_DMA_IRQHandler+0x92>
 8002450:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002454:	e00e      	b.n	8002474 <HAL_DMA_IRQHandler+0xb0>
 8002456:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800245a:	e00b      	b.n	8002474 <HAL_DMA_IRQHandler+0xb0>
 800245c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002460:	e008      	b.n	8002474 <HAL_DMA_IRQHandler+0xb0>
 8002462:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002466:	e005      	b.n	8002474 <HAL_DMA_IRQHandler+0xb0>
 8002468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800246c:	e002      	b.n	8002474 <HAL_DMA_IRQHandler+0xb0>
 800246e:	2340      	movs	r3, #64	; 0x40
 8002470:	e000      	b.n	8002474 <HAL_DMA_IRQHandler+0xb0>
 8002472:	2304      	movs	r3, #4
 8002474:	4a55      	ldr	r2, [pc, #340]	; (80025cc <HAL_DMA_IRQHandler+0x208>)
 8002476:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 8094 	beq.w	80025aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800248a:	e08e      	b.n	80025aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	2202      	movs	r2, #2
 8002492:	409a      	lsls	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4013      	ands	r3, r2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d056      	beq.n	800254a <HAL_DMA_IRQHandler+0x186>
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d051      	beq.n	800254a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10b      	bne.n	80024cc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 020a 	bic.w	r2, r2, #10
 80024c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a38      	ldr	r2, [pc, #224]	; (80025b4 <HAL_DMA_IRQHandler+0x1f0>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d029      	beq.n	800252a <HAL_DMA_IRQHandler+0x166>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a37      	ldr	r2, [pc, #220]	; (80025b8 <HAL_DMA_IRQHandler+0x1f4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d022      	beq.n	8002526 <HAL_DMA_IRQHandler+0x162>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a35      	ldr	r2, [pc, #212]	; (80025bc <HAL_DMA_IRQHandler+0x1f8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d01a      	beq.n	8002520 <HAL_DMA_IRQHandler+0x15c>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a34      	ldr	r2, [pc, #208]	; (80025c0 <HAL_DMA_IRQHandler+0x1fc>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d012      	beq.n	800251a <HAL_DMA_IRQHandler+0x156>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a32      	ldr	r2, [pc, #200]	; (80025c4 <HAL_DMA_IRQHandler+0x200>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d00a      	beq.n	8002514 <HAL_DMA_IRQHandler+0x150>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a31      	ldr	r2, [pc, #196]	; (80025c8 <HAL_DMA_IRQHandler+0x204>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d102      	bne.n	800250e <HAL_DMA_IRQHandler+0x14a>
 8002508:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800250c:	e00e      	b.n	800252c <HAL_DMA_IRQHandler+0x168>
 800250e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002512:	e00b      	b.n	800252c <HAL_DMA_IRQHandler+0x168>
 8002514:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002518:	e008      	b.n	800252c <HAL_DMA_IRQHandler+0x168>
 800251a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800251e:	e005      	b.n	800252c <HAL_DMA_IRQHandler+0x168>
 8002520:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002524:	e002      	b.n	800252c <HAL_DMA_IRQHandler+0x168>
 8002526:	2320      	movs	r3, #32
 8002528:	e000      	b.n	800252c <HAL_DMA_IRQHandler+0x168>
 800252a:	2302      	movs	r3, #2
 800252c:	4a27      	ldr	r2, [pc, #156]	; (80025cc <HAL_DMA_IRQHandler+0x208>)
 800252e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253c:	2b00      	cmp	r3, #0
 800253e:	d034      	beq.n	80025aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002548:	e02f      	b.n	80025aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	2208      	movs	r2, #8
 8002550:	409a      	lsls	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4013      	ands	r3, r2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d028      	beq.n	80025ac <HAL_DMA_IRQHandler+0x1e8>
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b00      	cmp	r3, #0
 8002562:	d023      	beq.n	80025ac <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 020e 	bic.w	r2, r2, #14
 8002572:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257c:	2101      	movs	r1, #1
 800257e:	fa01 f202 	lsl.w	r2, r1, r2
 8002582:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d004      	beq.n	80025ac <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	4798      	blx	r3
    }
  }
  return;
 80025aa:	bf00      	nop
 80025ac:	bf00      	nop
}
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40020008 	.word	0x40020008
 80025b8:	4002001c 	.word	0x4002001c
 80025bc:	40020030 	.word	0x40020030
 80025c0:	40020044 	.word	0x40020044
 80025c4:	40020058 	.word	0x40020058
 80025c8:	4002006c 	.word	0x4002006c
 80025cc:	40020000 	.word	0x40020000

080025d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
 80025dc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e6:	2101      	movs	r1, #1
 80025e8:	fa01 f202 	lsl.w	r2, r1, r2
 80025ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b10      	cmp	r3, #16
 80025fc:	d108      	bne.n	8002610 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800260e:	e007      	b.n	8002620 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	60da      	str	r2, [r3, #12]
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr
	...

0800262c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800262c:	b480      	push	{r7}
 800262e:	b08b      	sub	sp, #44	; 0x2c
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002636:	2300      	movs	r3, #0
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800263a:	2300      	movs	r3, #0
 800263c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800263e:	e169      	b.n	8002914 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002640:	2201      	movs	r2, #1
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	69fa      	ldr	r2, [r7, #28]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	429a      	cmp	r2, r3
 800265a:	f040 8158 	bne.w	800290e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	4a9a      	ldr	r2, [pc, #616]	; (80028cc <HAL_GPIO_Init+0x2a0>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d05e      	beq.n	8002726 <HAL_GPIO_Init+0xfa>
 8002668:	4a98      	ldr	r2, [pc, #608]	; (80028cc <HAL_GPIO_Init+0x2a0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d875      	bhi.n	800275a <HAL_GPIO_Init+0x12e>
 800266e:	4a98      	ldr	r2, [pc, #608]	; (80028d0 <HAL_GPIO_Init+0x2a4>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d058      	beq.n	8002726 <HAL_GPIO_Init+0xfa>
 8002674:	4a96      	ldr	r2, [pc, #600]	; (80028d0 <HAL_GPIO_Init+0x2a4>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d86f      	bhi.n	800275a <HAL_GPIO_Init+0x12e>
 800267a:	4a96      	ldr	r2, [pc, #600]	; (80028d4 <HAL_GPIO_Init+0x2a8>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d052      	beq.n	8002726 <HAL_GPIO_Init+0xfa>
 8002680:	4a94      	ldr	r2, [pc, #592]	; (80028d4 <HAL_GPIO_Init+0x2a8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d869      	bhi.n	800275a <HAL_GPIO_Init+0x12e>
 8002686:	4a94      	ldr	r2, [pc, #592]	; (80028d8 <HAL_GPIO_Init+0x2ac>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d04c      	beq.n	8002726 <HAL_GPIO_Init+0xfa>
 800268c:	4a92      	ldr	r2, [pc, #584]	; (80028d8 <HAL_GPIO_Init+0x2ac>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d863      	bhi.n	800275a <HAL_GPIO_Init+0x12e>
 8002692:	4a92      	ldr	r2, [pc, #584]	; (80028dc <HAL_GPIO_Init+0x2b0>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d046      	beq.n	8002726 <HAL_GPIO_Init+0xfa>
 8002698:	4a90      	ldr	r2, [pc, #576]	; (80028dc <HAL_GPIO_Init+0x2b0>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d85d      	bhi.n	800275a <HAL_GPIO_Init+0x12e>
 800269e:	2b12      	cmp	r3, #18
 80026a0:	d82a      	bhi.n	80026f8 <HAL_GPIO_Init+0xcc>
 80026a2:	2b12      	cmp	r3, #18
 80026a4:	d859      	bhi.n	800275a <HAL_GPIO_Init+0x12e>
 80026a6:	a201      	add	r2, pc, #4	; (adr r2, 80026ac <HAL_GPIO_Init+0x80>)
 80026a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ac:	08002727 	.word	0x08002727
 80026b0:	08002701 	.word	0x08002701
 80026b4:	08002713 	.word	0x08002713
 80026b8:	08002755 	.word	0x08002755
 80026bc:	0800275b 	.word	0x0800275b
 80026c0:	0800275b 	.word	0x0800275b
 80026c4:	0800275b 	.word	0x0800275b
 80026c8:	0800275b 	.word	0x0800275b
 80026cc:	0800275b 	.word	0x0800275b
 80026d0:	0800275b 	.word	0x0800275b
 80026d4:	0800275b 	.word	0x0800275b
 80026d8:	0800275b 	.word	0x0800275b
 80026dc:	0800275b 	.word	0x0800275b
 80026e0:	0800275b 	.word	0x0800275b
 80026e4:	0800275b 	.word	0x0800275b
 80026e8:	0800275b 	.word	0x0800275b
 80026ec:	0800275b 	.word	0x0800275b
 80026f0:	08002709 	.word	0x08002709
 80026f4:	0800271d 	.word	0x0800271d
 80026f8:	4a79      	ldr	r2, [pc, #484]	; (80028e0 <HAL_GPIO_Init+0x2b4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d013      	beq.n	8002726 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026fe:	e02c      	b.n	800275a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	623b      	str	r3, [r7, #32]
          break;
 8002706:	e029      	b.n	800275c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	3304      	adds	r3, #4
 800270e:	623b      	str	r3, [r7, #32]
          break;
 8002710:	e024      	b.n	800275c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	3308      	adds	r3, #8
 8002718:	623b      	str	r3, [r7, #32]
          break;
 800271a:	e01f      	b.n	800275c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	330c      	adds	r3, #12
 8002722:	623b      	str	r3, [r7, #32]
          break;
 8002724:	e01a      	b.n	800275c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d102      	bne.n	8002734 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800272e:	2304      	movs	r3, #4
 8002730:	623b      	str	r3, [r7, #32]
          break;
 8002732:	e013      	b.n	800275c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d105      	bne.n	8002748 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800273c:	2308      	movs	r3, #8
 800273e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69fa      	ldr	r2, [r7, #28]
 8002744:	611a      	str	r2, [r3, #16]
          break;
 8002746:	e009      	b.n	800275c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002748:	2308      	movs	r3, #8
 800274a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69fa      	ldr	r2, [r7, #28]
 8002750:	615a      	str	r2, [r3, #20]
          break;
 8002752:	e003      	b.n	800275c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002754:	2300      	movs	r3, #0
 8002756:	623b      	str	r3, [r7, #32]
          break;
 8002758:	e000      	b.n	800275c <HAL_GPIO_Init+0x130>
          break;
 800275a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	2bff      	cmp	r3, #255	; 0xff
 8002760:	d801      	bhi.n	8002766 <HAL_GPIO_Init+0x13a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	e001      	b.n	800276a <HAL_GPIO_Init+0x13e>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3304      	adds	r3, #4
 800276a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	2bff      	cmp	r3, #255	; 0xff
 8002770:	d802      	bhi.n	8002778 <HAL_GPIO_Init+0x14c>
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	e002      	b.n	800277e <HAL_GPIO_Init+0x152>
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	3b08      	subs	r3, #8
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	210f      	movs	r1, #15
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	fa01 f303 	lsl.w	r3, r1, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	401a      	ands	r2, r3
 8002790:	6a39      	ldr	r1, [r7, #32]
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	fa01 f303 	lsl.w	r3, r1, r3
 8002798:	431a      	orrs	r2, r3
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 80b1 	beq.w	800290e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027ac:	4b4d      	ldr	r3, [pc, #308]	; (80028e4 <HAL_GPIO_Init+0x2b8>)
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	4a4c      	ldr	r2, [pc, #304]	; (80028e4 <HAL_GPIO_Init+0x2b8>)
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	6193      	str	r3, [r2, #24]
 80027b8:	4b4a      	ldr	r3, [pc, #296]	; (80028e4 <HAL_GPIO_Init+0x2b8>)
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027c4:	4a48      	ldr	r2, [pc, #288]	; (80028e8 <HAL_GPIO_Init+0x2bc>)
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	089b      	lsrs	r3, r3, #2
 80027ca:	3302      	adds	r3, #2
 80027cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	f003 0303 	and.w	r3, r3, #3
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	220f      	movs	r2, #15
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4013      	ands	r3, r2
 80027e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a40      	ldr	r2, [pc, #256]	; (80028ec <HAL_GPIO_Init+0x2c0>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d013      	beq.n	8002818 <HAL_GPIO_Init+0x1ec>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a3f      	ldr	r2, [pc, #252]	; (80028f0 <HAL_GPIO_Init+0x2c4>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d00d      	beq.n	8002814 <HAL_GPIO_Init+0x1e8>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a3e      	ldr	r2, [pc, #248]	; (80028f4 <HAL_GPIO_Init+0x2c8>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d007      	beq.n	8002810 <HAL_GPIO_Init+0x1e4>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a3d      	ldr	r2, [pc, #244]	; (80028f8 <HAL_GPIO_Init+0x2cc>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d101      	bne.n	800280c <HAL_GPIO_Init+0x1e0>
 8002808:	2303      	movs	r3, #3
 800280a:	e006      	b.n	800281a <HAL_GPIO_Init+0x1ee>
 800280c:	2304      	movs	r3, #4
 800280e:	e004      	b.n	800281a <HAL_GPIO_Init+0x1ee>
 8002810:	2302      	movs	r3, #2
 8002812:	e002      	b.n	800281a <HAL_GPIO_Init+0x1ee>
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <HAL_GPIO_Init+0x1ee>
 8002818:	2300      	movs	r3, #0
 800281a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281c:	f002 0203 	and.w	r2, r2, #3
 8002820:	0092      	lsls	r2, r2, #2
 8002822:	4093      	lsls	r3, r2
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800282a:	492f      	ldr	r1, [pc, #188]	; (80028e8 <HAL_GPIO_Init+0x2bc>)
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	089b      	lsrs	r3, r3, #2
 8002830:	3302      	adds	r3, #2
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d006      	beq.n	8002852 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002844:	4b2d      	ldr	r3, [pc, #180]	; (80028fc <HAL_GPIO_Init+0x2d0>)
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	492c      	ldr	r1, [pc, #176]	; (80028fc <HAL_GPIO_Init+0x2d0>)
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	4313      	orrs	r3, r2
 800284e:	608b      	str	r3, [r1, #8]
 8002850:	e006      	b.n	8002860 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002852:	4b2a      	ldr	r3, [pc, #168]	; (80028fc <HAL_GPIO_Init+0x2d0>)
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	43db      	mvns	r3, r3
 800285a:	4928      	ldr	r1, [pc, #160]	; (80028fc <HAL_GPIO_Init+0x2d0>)
 800285c:	4013      	ands	r3, r2
 800285e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d006      	beq.n	800287a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800286c:	4b23      	ldr	r3, [pc, #140]	; (80028fc <HAL_GPIO_Init+0x2d0>)
 800286e:	68da      	ldr	r2, [r3, #12]
 8002870:	4922      	ldr	r1, [pc, #136]	; (80028fc <HAL_GPIO_Init+0x2d0>)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	4313      	orrs	r3, r2
 8002876:	60cb      	str	r3, [r1, #12]
 8002878:	e006      	b.n	8002888 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800287a:	4b20      	ldr	r3, [pc, #128]	; (80028fc <HAL_GPIO_Init+0x2d0>)
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	43db      	mvns	r3, r3
 8002882:	491e      	ldr	r1, [pc, #120]	; (80028fc <HAL_GPIO_Init+0x2d0>)
 8002884:	4013      	ands	r3, r2
 8002886:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d006      	beq.n	80028a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002894:	4b19      	ldr	r3, [pc, #100]	; (80028fc <HAL_GPIO_Init+0x2d0>)
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	4918      	ldr	r1, [pc, #96]	; (80028fc <HAL_GPIO_Init+0x2d0>)
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	4313      	orrs	r3, r2
 800289e:	604b      	str	r3, [r1, #4]
 80028a0:	e006      	b.n	80028b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028a2:	4b16      	ldr	r3, [pc, #88]	; (80028fc <HAL_GPIO_Init+0x2d0>)
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	43db      	mvns	r3, r3
 80028aa:	4914      	ldr	r1, [pc, #80]	; (80028fc <HAL_GPIO_Init+0x2d0>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d021      	beq.n	8002900 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028bc:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <HAL_GPIO_Init+0x2d0>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	490e      	ldr	r1, [pc, #56]	; (80028fc <HAL_GPIO_Init+0x2d0>)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	600b      	str	r3, [r1, #0]
 80028c8:	e021      	b.n	800290e <HAL_GPIO_Init+0x2e2>
 80028ca:	bf00      	nop
 80028cc:	10320000 	.word	0x10320000
 80028d0:	10310000 	.word	0x10310000
 80028d4:	10220000 	.word	0x10220000
 80028d8:	10210000 	.word	0x10210000
 80028dc:	10120000 	.word	0x10120000
 80028e0:	10110000 	.word	0x10110000
 80028e4:	40021000 	.word	0x40021000
 80028e8:	40010000 	.word	0x40010000
 80028ec:	40010800 	.word	0x40010800
 80028f0:	40010c00 	.word	0x40010c00
 80028f4:	40011000 	.word	0x40011000
 80028f8:	40011400 	.word	0x40011400
 80028fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002900:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <HAL_GPIO_Init+0x304>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	43db      	mvns	r3, r3
 8002908:	4909      	ldr	r1, [pc, #36]	; (8002930 <HAL_GPIO_Init+0x304>)
 800290a:	4013      	ands	r3, r2
 800290c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	3301      	adds	r3, #1
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	fa22 f303 	lsr.w	r3, r2, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	f47f ae8e 	bne.w	8002640 <HAL_GPIO_Init+0x14>
  }
}
 8002924:	bf00      	nop
 8002926:	bf00      	nop
 8002928:	372c      	adds	r7, #44	; 0x2c
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr
 8002930:	40010400 	.word	0x40010400

08002934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	460b      	mov	r3, r1
 800293e:	807b      	strh	r3, [r7, #2]
 8002940:	4613      	mov	r3, r2
 8002942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002944:	787b      	ldrb	r3, [r7, #1]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800294a:	887a      	ldrh	r2, [r7, #2]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002950:	e003      	b.n	800295a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002952:	887b      	ldrh	r3, [r7, #2]
 8002954:	041a      	lsls	r2, r3, #16
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	611a      	str	r2, [r3, #16]
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr

08002964 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002976:	887a      	ldrh	r2, [r7, #2]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4013      	ands	r3, r2
 800297c:	041a      	lsls	r2, r3, #16
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	43d9      	mvns	r1, r3
 8002982:	887b      	ldrh	r3, [r7, #2]
 8002984:	400b      	ands	r3, r1
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	611a      	str	r2, [r3, #16]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr
	...

08002998 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e272      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 8087 	beq.w	8002ac6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029b8:	4b92      	ldr	r3, [pc, #584]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 030c 	and.w	r3, r3, #12
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d00c      	beq.n	80029de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029c4:	4b8f      	ldr	r3, [pc, #572]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 030c 	and.w	r3, r3, #12
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d112      	bne.n	80029f6 <HAL_RCC_OscConfig+0x5e>
 80029d0:	4b8c      	ldr	r3, [pc, #560]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029dc:	d10b      	bne.n	80029f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029de:	4b89      	ldr	r3, [pc, #548]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d06c      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x12c>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d168      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e24c      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029fe:	d106      	bne.n	8002a0e <HAL_RCC_OscConfig+0x76>
 8002a00:	4b80      	ldr	r3, [pc, #512]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a7f      	ldr	r2, [pc, #508]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	e02e      	b.n	8002a6c <HAL_RCC_OscConfig+0xd4>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10c      	bne.n	8002a30 <HAL_RCC_OscConfig+0x98>
 8002a16:	4b7b      	ldr	r3, [pc, #492]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a7a      	ldr	r2, [pc, #488]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	4b78      	ldr	r3, [pc, #480]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a77      	ldr	r2, [pc, #476]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	e01d      	b.n	8002a6c <HAL_RCC_OscConfig+0xd4>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a38:	d10c      	bne.n	8002a54 <HAL_RCC_OscConfig+0xbc>
 8002a3a:	4b72      	ldr	r3, [pc, #456]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a71      	ldr	r2, [pc, #452]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	4b6f      	ldr	r3, [pc, #444]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a6e      	ldr	r2, [pc, #440]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	e00b      	b.n	8002a6c <HAL_RCC_OscConfig+0xd4>
 8002a54:	4b6b      	ldr	r3, [pc, #428]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a6a      	ldr	r2, [pc, #424]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	4b68      	ldr	r3, [pc, #416]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a67      	ldr	r2, [pc, #412]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d013      	beq.n	8002a9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a74:	f7ff f9fc 	bl	8001e70 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a7c:	f7ff f9f8 	bl	8001e70 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b64      	cmp	r3, #100	; 0x64
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e200      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8e:	4b5d      	ldr	r3, [pc, #372]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0xe4>
 8002a9a:	e014      	b.n	8002ac6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7ff f9e8 	bl	8001e70 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa4:	f7ff f9e4 	bl	8001e70 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b64      	cmp	r3, #100	; 0x64
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e1ec      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab6:	4b53      	ldr	r3, [pc, #332]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x10c>
 8002ac2:	e000      	b.n	8002ac6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d063      	beq.n	8002b9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ad2:	4b4c      	ldr	r3, [pc, #304]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00b      	beq.n	8002af6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ade:	4b49      	ldr	r3, [pc, #292]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d11c      	bne.n	8002b24 <HAL_RCC_OscConfig+0x18c>
 8002aea:	4b46      	ldr	r3, [pc, #280]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d116      	bne.n	8002b24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af6:	4b43      	ldr	r3, [pc, #268]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d005      	beq.n	8002b0e <HAL_RCC_OscConfig+0x176>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d001      	beq.n	8002b0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e1c0      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0e:	4b3d      	ldr	r3, [pc, #244]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	4939      	ldr	r1, [pc, #228]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b22:	e03a      	b.n	8002b9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d020      	beq.n	8002b6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b2c:	4b36      	ldr	r3, [pc, #216]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b32:	f7ff f99d 	bl	8001e70 <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b3a:	f7ff f999 	bl	8001e70 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e1a1      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4c:	4b2d      	ldr	r3, [pc, #180]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0f0      	beq.n	8002b3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b58:	4b2a      	ldr	r3, [pc, #168]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4927      	ldr	r1, [pc, #156]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	600b      	str	r3, [r1, #0]
 8002b6c:	e015      	b.n	8002b9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b6e:	4b26      	ldr	r3, [pc, #152]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7ff f97c 	bl	8001e70 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b7c:	f7ff f978 	bl	8001e70 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e180      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8e:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d03a      	beq.n	8002c1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d019      	beq.n	8002be2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bae:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb4:	f7ff f95c 	bl	8001e70 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bbc:	f7ff f958 	bl	8001e70 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e160      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bce:	4b0d      	ldr	r3, [pc, #52]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0f0      	beq.n	8002bbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bda:	2001      	movs	r0, #1
 8002bdc:	f000 face 	bl	800317c <RCC_Delay>
 8002be0:	e01c      	b.n	8002c1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002be2:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be8:	f7ff f942 	bl	8001e70 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bee:	e00f      	b.n	8002c10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bf0:	f7ff f93e 	bl	8001e70 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d908      	bls.n	8002c10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e146      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
 8002c02:	bf00      	nop
 8002c04:	40021000 	.word	0x40021000
 8002c08:	42420000 	.word	0x42420000
 8002c0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c10:	4b92      	ldr	r3, [pc, #584]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1e9      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 80a6 	beq.w	8002d76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c2e:	4b8b      	ldr	r3, [pc, #556]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10d      	bne.n	8002c56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c3a:	4b88      	ldr	r3, [pc, #544]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	4a87      	ldr	r2, [pc, #540]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c44:	61d3      	str	r3, [r2, #28]
 8002c46:	4b85      	ldr	r3, [pc, #532]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	60bb      	str	r3, [r7, #8]
 8002c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c52:	2301      	movs	r3, #1
 8002c54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c56:	4b82      	ldr	r3, [pc, #520]	; (8002e60 <HAL_RCC_OscConfig+0x4c8>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d118      	bne.n	8002c94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c62:	4b7f      	ldr	r3, [pc, #508]	; (8002e60 <HAL_RCC_OscConfig+0x4c8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a7e      	ldr	r2, [pc, #504]	; (8002e60 <HAL_RCC_OscConfig+0x4c8>)
 8002c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c6e:	f7ff f8ff 	bl	8001e70 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c76:	f7ff f8fb 	bl	8001e70 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b64      	cmp	r3, #100	; 0x64
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e103      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c88:	4b75      	ldr	r3, [pc, #468]	; (8002e60 <HAL_RCC_OscConfig+0x4c8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d106      	bne.n	8002caa <HAL_RCC_OscConfig+0x312>
 8002c9c:	4b6f      	ldr	r3, [pc, #444]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	4a6e      	ldr	r2, [pc, #440]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	6213      	str	r3, [r2, #32]
 8002ca8:	e02d      	b.n	8002d06 <HAL_RCC_OscConfig+0x36e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10c      	bne.n	8002ccc <HAL_RCC_OscConfig+0x334>
 8002cb2:	4b6a      	ldr	r3, [pc, #424]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	4a69      	ldr	r2, [pc, #420]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	f023 0301 	bic.w	r3, r3, #1
 8002cbc:	6213      	str	r3, [r2, #32]
 8002cbe:	4b67      	ldr	r3, [pc, #412]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	4a66      	ldr	r2, [pc, #408]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	f023 0304 	bic.w	r3, r3, #4
 8002cc8:	6213      	str	r3, [r2, #32]
 8002cca:	e01c      	b.n	8002d06 <HAL_RCC_OscConfig+0x36e>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	2b05      	cmp	r3, #5
 8002cd2:	d10c      	bne.n	8002cee <HAL_RCC_OscConfig+0x356>
 8002cd4:	4b61      	ldr	r3, [pc, #388]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	4a60      	ldr	r2, [pc, #384]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cda:	f043 0304 	orr.w	r3, r3, #4
 8002cde:	6213      	str	r3, [r2, #32]
 8002ce0:	4b5e      	ldr	r3, [pc, #376]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	4a5d      	ldr	r2, [pc, #372]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	6213      	str	r3, [r2, #32]
 8002cec:	e00b      	b.n	8002d06 <HAL_RCC_OscConfig+0x36e>
 8002cee:	4b5b      	ldr	r3, [pc, #364]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	4a5a      	ldr	r2, [pc, #360]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cf4:	f023 0301 	bic.w	r3, r3, #1
 8002cf8:	6213      	str	r3, [r2, #32]
 8002cfa:	4b58      	ldr	r3, [pc, #352]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	4a57      	ldr	r2, [pc, #348]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002d00:	f023 0304 	bic.w	r3, r3, #4
 8002d04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d015      	beq.n	8002d3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0e:	f7ff f8af 	bl	8001e70 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d14:	e00a      	b.n	8002d2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d16:	f7ff f8ab 	bl	8001e70 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e0b1      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2c:	4b4b      	ldr	r3, [pc, #300]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0ee      	beq.n	8002d16 <HAL_RCC_OscConfig+0x37e>
 8002d38:	e014      	b.n	8002d64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3a:	f7ff f899 	bl	8001e70 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d40:	e00a      	b.n	8002d58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d42:	f7ff f895 	bl	8001e70 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e09b      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d58:	4b40      	ldr	r3, [pc, #256]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1ee      	bne.n	8002d42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d64:	7dfb      	ldrb	r3, [r7, #23]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d105      	bne.n	8002d76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6a:	4b3c      	ldr	r3, [pc, #240]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	4a3b      	ldr	r2, [pc, #236]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 8087 	beq.w	8002e8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d80:	4b36      	ldr	r3, [pc, #216]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 030c 	and.w	r3, r3, #12
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d061      	beq.n	8002e50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d146      	bne.n	8002e22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d94:	4b33      	ldr	r3, [pc, #204]	; (8002e64 <HAL_RCC_OscConfig+0x4cc>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9a:	f7ff f869 	bl	8001e70 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da2:	f7ff f865 	bl	8001e70 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e06d      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db4:	4b29      	ldr	r3, [pc, #164]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1f0      	bne.n	8002da2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc8:	d108      	bne.n	8002ddc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dca:	4b24      	ldr	r3, [pc, #144]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	4921      	ldr	r1, [pc, #132]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ddc:	4b1f      	ldr	r3, [pc, #124]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a19      	ldr	r1, [r3, #32]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	430b      	orrs	r3, r1
 8002dee:	491b      	ldr	r1, [pc, #108]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df4:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <HAL_RCC_OscConfig+0x4cc>)
 8002df6:	2201      	movs	r2, #1
 8002df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfa:	f7ff f839 	bl	8001e70 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e02:	f7ff f835 	bl	8001e70 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e03d      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e14:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0f0      	beq.n	8002e02 <HAL_RCC_OscConfig+0x46a>
 8002e20:	e035      	b.n	8002e8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e22:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <HAL_RCC_OscConfig+0x4cc>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7ff f822 	bl	8001e70 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e30:	f7ff f81e 	bl	8001e70 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e026      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e42:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0x498>
 8002e4e:	e01e      	b.n	8002e8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d107      	bne.n	8002e68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e019      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40007000 	.word	0x40007000
 8002e64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e68:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <HAL_RCC_OscConfig+0x500>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d106      	bne.n	8002e8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d001      	beq.n	8002e8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40021000 	.word	0x40021000

08002e9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0d0      	b.n	8003052 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002eb0:	4b6a      	ldr	r3, [pc, #424]	; (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d910      	bls.n	8002ee0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ebe:	4b67      	ldr	r3, [pc, #412]	; (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f023 0207 	bic.w	r2, r3, #7
 8002ec6:	4965      	ldr	r1, [pc, #404]	; (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ece:	4b63      	ldr	r3, [pc, #396]	; (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0b8      	b.n	8003052 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d020      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d005      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ef8:	4b59      	ldr	r3, [pc, #356]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	4a58      	ldr	r2, [pc, #352]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002efe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0308 	and.w	r3, r3, #8
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f10:	4b53      	ldr	r3, [pc, #332]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	4a52      	ldr	r2, [pc, #328]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f1c:	4b50      	ldr	r3, [pc, #320]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	494d      	ldr	r1, [pc, #308]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d040      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d107      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f42:	4b47      	ldr	r3, [pc, #284]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d115      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e07f      	b.n	8003052 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d107      	bne.n	8002f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f5a:	4b41      	ldr	r3, [pc, #260]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d109      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e073      	b.n	8003052 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f6a:	4b3d      	ldr	r3, [pc, #244]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e06b      	b.n	8003052 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f7a:	4b39      	ldr	r3, [pc, #228]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f023 0203 	bic.w	r2, r3, #3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	4936      	ldr	r1, [pc, #216]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f8c:	f7fe ff70 	bl	8001e70 <HAL_GetTick>
 8002f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f92:	e00a      	b.n	8002faa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f94:	f7fe ff6c 	bl	8001e70 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e053      	b.n	8003052 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002faa:	4b2d      	ldr	r3, [pc, #180]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 020c 	and.w	r2, r3, #12
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d1eb      	bne.n	8002f94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fbc:	4b27      	ldr	r3, [pc, #156]	; (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d210      	bcs.n	8002fec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fca:	4b24      	ldr	r3, [pc, #144]	; (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f023 0207 	bic.w	r2, r3, #7
 8002fd2:	4922      	ldr	r1, [pc, #136]	; (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fda:	4b20      	ldr	r3, [pc, #128]	; (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d001      	beq.n	8002fec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e032      	b.n	8003052 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d008      	beq.n	800300a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff8:	4b19      	ldr	r3, [pc, #100]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	4916      	ldr	r1, [pc, #88]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8003006:	4313      	orrs	r3, r2
 8003008:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d009      	beq.n	800302a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003016:	4b12      	ldr	r3, [pc, #72]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	490e      	ldr	r1, [pc, #56]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8003026:	4313      	orrs	r3, r2
 8003028:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800302a:	f000 f821 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 800302e:	4602      	mov	r2, r0
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	091b      	lsrs	r3, r3, #4
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	490a      	ldr	r1, [pc, #40]	; (8003064 <HAL_RCC_ClockConfig+0x1c8>)
 800303c:	5ccb      	ldrb	r3, [r1, r3]
 800303e:	fa22 f303 	lsr.w	r3, r2, r3
 8003042:	4a09      	ldr	r2, [pc, #36]	; (8003068 <HAL_RCC_ClockConfig+0x1cc>)
 8003044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003046:	4b09      	ldr	r3, [pc, #36]	; (800306c <HAL_RCC_ClockConfig+0x1d0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f7fe fece 	bl	8001dec <HAL_InitTick>

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40022000 	.word	0x40022000
 8003060:	40021000 	.word	0x40021000
 8003064:	08007820 	.word	0x08007820
 8003068:	200000f0 	.word	0x200000f0
 800306c:	200000f4 	.word	0x200000f4

08003070 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003070:	b480      	push	{r7}
 8003072:	b087      	sub	sp, #28
 8003074:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	2300      	movs	r3, #0
 800307c:	60bb      	str	r3, [r7, #8]
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	2300      	movs	r3, #0
 8003084:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800308a:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <HAL_RCC_GetSysClockFreq+0x94>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f003 030c 	and.w	r3, r3, #12
 8003096:	2b04      	cmp	r3, #4
 8003098:	d002      	beq.n	80030a0 <HAL_RCC_GetSysClockFreq+0x30>
 800309a:	2b08      	cmp	r3, #8
 800309c:	d003      	beq.n	80030a6 <HAL_RCC_GetSysClockFreq+0x36>
 800309e:	e027      	b.n	80030f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030a0:	4b19      	ldr	r3, [pc, #100]	; (8003108 <HAL_RCC_GetSysClockFreq+0x98>)
 80030a2:	613b      	str	r3, [r7, #16]
      break;
 80030a4:	e027      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	0c9b      	lsrs	r3, r3, #18
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	4a17      	ldr	r2, [pc, #92]	; (800310c <HAL_RCC_GetSysClockFreq+0x9c>)
 80030b0:	5cd3      	ldrb	r3, [r2, r3]
 80030b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d010      	beq.n	80030e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030be:	4b11      	ldr	r3, [pc, #68]	; (8003104 <HAL_RCC_GetSysClockFreq+0x94>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	0c5b      	lsrs	r3, r3, #17
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	4a11      	ldr	r2, [pc, #68]	; (8003110 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030ca:	5cd3      	ldrb	r3, [r2, r3]
 80030cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a0d      	ldr	r2, [pc, #52]	; (8003108 <HAL_RCC_GetSysClockFreq+0x98>)
 80030d2:	fb03 f202 	mul.w	r2, r3, r2
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030dc:	617b      	str	r3, [r7, #20]
 80030de:	e004      	b.n	80030ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a0c      	ldr	r2, [pc, #48]	; (8003114 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030e4:	fb02 f303 	mul.w	r3, r2, r3
 80030e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	613b      	str	r3, [r7, #16]
      break;
 80030ee:	e002      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030f0:	4b05      	ldr	r3, [pc, #20]	; (8003108 <HAL_RCC_GetSysClockFreq+0x98>)
 80030f2:	613b      	str	r3, [r7, #16]
      break;
 80030f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030f6:	693b      	ldr	r3, [r7, #16]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	371c      	adds	r7, #28
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40021000 	.word	0x40021000
 8003108:	007a1200 	.word	0x007a1200
 800310c:	08007838 	.word	0x08007838
 8003110:	08007848 	.word	0x08007848
 8003114:	003d0900 	.word	0x003d0900

08003118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800311c:	4b02      	ldr	r3, [pc, #8]	; (8003128 <HAL_RCC_GetHCLKFreq+0x10>)
 800311e:	681b      	ldr	r3, [r3, #0]
}
 8003120:	4618      	mov	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr
 8003128:	200000f0 	.word	0x200000f0

0800312c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003130:	f7ff fff2 	bl	8003118 <HAL_RCC_GetHCLKFreq>
 8003134:	4602      	mov	r2, r0
 8003136:	4b05      	ldr	r3, [pc, #20]	; (800314c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	0a1b      	lsrs	r3, r3, #8
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	4903      	ldr	r1, [pc, #12]	; (8003150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003142:	5ccb      	ldrb	r3, [r1, r3]
 8003144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003148:	4618      	mov	r0, r3
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40021000 	.word	0x40021000
 8003150:	08007830 	.word	0x08007830

08003154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003158:	f7ff ffde 	bl	8003118 <HAL_RCC_GetHCLKFreq>
 800315c:	4602      	mov	r2, r0
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	0adb      	lsrs	r3, r3, #11
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	4903      	ldr	r1, [pc, #12]	; (8003178 <HAL_RCC_GetPCLK2Freq+0x24>)
 800316a:	5ccb      	ldrb	r3, [r1, r3]
 800316c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003170:	4618      	mov	r0, r3
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40021000 	.word	0x40021000
 8003178:	08007830 	.word	0x08007830

0800317c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003184:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <RCC_Delay+0x34>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a0a      	ldr	r2, [pc, #40]	; (80031b4 <RCC_Delay+0x38>)
 800318a:	fba2 2303 	umull	r2, r3, r2, r3
 800318e:	0a5b      	lsrs	r3, r3, #9
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	fb02 f303 	mul.w	r3, r2, r3
 8003196:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003198:	bf00      	nop
  }
  while (Delay --);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1e5a      	subs	r2, r3, #1
 800319e:	60fa      	str	r2, [r7, #12]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1f9      	bne.n	8003198 <RCC_Delay+0x1c>
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr
 80031b0:	200000f0 	.word	0x200000f0
 80031b4:	10624dd3 	.word	0x10624dd3

080031b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e041      	b.n	800324e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fe fbe0 	bl	80019a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3304      	adds	r3, #4
 80031f4:	4619      	mov	r1, r3
 80031f6:	4610      	mov	r0, r2
 80031f8:	f000 fa74 	bl	80036e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b01      	cmp	r3, #1
 800326a:	d001      	beq.n	8003270 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e03a      	b.n	80032e6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a18      	ldr	r2, [pc, #96]	; (80032f0 <HAL_TIM_Base_Start_IT+0x98>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00e      	beq.n	80032b0 <HAL_TIM_Base_Start_IT+0x58>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800329a:	d009      	beq.n	80032b0 <HAL_TIM_Base_Start_IT+0x58>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a14      	ldr	r2, [pc, #80]	; (80032f4 <HAL_TIM_Base_Start_IT+0x9c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d004      	beq.n	80032b0 <HAL_TIM_Base_Start_IT+0x58>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a13      	ldr	r2, [pc, #76]	; (80032f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d111      	bne.n	80032d4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b06      	cmp	r3, #6
 80032c0:	d010      	beq.n	80032e4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f042 0201 	orr.w	r2, r2, #1
 80032d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d2:	e007      	b.n	80032e4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr
 80032f0:	40012c00 	.word	0x40012c00
 80032f4:	40000400 	.word	0x40000400
 80032f8:	40000800 	.word	0x40000800

080032fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b02      	cmp	r3, #2
 8003310:	d122      	bne.n	8003358 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b02      	cmp	r3, #2
 800331e:	d11b      	bne.n	8003358 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f06f 0202 	mvn.w	r2, #2
 8003328:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f9b4 	bl	80036ac <HAL_TIM_IC_CaptureCallback>
 8003344:	e005      	b.n	8003352 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f9a7 	bl	800369a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f9b6 	bl	80036be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f003 0304 	and.w	r3, r3, #4
 8003362:	2b04      	cmp	r3, #4
 8003364:	d122      	bne.n	80033ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b04      	cmp	r3, #4
 8003372:	d11b      	bne.n	80033ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f06f 0204 	mvn.w	r2, #4
 800337c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2202      	movs	r2, #2
 8003382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f98a 	bl	80036ac <HAL_TIM_IC_CaptureCallback>
 8003398:	e005      	b.n	80033a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f97d 	bl	800369a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f98c 	bl	80036be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d122      	bne.n	8003400 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d11b      	bne.n	8003400 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f06f 0208 	mvn.w	r2, #8
 80033d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2204      	movs	r2, #4
 80033d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f960 	bl	80036ac <HAL_TIM_IC_CaptureCallback>
 80033ec:	e005      	b.n	80033fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f953 	bl	800369a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f962 	bl	80036be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	f003 0310 	and.w	r3, r3, #16
 800340a:	2b10      	cmp	r3, #16
 800340c:	d122      	bne.n	8003454 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	2b10      	cmp	r3, #16
 800341a:	d11b      	bne.n	8003454 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f06f 0210 	mvn.w	r2, #16
 8003424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2208      	movs	r2, #8
 800342a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f936 	bl	80036ac <HAL_TIM_IC_CaptureCallback>
 8003440:	e005      	b.n	800344e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f929 	bl	800369a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f938 	bl	80036be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b01      	cmp	r3, #1
 8003460:	d10e      	bne.n	8003480 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b01      	cmp	r3, #1
 800346e:	d107      	bne.n	8003480 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f06f 0201 	mvn.w	r2, #1
 8003478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7fe f89c 	bl	80015b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348a:	2b80      	cmp	r3, #128	; 0x80
 800348c:	d10e      	bne.n	80034ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003498:	2b80      	cmp	r3, #128	; 0x80
 800349a:	d107      	bne.n	80034ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 fa7b 	bl	80039a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b6:	2b40      	cmp	r3, #64	; 0x40
 80034b8:	d10e      	bne.n	80034d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c4:	2b40      	cmp	r3, #64	; 0x40
 80034c6:	d107      	bne.n	80034d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f8fc 	bl	80036d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f003 0320 	and.w	r3, r3, #32
 80034e2:	2b20      	cmp	r3, #32
 80034e4:	d10e      	bne.n	8003504 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f003 0320 	and.w	r3, r3, #32
 80034f0:	2b20      	cmp	r3, #32
 80034f2:	d107      	bne.n	8003504 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f06f 0220 	mvn.w	r2, #32
 80034fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 fa46 	bl	8003990 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003504:	bf00      	nop
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003520:	2b01      	cmp	r3, #1
 8003522:	d101      	bne.n	8003528 <HAL_TIM_ConfigClockSource+0x1c>
 8003524:	2302      	movs	r3, #2
 8003526:	e0b4      	b.n	8003692 <HAL_TIM_ConfigClockSource+0x186>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800354e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003560:	d03e      	beq.n	80035e0 <HAL_TIM_ConfigClockSource+0xd4>
 8003562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003566:	f200 8087 	bhi.w	8003678 <HAL_TIM_ConfigClockSource+0x16c>
 800356a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356e:	f000 8086 	beq.w	800367e <HAL_TIM_ConfigClockSource+0x172>
 8003572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003576:	d87f      	bhi.n	8003678 <HAL_TIM_ConfigClockSource+0x16c>
 8003578:	2b70      	cmp	r3, #112	; 0x70
 800357a:	d01a      	beq.n	80035b2 <HAL_TIM_ConfigClockSource+0xa6>
 800357c:	2b70      	cmp	r3, #112	; 0x70
 800357e:	d87b      	bhi.n	8003678 <HAL_TIM_ConfigClockSource+0x16c>
 8003580:	2b60      	cmp	r3, #96	; 0x60
 8003582:	d050      	beq.n	8003626 <HAL_TIM_ConfigClockSource+0x11a>
 8003584:	2b60      	cmp	r3, #96	; 0x60
 8003586:	d877      	bhi.n	8003678 <HAL_TIM_ConfigClockSource+0x16c>
 8003588:	2b50      	cmp	r3, #80	; 0x50
 800358a:	d03c      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0xfa>
 800358c:	2b50      	cmp	r3, #80	; 0x50
 800358e:	d873      	bhi.n	8003678 <HAL_TIM_ConfigClockSource+0x16c>
 8003590:	2b40      	cmp	r3, #64	; 0x40
 8003592:	d058      	beq.n	8003646 <HAL_TIM_ConfigClockSource+0x13a>
 8003594:	2b40      	cmp	r3, #64	; 0x40
 8003596:	d86f      	bhi.n	8003678 <HAL_TIM_ConfigClockSource+0x16c>
 8003598:	2b30      	cmp	r3, #48	; 0x30
 800359a:	d064      	beq.n	8003666 <HAL_TIM_ConfigClockSource+0x15a>
 800359c:	2b30      	cmp	r3, #48	; 0x30
 800359e:	d86b      	bhi.n	8003678 <HAL_TIM_ConfigClockSource+0x16c>
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	d060      	beq.n	8003666 <HAL_TIM_ConfigClockSource+0x15a>
 80035a4:	2b20      	cmp	r3, #32
 80035a6:	d867      	bhi.n	8003678 <HAL_TIM_ConfigClockSource+0x16c>
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d05c      	beq.n	8003666 <HAL_TIM_ConfigClockSource+0x15a>
 80035ac:	2b10      	cmp	r3, #16
 80035ae:	d05a      	beq.n	8003666 <HAL_TIM_ConfigClockSource+0x15a>
 80035b0:	e062      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035c2:	f000 f968 	bl	8003896 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	609a      	str	r2, [r3, #8]
      break;
 80035de:	e04f      	b.n	8003680 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035f0:	f000 f951 	bl	8003896 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003602:	609a      	str	r2, [r3, #8]
      break;
 8003604:	e03c      	b.n	8003680 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003612:	461a      	mov	r2, r3
 8003614:	f000 f8c8 	bl	80037a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2150      	movs	r1, #80	; 0x50
 800361e:	4618      	mov	r0, r3
 8003620:	f000 f91f 	bl	8003862 <TIM_ITRx_SetConfig>
      break;
 8003624:	e02c      	b.n	8003680 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003632:	461a      	mov	r2, r3
 8003634:	f000 f8e6 	bl	8003804 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2160      	movs	r1, #96	; 0x60
 800363e:	4618      	mov	r0, r3
 8003640:	f000 f90f 	bl	8003862 <TIM_ITRx_SetConfig>
      break;
 8003644:	e01c      	b.n	8003680 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003652:	461a      	mov	r2, r3
 8003654:	f000 f8a8 	bl	80037a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2140      	movs	r1, #64	; 0x40
 800365e:	4618      	mov	r0, r3
 8003660:	f000 f8ff 	bl	8003862 <TIM_ITRx_SetConfig>
      break;
 8003664:	e00c      	b.n	8003680 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4619      	mov	r1, r3
 8003670:	4610      	mov	r0, r2
 8003672:	f000 f8f6 	bl	8003862 <TIM_ITRx_SetConfig>
      break;
 8003676:	e003      	b.n	8003680 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	73fb      	strb	r3, [r7, #15]
      break;
 800367c:	e000      	b.n	8003680 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800367e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003690:	7bfb      	ldrb	r3, [r7, #15]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr

080036ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bc80      	pop	{r7}
 80036bc:	4770      	bx	lr

080036be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr

080036d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr
	...

080036e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a29      	ldr	r2, [pc, #164]	; (800379c <TIM_Base_SetConfig+0xb8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d00b      	beq.n	8003714 <TIM_Base_SetConfig+0x30>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003702:	d007      	beq.n	8003714 <TIM_Base_SetConfig+0x30>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a26      	ldr	r2, [pc, #152]	; (80037a0 <TIM_Base_SetConfig+0xbc>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d003      	beq.n	8003714 <TIM_Base_SetConfig+0x30>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a25      	ldr	r2, [pc, #148]	; (80037a4 <TIM_Base_SetConfig+0xc0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d108      	bne.n	8003726 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	4313      	orrs	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a1c      	ldr	r2, [pc, #112]	; (800379c <TIM_Base_SetConfig+0xb8>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d00b      	beq.n	8003746 <TIM_Base_SetConfig+0x62>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003734:	d007      	beq.n	8003746 <TIM_Base_SetConfig+0x62>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a19      	ldr	r2, [pc, #100]	; (80037a0 <TIM_Base_SetConfig+0xbc>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d003      	beq.n	8003746 <TIM_Base_SetConfig+0x62>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a18      	ldr	r2, [pc, #96]	; (80037a4 <TIM_Base_SetConfig+0xc0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d108      	bne.n	8003758 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800374c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	4313      	orrs	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	4313      	orrs	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a07      	ldr	r2, [pc, #28]	; (800379c <TIM_Base_SetConfig+0xb8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d103      	bne.n	800378c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	691a      	ldr	r2, [r3, #16]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	615a      	str	r2, [r3, #20]
}
 8003792:	bf00      	nop
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr
 800379c:	40012c00 	.word	0x40012c00
 80037a0:	40000400 	.word	0x40000400
 80037a4:	40000800 	.word	0x40000800

080037a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	f023 0201 	bic.w	r2, r3, #1
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f023 030a 	bic.w	r3, r3, #10
 80037e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	621a      	str	r2, [r3, #32]
}
 80037fa:	bf00      	nop
 80037fc:	371c      	adds	r7, #28
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr

08003804 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003804:	b480      	push	{r7}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	f023 0210 	bic.w	r2, r3, #16
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800382e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	031b      	lsls	r3, r3, #12
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003840:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	4313      	orrs	r3, r2
 800384a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	621a      	str	r2, [r3, #32]
}
 8003858:	bf00      	nop
 800385a:	371c      	adds	r7, #28
 800385c:	46bd      	mov	sp, r7
 800385e:	bc80      	pop	{r7}
 8003860:	4770      	bx	lr

08003862 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003862:	b480      	push	{r7}
 8003864:	b085      	sub	sp, #20
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003878:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4313      	orrs	r3, r2
 8003880:	f043 0307 	orr.w	r3, r3, #7
 8003884:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	609a      	str	r2, [r3, #8]
}
 800388c:	bf00      	nop
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr

08003896 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003896:	b480      	push	{r7}
 8003898:	b087      	sub	sp, #28
 800389a:	af00      	add	r7, sp, #0
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	607a      	str	r2, [r7, #4]
 80038a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	021a      	lsls	r2, r3, #8
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	431a      	orrs	r2, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	4313      	orrs	r3, r2
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	609a      	str	r2, [r3, #8]
}
 80038ca:	bf00      	nop
 80038cc:	371c      	adds	r7, #28
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr

080038d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e046      	b.n	800397a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003912:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	4313      	orrs	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a16      	ldr	r2, [pc, #88]	; (8003984 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d00e      	beq.n	800394e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003938:	d009      	beq.n	800394e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a12      	ldr	r2, [pc, #72]	; (8003988 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d004      	beq.n	800394e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a10      	ldr	r2, [pc, #64]	; (800398c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d10c      	bne.n	8003968 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003954:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	4313      	orrs	r3, r2
 800395e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	bc80      	pop	{r7}
 8003982:	4770      	bx	lr
 8003984:	40012c00 	.word	0x40012c00
 8003988:	40000400 	.word	0x40000400
 800398c:	40000800 	.word	0x40000800

08003990 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	bc80      	pop	{r7}
 80039a0:	4770      	bx	lr

080039a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b083      	sub	sp, #12
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr

080039b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e042      	b.n	8003a4c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d106      	bne.n	80039e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7fe f808 	bl	80019f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2224      	movs	r2, #36	; 0x24
 80039e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 ffb3 	bl	8004964 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	695a      	ldr	r2, [r3, #20]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08a      	sub	sp, #40	; 0x28
 8003a58:	af02      	add	r7, sp, #8
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	603b      	str	r3, [r7, #0]
 8003a60:	4613      	mov	r3, r2
 8003a62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b20      	cmp	r3, #32
 8003a72:	d16d      	bne.n	8003b50 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <HAL_UART_Transmit+0x2c>
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e066      	b.n	8003b52 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2221      	movs	r2, #33	; 0x21
 8003a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a92:	f7fe f9ed 	bl	8001e70 <HAL_GetTick>
 8003a96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	88fa      	ldrh	r2, [r7, #6]
 8003a9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	88fa      	ldrh	r2, [r7, #6]
 8003aa2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aac:	d108      	bne.n	8003ac0 <HAL_UART_Transmit+0x6c>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d104      	bne.n	8003ac0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	61bb      	str	r3, [r7, #24]
 8003abe:	e003      	b.n	8003ac8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ac8:	e02a      	b.n	8003b20 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2180      	movs	r1, #128	; 0x80
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 fc41 	bl	800435c <UART_WaitOnFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e036      	b.n	8003b52 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10b      	bne.n	8003b02 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	461a      	mov	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003af8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	3302      	adds	r3, #2
 8003afe:	61bb      	str	r3, [r7, #24]
 8003b00:	e007      	b.n	8003b12 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	781a      	ldrb	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1cf      	bne.n	8003aca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2200      	movs	r2, #0
 8003b32:	2140      	movs	r1, #64	; 0x40
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 fc11 	bl	800435c <UART_WaitOnFlagUntilTimeout>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e006      	b.n	8003b52 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	e000      	b.n	8003b52 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003b50:	2302      	movs	r3, #2
  }
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3720      	adds	r7, #32
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	4613      	mov	r3, r2
 8003b66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b20      	cmp	r3, #32
 8003b72:	d112      	bne.n	8003b9a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d002      	beq.n	8003b80 <HAL_UART_Receive_IT+0x26>
 8003b7a:	88fb      	ldrh	r3, [r7, #6]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e00b      	b.n	8003b9c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003b8a:	88fb      	ldrh	r3, [r7, #6]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	68b9      	ldr	r1, [r7, #8]
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 fc51 	bl	8004438 <UART_Start_Receive_IT>
 8003b96:	4603      	mov	r3, r0
 8003b98:	e000      	b.n	8003b9c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003b9a:	2302      	movs	r3, #2
  }
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b20      	cmp	r3, #32
 8003bbc:	d112      	bne.n	8003be4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d002      	beq.n	8003bca <HAL_UART_Receive_DMA+0x26>
 8003bc4:	88fb      	ldrh	r3, [r7, #6]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e00b      	b.n	8003be6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003bd4:	88fb      	ldrh	r3, [r7, #6]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	68b9      	ldr	r1, [r7, #8]
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 fc66 	bl	80044ac <UART_Start_Receive_DMA>
 8003be0:	4603      	mov	r3, r0
 8003be2:	e000      	b.n	8003be6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003be4:	2302      	movs	r3, #2
  }
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b0ba      	sub	sp, #232	; 0xe8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003c2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10f      	bne.n	8003c56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c3a:	f003 0320 	and.w	r3, r3, #32
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d009      	beq.n	8003c56 <HAL_UART_IRQHandler+0x66>
 8003c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fdca 	bl	80047e8 <UART_Receive_IT>
      return;
 8003c54:	e25b      	b.n	800410e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 80de 	beq.w	8003e1c <HAL_UART_IRQHandler+0x22c>
 8003c60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d106      	bne.n	8003c7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c70:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 80d1 	beq.w	8003e1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00b      	beq.n	8003c9e <HAL_UART_IRQHandler+0xae>
 8003c86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d005      	beq.n	8003c9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c96:	f043 0201 	orr.w	r2, r3, #1
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ca2:	f003 0304 	and.w	r3, r3, #4
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00b      	beq.n	8003cc2 <HAL_UART_IRQHandler+0xd2>
 8003caa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d005      	beq.n	8003cc2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	f043 0202 	orr.w	r2, r3, #2
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00b      	beq.n	8003ce6 <HAL_UART_IRQHandler+0xf6>
 8003cce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d005      	beq.n	8003ce6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cde:	f043 0204 	orr.w	r2, r3, #4
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cea:	f003 0308 	and.w	r3, r3, #8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d011      	beq.n	8003d16 <HAL_UART_IRQHandler+0x126>
 8003cf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d105      	bne.n	8003d0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d005      	beq.n	8003d16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0e:	f043 0208 	orr.w	r2, r3, #8
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 81f2 	beq.w	8004104 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d24:	f003 0320 	and.w	r3, r3, #32
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d008      	beq.n	8003d3e <HAL_UART_IRQHandler+0x14e>
 8003d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d30:	f003 0320 	and.w	r3, r3, #32
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 fd55 	bl	80047e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	bf14      	ite	ne
 8003d4c:	2301      	movne	r3, #1
 8003d4e:	2300      	moveq	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d103      	bne.n	8003d6a <HAL_UART_IRQHandler+0x17a>
 8003d62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d04f      	beq.n	8003e0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fc5f 	bl	800462e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d041      	beq.n	8003e02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3314      	adds	r3, #20
 8003d84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d8c:	e853 3f00 	ldrex	r3, [r3]
 8003d90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3314      	adds	r3, #20
 8003da6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003daa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003dae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003db6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003dc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1d9      	bne.n	8003d7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d013      	beq.n	8003dfa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd6:	4a7e      	ldr	r2, [pc, #504]	; (8003fd0 <HAL_UART_IRQHandler+0x3e0>)
 8003dd8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fe fa78 	bl	80022d4 <HAL_DMA_Abort_IT>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d016      	beq.n	8003e18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003df4:	4610      	mov	r0, r2
 8003df6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df8:	e00e      	b.n	8003e18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f99c 	bl	8004138 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e00:	e00a      	b.n	8003e18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f998 	bl	8004138 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e08:	e006      	b.n	8003e18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f994 	bl	8004138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003e16:	e175      	b.n	8004104 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e18:	bf00      	nop
    return;
 8003e1a:	e173      	b.n	8004104 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	f040 814f 	bne.w	80040c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e2a:	f003 0310 	and.w	r3, r3, #16
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 8148 	beq.w	80040c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e38:	f003 0310 	and.w	r3, r3, #16
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 8141 	beq.w	80040c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e42:	2300      	movs	r3, #0
 8003e44:	60bb      	str	r3, [r7, #8]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	60bb      	str	r3, [r7, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 80b6 	beq.w	8003fd4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 8145 	beq.w	8004108 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e86:	429a      	cmp	r2, r3
 8003e88:	f080 813e 	bcs.w	8004108 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e92:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	2b20      	cmp	r3, #32
 8003e9c:	f000 8088 	beq.w	8003fb0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	330c      	adds	r3, #12
 8003ea6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eaa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003eae:	e853 3f00 	ldrex	r3, [r3]
 8003eb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003eb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003eba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ebe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	330c      	adds	r3, #12
 8003ec8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003ecc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ed0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ed8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003edc:	e841 2300 	strex	r3, r2, [r1]
 8003ee0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ee4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1d9      	bne.n	8003ea0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	3314      	adds	r3, #20
 8003ef2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ef6:	e853 3f00 	ldrex	r3, [r3]
 8003efa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003efc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003efe:	f023 0301 	bic.w	r3, r3, #1
 8003f02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	3314      	adds	r3, #20
 8003f0c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f10:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f14:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f16:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f18:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f1c:	e841 2300 	strex	r3, r2, [r1]
 8003f20:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1e1      	bne.n	8003eec <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3314      	adds	r3, #20
 8003f2e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f32:	e853 3f00 	ldrex	r3, [r3]
 8003f36:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3314      	adds	r3, #20
 8003f48:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f4c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f4e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f50:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f52:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f54:	e841 2300 	strex	r3, r2, [r1]
 8003f58:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1e3      	bne.n	8003f28 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	330c      	adds	r3, #12
 8003f74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f78:	e853 3f00 	ldrex	r3, [r3]
 8003f7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f80:	f023 0310 	bic.w	r3, r3, #16
 8003f84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	330c      	adds	r3, #12
 8003f8e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003f92:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f94:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1e3      	bne.n	8003f6e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fe f956 	bl	800225c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f8bf 	bl	800414a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fcc:	e09c      	b.n	8004108 <HAL_UART_IRQHandler+0x518>
 8003fce:	bf00      	nop
 8003fd0:	080046f3 	.word	0x080046f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 808e 	beq.w	800410c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ff0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 8089 	beq.w	800410c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	330c      	adds	r3, #12
 8004000:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004004:	e853 3f00 	ldrex	r3, [r3]
 8004008:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800400a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800400c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004010:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	330c      	adds	r3, #12
 800401a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800401e:	647a      	str	r2, [r7, #68]	; 0x44
 8004020:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004022:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004024:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004026:	e841 2300 	strex	r3, r2, [r1]
 800402a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800402c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1e3      	bne.n	8003ffa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	3314      	adds	r3, #20
 8004038:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403c:	e853 3f00 	ldrex	r3, [r3]
 8004040:	623b      	str	r3, [r7, #32]
   return(result);
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	f023 0301 	bic.w	r3, r3, #1
 8004048:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3314      	adds	r3, #20
 8004052:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004056:	633a      	str	r2, [r7, #48]	; 0x30
 8004058:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800405c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800405e:	e841 2300 	strex	r3, r2, [r1]
 8004062:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1e3      	bne.n	8004032 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2220      	movs	r2, #32
 800406e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	330c      	adds	r3, #12
 800407e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	e853 3f00 	ldrex	r3, [r3]
 8004086:	60fb      	str	r3, [r7, #12]
   return(result);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0310 	bic.w	r3, r3, #16
 800408e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	330c      	adds	r3, #12
 8004098:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800409c:	61fa      	str	r2, [r7, #28]
 800409e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a0:	69b9      	ldr	r1, [r7, #24]
 80040a2:	69fa      	ldr	r2, [r7, #28]
 80040a4:	e841 2300 	strex	r3, r2, [r1]
 80040a8:	617b      	str	r3, [r7, #20]
   return(result);
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1e3      	bne.n	8004078 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040ba:	4619      	mov	r1, r3
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f844 	bl	800414a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040c2:	e023      	b.n	800410c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d009      	beq.n	80040e4 <HAL_UART_IRQHandler+0x4f4>
 80040d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fb1c 	bl	800471a <UART_Transmit_IT>
    return;
 80040e2:	e014      	b.n	800410e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00e      	beq.n	800410e <HAL_UART_IRQHandler+0x51e>
 80040f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d008      	beq.n	800410e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 fb5b 	bl	80047b8 <UART_EndTransmit_IT>
    return;
 8004102:	e004      	b.n	800410e <HAL_UART_IRQHandler+0x51e>
    return;
 8004104:	bf00      	nop
 8004106:	e002      	b.n	800410e <HAL_UART_IRQHandler+0x51e>
      return;
 8004108:	bf00      	nop
 800410a:	e000      	b.n	800410e <HAL_UART_IRQHandler+0x51e>
      return;
 800410c:	bf00      	nop
  }
}
 800410e:	37e8      	adds	r7, #232	; 0xe8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	bc80      	pop	{r7}
 8004124:	4770      	bx	lr

08004126 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	bc80      	pop	{r7}
 8004136:	4770      	bx	lr

08004138 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	bc80      	pop	{r7}
 8004148:	4770      	bx	lr

0800414a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	460b      	mov	r3, r1
 8004154:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr

08004160 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b09c      	sub	sp, #112	; 0x70
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	2b00      	cmp	r3, #0
 800417a:	d172      	bne.n	8004262 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800417c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800417e:	2200      	movs	r2, #0
 8004180:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	330c      	adds	r3, #12
 8004188:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800418c:	e853 3f00 	ldrex	r3, [r3]
 8004190:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004198:	66bb      	str	r3, [r7, #104]	; 0x68
 800419a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	330c      	adds	r3, #12
 80041a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041a2:	65ba      	str	r2, [r7, #88]	; 0x58
 80041a4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80041b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1e5      	bne.n	8004182 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	3314      	adds	r3, #20
 80041bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c0:	e853 3f00 	ldrex	r3, [r3]
 80041c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c8:	f023 0301 	bic.w	r3, r3, #1
 80041cc:	667b      	str	r3, [r7, #100]	; 0x64
 80041ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3314      	adds	r3, #20
 80041d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80041d6:	647a      	str	r2, [r7, #68]	; 0x44
 80041d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041de:	e841 2300 	strex	r3, r2, [r1]
 80041e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1e5      	bne.n	80041b6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	3314      	adds	r3, #20
 80041f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	e853 3f00 	ldrex	r3, [r3]
 80041f8:	623b      	str	r3, [r7, #32]
   return(result);
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004200:	663b      	str	r3, [r7, #96]	; 0x60
 8004202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3314      	adds	r3, #20
 8004208:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800420a:	633a      	str	r2, [r7, #48]	; 0x30
 800420c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004212:	e841 2300 	strex	r3, r2, [r1]
 8004216:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1e5      	bne.n	80041ea <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800421e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004220:	2220      	movs	r2, #32
 8004222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422a:	2b01      	cmp	r3, #1
 800422c:	d119      	bne.n	8004262 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800422e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	330c      	adds	r3, #12
 8004234:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	e853 3f00 	ldrex	r3, [r3]
 800423c:	60fb      	str	r3, [r7, #12]
   return(result);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f023 0310 	bic.w	r3, r3, #16
 8004244:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	330c      	adds	r3, #12
 800424c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800424e:	61fa      	str	r2, [r7, #28]
 8004250:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004252:	69b9      	ldr	r1, [r7, #24]
 8004254:	69fa      	ldr	r2, [r7, #28]
 8004256:	e841 2300 	strex	r3, r2, [r1]
 800425a:	617b      	str	r3, [r7, #20]
   return(result);
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1e5      	bne.n	800422e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004264:	2200      	movs	r2, #0
 8004266:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800426a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426c:	2b01      	cmp	r3, #1
 800426e:	d106      	bne.n	800427e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004272:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004274:	4619      	mov	r1, r3
 8004276:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004278:	f7ff ff67 	bl	800414a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800427c:	e002      	b.n	8004284 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800427e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004280:	f7fd f9b4 	bl	80015ec <HAL_UART_RxCpltCallback>
}
 8004284:	bf00      	nop
 8004286:	3770      	adds	r7, #112	; 0x70
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d108      	bne.n	80042ba <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042ac:	085b      	lsrs	r3, r3, #1
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	4619      	mov	r1, r3
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f7ff ff49 	bl	800414a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80042b8:	e002      	b.n	80042c0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f7ff ff33 	bl	8004126 <HAL_UART_RxHalfCpltCallback>
}
 80042c0:	bf00      	nop
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	bf14      	ite	ne
 80042e8:	2301      	movne	r3, #1
 80042ea:	2300      	moveq	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b21      	cmp	r3, #33	; 0x21
 80042fa:	d108      	bne.n	800430e <UART_DMAError+0x46>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d005      	beq.n	800430e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2200      	movs	r2, #0
 8004306:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004308:	68b8      	ldr	r0, [r7, #8]
 800430a:	f000 f969 	bl	80045e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004318:	2b00      	cmp	r3, #0
 800431a:	bf14      	ite	ne
 800431c:	2301      	movne	r3, #1
 800431e:	2300      	moveq	r3, #0
 8004320:	b2db      	uxtb	r3, r3
 8004322:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b22      	cmp	r3, #34	; 0x22
 800432e:	d108      	bne.n	8004342 <UART_DMAError+0x7a>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d005      	beq.n	8004342 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	2200      	movs	r2, #0
 800433a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800433c:	68b8      	ldr	r0, [r7, #8]
 800433e:	f000 f976 	bl	800462e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004346:	f043 0210 	orr.w	r2, r3, #16
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800434e:	68b8      	ldr	r0, [r7, #8]
 8004350:	f7ff fef2 	bl	8004138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004354:	bf00      	nop
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b090      	sub	sp, #64	; 0x40
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	603b      	str	r3, [r7, #0]
 8004368:	4613      	mov	r3, r2
 800436a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800436c:	e050      	b.n	8004410 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800436e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004374:	d04c      	beq.n	8004410 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004378:	2b00      	cmp	r3, #0
 800437a:	d007      	beq.n	800438c <UART_WaitOnFlagUntilTimeout+0x30>
 800437c:	f7fd fd78 	bl	8001e70 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004388:	429a      	cmp	r2, r3
 800438a:	d241      	bcs.n	8004410 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	330c      	adds	r3, #12
 8004392:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004396:	e853 3f00 	ldrex	r3, [r3]
 800439a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	330c      	adds	r3, #12
 80043aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043ac:	637a      	str	r2, [r7, #52]	; 0x34
 80043ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043b4:	e841 2300 	strex	r3, r2, [r1]
 80043b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1e5      	bne.n	800438c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3314      	adds	r3, #20
 80043c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	e853 3f00 	ldrex	r3, [r3]
 80043ce:	613b      	str	r3, [r7, #16]
   return(result);
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f023 0301 	bic.w	r3, r3, #1
 80043d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3314      	adds	r3, #20
 80043de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043e0:	623a      	str	r2, [r7, #32]
 80043e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e4:	69f9      	ldr	r1, [r7, #28]
 80043e6:	6a3a      	ldr	r2, [r7, #32]
 80043e8:	e841 2300 	strex	r3, r2, [r1]
 80043ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1e5      	bne.n	80043c0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e00f      	b.n	8004430 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	4013      	ands	r3, r2
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	429a      	cmp	r2, r3
 800441e:	bf0c      	ite	eq
 8004420:	2301      	moveq	r3, #1
 8004422:	2300      	movne	r3, #0
 8004424:	b2db      	uxtb	r3, r3
 8004426:	461a      	mov	r2, r3
 8004428:	79fb      	ldrb	r3, [r7, #7]
 800442a:	429a      	cmp	r2, r3
 800442c:	d09f      	beq.n	800436e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3740      	adds	r7, #64	; 0x40
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	4613      	mov	r3, r2
 8004444:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	88fa      	ldrh	r2, [r7, #6]
 8004450:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	88fa      	ldrh	r2, [r7, #6]
 8004456:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2222      	movs	r2, #34	; 0x22
 8004462:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d007      	beq.n	800447e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68da      	ldr	r2, [r3, #12]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800447c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	695a      	ldr	r2, [r3, #20]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0201 	orr.w	r2, r2, #1
 800448c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68da      	ldr	r2, [r3, #12]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f042 0220 	orr.w	r2, r2, #32
 800449c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bc80      	pop	{r7}
 80044a8:	4770      	bx	lr
	...

080044ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b098      	sub	sp, #96	; 0x60
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	4613      	mov	r3, r2
 80044b8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	88fa      	ldrh	r2, [r7, #6]
 80044c4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2222      	movs	r2, #34	; 0x22
 80044d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d8:	4a3e      	ldr	r2, [pc, #248]	; (80045d4 <UART_Start_Receive_DMA+0x128>)
 80044da:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e0:	4a3d      	ldr	r2, [pc, #244]	; (80045d8 <UART_Start_Receive_DMA+0x12c>)
 80044e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e8:	4a3c      	ldr	r2, [pc, #240]	; (80045dc <UART_Start_Receive_DMA+0x130>)
 80044ea:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f0:	2200      	movs	r2, #0
 80044f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80044f4:	f107 0308 	add.w	r3, r7, #8
 80044f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	3304      	adds	r3, #4
 8004504:	4619      	mov	r1, r3
 8004506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	88fb      	ldrh	r3, [r7, #6]
 800450c:	f7fd fe46 	bl	800219c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004510:	2300      	movs	r3, #0
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	613b      	str	r3, [r7, #16]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d019      	beq.n	8004562 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	330c      	adds	r3, #12
 8004534:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004538:	e853 3f00 	ldrex	r3, [r3]
 800453c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800453e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004544:	65bb      	str	r3, [r7, #88]	; 0x58
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	330c      	adds	r3, #12
 800454c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800454e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004550:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004552:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004554:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004556:	e841 2300 	strex	r3, r2, [r1]
 800455a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800455c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1e5      	bne.n	800452e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	3314      	adds	r3, #20
 8004568:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800456c:	e853 3f00 	ldrex	r3, [r3]
 8004570:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004574:	f043 0301 	orr.w	r3, r3, #1
 8004578:	657b      	str	r3, [r7, #84]	; 0x54
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	3314      	adds	r3, #20
 8004580:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004582:	63ba      	str	r2, [r7, #56]	; 0x38
 8004584:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004586:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004588:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800458a:	e841 2300 	strex	r3, r2, [r1]
 800458e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1e5      	bne.n	8004562 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3314      	adds	r3, #20
 800459c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	617b      	str	r3, [r7, #20]
   return(result);
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045ac:	653b      	str	r3, [r7, #80]	; 0x50
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3314      	adds	r3, #20
 80045b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80045b6:	627a      	str	r2, [r7, #36]	; 0x24
 80045b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	6a39      	ldr	r1, [r7, #32]
 80045bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e5      	bne.n	8004596 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3760      	adds	r7, #96	; 0x60
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	08004161 	.word	0x08004161
 80045d8:	0800428d 	.word	0x0800428d
 80045dc:	080042c9 	.word	0x080042c9

080045e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b089      	sub	sp, #36	; 0x24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	330c      	adds	r3, #12
 80045ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	e853 3f00 	ldrex	r3, [r3]
 80045f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80045fe:	61fb      	str	r3, [r7, #28]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	330c      	adds	r3, #12
 8004606:	69fa      	ldr	r2, [r7, #28]
 8004608:	61ba      	str	r2, [r7, #24]
 800460a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460c:	6979      	ldr	r1, [r7, #20]
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	e841 2300 	strex	r3, r2, [r1]
 8004614:	613b      	str	r3, [r7, #16]
   return(result);
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1e5      	bne.n	80045e8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8004624:	bf00      	nop
 8004626:	3724      	adds	r7, #36	; 0x24
 8004628:	46bd      	mov	sp, r7
 800462a:	bc80      	pop	{r7}
 800462c:	4770      	bx	lr

0800462e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800462e:	b480      	push	{r7}
 8004630:	b095      	sub	sp, #84	; 0x54
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	330c      	adds	r3, #12
 800463c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004640:	e853 3f00 	ldrex	r3, [r3]
 8004644:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004648:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800464c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	330c      	adds	r3, #12
 8004654:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004656:	643a      	str	r2, [r7, #64]	; 0x40
 8004658:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800465c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800465e:	e841 2300 	strex	r3, r2, [r1]
 8004662:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1e5      	bne.n	8004636 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	3314      	adds	r3, #20
 8004670:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	e853 3f00 	ldrex	r3, [r3]
 8004678:	61fb      	str	r3, [r7, #28]
   return(result);
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	f023 0301 	bic.w	r3, r3, #1
 8004680:	64bb      	str	r3, [r7, #72]	; 0x48
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3314      	adds	r3, #20
 8004688:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800468a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800468c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004692:	e841 2300 	strex	r3, r2, [r1]
 8004696:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1e5      	bne.n	800466a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d119      	bne.n	80046da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	330c      	adds	r3, #12
 80046ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	e853 3f00 	ldrex	r3, [r3]
 80046b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f023 0310 	bic.w	r3, r3, #16
 80046bc:	647b      	str	r3, [r7, #68]	; 0x44
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	330c      	adds	r3, #12
 80046c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046c6:	61ba      	str	r2, [r7, #24]
 80046c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ca:	6979      	ldr	r1, [r7, #20]
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	e841 2300 	strex	r3, r2, [r1]
 80046d2:	613b      	str	r3, [r7, #16]
   return(result);
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1e5      	bne.n	80046a6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2220      	movs	r2, #32
 80046de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80046e8:	bf00      	nop
 80046ea:	3754      	adds	r7, #84	; 0x54
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr

080046f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b084      	sub	sp, #16
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f7ff fd13 	bl	8004138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004712:	bf00      	nop
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800471a:	b480      	push	{r7}
 800471c:	b085      	sub	sp, #20
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b21      	cmp	r3, #33	; 0x21
 800472c:	d13e      	bne.n	80047ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004736:	d114      	bne.n	8004762 <UART_Transmit_IT+0x48>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d110      	bne.n	8004762 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	461a      	mov	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004754:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	1c9a      	adds	r2, r3, #2
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	621a      	str	r2, [r3, #32]
 8004760:	e008      	b.n	8004774 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	1c59      	adds	r1, r3, #1
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6211      	str	r1, [r2, #32]
 800476c:	781a      	ldrb	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004778:	b29b      	uxth	r3, r3
 800477a:	3b01      	subs	r3, #1
 800477c:	b29b      	uxth	r3, r3
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	4619      	mov	r1, r3
 8004782:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10f      	bne.n	80047a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68da      	ldr	r2, [r3, #12]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004796:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047a8:	2300      	movs	r3, #0
 80047aa:	e000      	b.n	80047ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047ac:	2302      	movs	r3, #2
  }
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bc80      	pop	{r7}
 80047b6:	4770      	bx	lr

080047b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2220      	movs	r2, #32
 80047d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f7ff fc9b 	bl	8004114 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b08c      	sub	sp, #48	; 0x30
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b22      	cmp	r3, #34	; 0x22
 80047fa:	f040 80ae 	bne.w	800495a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004806:	d117      	bne.n	8004838 <UART_Receive_IT+0x50>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d113      	bne.n	8004838 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004810:	2300      	movs	r3, #0
 8004812:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004818:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	b29b      	uxth	r3, r3
 8004822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004826:	b29a      	uxth	r2, r3
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004830:	1c9a      	adds	r2, r3, #2
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	629a      	str	r2, [r3, #40]	; 0x28
 8004836:	e026      	b.n	8004886 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800483e:	2300      	movs	r3, #0
 8004840:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800484a:	d007      	beq.n	800485c <UART_Receive_IT+0x74>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10a      	bne.n	800486a <UART_Receive_IT+0x82>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d106      	bne.n	800486a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	b2da      	uxtb	r2, r3
 8004864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004866:	701a      	strb	r2, [r3, #0]
 8004868:	e008      	b.n	800487c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	b2db      	uxtb	r3, r3
 8004872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004876:	b2da      	uxtb	r2, r3
 8004878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004880:	1c5a      	adds	r2, r3, #1
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800488a:	b29b      	uxth	r3, r3
 800488c:	3b01      	subs	r3, #1
 800488e:	b29b      	uxth	r3, r3
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	4619      	mov	r1, r3
 8004894:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004896:	2b00      	cmp	r3, #0
 8004898:	d15d      	bne.n	8004956 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 0220 	bic.w	r2, r2, #32
 80048a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	695a      	ldr	r2, [r3, #20]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0201 	bic.w	r2, r2, #1
 80048c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d135      	bne.n	800494c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	330c      	adds	r3, #12
 80048ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	e853 3f00 	ldrex	r3, [r3]
 80048f4:	613b      	str	r3, [r7, #16]
   return(result);
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	f023 0310 	bic.w	r3, r3, #16
 80048fc:	627b      	str	r3, [r7, #36]	; 0x24
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	330c      	adds	r3, #12
 8004904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004906:	623a      	str	r2, [r7, #32]
 8004908:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490a:	69f9      	ldr	r1, [r7, #28]
 800490c:	6a3a      	ldr	r2, [r7, #32]
 800490e:	e841 2300 	strex	r3, r2, [r1]
 8004912:	61bb      	str	r3, [r7, #24]
   return(result);
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1e5      	bne.n	80048e6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0310 	and.w	r3, r3, #16
 8004924:	2b10      	cmp	r3, #16
 8004926:	d10a      	bne.n	800493e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004928:	2300      	movs	r3, #0
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004942:	4619      	mov	r1, r3
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f7ff fc00 	bl	800414a <HAL_UARTEx_RxEventCallback>
 800494a:	e002      	b.n	8004952 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7fc fe4d 	bl	80015ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004952:	2300      	movs	r3, #0
 8004954:	e002      	b.n	800495c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004956:	2300      	movs	r3, #0
 8004958:	e000      	b.n	800495c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800495a:	2302      	movs	r3, #2
  }
}
 800495c:	4618      	mov	r0, r3
 800495e:	3730      	adds	r7, #48	; 0x30
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689a      	ldr	r2, [r3, #8]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	4313      	orrs	r3, r2
 8004992:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800499e:	f023 030c 	bic.w	r3, r3, #12
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	6812      	ldr	r2, [r2, #0]
 80049a6:	68b9      	ldr	r1, [r7, #8]
 80049a8:	430b      	orrs	r3, r1
 80049aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699a      	ldr	r2, [r3, #24]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a2c      	ldr	r2, [pc, #176]	; (8004a78 <UART_SetConfig+0x114>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d103      	bne.n	80049d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80049cc:	f7fe fbc2 	bl	8003154 <HAL_RCC_GetPCLK2Freq>
 80049d0:	60f8      	str	r0, [r7, #12]
 80049d2:	e002      	b.n	80049da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80049d4:	f7fe fbaa 	bl	800312c <HAL_RCC_GetPCLK1Freq>
 80049d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	4613      	mov	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	009a      	lsls	r2, r3, #2
 80049e4:	441a      	add	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f0:	4a22      	ldr	r2, [pc, #136]	; (8004a7c <UART_SetConfig+0x118>)
 80049f2:	fba2 2303 	umull	r2, r3, r2, r3
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	0119      	lsls	r1, r3, #4
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	4613      	mov	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	009a      	lsls	r2, r3, #2
 8004a04:	441a      	add	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a10:	4b1a      	ldr	r3, [pc, #104]	; (8004a7c <UART_SetConfig+0x118>)
 8004a12:	fba3 0302 	umull	r0, r3, r3, r2
 8004a16:	095b      	lsrs	r3, r3, #5
 8004a18:	2064      	movs	r0, #100	; 0x64
 8004a1a:	fb00 f303 	mul.w	r3, r0, r3
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	011b      	lsls	r3, r3, #4
 8004a22:	3332      	adds	r3, #50	; 0x32
 8004a24:	4a15      	ldr	r2, [pc, #84]	; (8004a7c <UART_SetConfig+0x118>)
 8004a26:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2a:	095b      	lsrs	r3, r3, #5
 8004a2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a30:	4419      	add	r1, r3
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	4613      	mov	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	009a      	lsls	r2, r3, #2
 8004a3c:	441a      	add	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a48:	4b0c      	ldr	r3, [pc, #48]	; (8004a7c <UART_SetConfig+0x118>)
 8004a4a:	fba3 0302 	umull	r0, r3, r3, r2
 8004a4e:	095b      	lsrs	r3, r3, #5
 8004a50:	2064      	movs	r0, #100	; 0x64
 8004a52:	fb00 f303 	mul.w	r3, r0, r3
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	011b      	lsls	r3, r3, #4
 8004a5a:	3332      	adds	r3, #50	; 0x32
 8004a5c:	4a07      	ldr	r2, [pc, #28]	; (8004a7c <UART_SetConfig+0x118>)
 8004a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a62:	095b      	lsrs	r3, r3, #5
 8004a64:	f003 020f 	and.w	r2, r3, #15
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	440a      	add	r2, r1
 8004a6e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a70:	bf00      	nop
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	40013800 	.word	0x40013800
 8004a7c:	51eb851f 	.word	0x51eb851f

08004a80 <__cvt>:
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a86:	461f      	mov	r7, r3
 8004a88:	bfbb      	ittet	lt
 8004a8a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004a8e:	461f      	movlt	r7, r3
 8004a90:	2300      	movge	r3, #0
 8004a92:	232d      	movlt	r3, #45	; 0x2d
 8004a94:	b088      	sub	sp, #32
 8004a96:	4614      	mov	r4, r2
 8004a98:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004a9a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004a9c:	7013      	strb	r3, [r2, #0]
 8004a9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004aa0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004aa4:	f023 0820 	bic.w	r8, r3, #32
 8004aa8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004aac:	d005      	beq.n	8004aba <__cvt+0x3a>
 8004aae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004ab2:	d100      	bne.n	8004ab6 <__cvt+0x36>
 8004ab4:	3501      	adds	r5, #1
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e000      	b.n	8004abc <__cvt+0x3c>
 8004aba:	2303      	movs	r3, #3
 8004abc:	aa07      	add	r2, sp, #28
 8004abe:	9204      	str	r2, [sp, #16]
 8004ac0:	aa06      	add	r2, sp, #24
 8004ac2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004ac6:	e9cd 3500 	strd	r3, r5, [sp]
 8004aca:	4622      	mov	r2, r4
 8004acc:	463b      	mov	r3, r7
 8004ace:	f000 fe73 	bl	80057b8 <_dtoa_r>
 8004ad2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ad6:	4606      	mov	r6, r0
 8004ad8:	d102      	bne.n	8004ae0 <__cvt+0x60>
 8004ada:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004adc:	07db      	lsls	r3, r3, #31
 8004ade:	d522      	bpl.n	8004b26 <__cvt+0xa6>
 8004ae0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ae4:	eb06 0905 	add.w	r9, r6, r5
 8004ae8:	d110      	bne.n	8004b0c <__cvt+0x8c>
 8004aea:	7833      	ldrb	r3, [r6, #0]
 8004aec:	2b30      	cmp	r3, #48	; 0x30
 8004aee:	d10a      	bne.n	8004b06 <__cvt+0x86>
 8004af0:	2200      	movs	r2, #0
 8004af2:	2300      	movs	r3, #0
 8004af4:	4620      	mov	r0, r4
 8004af6:	4639      	mov	r1, r7
 8004af8:	f7fb ff56 	bl	80009a8 <__aeabi_dcmpeq>
 8004afc:	b918      	cbnz	r0, 8004b06 <__cvt+0x86>
 8004afe:	f1c5 0501 	rsb	r5, r5, #1
 8004b02:	f8ca 5000 	str.w	r5, [sl]
 8004b06:	f8da 3000 	ldr.w	r3, [sl]
 8004b0a:	4499      	add	r9, r3
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	2300      	movs	r3, #0
 8004b10:	4620      	mov	r0, r4
 8004b12:	4639      	mov	r1, r7
 8004b14:	f7fb ff48 	bl	80009a8 <__aeabi_dcmpeq>
 8004b18:	b108      	cbz	r0, 8004b1e <__cvt+0x9e>
 8004b1a:	f8cd 901c 	str.w	r9, [sp, #28]
 8004b1e:	2230      	movs	r2, #48	; 0x30
 8004b20:	9b07      	ldr	r3, [sp, #28]
 8004b22:	454b      	cmp	r3, r9
 8004b24:	d307      	bcc.n	8004b36 <__cvt+0xb6>
 8004b26:	4630      	mov	r0, r6
 8004b28:	9b07      	ldr	r3, [sp, #28]
 8004b2a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004b2c:	1b9b      	subs	r3, r3, r6
 8004b2e:	6013      	str	r3, [r2, #0]
 8004b30:	b008      	add	sp, #32
 8004b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b36:	1c59      	adds	r1, r3, #1
 8004b38:	9107      	str	r1, [sp, #28]
 8004b3a:	701a      	strb	r2, [r3, #0]
 8004b3c:	e7f0      	b.n	8004b20 <__cvt+0xa0>

08004b3e <__exponent>:
 8004b3e:	4603      	mov	r3, r0
 8004b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b42:	2900      	cmp	r1, #0
 8004b44:	f803 2b02 	strb.w	r2, [r3], #2
 8004b48:	bfb6      	itet	lt
 8004b4a:	222d      	movlt	r2, #45	; 0x2d
 8004b4c:	222b      	movge	r2, #43	; 0x2b
 8004b4e:	4249      	neglt	r1, r1
 8004b50:	2909      	cmp	r1, #9
 8004b52:	7042      	strb	r2, [r0, #1]
 8004b54:	dd2a      	ble.n	8004bac <__exponent+0x6e>
 8004b56:	f10d 0207 	add.w	r2, sp, #7
 8004b5a:	4617      	mov	r7, r2
 8004b5c:	260a      	movs	r6, #10
 8004b5e:	fb91 f5f6 	sdiv	r5, r1, r6
 8004b62:	4694      	mov	ip, r2
 8004b64:	fb06 1415 	mls	r4, r6, r5, r1
 8004b68:	3430      	adds	r4, #48	; 0x30
 8004b6a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004b6e:	460c      	mov	r4, r1
 8004b70:	2c63      	cmp	r4, #99	; 0x63
 8004b72:	4629      	mov	r1, r5
 8004b74:	f102 32ff 	add.w	r2, r2, #4294967295
 8004b78:	dcf1      	bgt.n	8004b5e <__exponent+0x20>
 8004b7a:	3130      	adds	r1, #48	; 0x30
 8004b7c:	f1ac 0402 	sub.w	r4, ip, #2
 8004b80:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004b84:	4622      	mov	r2, r4
 8004b86:	1c41      	adds	r1, r0, #1
 8004b88:	42ba      	cmp	r2, r7
 8004b8a:	d30a      	bcc.n	8004ba2 <__exponent+0x64>
 8004b8c:	f10d 0209 	add.w	r2, sp, #9
 8004b90:	eba2 020c 	sub.w	r2, r2, ip
 8004b94:	42bc      	cmp	r4, r7
 8004b96:	bf88      	it	hi
 8004b98:	2200      	movhi	r2, #0
 8004b9a:	4413      	add	r3, r2
 8004b9c:	1a18      	subs	r0, r3, r0
 8004b9e:	b003      	add	sp, #12
 8004ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ba2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004ba6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004baa:	e7ed      	b.n	8004b88 <__exponent+0x4a>
 8004bac:	2330      	movs	r3, #48	; 0x30
 8004bae:	3130      	adds	r1, #48	; 0x30
 8004bb0:	7083      	strb	r3, [r0, #2]
 8004bb2:	70c1      	strb	r1, [r0, #3]
 8004bb4:	1d03      	adds	r3, r0, #4
 8004bb6:	e7f1      	b.n	8004b9c <__exponent+0x5e>

08004bb8 <_printf_float>:
 8004bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bbc:	b091      	sub	sp, #68	; 0x44
 8004bbe:	460c      	mov	r4, r1
 8004bc0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004bc4:	4616      	mov	r6, r2
 8004bc6:	461f      	mov	r7, r3
 8004bc8:	4605      	mov	r5, r0
 8004bca:	f000 fce5 	bl	8005598 <_localeconv_r>
 8004bce:	6803      	ldr	r3, [r0, #0]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8004bd4:	f7fb fabc 	bl	8000150 <strlen>
 8004bd8:	2300      	movs	r3, #0
 8004bda:	930e      	str	r3, [sp, #56]	; 0x38
 8004bdc:	f8d8 3000 	ldr.w	r3, [r8]
 8004be0:	900a      	str	r0, [sp, #40]	; 0x28
 8004be2:	3307      	adds	r3, #7
 8004be4:	f023 0307 	bic.w	r3, r3, #7
 8004be8:	f103 0208 	add.w	r2, r3, #8
 8004bec:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004bf0:	f8d4 b000 	ldr.w	fp, [r4]
 8004bf4:	f8c8 2000 	str.w	r2, [r8]
 8004bf8:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004bfc:	4652      	mov	r2, sl
 8004bfe:	4643      	mov	r3, r8
 8004c00:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004c04:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004c08:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c0e:	4650      	mov	r0, sl
 8004c10:	4b9c      	ldr	r3, [pc, #624]	; (8004e84 <_printf_float+0x2cc>)
 8004c12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c14:	f7fb fefa 	bl	8000a0c <__aeabi_dcmpun>
 8004c18:	bb70      	cbnz	r0, 8004c78 <_printf_float+0xc0>
 8004c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c1e:	4650      	mov	r0, sl
 8004c20:	4b98      	ldr	r3, [pc, #608]	; (8004e84 <_printf_float+0x2cc>)
 8004c22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c24:	f7fb fed4 	bl	80009d0 <__aeabi_dcmple>
 8004c28:	bb30      	cbnz	r0, 8004c78 <_printf_float+0xc0>
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	4650      	mov	r0, sl
 8004c30:	4641      	mov	r1, r8
 8004c32:	f7fb fec3 	bl	80009bc <__aeabi_dcmplt>
 8004c36:	b110      	cbz	r0, 8004c3e <_printf_float+0x86>
 8004c38:	232d      	movs	r3, #45	; 0x2d
 8004c3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c3e:	4a92      	ldr	r2, [pc, #584]	; (8004e88 <_printf_float+0x2d0>)
 8004c40:	4b92      	ldr	r3, [pc, #584]	; (8004e8c <_printf_float+0x2d4>)
 8004c42:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004c46:	bf94      	ite	ls
 8004c48:	4690      	movls	r8, r2
 8004c4a:	4698      	movhi	r8, r3
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	f04f 0a00 	mov.w	sl, #0
 8004c52:	6123      	str	r3, [r4, #16]
 8004c54:	f02b 0304 	bic.w	r3, fp, #4
 8004c58:	6023      	str	r3, [r4, #0]
 8004c5a:	4633      	mov	r3, r6
 8004c5c:	4621      	mov	r1, r4
 8004c5e:	4628      	mov	r0, r5
 8004c60:	9700      	str	r7, [sp, #0]
 8004c62:	aa0f      	add	r2, sp, #60	; 0x3c
 8004c64:	f000 f9d6 	bl	8005014 <_printf_common>
 8004c68:	3001      	adds	r0, #1
 8004c6a:	f040 8090 	bne.w	8004d8e <_printf_float+0x1d6>
 8004c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c72:	b011      	add	sp, #68	; 0x44
 8004c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c78:	4652      	mov	r2, sl
 8004c7a:	4643      	mov	r3, r8
 8004c7c:	4650      	mov	r0, sl
 8004c7e:	4641      	mov	r1, r8
 8004c80:	f7fb fec4 	bl	8000a0c <__aeabi_dcmpun>
 8004c84:	b148      	cbz	r0, 8004c9a <_printf_float+0xe2>
 8004c86:	f1b8 0f00 	cmp.w	r8, #0
 8004c8a:	bfb8      	it	lt
 8004c8c:	232d      	movlt	r3, #45	; 0x2d
 8004c8e:	4a80      	ldr	r2, [pc, #512]	; (8004e90 <_printf_float+0x2d8>)
 8004c90:	bfb8      	it	lt
 8004c92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004c96:	4b7f      	ldr	r3, [pc, #508]	; (8004e94 <_printf_float+0x2dc>)
 8004c98:	e7d3      	b.n	8004c42 <_printf_float+0x8a>
 8004c9a:	6863      	ldr	r3, [r4, #4]
 8004c9c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	d142      	bne.n	8004d2a <_printf_float+0x172>
 8004ca4:	2306      	movs	r3, #6
 8004ca6:	6063      	str	r3, [r4, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	9206      	str	r2, [sp, #24]
 8004cac:	aa0e      	add	r2, sp, #56	; 0x38
 8004cae:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004cb2:	aa0d      	add	r2, sp, #52	; 0x34
 8004cb4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004cb8:	9203      	str	r2, [sp, #12]
 8004cba:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004cbe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004cc2:	6023      	str	r3, [r4, #0]
 8004cc4:	6863      	ldr	r3, [r4, #4]
 8004cc6:	4652      	mov	r2, sl
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	4628      	mov	r0, r5
 8004ccc:	4643      	mov	r3, r8
 8004cce:	910b      	str	r1, [sp, #44]	; 0x2c
 8004cd0:	f7ff fed6 	bl	8004a80 <__cvt>
 8004cd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004cd6:	4680      	mov	r8, r0
 8004cd8:	2947      	cmp	r1, #71	; 0x47
 8004cda:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004cdc:	d108      	bne.n	8004cf0 <_printf_float+0x138>
 8004cde:	1cc8      	adds	r0, r1, #3
 8004ce0:	db02      	blt.n	8004ce8 <_printf_float+0x130>
 8004ce2:	6863      	ldr	r3, [r4, #4]
 8004ce4:	4299      	cmp	r1, r3
 8004ce6:	dd40      	ble.n	8004d6a <_printf_float+0x1b2>
 8004ce8:	f1a9 0902 	sub.w	r9, r9, #2
 8004cec:	fa5f f989 	uxtb.w	r9, r9
 8004cf0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004cf4:	d81f      	bhi.n	8004d36 <_printf_float+0x17e>
 8004cf6:	464a      	mov	r2, r9
 8004cf8:	3901      	subs	r1, #1
 8004cfa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004cfe:	910d      	str	r1, [sp, #52]	; 0x34
 8004d00:	f7ff ff1d 	bl	8004b3e <__exponent>
 8004d04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d06:	4682      	mov	sl, r0
 8004d08:	1813      	adds	r3, r2, r0
 8004d0a:	2a01      	cmp	r2, #1
 8004d0c:	6123      	str	r3, [r4, #16]
 8004d0e:	dc02      	bgt.n	8004d16 <_printf_float+0x15e>
 8004d10:	6822      	ldr	r2, [r4, #0]
 8004d12:	07d2      	lsls	r2, r2, #31
 8004d14:	d501      	bpl.n	8004d1a <_printf_float+0x162>
 8004d16:	3301      	adds	r3, #1
 8004d18:	6123      	str	r3, [r4, #16]
 8004d1a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d09b      	beq.n	8004c5a <_printf_float+0xa2>
 8004d22:	232d      	movs	r3, #45	; 0x2d
 8004d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d28:	e797      	b.n	8004c5a <_printf_float+0xa2>
 8004d2a:	2947      	cmp	r1, #71	; 0x47
 8004d2c:	d1bc      	bne.n	8004ca8 <_printf_float+0xf0>
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1ba      	bne.n	8004ca8 <_printf_float+0xf0>
 8004d32:	2301      	movs	r3, #1
 8004d34:	e7b7      	b.n	8004ca6 <_printf_float+0xee>
 8004d36:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004d3a:	d118      	bne.n	8004d6e <_printf_float+0x1b6>
 8004d3c:	2900      	cmp	r1, #0
 8004d3e:	6863      	ldr	r3, [r4, #4]
 8004d40:	dd0b      	ble.n	8004d5a <_printf_float+0x1a2>
 8004d42:	6121      	str	r1, [r4, #16]
 8004d44:	b913      	cbnz	r3, 8004d4c <_printf_float+0x194>
 8004d46:	6822      	ldr	r2, [r4, #0]
 8004d48:	07d0      	lsls	r0, r2, #31
 8004d4a:	d502      	bpl.n	8004d52 <_printf_float+0x19a>
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	440b      	add	r3, r1
 8004d50:	6123      	str	r3, [r4, #16]
 8004d52:	f04f 0a00 	mov.w	sl, #0
 8004d56:	65a1      	str	r1, [r4, #88]	; 0x58
 8004d58:	e7df      	b.n	8004d1a <_printf_float+0x162>
 8004d5a:	b913      	cbnz	r3, 8004d62 <_printf_float+0x1aa>
 8004d5c:	6822      	ldr	r2, [r4, #0]
 8004d5e:	07d2      	lsls	r2, r2, #31
 8004d60:	d501      	bpl.n	8004d66 <_printf_float+0x1ae>
 8004d62:	3302      	adds	r3, #2
 8004d64:	e7f4      	b.n	8004d50 <_printf_float+0x198>
 8004d66:	2301      	movs	r3, #1
 8004d68:	e7f2      	b.n	8004d50 <_printf_float+0x198>
 8004d6a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004d6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d70:	4299      	cmp	r1, r3
 8004d72:	db05      	blt.n	8004d80 <_printf_float+0x1c8>
 8004d74:	6823      	ldr	r3, [r4, #0]
 8004d76:	6121      	str	r1, [r4, #16]
 8004d78:	07d8      	lsls	r0, r3, #31
 8004d7a:	d5ea      	bpl.n	8004d52 <_printf_float+0x19a>
 8004d7c:	1c4b      	adds	r3, r1, #1
 8004d7e:	e7e7      	b.n	8004d50 <_printf_float+0x198>
 8004d80:	2900      	cmp	r1, #0
 8004d82:	bfcc      	ite	gt
 8004d84:	2201      	movgt	r2, #1
 8004d86:	f1c1 0202 	rsble	r2, r1, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	e7e0      	b.n	8004d50 <_printf_float+0x198>
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	055a      	lsls	r2, r3, #21
 8004d92:	d407      	bmi.n	8004da4 <_printf_float+0x1ec>
 8004d94:	6923      	ldr	r3, [r4, #16]
 8004d96:	4642      	mov	r2, r8
 8004d98:	4631      	mov	r1, r6
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	47b8      	blx	r7
 8004d9e:	3001      	adds	r0, #1
 8004da0:	d12b      	bne.n	8004dfa <_printf_float+0x242>
 8004da2:	e764      	b.n	8004c6e <_printf_float+0xb6>
 8004da4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004da8:	f240 80dd 	bls.w	8004f66 <_printf_float+0x3ae>
 8004dac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004db0:	2200      	movs	r2, #0
 8004db2:	2300      	movs	r3, #0
 8004db4:	f7fb fdf8 	bl	80009a8 <__aeabi_dcmpeq>
 8004db8:	2800      	cmp	r0, #0
 8004dba:	d033      	beq.n	8004e24 <_printf_float+0x26c>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	4631      	mov	r1, r6
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	4a35      	ldr	r2, [pc, #212]	; (8004e98 <_printf_float+0x2e0>)
 8004dc4:	47b8      	blx	r7
 8004dc6:	3001      	adds	r0, #1
 8004dc8:	f43f af51 	beq.w	8004c6e <_printf_float+0xb6>
 8004dcc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	db02      	blt.n	8004dda <_printf_float+0x222>
 8004dd4:	6823      	ldr	r3, [r4, #0]
 8004dd6:	07d8      	lsls	r0, r3, #31
 8004dd8:	d50f      	bpl.n	8004dfa <_printf_float+0x242>
 8004dda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dde:	4631      	mov	r1, r6
 8004de0:	4628      	mov	r0, r5
 8004de2:	47b8      	blx	r7
 8004de4:	3001      	adds	r0, #1
 8004de6:	f43f af42 	beq.w	8004c6e <_printf_float+0xb6>
 8004dea:	f04f 0800 	mov.w	r8, #0
 8004dee:	f104 091a 	add.w	r9, r4, #26
 8004df2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004df4:	3b01      	subs	r3, #1
 8004df6:	4543      	cmp	r3, r8
 8004df8:	dc09      	bgt.n	8004e0e <_printf_float+0x256>
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	079b      	lsls	r3, r3, #30
 8004dfe:	f100 8104 	bmi.w	800500a <_printf_float+0x452>
 8004e02:	68e0      	ldr	r0, [r4, #12]
 8004e04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e06:	4298      	cmp	r0, r3
 8004e08:	bfb8      	it	lt
 8004e0a:	4618      	movlt	r0, r3
 8004e0c:	e731      	b.n	8004c72 <_printf_float+0xba>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	464a      	mov	r2, r9
 8004e12:	4631      	mov	r1, r6
 8004e14:	4628      	mov	r0, r5
 8004e16:	47b8      	blx	r7
 8004e18:	3001      	adds	r0, #1
 8004e1a:	f43f af28 	beq.w	8004c6e <_printf_float+0xb6>
 8004e1e:	f108 0801 	add.w	r8, r8, #1
 8004e22:	e7e6      	b.n	8004df2 <_printf_float+0x23a>
 8004e24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	dc38      	bgt.n	8004e9c <_printf_float+0x2e4>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	4631      	mov	r1, r6
 8004e2e:	4628      	mov	r0, r5
 8004e30:	4a19      	ldr	r2, [pc, #100]	; (8004e98 <_printf_float+0x2e0>)
 8004e32:	47b8      	blx	r7
 8004e34:	3001      	adds	r0, #1
 8004e36:	f43f af1a 	beq.w	8004c6e <_printf_float+0xb6>
 8004e3a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	d102      	bne.n	8004e48 <_printf_float+0x290>
 8004e42:	6823      	ldr	r3, [r4, #0]
 8004e44:	07d9      	lsls	r1, r3, #31
 8004e46:	d5d8      	bpl.n	8004dfa <_printf_float+0x242>
 8004e48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e4c:	4631      	mov	r1, r6
 8004e4e:	4628      	mov	r0, r5
 8004e50:	47b8      	blx	r7
 8004e52:	3001      	adds	r0, #1
 8004e54:	f43f af0b 	beq.w	8004c6e <_printf_float+0xb6>
 8004e58:	f04f 0900 	mov.w	r9, #0
 8004e5c:	f104 0a1a 	add.w	sl, r4, #26
 8004e60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e62:	425b      	negs	r3, r3
 8004e64:	454b      	cmp	r3, r9
 8004e66:	dc01      	bgt.n	8004e6c <_printf_float+0x2b4>
 8004e68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e6a:	e794      	b.n	8004d96 <_printf_float+0x1de>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	4652      	mov	r2, sl
 8004e70:	4631      	mov	r1, r6
 8004e72:	4628      	mov	r0, r5
 8004e74:	47b8      	blx	r7
 8004e76:	3001      	adds	r0, #1
 8004e78:	f43f aef9 	beq.w	8004c6e <_printf_float+0xb6>
 8004e7c:	f109 0901 	add.w	r9, r9, #1
 8004e80:	e7ee      	b.n	8004e60 <_printf_float+0x2a8>
 8004e82:	bf00      	nop
 8004e84:	7fefffff 	.word	0x7fefffff
 8004e88:	0800784a 	.word	0x0800784a
 8004e8c:	0800784e 	.word	0x0800784e
 8004e90:	08007852 	.word	0x08007852
 8004e94:	08007856 	.word	0x08007856
 8004e98:	0800785a 	.word	0x0800785a
 8004e9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	bfa8      	it	ge
 8004ea4:	461a      	movge	r2, r3
 8004ea6:	2a00      	cmp	r2, #0
 8004ea8:	4691      	mov	r9, r2
 8004eaa:	dc37      	bgt.n	8004f1c <_printf_float+0x364>
 8004eac:	f04f 0b00 	mov.w	fp, #0
 8004eb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004eb4:	f104 021a 	add.w	r2, r4, #26
 8004eb8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004ebc:	ebaa 0309 	sub.w	r3, sl, r9
 8004ec0:	455b      	cmp	r3, fp
 8004ec2:	dc33      	bgt.n	8004f2c <_printf_float+0x374>
 8004ec4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	db3b      	blt.n	8004f44 <_printf_float+0x38c>
 8004ecc:	6823      	ldr	r3, [r4, #0]
 8004ece:	07da      	lsls	r2, r3, #31
 8004ed0:	d438      	bmi.n	8004f44 <_printf_float+0x38c>
 8004ed2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004ed6:	eba2 0903 	sub.w	r9, r2, r3
 8004eda:	eba2 020a 	sub.w	r2, r2, sl
 8004ede:	4591      	cmp	r9, r2
 8004ee0:	bfa8      	it	ge
 8004ee2:	4691      	movge	r9, r2
 8004ee4:	f1b9 0f00 	cmp.w	r9, #0
 8004ee8:	dc34      	bgt.n	8004f54 <_printf_float+0x39c>
 8004eea:	f04f 0800 	mov.w	r8, #0
 8004eee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ef2:	f104 0a1a 	add.w	sl, r4, #26
 8004ef6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004efa:	1a9b      	subs	r3, r3, r2
 8004efc:	eba3 0309 	sub.w	r3, r3, r9
 8004f00:	4543      	cmp	r3, r8
 8004f02:	f77f af7a 	ble.w	8004dfa <_printf_float+0x242>
 8004f06:	2301      	movs	r3, #1
 8004f08:	4652      	mov	r2, sl
 8004f0a:	4631      	mov	r1, r6
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	47b8      	blx	r7
 8004f10:	3001      	adds	r0, #1
 8004f12:	f43f aeac 	beq.w	8004c6e <_printf_float+0xb6>
 8004f16:	f108 0801 	add.w	r8, r8, #1
 8004f1a:	e7ec      	b.n	8004ef6 <_printf_float+0x33e>
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	4631      	mov	r1, r6
 8004f20:	4642      	mov	r2, r8
 8004f22:	4628      	mov	r0, r5
 8004f24:	47b8      	blx	r7
 8004f26:	3001      	adds	r0, #1
 8004f28:	d1c0      	bne.n	8004eac <_printf_float+0x2f4>
 8004f2a:	e6a0      	b.n	8004c6e <_printf_float+0xb6>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	4631      	mov	r1, r6
 8004f30:	4628      	mov	r0, r5
 8004f32:	920b      	str	r2, [sp, #44]	; 0x2c
 8004f34:	47b8      	blx	r7
 8004f36:	3001      	adds	r0, #1
 8004f38:	f43f ae99 	beq.w	8004c6e <_printf_float+0xb6>
 8004f3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f3e:	f10b 0b01 	add.w	fp, fp, #1
 8004f42:	e7b9      	b.n	8004eb8 <_printf_float+0x300>
 8004f44:	4631      	mov	r1, r6
 8004f46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	47b8      	blx	r7
 8004f4e:	3001      	adds	r0, #1
 8004f50:	d1bf      	bne.n	8004ed2 <_printf_float+0x31a>
 8004f52:	e68c      	b.n	8004c6e <_printf_float+0xb6>
 8004f54:	464b      	mov	r3, r9
 8004f56:	4631      	mov	r1, r6
 8004f58:	4628      	mov	r0, r5
 8004f5a:	eb08 020a 	add.w	r2, r8, sl
 8004f5e:	47b8      	blx	r7
 8004f60:	3001      	adds	r0, #1
 8004f62:	d1c2      	bne.n	8004eea <_printf_float+0x332>
 8004f64:	e683      	b.n	8004c6e <_printf_float+0xb6>
 8004f66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f68:	2a01      	cmp	r2, #1
 8004f6a:	dc01      	bgt.n	8004f70 <_printf_float+0x3b8>
 8004f6c:	07db      	lsls	r3, r3, #31
 8004f6e:	d539      	bpl.n	8004fe4 <_printf_float+0x42c>
 8004f70:	2301      	movs	r3, #1
 8004f72:	4642      	mov	r2, r8
 8004f74:	4631      	mov	r1, r6
 8004f76:	4628      	mov	r0, r5
 8004f78:	47b8      	blx	r7
 8004f7a:	3001      	adds	r0, #1
 8004f7c:	f43f ae77 	beq.w	8004c6e <_printf_float+0xb6>
 8004f80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f84:	4631      	mov	r1, r6
 8004f86:	4628      	mov	r0, r5
 8004f88:	47b8      	blx	r7
 8004f8a:	3001      	adds	r0, #1
 8004f8c:	f43f ae6f 	beq.w	8004c6e <_printf_float+0xb6>
 8004f90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f94:	2200      	movs	r2, #0
 8004f96:	2300      	movs	r3, #0
 8004f98:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004f9c:	f7fb fd04 	bl	80009a8 <__aeabi_dcmpeq>
 8004fa0:	b9d8      	cbnz	r0, 8004fda <_printf_float+0x422>
 8004fa2:	f109 33ff 	add.w	r3, r9, #4294967295
 8004fa6:	f108 0201 	add.w	r2, r8, #1
 8004faa:	4631      	mov	r1, r6
 8004fac:	4628      	mov	r0, r5
 8004fae:	47b8      	blx	r7
 8004fb0:	3001      	adds	r0, #1
 8004fb2:	d10e      	bne.n	8004fd2 <_printf_float+0x41a>
 8004fb4:	e65b      	b.n	8004c6e <_printf_float+0xb6>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	464a      	mov	r2, r9
 8004fba:	4631      	mov	r1, r6
 8004fbc:	4628      	mov	r0, r5
 8004fbe:	47b8      	blx	r7
 8004fc0:	3001      	adds	r0, #1
 8004fc2:	f43f ae54 	beq.w	8004c6e <_printf_float+0xb6>
 8004fc6:	f108 0801 	add.w	r8, r8, #1
 8004fca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	4543      	cmp	r3, r8
 8004fd0:	dcf1      	bgt.n	8004fb6 <_printf_float+0x3fe>
 8004fd2:	4653      	mov	r3, sl
 8004fd4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004fd8:	e6de      	b.n	8004d98 <_printf_float+0x1e0>
 8004fda:	f04f 0800 	mov.w	r8, #0
 8004fde:	f104 091a 	add.w	r9, r4, #26
 8004fe2:	e7f2      	b.n	8004fca <_printf_float+0x412>
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	4642      	mov	r2, r8
 8004fe8:	e7df      	b.n	8004faa <_printf_float+0x3f2>
 8004fea:	2301      	movs	r3, #1
 8004fec:	464a      	mov	r2, r9
 8004fee:	4631      	mov	r1, r6
 8004ff0:	4628      	mov	r0, r5
 8004ff2:	47b8      	blx	r7
 8004ff4:	3001      	adds	r0, #1
 8004ff6:	f43f ae3a 	beq.w	8004c6e <_printf_float+0xb6>
 8004ffa:	f108 0801 	add.w	r8, r8, #1
 8004ffe:	68e3      	ldr	r3, [r4, #12]
 8005000:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005002:	1a5b      	subs	r3, r3, r1
 8005004:	4543      	cmp	r3, r8
 8005006:	dcf0      	bgt.n	8004fea <_printf_float+0x432>
 8005008:	e6fb      	b.n	8004e02 <_printf_float+0x24a>
 800500a:	f04f 0800 	mov.w	r8, #0
 800500e:	f104 0919 	add.w	r9, r4, #25
 8005012:	e7f4      	b.n	8004ffe <_printf_float+0x446>

08005014 <_printf_common>:
 8005014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005018:	4616      	mov	r6, r2
 800501a:	4699      	mov	r9, r3
 800501c:	688a      	ldr	r2, [r1, #8]
 800501e:	690b      	ldr	r3, [r1, #16]
 8005020:	4607      	mov	r7, r0
 8005022:	4293      	cmp	r3, r2
 8005024:	bfb8      	it	lt
 8005026:	4613      	movlt	r3, r2
 8005028:	6033      	str	r3, [r6, #0]
 800502a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800502e:	460c      	mov	r4, r1
 8005030:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005034:	b10a      	cbz	r2, 800503a <_printf_common+0x26>
 8005036:	3301      	adds	r3, #1
 8005038:	6033      	str	r3, [r6, #0]
 800503a:	6823      	ldr	r3, [r4, #0]
 800503c:	0699      	lsls	r1, r3, #26
 800503e:	bf42      	ittt	mi
 8005040:	6833      	ldrmi	r3, [r6, #0]
 8005042:	3302      	addmi	r3, #2
 8005044:	6033      	strmi	r3, [r6, #0]
 8005046:	6825      	ldr	r5, [r4, #0]
 8005048:	f015 0506 	ands.w	r5, r5, #6
 800504c:	d106      	bne.n	800505c <_printf_common+0x48>
 800504e:	f104 0a19 	add.w	sl, r4, #25
 8005052:	68e3      	ldr	r3, [r4, #12]
 8005054:	6832      	ldr	r2, [r6, #0]
 8005056:	1a9b      	subs	r3, r3, r2
 8005058:	42ab      	cmp	r3, r5
 800505a:	dc2b      	bgt.n	80050b4 <_printf_common+0xa0>
 800505c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005060:	1e13      	subs	r3, r2, #0
 8005062:	6822      	ldr	r2, [r4, #0]
 8005064:	bf18      	it	ne
 8005066:	2301      	movne	r3, #1
 8005068:	0692      	lsls	r2, r2, #26
 800506a:	d430      	bmi.n	80050ce <_printf_common+0xba>
 800506c:	4649      	mov	r1, r9
 800506e:	4638      	mov	r0, r7
 8005070:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005074:	47c0      	blx	r8
 8005076:	3001      	adds	r0, #1
 8005078:	d023      	beq.n	80050c2 <_printf_common+0xae>
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	6922      	ldr	r2, [r4, #16]
 800507e:	f003 0306 	and.w	r3, r3, #6
 8005082:	2b04      	cmp	r3, #4
 8005084:	bf14      	ite	ne
 8005086:	2500      	movne	r5, #0
 8005088:	6833      	ldreq	r3, [r6, #0]
 800508a:	f04f 0600 	mov.w	r6, #0
 800508e:	bf08      	it	eq
 8005090:	68e5      	ldreq	r5, [r4, #12]
 8005092:	f104 041a 	add.w	r4, r4, #26
 8005096:	bf08      	it	eq
 8005098:	1aed      	subeq	r5, r5, r3
 800509a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800509e:	bf08      	it	eq
 80050a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050a4:	4293      	cmp	r3, r2
 80050a6:	bfc4      	itt	gt
 80050a8:	1a9b      	subgt	r3, r3, r2
 80050aa:	18ed      	addgt	r5, r5, r3
 80050ac:	42b5      	cmp	r5, r6
 80050ae:	d11a      	bne.n	80050e6 <_printf_common+0xd2>
 80050b0:	2000      	movs	r0, #0
 80050b2:	e008      	b.n	80050c6 <_printf_common+0xb2>
 80050b4:	2301      	movs	r3, #1
 80050b6:	4652      	mov	r2, sl
 80050b8:	4649      	mov	r1, r9
 80050ba:	4638      	mov	r0, r7
 80050bc:	47c0      	blx	r8
 80050be:	3001      	adds	r0, #1
 80050c0:	d103      	bne.n	80050ca <_printf_common+0xb6>
 80050c2:	f04f 30ff 	mov.w	r0, #4294967295
 80050c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ca:	3501      	adds	r5, #1
 80050cc:	e7c1      	b.n	8005052 <_printf_common+0x3e>
 80050ce:	2030      	movs	r0, #48	; 0x30
 80050d0:	18e1      	adds	r1, r4, r3
 80050d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050d6:	1c5a      	adds	r2, r3, #1
 80050d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050dc:	4422      	add	r2, r4
 80050de:	3302      	adds	r3, #2
 80050e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050e4:	e7c2      	b.n	800506c <_printf_common+0x58>
 80050e6:	2301      	movs	r3, #1
 80050e8:	4622      	mov	r2, r4
 80050ea:	4649      	mov	r1, r9
 80050ec:	4638      	mov	r0, r7
 80050ee:	47c0      	blx	r8
 80050f0:	3001      	adds	r0, #1
 80050f2:	d0e6      	beq.n	80050c2 <_printf_common+0xae>
 80050f4:	3601      	adds	r6, #1
 80050f6:	e7d9      	b.n	80050ac <_printf_common+0x98>

080050f8 <_printf_i>:
 80050f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050fc:	7e0f      	ldrb	r7, [r1, #24]
 80050fe:	4691      	mov	r9, r2
 8005100:	2f78      	cmp	r7, #120	; 0x78
 8005102:	4680      	mov	r8, r0
 8005104:	460c      	mov	r4, r1
 8005106:	469a      	mov	sl, r3
 8005108:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800510a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800510e:	d807      	bhi.n	8005120 <_printf_i+0x28>
 8005110:	2f62      	cmp	r7, #98	; 0x62
 8005112:	d80a      	bhi.n	800512a <_printf_i+0x32>
 8005114:	2f00      	cmp	r7, #0
 8005116:	f000 80d5 	beq.w	80052c4 <_printf_i+0x1cc>
 800511a:	2f58      	cmp	r7, #88	; 0x58
 800511c:	f000 80c1 	beq.w	80052a2 <_printf_i+0x1aa>
 8005120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005124:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005128:	e03a      	b.n	80051a0 <_printf_i+0xa8>
 800512a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800512e:	2b15      	cmp	r3, #21
 8005130:	d8f6      	bhi.n	8005120 <_printf_i+0x28>
 8005132:	a101      	add	r1, pc, #4	; (adr r1, 8005138 <_printf_i+0x40>)
 8005134:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005138:	08005191 	.word	0x08005191
 800513c:	080051a5 	.word	0x080051a5
 8005140:	08005121 	.word	0x08005121
 8005144:	08005121 	.word	0x08005121
 8005148:	08005121 	.word	0x08005121
 800514c:	08005121 	.word	0x08005121
 8005150:	080051a5 	.word	0x080051a5
 8005154:	08005121 	.word	0x08005121
 8005158:	08005121 	.word	0x08005121
 800515c:	08005121 	.word	0x08005121
 8005160:	08005121 	.word	0x08005121
 8005164:	080052ab 	.word	0x080052ab
 8005168:	080051d1 	.word	0x080051d1
 800516c:	08005265 	.word	0x08005265
 8005170:	08005121 	.word	0x08005121
 8005174:	08005121 	.word	0x08005121
 8005178:	080052cd 	.word	0x080052cd
 800517c:	08005121 	.word	0x08005121
 8005180:	080051d1 	.word	0x080051d1
 8005184:	08005121 	.word	0x08005121
 8005188:	08005121 	.word	0x08005121
 800518c:	0800526d 	.word	0x0800526d
 8005190:	682b      	ldr	r3, [r5, #0]
 8005192:	1d1a      	adds	r2, r3, #4
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	602a      	str	r2, [r5, #0]
 8005198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800519c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051a0:	2301      	movs	r3, #1
 80051a2:	e0a0      	b.n	80052e6 <_printf_i+0x1ee>
 80051a4:	6820      	ldr	r0, [r4, #0]
 80051a6:	682b      	ldr	r3, [r5, #0]
 80051a8:	0607      	lsls	r7, r0, #24
 80051aa:	f103 0104 	add.w	r1, r3, #4
 80051ae:	6029      	str	r1, [r5, #0]
 80051b0:	d501      	bpl.n	80051b6 <_printf_i+0xbe>
 80051b2:	681e      	ldr	r6, [r3, #0]
 80051b4:	e003      	b.n	80051be <_printf_i+0xc6>
 80051b6:	0646      	lsls	r6, r0, #25
 80051b8:	d5fb      	bpl.n	80051b2 <_printf_i+0xba>
 80051ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80051be:	2e00      	cmp	r6, #0
 80051c0:	da03      	bge.n	80051ca <_printf_i+0xd2>
 80051c2:	232d      	movs	r3, #45	; 0x2d
 80051c4:	4276      	negs	r6, r6
 80051c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051ca:	230a      	movs	r3, #10
 80051cc:	4859      	ldr	r0, [pc, #356]	; (8005334 <_printf_i+0x23c>)
 80051ce:	e012      	b.n	80051f6 <_printf_i+0xfe>
 80051d0:	682b      	ldr	r3, [r5, #0]
 80051d2:	6820      	ldr	r0, [r4, #0]
 80051d4:	1d19      	adds	r1, r3, #4
 80051d6:	6029      	str	r1, [r5, #0]
 80051d8:	0605      	lsls	r5, r0, #24
 80051da:	d501      	bpl.n	80051e0 <_printf_i+0xe8>
 80051dc:	681e      	ldr	r6, [r3, #0]
 80051de:	e002      	b.n	80051e6 <_printf_i+0xee>
 80051e0:	0641      	lsls	r1, r0, #25
 80051e2:	d5fb      	bpl.n	80051dc <_printf_i+0xe4>
 80051e4:	881e      	ldrh	r6, [r3, #0]
 80051e6:	2f6f      	cmp	r7, #111	; 0x6f
 80051e8:	bf0c      	ite	eq
 80051ea:	2308      	moveq	r3, #8
 80051ec:	230a      	movne	r3, #10
 80051ee:	4851      	ldr	r0, [pc, #324]	; (8005334 <_printf_i+0x23c>)
 80051f0:	2100      	movs	r1, #0
 80051f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051f6:	6865      	ldr	r5, [r4, #4]
 80051f8:	2d00      	cmp	r5, #0
 80051fa:	bfa8      	it	ge
 80051fc:	6821      	ldrge	r1, [r4, #0]
 80051fe:	60a5      	str	r5, [r4, #8]
 8005200:	bfa4      	itt	ge
 8005202:	f021 0104 	bicge.w	r1, r1, #4
 8005206:	6021      	strge	r1, [r4, #0]
 8005208:	b90e      	cbnz	r6, 800520e <_printf_i+0x116>
 800520a:	2d00      	cmp	r5, #0
 800520c:	d04b      	beq.n	80052a6 <_printf_i+0x1ae>
 800520e:	4615      	mov	r5, r2
 8005210:	fbb6 f1f3 	udiv	r1, r6, r3
 8005214:	fb03 6711 	mls	r7, r3, r1, r6
 8005218:	5dc7      	ldrb	r7, [r0, r7]
 800521a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800521e:	4637      	mov	r7, r6
 8005220:	42bb      	cmp	r3, r7
 8005222:	460e      	mov	r6, r1
 8005224:	d9f4      	bls.n	8005210 <_printf_i+0x118>
 8005226:	2b08      	cmp	r3, #8
 8005228:	d10b      	bne.n	8005242 <_printf_i+0x14a>
 800522a:	6823      	ldr	r3, [r4, #0]
 800522c:	07de      	lsls	r6, r3, #31
 800522e:	d508      	bpl.n	8005242 <_printf_i+0x14a>
 8005230:	6923      	ldr	r3, [r4, #16]
 8005232:	6861      	ldr	r1, [r4, #4]
 8005234:	4299      	cmp	r1, r3
 8005236:	bfde      	ittt	le
 8005238:	2330      	movle	r3, #48	; 0x30
 800523a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800523e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005242:	1b52      	subs	r2, r2, r5
 8005244:	6122      	str	r2, [r4, #16]
 8005246:	464b      	mov	r3, r9
 8005248:	4621      	mov	r1, r4
 800524a:	4640      	mov	r0, r8
 800524c:	f8cd a000 	str.w	sl, [sp]
 8005250:	aa03      	add	r2, sp, #12
 8005252:	f7ff fedf 	bl	8005014 <_printf_common>
 8005256:	3001      	adds	r0, #1
 8005258:	d14a      	bne.n	80052f0 <_printf_i+0x1f8>
 800525a:	f04f 30ff 	mov.w	r0, #4294967295
 800525e:	b004      	add	sp, #16
 8005260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	f043 0320 	orr.w	r3, r3, #32
 800526a:	6023      	str	r3, [r4, #0]
 800526c:	2778      	movs	r7, #120	; 0x78
 800526e:	4832      	ldr	r0, [pc, #200]	; (8005338 <_printf_i+0x240>)
 8005270:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005274:	6823      	ldr	r3, [r4, #0]
 8005276:	6829      	ldr	r1, [r5, #0]
 8005278:	061f      	lsls	r7, r3, #24
 800527a:	f851 6b04 	ldr.w	r6, [r1], #4
 800527e:	d402      	bmi.n	8005286 <_printf_i+0x18e>
 8005280:	065f      	lsls	r7, r3, #25
 8005282:	bf48      	it	mi
 8005284:	b2b6      	uxthmi	r6, r6
 8005286:	07df      	lsls	r7, r3, #31
 8005288:	bf48      	it	mi
 800528a:	f043 0320 	orrmi.w	r3, r3, #32
 800528e:	6029      	str	r1, [r5, #0]
 8005290:	bf48      	it	mi
 8005292:	6023      	strmi	r3, [r4, #0]
 8005294:	b91e      	cbnz	r6, 800529e <_printf_i+0x1a6>
 8005296:	6823      	ldr	r3, [r4, #0]
 8005298:	f023 0320 	bic.w	r3, r3, #32
 800529c:	6023      	str	r3, [r4, #0]
 800529e:	2310      	movs	r3, #16
 80052a0:	e7a6      	b.n	80051f0 <_printf_i+0xf8>
 80052a2:	4824      	ldr	r0, [pc, #144]	; (8005334 <_printf_i+0x23c>)
 80052a4:	e7e4      	b.n	8005270 <_printf_i+0x178>
 80052a6:	4615      	mov	r5, r2
 80052a8:	e7bd      	b.n	8005226 <_printf_i+0x12e>
 80052aa:	682b      	ldr	r3, [r5, #0]
 80052ac:	6826      	ldr	r6, [r4, #0]
 80052ae:	1d18      	adds	r0, r3, #4
 80052b0:	6961      	ldr	r1, [r4, #20]
 80052b2:	6028      	str	r0, [r5, #0]
 80052b4:	0635      	lsls	r5, r6, #24
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	d501      	bpl.n	80052be <_printf_i+0x1c6>
 80052ba:	6019      	str	r1, [r3, #0]
 80052bc:	e002      	b.n	80052c4 <_printf_i+0x1cc>
 80052be:	0670      	lsls	r0, r6, #25
 80052c0:	d5fb      	bpl.n	80052ba <_printf_i+0x1c2>
 80052c2:	8019      	strh	r1, [r3, #0]
 80052c4:	2300      	movs	r3, #0
 80052c6:	4615      	mov	r5, r2
 80052c8:	6123      	str	r3, [r4, #16]
 80052ca:	e7bc      	b.n	8005246 <_printf_i+0x14e>
 80052cc:	682b      	ldr	r3, [r5, #0]
 80052ce:	2100      	movs	r1, #0
 80052d0:	1d1a      	adds	r2, r3, #4
 80052d2:	602a      	str	r2, [r5, #0]
 80052d4:	681d      	ldr	r5, [r3, #0]
 80052d6:	6862      	ldr	r2, [r4, #4]
 80052d8:	4628      	mov	r0, r5
 80052da:	f000 f9d4 	bl	8005686 <memchr>
 80052de:	b108      	cbz	r0, 80052e4 <_printf_i+0x1ec>
 80052e0:	1b40      	subs	r0, r0, r5
 80052e2:	6060      	str	r0, [r4, #4]
 80052e4:	6863      	ldr	r3, [r4, #4]
 80052e6:	6123      	str	r3, [r4, #16]
 80052e8:	2300      	movs	r3, #0
 80052ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052ee:	e7aa      	b.n	8005246 <_printf_i+0x14e>
 80052f0:	462a      	mov	r2, r5
 80052f2:	4649      	mov	r1, r9
 80052f4:	4640      	mov	r0, r8
 80052f6:	6923      	ldr	r3, [r4, #16]
 80052f8:	47d0      	blx	sl
 80052fa:	3001      	adds	r0, #1
 80052fc:	d0ad      	beq.n	800525a <_printf_i+0x162>
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	079b      	lsls	r3, r3, #30
 8005302:	d413      	bmi.n	800532c <_printf_i+0x234>
 8005304:	68e0      	ldr	r0, [r4, #12]
 8005306:	9b03      	ldr	r3, [sp, #12]
 8005308:	4298      	cmp	r0, r3
 800530a:	bfb8      	it	lt
 800530c:	4618      	movlt	r0, r3
 800530e:	e7a6      	b.n	800525e <_printf_i+0x166>
 8005310:	2301      	movs	r3, #1
 8005312:	4632      	mov	r2, r6
 8005314:	4649      	mov	r1, r9
 8005316:	4640      	mov	r0, r8
 8005318:	47d0      	blx	sl
 800531a:	3001      	adds	r0, #1
 800531c:	d09d      	beq.n	800525a <_printf_i+0x162>
 800531e:	3501      	adds	r5, #1
 8005320:	68e3      	ldr	r3, [r4, #12]
 8005322:	9903      	ldr	r1, [sp, #12]
 8005324:	1a5b      	subs	r3, r3, r1
 8005326:	42ab      	cmp	r3, r5
 8005328:	dcf2      	bgt.n	8005310 <_printf_i+0x218>
 800532a:	e7eb      	b.n	8005304 <_printf_i+0x20c>
 800532c:	2500      	movs	r5, #0
 800532e:	f104 0619 	add.w	r6, r4, #25
 8005332:	e7f5      	b.n	8005320 <_printf_i+0x228>
 8005334:	0800785c 	.word	0x0800785c
 8005338:	0800786d 	.word	0x0800786d

0800533c <std>:
 800533c:	2300      	movs	r3, #0
 800533e:	b510      	push	{r4, lr}
 8005340:	4604      	mov	r4, r0
 8005342:	e9c0 3300 	strd	r3, r3, [r0]
 8005346:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800534a:	6083      	str	r3, [r0, #8]
 800534c:	8181      	strh	r1, [r0, #12]
 800534e:	6643      	str	r3, [r0, #100]	; 0x64
 8005350:	81c2      	strh	r2, [r0, #14]
 8005352:	6183      	str	r3, [r0, #24]
 8005354:	4619      	mov	r1, r3
 8005356:	2208      	movs	r2, #8
 8005358:	305c      	adds	r0, #92	; 0x5c
 800535a:	f000 f914 	bl	8005586 <memset>
 800535e:	4b0d      	ldr	r3, [pc, #52]	; (8005394 <std+0x58>)
 8005360:	6224      	str	r4, [r4, #32]
 8005362:	6263      	str	r3, [r4, #36]	; 0x24
 8005364:	4b0c      	ldr	r3, [pc, #48]	; (8005398 <std+0x5c>)
 8005366:	62a3      	str	r3, [r4, #40]	; 0x28
 8005368:	4b0c      	ldr	r3, [pc, #48]	; (800539c <std+0x60>)
 800536a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800536c:	4b0c      	ldr	r3, [pc, #48]	; (80053a0 <std+0x64>)
 800536e:	6323      	str	r3, [r4, #48]	; 0x30
 8005370:	4b0c      	ldr	r3, [pc, #48]	; (80053a4 <std+0x68>)
 8005372:	429c      	cmp	r4, r3
 8005374:	d006      	beq.n	8005384 <std+0x48>
 8005376:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800537a:	4294      	cmp	r4, r2
 800537c:	d002      	beq.n	8005384 <std+0x48>
 800537e:	33d0      	adds	r3, #208	; 0xd0
 8005380:	429c      	cmp	r4, r3
 8005382:	d105      	bne.n	8005390 <std+0x54>
 8005384:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800538c:	f000 b978 	b.w	8005680 <__retarget_lock_init_recursive>
 8005390:	bd10      	pop	{r4, pc}
 8005392:	bf00      	nop
 8005394:	08005501 	.word	0x08005501
 8005398:	08005523 	.word	0x08005523
 800539c:	0800555b 	.word	0x0800555b
 80053a0:	0800557f 	.word	0x0800557f
 80053a4:	20000768 	.word	0x20000768

080053a8 <stdio_exit_handler>:
 80053a8:	4a02      	ldr	r2, [pc, #8]	; (80053b4 <stdio_exit_handler+0xc>)
 80053aa:	4903      	ldr	r1, [pc, #12]	; (80053b8 <stdio_exit_handler+0x10>)
 80053ac:	4803      	ldr	r0, [pc, #12]	; (80053bc <stdio_exit_handler+0x14>)
 80053ae:	f000 b869 	b.w	8005484 <_fwalk_sglue>
 80053b2:	bf00      	nop
 80053b4:	200000fc 	.word	0x200000fc
 80053b8:	0800701d 	.word	0x0800701d
 80053bc:	20000108 	.word	0x20000108

080053c0 <cleanup_stdio>:
 80053c0:	6841      	ldr	r1, [r0, #4]
 80053c2:	4b0c      	ldr	r3, [pc, #48]	; (80053f4 <cleanup_stdio+0x34>)
 80053c4:	b510      	push	{r4, lr}
 80053c6:	4299      	cmp	r1, r3
 80053c8:	4604      	mov	r4, r0
 80053ca:	d001      	beq.n	80053d0 <cleanup_stdio+0x10>
 80053cc:	f001 fe26 	bl	800701c <_fflush_r>
 80053d0:	68a1      	ldr	r1, [r4, #8]
 80053d2:	4b09      	ldr	r3, [pc, #36]	; (80053f8 <cleanup_stdio+0x38>)
 80053d4:	4299      	cmp	r1, r3
 80053d6:	d002      	beq.n	80053de <cleanup_stdio+0x1e>
 80053d8:	4620      	mov	r0, r4
 80053da:	f001 fe1f 	bl	800701c <_fflush_r>
 80053de:	68e1      	ldr	r1, [r4, #12]
 80053e0:	4b06      	ldr	r3, [pc, #24]	; (80053fc <cleanup_stdio+0x3c>)
 80053e2:	4299      	cmp	r1, r3
 80053e4:	d004      	beq.n	80053f0 <cleanup_stdio+0x30>
 80053e6:	4620      	mov	r0, r4
 80053e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053ec:	f001 be16 	b.w	800701c <_fflush_r>
 80053f0:	bd10      	pop	{r4, pc}
 80053f2:	bf00      	nop
 80053f4:	20000768 	.word	0x20000768
 80053f8:	200007d0 	.word	0x200007d0
 80053fc:	20000838 	.word	0x20000838

08005400 <global_stdio_init.part.0>:
 8005400:	b510      	push	{r4, lr}
 8005402:	4b0b      	ldr	r3, [pc, #44]	; (8005430 <global_stdio_init.part.0+0x30>)
 8005404:	4c0b      	ldr	r4, [pc, #44]	; (8005434 <global_stdio_init.part.0+0x34>)
 8005406:	4a0c      	ldr	r2, [pc, #48]	; (8005438 <global_stdio_init.part.0+0x38>)
 8005408:	4620      	mov	r0, r4
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	2104      	movs	r1, #4
 800540e:	2200      	movs	r2, #0
 8005410:	f7ff ff94 	bl	800533c <std>
 8005414:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005418:	2201      	movs	r2, #1
 800541a:	2109      	movs	r1, #9
 800541c:	f7ff ff8e 	bl	800533c <std>
 8005420:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005424:	2202      	movs	r2, #2
 8005426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800542a:	2112      	movs	r1, #18
 800542c:	f7ff bf86 	b.w	800533c <std>
 8005430:	200008a0 	.word	0x200008a0
 8005434:	20000768 	.word	0x20000768
 8005438:	080053a9 	.word	0x080053a9

0800543c <__sfp_lock_acquire>:
 800543c:	4801      	ldr	r0, [pc, #4]	; (8005444 <__sfp_lock_acquire+0x8>)
 800543e:	f000 b920 	b.w	8005682 <__retarget_lock_acquire_recursive>
 8005442:	bf00      	nop
 8005444:	200008a9 	.word	0x200008a9

08005448 <__sfp_lock_release>:
 8005448:	4801      	ldr	r0, [pc, #4]	; (8005450 <__sfp_lock_release+0x8>)
 800544a:	f000 b91b 	b.w	8005684 <__retarget_lock_release_recursive>
 800544e:	bf00      	nop
 8005450:	200008a9 	.word	0x200008a9

08005454 <__sinit>:
 8005454:	b510      	push	{r4, lr}
 8005456:	4604      	mov	r4, r0
 8005458:	f7ff fff0 	bl	800543c <__sfp_lock_acquire>
 800545c:	6a23      	ldr	r3, [r4, #32]
 800545e:	b11b      	cbz	r3, 8005468 <__sinit+0x14>
 8005460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005464:	f7ff bff0 	b.w	8005448 <__sfp_lock_release>
 8005468:	4b04      	ldr	r3, [pc, #16]	; (800547c <__sinit+0x28>)
 800546a:	6223      	str	r3, [r4, #32]
 800546c:	4b04      	ldr	r3, [pc, #16]	; (8005480 <__sinit+0x2c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1f5      	bne.n	8005460 <__sinit+0xc>
 8005474:	f7ff ffc4 	bl	8005400 <global_stdio_init.part.0>
 8005478:	e7f2      	b.n	8005460 <__sinit+0xc>
 800547a:	bf00      	nop
 800547c:	080053c1 	.word	0x080053c1
 8005480:	200008a0 	.word	0x200008a0

08005484 <_fwalk_sglue>:
 8005484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005488:	4607      	mov	r7, r0
 800548a:	4688      	mov	r8, r1
 800548c:	4614      	mov	r4, r2
 800548e:	2600      	movs	r6, #0
 8005490:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005494:	f1b9 0901 	subs.w	r9, r9, #1
 8005498:	d505      	bpl.n	80054a6 <_fwalk_sglue+0x22>
 800549a:	6824      	ldr	r4, [r4, #0]
 800549c:	2c00      	cmp	r4, #0
 800549e:	d1f7      	bne.n	8005490 <_fwalk_sglue+0xc>
 80054a0:	4630      	mov	r0, r6
 80054a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054a6:	89ab      	ldrh	r3, [r5, #12]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d907      	bls.n	80054bc <_fwalk_sglue+0x38>
 80054ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054b0:	3301      	adds	r3, #1
 80054b2:	d003      	beq.n	80054bc <_fwalk_sglue+0x38>
 80054b4:	4629      	mov	r1, r5
 80054b6:	4638      	mov	r0, r7
 80054b8:	47c0      	blx	r8
 80054ba:	4306      	orrs	r6, r0
 80054bc:	3568      	adds	r5, #104	; 0x68
 80054be:	e7e9      	b.n	8005494 <_fwalk_sglue+0x10>

080054c0 <siprintf>:
 80054c0:	b40e      	push	{r1, r2, r3}
 80054c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054c6:	b500      	push	{lr}
 80054c8:	b09c      	sub	sp, #112	; 0x70
 80054ca:	ab1d      	add	r3, sp, #116	; 0x74
 80054cc:	9002      	str	r0, [sp, #8]
 80054ce:	9006      	str	r0, [sp, #24]
 80054d0:	9107      	str	r1, [sp, #28]
 80054d2:	9104      	str	r1, [sp, #16]
 80054d4:	4808      	ldr	r0, [pc, #32]	; (80054f8 <siprintf+0x38>)
 80054d6:	4909      	ldr	r1, [pc, #36]	; (80054fc <siprintf+0x3c>)
 80054d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80054dc:	9105      	str	r1, [sp, #20]
 80054de:	6800      	ldr	r0, [r0, #0]
 80054e0:	a902      	add	r1, sp, #8
 80054e2:	9301      	str	r3, [sp, #4]
 80054e4:	f001 fc1a 	bl	8006d1c <_svfiprintf_r>
 80054e8:	2200      	movs	r2, #0
 80054ea:	9b02      	ldr	r3, [sp, #8]
 80054ec:	701a      	strb	r2, [r3, #0]
 80054ee:	b01c      	add	sp, #112	; 0x70
 80054f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80054f4:	b003      	add	sp, #12
 80054f6:	4770      	bx	lr
 80054f8:	20000154 	.word	0x20000154
 80054fc:	ffff0208 	.word	0xffff0208

08005500 <__sread>:
 8005500:	b510      	push	{r4, lr}
 8005502:	460c      	mov	r4, r1
 8005504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005508:	f000 f86c 	bl	80055e4 <_read_r>
 800550c:	2800      	cmp	r0, #0
 800550e:	bfab      	itete	ge
 8005510:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005512:	89a3      	ldrhlt	r3, [r4, #12]
 8005514:	181b      	addge	r3, r3, r0
 8005516:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800551a:	bfac      	ite	ge
 800551c:	6563      	strge	r3, [r4, #84]	; 0x54
 800551e:	81a3      	strhlt	r3, [r4, #12]
 8005520:	bd10      	pop	{r4, pc}

08005522 <__swrite>:
 8005522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005526:	461f      	mov	r7, r3
 8005528:	898b      	ldrh	r3, [r1, #12]
 800552a:	4605      	mov	r5, r0
 800552c:	05db      	lsls	r3, r3, #23
 800552e:	460c      	mov	r4, r1
 8005530:	4616      	mov	r6, r2
 8005532:	d505      	bpl.n	8005540 <__swrite+0x1e>
 8005534:	2302      	movs	r3, #2
 8005536:	2200      	movs	r2, #0
 8005538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800553c:	f000 f840 	bl	80055c0 <_lseek_r>
 8005540:	89a3      	ldrh	r3, [r4, #12]
 8005542:	4632      	mov	r2, r6
 8005544:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005548:	81a3      	strh	r3, [r4, #12]
 800554a:	4628      	mov	r0, r5
 800554c:	463b      	mov	r3, r7
 800554e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005556:	f000 b857 	b.w	8005608 <_write_r>

0800555a <__sseek>:
 800555a:	b510      	push	{r4, lr}
 800555c:	460c      	mov	r4, r1
 800555e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005562:	f000 f82d 	bl	80055c0 <_lseek_r>
 8005566:	1c43      	adds	r3, r0, #1
 8005568:	89a3      	ldrh	r3, [r4, #12]
 800556a:	bf15      	itete	ne
 800556c:	6560      	strne	r0, [r4, #84]	; 0x54
 800556e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005572:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005576:	81a3      	strheq	r3, [r4, #12]
 8005578:	bf18      	it	ne
 800557a:	81a3      	strhne	r3, [r4, #12]
 800557c:	bd10      	pop	{r4, pc}

0800557e <__sclose>:
 800557e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005582:	f000 b80d 	b.w	80055a0 <_close_r>

08005586 <memset>:
 8005586:	4603      	mov	r3, r0
 8005588:	4402      	add	r2, r0
 800558a:	4293      	cmp	r3, r2
 800558c:	d100      	bne.n	8005590 <memset+0xa>
 800558e:	4770      	bx	lr
 8005590:	f803 1b01 	strb.w	r1, [r3], #1
 8005594:	e7f9      	b.n	800558a <memset+0x4>
	...

08005598 <_localeconv_r>:
 8005598:	4800      	ldr	r0, [pc, #0]	; (800559c <_localeconv_r+0x4>)
 800559a:	4770      	bx	lr
 800559c:	20000248 	.word	0x20000248

080055a0 <_close_r>:
 80055a0:	b538      	push	{r3, r4, r5, lr}
 80055a2:	2300      	movs	r3, #0
 80055a4:	4d05      	ldr	r5, [pc, #20]	; (80055bc <_close_r+0x1c>)
 80055a6:	4604      	mov	r4, r0
 80055a8:	4608      	mov	r0, r1
 80055aa:	602b      	str	r3, [r5, #0]
 80055ac:	f7fc fb76 	bl	8001c9c <_close>
 80055b0:	1c43      	adds	r3, r0, #1
 80055b2:	d102      	bne.n	80055ba <_close_r+0x1a>
 80055b4:	682b      	ldr	r3, [r5, #0]
 80055b6:	b103      	cbz	r3, 80055ba <_close_r+0x1a>
 80055b8:	6023      	str	r3, [r4, #0]
 80055ba:	bd38      	pop	{r3, r4, r5, pc}
 80055bc:	200008a4 	.word	0x200008a4

080055c0 <_lseek_r>:
 80055c0:	b538      	push	{r3, r4, r5, lr}
 80055c2:	4604      	mov	r4, r0
 80055c4:	4608      	mov	r0, r1
 80055c6:	4611      	mov	r1, r2
 80055c8:	2200      	movs	r2, #0
 80055ca:	4d05      	ldr	r5, [pc, #20]	; (80055e0 <_lseek_r+0x20>)
 80055cc:	602a      	str	r2, [r5, #0]
 80055ce:	461a      	mov	r2, r3
 80055d0:	f7fc fb88 	bl	8001ce4 <_lseek>
 80055d4:	1c43      	adds	r3, r0, #1
 80055d6:	d102      	bne.n	80055de <_lseek_r+0x1e>
 80055d8:	682b      	ldr	r3, [r5, #0]
 80055da:	b103      	cbz	r3, 80055de <_lseek_r+0x1e>
 80055dc:	6023      	str	r3, [r4, #0]
 80055de:	bd38      	pop	{r3, r4, r5, pc}
 80055e0:	200008a4 	.word	0x200008a4

080055e4 <_read_r>:
 80055e4:	b538      	push	{r3, r4, r5, lr}
 80055e6:	4604      	mov	r4, r0
 80055e8:	4608      	mov	r0, r1
 80055ea:	4611      	mov	r1, r2
 80055ec:	2200      	movs	r2, #0
 80055ee:	4d05      	ldr	r5, [pc, #20]	; (8005604 <_read_r+0x20>)
 80055f0:	602a      	str	r2, [r5, #0]
 80055f2:	461a      	mov	r2, r3
 80055f4:	f7fc fb19 	bl	8001c2a <_read>
 80055f8:	1c43      	adds	r3, r0, #1
 80055fa:	d102      	bne.n	8005602 <_read_r+0x1e>
 80055fc:	682b      	ldr	r3, [r5, #0]
 80055fe:	b103      	cbz	r3, 8005602 <_read_r+0x1e>
 8005600:	6023      	str	r3, [r4, #0]
 8005602:	bd38      	pop	{r3, r4, r5, pc}
 8005604:	200008a4 	.word	0x200008a4

08005608 <_write_r>:
 8005608:	b538      	push	{r3, r4, r5, lr}
 800560a:	4604      	mov	r4, r0
 800560c:	4608      	mov	r0, r1
 800560e:	4611      	mov	r1, r2
 8005610:	2200      	movs	r2, #0
 8005612:	4d05      	ldr	r5, [pc, #20]	; (8005628 <_write_r+0x20>)
 8005614:	602a      	str	r2, [r5, #0]
 8005616:	461a      	mov	r2, r3
 8005618:	f7fc fb24 	bl	8001c64 <_write>
 800561c:	1c43      	adds	r3, r0, #1
 800561e:	d102      	bne.n	8005626 <_write_r+0x1e>
 8005620:	682b      	ldr	r3, [r5, #0]
 8005622:	b103      	cbz	r3, 8005626 <_write_r+0x1e>
 8005624:	6023      	str	r3, [r4, #0]
 8005626:	bd38      	pop	{r3, r4, r5, pc}
 8005628:	200008a4 	.word	0x200008a4

0800562c <__errno>:
 800562c:	4b01      	ldr	r3, [pc, #4]	; (8005634 <__errno+0x8>)
 800562e:	6818      	ldr	r0, [r3, #0]
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	20000154 	.word	0x20000154

08005638 <__libc_init_array>:
 8005638:	b570      	push	{r4, r5, r6, lr}
 800563a:	2600      	movs	r6, #0
 800563c:	4d0c      	ldr	r5, [pc, #48]	; (8005670 <__libc_init_array+0x38>)
 800563e:	4c0d      	ldr	r4, [pc, #52]	; (8005674 <__libc_init_array+0x3c>)
 8005640:	1b64      	subs	r4, r4, r5
 8005642:	10a4      	asrs	r4, r4, #2
 8005644:	42a6      	cmp	r6, r4
 8005646:	d109      	bne.n	800565c <__libc_init_array+0x24>
 8005648:	f002 f888 	bl	800775c <_init>
 800564c:	2600      	movs	r6, #0
 800564e:	4d0a      	ldr	r5, [pc, #40]	; (8005678 <__libc_init_array+0x40>)
 8005650:	4c0a      	ldr	r4, [pc, #40]	; (800567c <__libc_init_array+0x44>)
 8005652:	1b64      	subs	r4, r4, r5
 8005654:	10a4      	asrs	r4, r4, #2
 8005656:	42a6      	cmp	r6, r4
 8005658:	d105      	bne.n	8005666 <__libc_init_array+0x2e>
 800565a:	bd70      	pop	{r4, r5, r6, pc}
 800565c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005660:	4798      	blx	r3
 8005662:	3601      	adds	r6, #1
 8005664:	e7ee      	b.n	8005644 <__libc_init_array+0xc>
 8005666:	f855 3b04 	ldr.w	r3, [r5], #4
 800566a:	4798      	blx	r3
 800566c:	3601      	adds	r6, #1
 800566e:	e7f2      	b.n	8005656 <__libc_init_array+0x1e>
 8005670:	08007bbc 	.word	0x08007bbc
 8005674:	08007bbc 	.word	0x08007bbc
 8005678:	08007bbc 	.word	0x08007bbc
 800567c:	08007bc0 	.word	0x08007bc0

08005680 <__retarget_lock_init_recursive>:
 8005680:	4770      	bx	lr

08005682 <__retarget_lock_acquire_recursive>:
 8005682:	4770      	bx	lr

08005684 <__retarget_lock_release_recursive>:
 8005684:	4770      	bx	lr

08005686 <memchr>:
 8005686:	4603      	mov	r3, r0
 8005688:	b510      	push	{r4, lr}
 800568a:	b2c9      	uxtb	r1, r1
 800568c:	4402      	add	r2, r0
 800568e:	4293      	cmp	r3, r2
 8005690:	4618      	mov	r0, r3
 8005692:	d101      	bne.n	8005698 <memchr+0x12>
 8005694:	2000      	movs	r0, #0
 8005696:	e003      	b.n	80056a0 <memchr+0x1a>
 8005698:	7804      	ldrb	r4, [r0, #0]
 800569a:	3301      	adds	r3, #1
 800569c:	428c      	cmp	r4, r1
 800569e:	d1f6      	bne.n	800568e <memchr+0x8>
 80056a0:	bd10      	pop	{r4, pc}

080056a2 <quorem>:
 80056a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a6:	6903      	ldr	r3, [r0, #16]
 80056a8:	690c      	ldr	r4, [r1, #16]
 80056aa:	4607      	mov	r7, r0
 80056ac:	42a3      	cmp	r3, r4
 80056ae:	db7f      	blt.n	80057b0 <quorem+0x10e>
 80056b0:	3c01      	subs	r4, #1
 80056b2:	f100 0514 	add.w	r5, r0, #20
 80056b6:	f101 0814 	add.w	r8, r1, #20
 80056ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056be:	9301      	str	r3, [sp, #4]
 80056c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80056c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056c8:	3301      	adds	r3, #1
 80056ca:	429a      	cmp	r2, r3
 80056cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80056d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80056d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80056d8:	d331      	bcc.n	800573e <quorem+0x9c>
 80056da:	f04f 0e00 	mov.w	lr, #0
 80056de:	4640      	mov	r0, r8
 80056e0:	46ac      	mov	ip, r5
 80056e2:	46f2      	mov	sl, lr
 80056e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80056e8:	b293      	uxth	r3, r2
 80056ea:	fb06 e303 	mla	r3, r6, r3, lr
 80056ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80056f2:	0c1a      	lsrs	r2, r3, #16
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	fb06 220e 	mla	r2, r6, lr, r2
 80056fa:	ebaa 0303 	sub.w	r3, sl, r3
 80056fe:	f8dc a000 	ldr.w	sl, [ip]
 8005702:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005706:	fa1f fa8a 	uxth.w	sl, sl
 800570a:	4453      	add	r3, sl
 800570c:	f8dc a000 	ldr.w	sl, [ip]
 8005710:	b292      	uxth	r2, r2
 8005712:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005716:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800571a:	b29b      	uxth	r3, r3
 800571c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005720:	4581      	cmp	r9, r0
 8005722:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005726:	f84c 3b04 	str.w	r3, [ip], #4
 800572a:	d2db      	bcs.n	80056e4 <quorem+0x42>
 800572c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005730:	b92b      	cbnz	r3, 800573e <quorem+0x9c>
 8005732:	9b01      	ldr	r3, [sp, #4]
 8005734:	3b04      	subs	r3, #4
 8005736:	429d      	cmp	r5, r3
 8005738:	461a      	mov	r2, r3
 800573a:	d32d      	bcc.n	8005798 <quorem+0xf6>
 800573c:	613c      	str	r4, [r7, #16]
 800573e:	4638      	mov	r0, r7
 8005740:	f001 f994 	bl	8006a6c <__mcmp>
 8005744:	2800      	cmp	r0, #0
 8005746:	db23      	blt.n	8005790 <quorem+0xee>
 8005748:	4629      	mov	r1, r5
 800574a:	2000      	movs	r0, #0
 800574c:	3601      	adds	r6, #1
 800574e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005752:	f8d1 c000 	ldr.w	ip, [r1]
 8005756:	b293      	uxth	r3, r2
 8005758:	1ac3      	subs	r3, r0, r3
 800575a:	0c12      	lsrs	r2, r2, #16
 800575c:	fa1f f08c 	uxth.w	r0, ip
 8005760:	4403      	add	r3, r0
 8005762:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005766:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800576a:	b29b      	uxth	r3, r3
 800576c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005770:	45c1      	cmp	r9, r8
 8005772:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005776:	f841 3b04 	str.w	r3, [r1], #4
 800577a:	d2e8      	bcs.n	800574e <quorem+0xac>
 800577c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005780:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005784:	b922      	cbnz	r2, 8005790 <quorem+0xee>
 8005786:	3b04      	subs	r3, #4
 8005788:	429d      	cmp	r5, r3
 800578a:	461a      	mov	r2, r3
 800578c:	d30a      	bcc.n	80057a4 <quorem+0x102>
 800578e:	613c      	str	r4, [r7, #16]
 8005790:	4630      	mov	r0, r6
 8005792:	b003      	add	sp, #12
 8005794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005798:	6812      	ldr	r2, [r2, #0]
 800579a:	3b04      	subs	r3, #4
 800579c:	2a00      	cmp	r2, #0
 800579e:	d1cd      	bne.n	800573c <quorem+0x9a>
 80057a0:	3c01      	subs	r4, #1
 80057a2:	e7c8      	b.n	8005736 <quorem+0x94>
 80057a4:	6812      	ldr	r2, [r2, #0]
 80057a6:	3b04      	subs	r3, #4
 80057a8:	2a00      	cmp	r2, #0
 80057aa:	d1f0      	bne.n	800578e <quorem+0xec>
 80057ac:	3c01      	subs	r4, #1
 80057ae:	e7eb      	b.n	8005788 <quorem+0xe6>
 80057b0:	2000      	movs	r0, #0
 80057b2:	e7ee      	b.n	8005792 <quorem+0xf0>
 80057b4:	0000      	movs	r0, r0
	...

080057b8 <_dtoa_r>:
 80057b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057bc:	4616      	mov	r6, r2
 80057be:	461f      	mov	r7, r3
 80057c0:	69c4      	ldr	r4, [r0, #28]
 80057c2:	b099      	sub	sp, #100	; 0x64
 80057c4:	4605      	mov	r5, r0
 80057c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80057ca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80057ce:	b974      	cbnz	r4, 80057ee <_dtoa_r+0x36>
 80057d0:	2010      	movs	r0, #16
 80057d2:	f000 fe1d 	bl	8006410 <malloc>
 80057d6:	4602      	mov	r2, r0
 80057d8:	61e8      	str	r0, [r5, #28]
 80057da:	b920      	cbnz	r0, 80057e6 <_dtoa_r+0x2e>
 80057dc:	21ef      	movs	r1, #239	; 0xef
 80057de:	4bac      	ldr	r3, [pc, #688]	; (8005a90 <_dtoa_r+0x2d8>)
 80057e0:	48ac      	ldr	r0, [pc, #688]	; (8005a94 <_dtoa_r+0x2dc>)
 80057e2:	f001 fc7b 	bl	80070dc <__assert_func>
 80057e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80057ea:	6004      	str	r4, [r0, #0]
 80057ec:	60c4      	str	r4, [r0, #12]
 80057ee:	69eb      	ldr	r3, [r5, #28]
 80057f0:	6819      	ldr	r1, [r3, #0]
 80057f2:	b151      	cbz	r1, 800580a <_dtoa_r+0x52>
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	2301      	movs	r3, #1
 80057f8:	4093      	lsls	r3, r2
 80057fa:	604a      	str	r2, [r1, #4]
 80057fc:	608b      	str	r3, [r1, #8]
 80057fe:	4628      	mov	r0, r5
 8005800:	f000 fefa 	bl	80065f8 <_Bfree>
 8005804:	2200      	movs	r2, #0
 8005806:	69eb      	ldr	r3, [r5, #28]
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	1e3b      	subs	r3, r7, #0
 800580c:	bfaf      	iteee	ge
 800580e:	2300      	movge	r3, #0
 8005810:	2201      	movlt	r2, #1
 8005812:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005816:	9305      	strlt	r3, [sp, #20]
 8005818:	bfa8      	it	ge
 800581a:	f8c8 3000 	strge.w	r3, [r8]
 800581e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005822:	4b9d      	ldr	r3, [pc, #628]	; (8005a98 <_dtoa_r+0x2e0>)
 8005824:	bfb8      	it	lt
 8005826:	f8c8 2000 	strlt.w	r2, [r8]
 800582a:	ea33 0309 	bics.w	r3, r3, r9
 800582e:	d119      	bne.n	8005864 <_dtoa_r+0xac>
 8005830:	f242 730f 	movw	r3, #9999	; 0x270f
 8005834:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005836:	6013      	str	r3, [r2, #0]
 8005838:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800583c:	4333      	orrs	r3, r6
 800583e:	f000 8589 	beq.w	8006354 <_dtoa_r+0xb9c>
 8005842:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005844:	b953      	cbnz	r3, 800585c <_dtoa_r+0xa4>
 8005846:	4b95      	ldr	r3, [pc, #596]	; (8005a9c <_dtoa_r+0x2e4>)
 8005848:	e023      	b.n	8005892 <_dtoa_r+0xda>
 800584a:	4b95      	ldr	r3, [pc, #596]	; (8005aa0 <_dtoa_r+0x2e8>)
 800584c:	9303      	str	r3, [sp, #12]
 800584e:	3308      	adds	r3, #8
 8005850:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005852:	6013      	str	r3, [r2, #0]
 8005854:	9803      	ldr	r0, [sp, #12]
 8005856:	b019      	add	sp, #100	; 0x64
 8005858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800585c:	4b8f      	ldr	r3, [pc, #572]	; (8005a9c <_dtoa_r+0x2e4>)
 800585e:	9303      	str	r3, [sp, #12]
 8005860:	3303      	adds	r3, #3
 8005862:	e7f5      	b.n	8005850 <_dtoa_r+0x98>
 8005864:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005868:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800586c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005870:	2200      	movs	r2, #0
 8005872:	2300      	movs	r3, #0
 8005874:	f7fb f898 	bl	80009a8 <__aeabi_dcmpeq>
 8005878:	4680      	mov	r8, r0
 800587a:	b160      	cbz	r0, 8005896 <_dtoa_r+0xde>
 800587c:	2301      	movs	r3, #1
 800587e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005880:	6013      	str	r3, [r2, #0]
 8005882:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 8562 	beq.w	800634e <_dtoa_r+0xb96>
 800588a:	4b86      	ldr	r3, [pc, #536]	; (8005aa4 <_dtoa_r+0x2ec>)
 800588c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800588e:	6013      	str	r3, [r2, #0]
 8005890:	3b01      	subs	r3, #1
 8005892:	9303      	str	r3, [sp, #12]
 8005894:	e7de      	b.n	8005854 <_dtoa_r+0x9c>
 8005896:	ab16      	add	r3, sp, #88	; 0x58
 8005898:	9301      	str	r3, [sp, #4]
 800589a:	ab17      	add	r3, sp, #92	; 0x5c
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	4628      	mov	r0, r5
 80058a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80058a4:	f001 f98a 	bl	8006bbc <__d2b>
 80058a8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80058ac:	4682      	mov	sl, r0
 80058ae:	2c00      	cmp	r4, #0
 80058b0:	d07e      	beq.n	80059b0 <_dtoa_r+0x1f8>
 80058b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058b8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80058bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058c0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80058c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80058c8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80058cc:	4619      	mov	r1, r3
 80058ce:	2200      	movs	r2, #0
 80058d0:	4b75      	ldr	r3, [pc, #468]	; (8005aa8 <_dtoa_r+0x2f0>)
 80058d2:	f7fa fc49 	bl	8000168 <__aeabi_dsub>
 80058d6:	a368      	add	r3, pc, #416	; (adr r3, 8005a78 <_dtoa_r+0x2c0>)
 80058d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058dc:	f7fa fdfc 	bl	80004d8 <__aeabi_dmul>
 80058e0:	a367      	add	r3, pc, #412	; (adr r3, 8005a80 <_dtoa_r+0x2c8>)
 80058e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e6:	f7fa fc41 	bl	800016c <__adddf3>
 80058ea:	4606      	mov	r6, r0
 80058ec:	4620      	mov	r0, r4
 80058ee:	460f      	mov	r7, r1
 80058f0:	f7fa fd88 	bl	8000404 <__aeabi_i2d>
 80058f4:	a364      	add	r3, pc, #400	; (adr r3, 8005a88 <_dtoa_r+0x2d0>)
 80058f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fa:	f7fa fded 	bl	80004d8 <__aeabi_dmul>
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	4630      	mov	r0, r6
 8005904:	4639      	mov	r1, r7
 8005906:	f7fa fc31 	bl	800016c <__adddf3>
 800590a:	4606      	mov	r6, r0
 800590c:	460f      	mov	r7, r1
 800590e:	f7fb f893 	bl	8000a38 <__aeabi_d2iz>
 8005912:	2200      	movs	r2, #0
 8005914:	4683      	mov	fp, r0
 8005916:	2300      	movs	r3, #0
 8005918:	4630      	mov	r0, r6
 800591a:	4639      	mov	r1, r7
 800591c:	f7fb f84e 	bl	80009bc <__aeabi_dcmplt>
 8005920:	b148      	cbz	r0, 8005936 <_dtoa_r+0x17e>
 8005922:	4658      	mov	r0, fp
 8005924:	f7fa fd6e 	bl	8000404 <__aeabi_i2d>
 8005928:	4632      	mov	r2, r6
 800592a:	463b      	mov	r3, r7
 800592c:	f7fb f83c 	bl	80009a8 <__aeabi_dcmpeq>
 8005930:	b908      	cbnz	r0, 8005936 <_dtoa_r+0x17e>
 8005932:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005936:	f1bb 0f16 	cmp.w	fp, #22
 800593a:	d857      	bhi.n	80059ec <_dtoa_r+0x234>
 800593c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005940:	4b5a      	ldr	r3, [pc, #360]	; (8005aac <_dtoa_r+0x2f4>)
 8005942:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594a:	f7fb f837 	bl	80009bc <__aeabi_dcmplt>
 800594e:	2800      	cmp	r0, #0
 8005950:	d04e      	beq.n	80059f0 <_dtoa_r+0x238>
 8005952:	2300      	movs	r3, #0
 8005954:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005958:	930f      	str	r3, [sp, #60]	; 0x3c
 800595a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800595c:	1b1b      	subs	r3, r3, r4
 800595e:	1e5a      	subs	r2, r3, #1
 8005960:	bf46      	itte	mi
 8005962:	f1c3 0901 	rsbmi	r9, r3, #1
 8005966:	2300      	movmi	r3, #0
 8005968:	f04f 0900 	movpl.w	r9, #0
 800596c:	9209      	str	r2, [sp, #36]	; 0x24
 800596e:	bf48      	it	mi
 8005970:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005972:	f1bb 0f00 	cmp.w	fp, #0
 8005976:	db3d      	blt.n	80059f4 <_dtoa_r+0x23c>
 8005978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800597a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800597e:	445b      	add	r3, fp
 8005980:	9309      	str	r3, [sp, #36]	; 0x24
 8005982:	2300      	movs	r3, #0
 8005984:	930a      	str	r3, [sp, #40]	; 0x28
 8005986:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005988:	2b09      	cmp	r3, #9
 800598a:	d867      	bhi.n	8005a5c <_dtoa_r+0x2a4>
 800598c:	2b05      	cmp	r3, #5
 800598e:	bfc4      	itt	gt
 8005990:	3b04      	subgt	r3, #4
 8005992:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005994:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005996:	bfc8      	it	gt
 8005998:	2400      	movgt	r4, #0
 800599a:	f1a3 0302 	sub.w	r3, r3, #2
 800599e:	bfd8      	it	le
 80059a0:	2401      	movle	r4, #1
 80059a2:	2b03      	cmp	r3, #3
 80059a4:	f200 8086 	bhi.w	8005ab4 <_dtoa_r+0x2fc>
 80059a8:	e8df f003 	tbb	[pc, r3]
 80059ac:	5637392c 	.word	0x5637392c
 80059b0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80059b4:	441c      	add	r4, r3
 80059b6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80059ba:	2b20      	cmp	r3, #32
 80059bc:	bfc1      	itttt	gt
 80059be:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80059c2:	fa09 f903 	lslgt.w	r9, r9, r3
 80059c6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80059ca:	fa26 f303 	lsrgt.w	r3, r6, r3
 80059ce:	bfd6      	itet	le
 80059d0:	f1c3 0320 	rsble	r3, r3, #32
 80059d4:	ea49 0003 	orrgt.w	r0, r9, r3
 80059d8:	fa06 f003 	lslle.w	r0, r6, r3
 80059dc:	f7fa fd02 	bl	80003e4 <__aeabi_ui2d>
 80059e0:	2201      	movs	r2, #1
 80059e2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80059e6:	3c01      	subs	r4, #1
 80059e8:	9213      	str	r2, [sp, #76]	; 0x4c
 80059ea:	e76f      	b.n	80058cc <_dtoa_r+0x114>
 80059ec:	2301      	movs	r3, #1
 80059ee:	e7b3      	b.n	8005958 <_dtoa_r+0x1a0>
 80059f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80059f2:	e7b2      	b.n	800595a <_dtoa_r+0x1a2>
 80059f4:	f1cb 0300 	rsb	r3, fp, #0
 80059f8:	930a      	str	r3, [sp, #40]	; 0x28
 80059fa:	2300      	movs	r3, #0
 80059fc:	eba9 090b 	sub.w	r9, r9, fp
 8005a00:	930e      	str	r3, [sp, #56]	; 0x38
 8005a02:	e7c0      	b.n	8005986 <_dtoa_r+0x1ce>
 8005a04:	2300      	movs	r3, #0
 8005a06:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	dc55      	bgt.n	8005aba <_dtoa_r+0x302>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	461a      	mov	r2, r3
 8005a12:	9306      	str	r3, [sp, #24]
 8005a14:	9308      	str	r3, [sp, #32]
 8005a16:	9223      	str	r2, [sp, #140]	; 0x8c
 8005a18:	e00b      	b.n	8005a32 <_dtoa_r+0x27a>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e7f3      	b.n	8005a06 <_dtoa_r+0x24e>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a24:	445b      	add	r3, fp
 8005a26:	9306      	str	r3, [sp, #24]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	9308      	str	r3, [sp, #32]
 8005a2e:	bfb8      	it	lt
 8005a30:	2301      	movlt	r3, #1
 8005a32:	2100      	movs	r1, #0
 8005a34:	2204      	movs	r2, #4
 8005a36:	69e8      	ldr	r0, [r5, #28]
 8005a38:	f102 0614 	add.w	r6, r2, #20
 8005a3c:	429e      	cmp	r6, r3
 8005a3e:	d940      	bls.n	8005ac2 <_dtoa_r+0x30a>
 8005a40:	6041      	str	r1, [r0, #4]
 8005a42:	4628      	mov	r0, r5
 8005a44:	f000 fd98 	bl	8006578 <_Balloc>
 8005a48:	9003      	str	r0, [sp, #12]
 8005a4a:	2800      	cmp	r0, #0
 8005a4c:	d13c      	bne.n	8005ac8 <_dtoa_r+0x310>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	f240 11af 	movw	r1, #431	; 0x1af
 8005a54:	4b16      	ldr	r3, [pc, #88]	; (8005ab0 <_dtoa_r+0x2f8>)
 8005a56:	e6c3      	b.n	80057e0 <_dtoa_r+0x28>
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e7e1      	b.n	8005a20 <_dtoa_r+0x268>
 8005a5c:	2401      	movs	r4, #1
 8005a5e:	2300      	movs	r3, #0
 8005a60:	940b      	str	r4, [sp, #44]	; 0x2c
 8005a62:	9322      	str	r3, [sp, #136]	; 0x88
 8005a64:	f04f 33ff 	mov.w	r3, #4294967295
 8005a68:	2200      	movs	r2, #0
 8005a6a:	9306      	str	r3, [sp, #24]
 8005a6c:	9308      	str	r3, [sp, #32]
 8005a6e:	2312      	movs	r3, #18
 8005a70:	e7d1      	b.n	8005a16 <_dtoa_r+0x25e>
 8005a72:	bf00      	nop
 8005a74:	f3af 8000 	nop.w
 8005a78:	636f4361 	.word	0x636f4361
 8005a7c:	3fd287a7 	.word	0x3fd287a7
 8005a80:	8b60c8b3 	.word	0x8b60c8b3
 8005a84:	3fc68a28 	.word	0x3fc68a28
 8005a88:	509f79fb 	.word	0x509f79fb
 8005a8c:	3fd34413 	.word	0x3fd34413
 8005a90:	0800788b 	.word	0x0800788b
 8005a94:	080078a2 	.word	0x080078a2
 8005a98:	7ff00000 	.word	0x7ff00000
 8005a9c:	08007887 	.word	0x08007887
 8005aa0:	0800787e 	.word	0x0800787e
 8005aa4:	0800785b 	.word	0x0800785b
 8005aa8:	3ff80000 	.word	0x3ff80000
 8005aac:	08007990 	.word	0x08007990
 8005ab0:	080078fa 	.word	0x080078fa
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ab8:	e7d4      	b.n	8005a64 <_dtoa_r+0x2ac>
 8005aba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005abc:	9306      	str	r3, [sp, #24]
 8005abe:	9308      	str	r3, [sp, #32]
 8005ac0:	e7b7      	b.n	8005a32 <_dtoa_r+0x27a>
 8005ac2:	3101      	adds	r1, #1
 8005ac4:	0052      	lsls	r2, r2, #1
 8005ac6:	e7b7      	b.n	8005a38 <_dtoa_r+0x280>
 8005ac8:	69eb      	ldr	r3, [r5, #28]
 8005aca:	9a03      	ldr	r2, [sp, #12]
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	9b08      	ldr	r3, [sp, #32]
 8005ad0:	2b0e      	cmp	r3, #14
 8005ad2:	f200 80a8 	bhi.w	8005c26 <_dtoa_r+0x46e>
 8005ad6:	2c00      	cmp	r4, #0
 8005ad8:	f000 80a5 	beq.w	8005c26 <_dtoa_r+0x46e>
 8005adc:	f1bb 0f00 	cmp.w	fp, #0
 8005ae0:	dd34      	ble.n	8005b4c <_dtoa_r+0x394>
 8005ae2:	4b9a      	ldr	r3, [pc, #616]	; (8005d4c <_dtoa_r+0x594>)
 8005ae4:	f00b 020f 	and.w	r2, fp, #15
 8005ae8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005aec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005af0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005af4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005af8:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005afc:	d016      	beq.n	8005b2c <_dtoa_r+0x374>
 8005afe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b02:	4b93      	ldr	r3, [pc, #588]	; (8005d50 <_dtoa_r+0x598>)
 8005b04:	2703      	movs	r7, #3
 8005b06:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b0a:	f7fa fe0f 	bl	800072c <__aeabi_ddiv>
 8005b0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b12:	f004 040f 	and.w	r4, r4, #15
 8005b16:	4e8e      	ldr	r6, [pc, #568]	; (8005d50 <_dtoa_r+0x598>)
 8005b18:	b954      	cbnz	r4, 8005b30 <_dtoa_r+0x378>
 8005b1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b22:	f7fa fe03 	bl	800072c <__aeabi_ddiv>
 8005b26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b2a:	e029      	b.n	8005b80 <_dtoa_r+0x3c8>
 8005b2c:	2702      	movs	r7, #2
 8005b2e:	e7f2      	b.n	8005b16 <_dtoa_r+0x35e>
 8005b30:	07e1      	lsls	r1, r4, #31
 8005b32:	d508      	bpl.n	8005b46 <_dtoa_r+0x38e>
 8005b34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b38:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005b3c:	f7fa fccc 	bl	80004d8 <__aeabi_dmul>
 8005b40:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b44:	3701      	adds	r7, #1
 8005b46:	1064      	asrs	r4, r4, #1
 8005b48:	3608      	adds	r6, #8
 8005b4a:	e7e5      	b.n	8005b18 <_dtoa_r+0x360>
 8005b4c:	f000 80a5 	beq.w	8005c9a <_dtoa_r+0x4e2>
 8005b50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b54:	f1cb 0400 	rsb	r4, fp, #0
 8005b58:	4b7c      	ldr	r3, [pc, #496]	; (8005d4c <_dtoa_r+0x594>)
 8005b5a:	f004 020f 	and.w	r2, r4, #15
 8005b5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b66:	f7fa fcb7 	bl	80004d8 <__aeabi_dmul>
 8005b6a:	2702      	movs	r7, #2
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b72:	4e77      	ldr	r6, [pc, #476]	; (8005d50 <_dtoa_r+0x598>)
 8005b74:	1124      	asrs	r4, r4, #4
 8005b76:	2c00      	cmp	r4, #0
 8005b78:	f040 8084 	bne.w	8005c84 <_dtoa_r+0x4cc>
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1d2      	bne.n	8005b26 <_dtoa_r+0x36e>
 8005b80:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005b84:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005b88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 8087 	beq.w	8005c9e <_dtoa_r+0x4e6>
 8005b90:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b94:	2200      	movs	r2, #0
 8005b96:	4b6f      	ldr	r3, [pc, #444]	; (8005d54 <_dtoa_r+0x59c>)
 8005b98:	f7fa ff10 	bl	80009bc <__aeabi_dcmplt>
 8005b9c:	2800      	cmp	r0, #0
 8005b9e:	d07e      	beq.n	8005c9e <_dtoa_r+0x4e6>
 8005ba0:	9b08      	ldr	r3, [sp, #32]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d07b      	beq.n	8005c9e <_dtoa_r+0x4e6>
 8005ba6:	9b06      	ldr	r3, [sp, #24]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	dd38      	ble.n	8005c1e <_dtoa_r+0x466>
 8005bac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	4b69      	ldr	r3, [pc, #420]	; (8005d58 <_dtoa_r+0x5a0>)
 8005bb4:	f7fa fc90 	bl	80004d8 <__aeabi_dmul>
 8005bb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005bbc:	9c06      	ldr	r4, [sp, #24]
 8005bbe:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005bc2:	3701      	adds	r7, #1
 8005bc4:	4638      	mov	r0, r7
 8005bc6:	f7fa fc1d 	bl	8000404 <__aeabi_i2d>
 8005bca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bce:	f7fa fc83 	bl	80004d8 <__aeabi_dmul>
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	4b61      	ldr	r3, [pc, #388]	; (8005d5c <_dtoa_r+0x5a4>)
 8005bd6:	f7fa fac9 	bl	800016c <__adddf3>
 8005bda:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005bde:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005be2:	9611      	str	r6, [sp, #68]	; 0x44
 8005be4:	2c00      	cmp	r4, #0
 8005be6:	d15d      	bne.n	8005ca4 <_dtoa_r+0x4ec>
 8005be8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bec:	2200      	movs	r2, #0
 8005bee:	4b5c      	ldr	r3, [pc, #368]	; (8005d60 <_dtoa_r+0x5a8>)
 8005bf0:	f7fa faba 	bl	8000168 <__aeabi_dsub>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005bfc:	4633      	mov	r3, r6
 8005bfe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c00:	f7fa fefa 	bl	80009f8 <__aeabi_dcmpgt>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	f040 8295 	bne.w	8006134 <_dtoa_r+0x97c>
 8005c0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c0e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c10:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005c14:	f7fa fed2 	bl	80009bc <__aeabi_dcmplt>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	f040 8289 	bne.w	8006130 <_dtoa_r+0x978>
 8005c1e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005c22:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005c26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f2c0 8151 	blt.w	8005ed0 <_dtoa_r+0x718>
 8005c2e:	f1bb 0f0e 	cmp.w	fp, #14
 8005c32:	f300 814d 	bgt.w	8005ed0 <_dtoa_r+0x718>
 8005c36:	4b45      	ldr	r3, [pc, #276]	; (8005d4c <_dtoa_r+0x594>)
 8005c38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005c3c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c40:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005c44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f280 80da 	bge.w	8005e00 <_dtoa_r+0x648>
 8005c4c:	9b08      	ldr	r3, [sp, #32]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f300 80d6 	bgt.w	8005e00 <_dtoa_r+0x648>
 8005c54:	f040 826b 	bne.w	800612e <_dtoa_r+0x976>
 8005c58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	4b40      	ldr	r3, [pc, #256]	; (8005d60 <_dtoa_r+0x5a8>)
 8005c60:	f7fa fc3a 	bl	80004d8 <__aeabi_dmul>
 8005c64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c68:	f7fa febc 	bl	80009e4 <__aeabi_dcmpge>
 8005c6c:	9c08      	ldr	r4, [sp, #32]
 8005c6e:	4626      	mov	r6, r4
 8005c70:	2800      	cmp	r0, #0
 8005c72:	f040 8241 	bne.w	80060f8 <_dtoa_r+0x940>
 8005c76:	2331      	movs	r3, #49	; 0x31
 8005c78:	9f03      	ldr	r7, [sp, #12]
 8005c7a:	f10b 0b01 	add.w	fp, fp, #1
 8005c7e:	f807 3b01 	strb.w	r3, [r7], #1
 8005c82:	e23d      	b.n	8006100 <_dtoa_r+0x948>
 8005c84:	07e2      	lsls	r2, r4, #31
 8005c86:	d505      	bpl.n	8005c94 <_dtoa_r+0x4dc>
 8005c88:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005c8c:	f7fa fc24 	bl	80004d8 <__aeabi_dmul>
 8005c90:	2301      	movs	r3, #1
 8005c92:	3701      	adds	r7, #1
 8005c94:	1064      	asrs	r4, r4, #1
 8005c96:	3608      	adds	r6, #8
 8005c98:	e76d      	b.n	8005b76 <_dtoa_r+0x3be>
 8005c9a:	2702      	movs	r7, #2
 8005c9c:	e770      	b.n	8005b80 <_dtoa_r+0x3c8>
 8005c9e:	46d8      	mov	r8, fp
 8005ca0:	9c08      	ldr	r4, [sp, #32]
 8005ca2:	e78f      	b.n	8005bc4 <_dtoa_r+0x40c>
 8005ca4:	9903      	ldr	r1, [sp, #12]
 8005ca6:	4b29      	ldr	r3, [pc, #164]	; (8005d4c <_dtoa_r+0x594>)
 8005ca8:	4421      	add	r1, r4
 8005caa:	9112      	str	r1, [sp, #72]	; 0x48
 8005cac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005cae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005cb2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005cb6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005cba:	2900      	cmp	r1, #0
 8005cbc:	d054      	beq.n	8005d68 <_dtoa_r+0x5b0>
 8005cbe:	2000      	movs	r0, #0
 8005cc0:	4928      	ldr	r1, [pc, #160]	; (8005d64 <_dtoa_r+0x5ac>)
 8005cc2:	f7fa fd33 	bl	800072c <__aeabi_ddiv>
 8005cc6:	463b      	mov	r3, r7
 8005cc8:	4632      	mov	r2, r6
 8005cca:	f7fa fa4d 	bl	8000168 <__aeabi_dsub>
 8005cce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005cd2:	9f03      	ldr	r7, [sp, #12]
 8005cd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cd8:	f7fa feae 	bl	8000a38 <__aeabi_d2iz>
 8005cdc:	4604      	mov	r4, r0
 8005cde:	f7fa fb91 	bl	8000404 <__aeabi_i2d>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cea:	f7fa fa3d 	bl	8000168 <__aeabi_dsub>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	3430      	adds	r4, #48	; 0x30
 8005cf4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005cf8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005cfc:	f807 4b01 	strb.w	r4, [r7], #1
 8005d00:	f7fa fe5c 	bl	80009bc <__aeabi_dcmplt>
 8005d04:	2800      	cmp	r0, #0
 8005d06:	d173      	bne.n	8005df0 <_dtoa_r+0x638>
 8005d08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	4911      	ldr	r1, [pc, #68]	; (8005d54 <_dtoa_r+0x59c>)
 8005d10:	f7fa fa2a 	bl	8000168 <__aeabi_dsub>
 8005d14:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d18:	f7fa fe50 	bl	80009bc <__aeabi_dcmplt>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	f040 80b6 	bne.w	8005e8e <_dtoa_r+0x6d6>
 8005d22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d24:	429f      	cmp	r7, r3
 8005d26:	f43f af7a 	beq.w	8005c1e <_dtoa_r+0x466>
 8005d2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d2e:	2200      	movs	r2, #0
 8005d30:	4b09      	ldr	r3, [pc, #36]	; (8005d58 <_dtoa_r+0x5a0>)
 8005d32:	f7fa fbd1 	bl	80004d8 <__aeabi_dmul>
 8005d36:	2200      	movs	r2, #0
 8005d38:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d40:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <_dtoa_r+0x5a0>)
 8005d42:	f7fa fbc9 	bl	80004d8 <__aeabi_dmul>
 8005d46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d4a:	e7c3      	b.n	8005cd4 <_dtoa_r+0x51c>
 8005d4c:	08007990 	.word	0x08007990
 8005d50:	08007968 	.word	0x08007968
 8005d54:	3ff00000 	.word	0x3ff00000
 8005d58:	40240000 	.word	0x40240000
 8005d5c:	401c0000 	.word	0x401c0000
 8005d60:	40140000 	.word	0x40140000
 8005d64:	3fe00000 	.word	0x3fe00000
 8005d68:	4630      	mov	r0, r6
 8005d6a:	4639      	mov	r1, r7
 8005d6c:	f7fa fbb4 	bl	80004d8 <__aeabi_dmul>
 8005d70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d72:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d76:	9c03      	ldr	r4, [sp, #12]
 8005d78:	9314      	str	r3, [sp, #80]	; 0x50
 8005d7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d7e:	f7fa fe5b 	bl	8000a38 <__aeabi_d2iz>
 8005d82:	9015      	str	r0, [sp, #84]	; 0x54
 8005d84:	f7fa fb3e 	bl	8000404 <__aeabi_i2d>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d90:	f7fa f9ea 	bl	8000168 <__aeabi_dsub>
 8005d94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d96:	4606      	mov	r6, r0
 8005d98:	3330      	adds	r3, #48	; 0x30
 8005d9a:	f804 3b01 	strb.w	r3, [r4], #1
 8005d9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005da0:	460f      	mov	r7, r1
 8005da2:	429c      	cmp	r4, r3
 8005da4:	f04f 0200 	mov.w	r2, #0
 8005da8:	d124      	bne.n	8005df4 <_dtoa_r+0x63c>
 8005daa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005dae:	4baf      	ldr	r3, [pc, #700]	; (800606c <_dtoa_r+0x8b4>)
 8005db0:	f7fa f9dc 	bl	800016c <__adddf3>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	4630      	mov	r0, r6
 8005dba:	4639      	mov	r1, r7
 8005dbc:	f7fa fe1c 	bl	80009f8 <__aeabi_dcmpgt>
 8005dc0:	2800      	cmp	r0, #0
 8005dc2:	d163      	bne.n	8005e8c <_dtoa_r+0x6d4>
 8005dc4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005dc8:	2000      	movs	r0, #0
 8005dca:	49a8      	ldr	r1, [pc, #672]	; (800606c <_dtoa_r+0x8b4>)
 8005dcc:	f7fa f9cc 	bl	8000168 <__aeabi_dsub>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	4639      	mov	r1, r7
 8005dd8:	f7fa fdf0 	bl	80009bc <__aeabi_dcmplt>
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	f43f af1e 	beq.w	8005c1e <_dtoa_r+0x466>
 8005de2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005de4:	1e7b      	subs	r3, r7, #1
 8005de6:	9314      	str	r3, [sp, #80]	; 0x50
 8005de8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005dec:	2b30      	cmp	r3, #48	; 0x30
 8005dee:	d0f8      	beq.n	8005de2 <_dtoa_r+0x62a>
 8005df0:	46c3      	mov	fp, r8
 8005df2:	e03b      	b.n	8005e6c <_dtoa_r+0x6b4>
 8005df4:	4b9e      	ldr	r3, [pc, #632]	; (8006070 <_dtoa_r+0x8b8>)
 8005df6:	f7fa fb6f 	bl	80004d8 <__aeabi_dmul>
 8005dfa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005dfe:	e7bc      	b.n	8005d7a <_dtoa_r+0x5c2>
 8005e00:	9f03      	ldr	r7, [sp, #12]
 8005e02:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005e06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e0a:	4640      	mov	r0, r8
 8005e0c:	4649      	mov	r1, r9
 8005e0e:	f7fa fc8d 	bl	800072c <__aeabi_ddiv>
 8005e12:	f7fa fe11 	bl	8000a38 <__aeabi_d2iz>
 8005e16:	4604      	mov	r4, r0
 8005e18:	f7fa faf4 	bl	8000404 <__aeabi_i2d>
 8005e1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e20:	f7fa fb5a 	bl	80004d8 <__aeabi_dmul>
 8005e24:	4602      	mov	r2, r0
 8005e26:	460b      	mov	r3, r1
 8005e28:	4640      	mov	r0, r8
 8005e2a:	4649      	mov	r1, r9
 8005e2c:	f7fa f99c 	bl	8000168 <__aeabi_dsub>
 8005e30:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005e34:	f807 6b01 	strb.w	r6, [r7], #1
 8005e38:	9e03      	ldr	r6, [sp, #12]
 8005e3a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005e3e:	1bbe      	subs	r6, r7, r6
 8005e40:	45b4      	cmp	ip, r6
 8005e42:	4602      	mov	r2, r0
 8005e44:	460b      	mov	r3, r1
 8005e46:	d136      	bne.n	8005eb6 <_dtoa_r+0x6fe>
 8005e48:	f7fa f990 	bl	800016c <__adddf3>
 8005e4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e50:	4680      	mov	r8, r0
 8005e52:	4689      	mov	r9, r1
 8005e54:	f7fa fdd0 	bl	80009f8 <__aeabi_dcmpgt>
 8005e58:	bb58      	cbnz	r0, 8005eb2 <_dtoa_r+0x6fa>
 8005e5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e5e:	4640      	mov	r0, r8
 8005e60:	4649      	mov	r1, r9
 8005e62:	f7fa fda1 	bl	80009a8 <__aeabi_dcmpeq>
 8005e66:	b108      	cbz	r0, 8005e6c <_dtoa_r+0x6b4>
 8005e68:	07e3      	lsls	r3, r4, #31
 8005e6a:	d422      	bmi.n	8005eb2 <_dtoa_r+0x6fa>
 8005e6c:	4651      	mov	r1, sl
 8005e6e:	4628      	mov	r0, r5
 8005e70:	f000 fbc2 	bl	80065f8 <_Bfree>
 8005e74:	2300      	movs	r3, #0
 8005e76:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005e78:	703b      	strb	r3, [r7, #0]
 8005e7a:	f10b 0301 	add.w	r3, fp, #1
 8005e7e:	6013      	str	r3, [r2, #0]
 8005e80:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f43f ace6 	beq.w	8005854 <_dtoa_r+0x9c>
 8005e88:	601f      	str	r7, [r3, #0]
 8005e8a:	e4e3      	b.n	8005854 <_dtoa_r+0x9c>
 8005e8c:	4627      	mov	r7, r4
 8005e8e:	463b      	mov	r3, r7
 8005e90:	461f      	mov	r7, r3
 8005e92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e96:	2a39      	cmp	r2, #57	; 0x39
 8005e98:	d107      	bne.n	8005eaa <_dtoa_r+0x6f2>
 8005e9a:	9a03      	ldr	r2, [sp, #12]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d1f7      	bne.n	8005e90 <_dtoa_r+0x6d8>
 8005ea0:	2230      	movs	r2, #48	; 0x30
 8005ea2:	9903      	ldr	r1, [sp, #12]
 8005ea4:	f108 0801 	add.w	r8, r8, #1
 8005ea8:	700a      	strb	r2, [r1, #0]
 8005eaa:	781a      	ldrb	r2, [r3, #0]
 8005eac:	3201      	adds	r2, #1
 8005eae:	701a      	strb	r2, [r3, #0]
 8005eb0:	e79e      	b.n	8005df0 <_dtoa_r+0x638>
 8005eb2:	46d8      	mov	r8, fp
 8005eb4:	e7eb      	b.n	8005e8e <_dtoa_r+0x6d6>
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	4b6d      	ldr	r3, [pc, #436]	; (8006070 <_dtoa_r+0x8b8>)
 8005eba:	f7fa fb0d 	bl	80004d8 <__aeabi_dmul>
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	4680      	mov	r8, r0
 8005ec4:	4689      	mov	r9, r1
 8005ec6:	f7fa fd6f 	bl	80009a8 <__aeabi_dcmpeq>
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	d09b      	beq.n	8005e06 <_dtoa_r+0x64e>
 8005ece:	e7cd      	b.n	8005e6c <_dtoa_r+0x6b4>
 8005ed0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ed2:	2a00      	cmp	r2, #0
 8005ed4:	f000 80c4 	beq.w	8006060 <_dtoa_r+0x8a8>
 8005ed8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005eda:	2a01      	cmp	r2, #1
 8005edc:	f300 80a8 	bgt.w	8006030 <_dtoa_r+0x878>
 8005ee0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005ee2:	2a00      	cmp	r2, #0
 8005ee4:	f000 80a0 	beq.w	8006028 <_dtoa_r+0x870>
 8005ee8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005eec:	464f      	mov	r7, r9
 8005eee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005ef0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	441a      	add	r2, r3
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	4499      	add	r9, r3
 8005efa:	9209      	str	r2, [sp, #36]	; 0x24
 8005efc:	f000 fc32 	bl	8006764 <__i2b>
 8005f00:	4606      	mov	r6, r0
 8005f02:	b15f      	cbz	r7, 8005f1c <_dtoa_r+0x764>
 8005f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	dd08      	ble.n	8005f1c <_dtoa_r+0x764>
 8005f0a:	42bb      	cmp	r3, r7
 8005f0c:	bfa8      	it	ge
 8005f0e:	463b      	movge	r3, r7
 8005f10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f12:	eba9 0903 	sub.w	r9, r9, r3
 8005f16:	1aff      	subs	r7, r7, r3
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f1e:	b1f3      	cbz	r3, 8005f5e <_dtoa_r+0x7a6>
 8005f20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 80a0 	beq.w	8006068 <_dtoa_r+0x8b0>
 8005f28:	2c00      	cmp	r4, #0
 8005f2a:	dd10      	ble.n	8005f4e <_dtoa_r+0x796>
 8005f2c:	4631      	mov	r1, r6
 8005f2e:	4622      	mov	r2, r4
 8005f30:	4628      	mov	r0, r5
 8005f32:	f000 fcd5 	bl	80068e0 <__pow5mult>
 8005f36:	4652      	mov	r2, sl
 8005f38:	4601      	mov	r1, r0
 8005f3a:	4606      	mov	r6, r0
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	f000 fc27 	bl	8006790 <__multiply>
 8005f42:	4680      	mov	r8, r0
 8005f44:	4651      	mov	r1, sl
 8005f46:	4628      	mov	r0, r5
 8005f48:	f000 fb56 	bl	80065f8 <_Bfree>
 8005f4c:	46c2      	mov	sl, r8
 8005f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f50:	1b1a      	subs	r2, r3, r4
 8005f52:	d004      	beq.n	8005f5e <_dtoa_r+0x7a6>
 8005f54:	4651      	mov	r1, sl
 8005f56:	4628      	mov	r0, r5
 8005f58:	f000 fcc2 	bl	80068e0 <__pow5mult>
 8005f5c:	4682      	mov	sl, r0
 8005f5e:	2101      	movs	r1, #1
 8005f60:	4628      	mov	r0, r5
 8005f62:	f000 fbff 	bl	8006764 <__i2b>
 8005f66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f68:	4604      	mov	r4, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	f340 8082 	ble.w	8006074 <_dtoa_r+0x8bc>
 8005f70:	461a      	mov	r2, r3
 8005f72:	4601      	mov	r1, r0
 8005f74:	4628      	mov	r0, r5
 8005f76:	f000 fcb3 	bl	80068e0 <__pow5mult>
 8005f7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	dd7b      	ble.n	800607a <_dtoa_r+0x8c2>
 8005f82:	f04f 0800 	mov.w	r8, #0
 8005f86:	6923      	ldr	r3, [r4, #16]
 8005f88:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005f8c:	6918      	ldr	r0, [r3, #16]
 8005f8e:	f000 fb9b 	bl	80066c8 <__hi0bits>
 8005f92:	f1c0 0020 	rsb	r0, r0, #32
 8005f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f98:	4418      	add	r0, r3
 8005f9a:	f010 001f 	ands.w	r0, r0, #31
 8005f9e:	f000 8092 	beq.w	80060c6 <_dtoa_r+0x90e>
 8005fa2:	f1c0 0320 	rsb	r3, r0, #32
 8005fa6:	2b04      	cmp	r3, #4
 8005fa8:	f340 8085 	ble.w	80060b6 <_dtoa_r+0x8fe>
 8005fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fae:	f1c0 001c 	rsb	r0, r0, #28
 8005fb2:	4403      	add	r3, r0
 8005fb4:	4481      	add	r9, r0
 8005fb6:	4407      	add	r7, r0
 8005fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8005fba:	f1b9 0f00 	cmp.w	r9, #0
 8005fbe:	dd05      	ble.n	8005fcc <_dtoa_r+0x814>
 8005fc0:	4651      	mov	r1, sl
 8005fc2:	464a      	mov	r2, r9
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	f000 fce5 	bl	8006994 <__lshift>
 8005fca:	4682      	mov	sl, r0
 8005fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	dd05      	ble.n	8005fde <_dtoa_r+0x826>
 8005fd2:	4621      	mov	r1, r4
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	f000 fcdc 	bl	8006994 <__lshift>
 8005fdc:	4604      	mov	r4, r0
 8005fde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d072      	beq.n	80060ca <_dtoa_r+0x912>
 8005fe4:	4621      	mov	r1, r4
 8005fe6:	4650      	mov	r0, sl
 8005fe8:	f000 fd40 	bl	8006a6c <__mcmp>
 8005fec:	2800      	cmp	r0, #0
 8005fee:	da6c      	bge.n	80060ca <_dtoa_r+0x912>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	4651      	mov	r1, sl
 8005ff4:	220a      	movs	r2, #10
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	f000 fb20 	bl	800663c <__multadd>
 8005ffc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ffe:	4682      	mov	sl, r0
 8006000:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 81ac 	beq.w	8006362 <_dtoa_r+0xbaa>
 800600a:	2300      	movs	r3, #0
 800600c:	4631      	mov	r1, r6
 800600e:	220a      	movs	r2, #10
 8006010:	4628      	mov	r0, r5
 8006012:	f000 fb13 	bl	800663c <__multadd>
 8006016:	9b06      	ldr	r3, [sp, #24]
 8006018:	4606      	mov	r6, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	f300 8093 	bgt.w	8006146 <_dtoa_r+0x98e>
 8006020:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006022:	2b02      	cmp	r3, #2
 8006024:	dc59      	bgt.n	80060da <_dtoa_r+0x922>
 8006026:	e08e      	b.n	8006146 <_dtoa_r+0x98e>
 8006028:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800602a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800602e:	e75d      	b.n	8005eec <_dtoa_r+0x734>
 8006030:	9b08      	ldr	r3, [sp, #32]
 8006032:	1e5c      	subs	r4, r3, #1
 8006034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006036:	42a3      	cmp	r3, r4
 8006038:	bfbf      	itttt	lt
 800603a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800603c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800603e:	1ae3      	sublt	r3, r4, r3
 8006040:	18d2      	addlt	r2, r2, r3
 8006042:	bfa8      	it	ge
 8006044:	1b1c      	subge	r4, r3, r4
 8006046:	9b08      	ldr	r3, [sp, #32]
 8006048:	bfbe      	ittt	lt
 800604a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800604c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800604e:	2400      	movlt	r4, #0
 8006050:	2b00      	cmp	r3, #0
 8006052:	bfb5      	itete	lt
 8006054:	eba9 0703 	sublt.w	r7, r9, r3
 8006058:	464f      	movge	r7, r9
 800605a:	2300      	movlt	r3, #0
 800605c:	9b08      	ldrge	r3, [sp, #32]
 800605e:	e747      	b.n	8005ef0 <_dtoa_r+0x738>
 8006060:	464f      	mov	r7, r9
 8006062:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006064:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006066:	e74c      	b.n	8005f02 <_dtoa_r+0x74a>
 8006068:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800606a:	e773      	b.n	8005f54 <_dtoa_r+0x79c>
 800606c:	3fe00000 	.word	0x3fe00000
 8006070:	40240000 	.word	0x40240000
 8006074:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006076:	2b01      	cmp	r3, #1
 8006078:	dc18      	bgt.n	80060ac <_dtoa_r+0x8f4>
 800607a:	9b04      	ldr	r3, [sp, #16]
 800607c:	b9b3      	cbnz	r3, 80060ac <_dtoa_r+0x8f4>
 800607e:	9b05      	ldr	r3, [sp, #20]
 8006080:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006084:	b993      	cbnz	r3, 80060ac <_dtoa_r+0x8f4>
 8006086:	9b05      	ldr	r3, [sp, #20]
 8006088:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800608c:	0d1b      	lsrs	r3, r3, #20
 800608e:	051b      	lsls	r3, r3, #20
 8006090:	b17b      	cbz	r3, 80060b2 <_dtoa_r+0x8fa>
 8006092:	f04f 0801 	mov.w	r8, #1
 8006096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006098:	f109 0901 	add.w	r9, r9, #1
 800609c:	3301      	adds	r3, #1
 800609e:	9309      	str	r3, [sp, #36]	; 0x24
 80060a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f47f af6f 	bne.w	8005f86 <_dtoa_r+0x7ce>
 80060a8:	2001      	movs	r0, #1
 80060aa:	e774      	b.n	8005f96 <_dtoa_r+0x7de>
 80060ac:	f04f 0800 	mov.w	r8, #0
 80060b0:	e7f6      	b.n	80060a0 <_dtoa_r+0x8e8>
 80060b2:	4698      	mov	r8, r3
 80060b4:	e7f4      	b.n	80060a0 <_dtoa_r+0x8e8>
 80060b6:	d080      	beq.n	8005fba <_dtoa_r+0x802>
 80060b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060ba:	331c      	adds	r3, #28
 80060bc:	441a      	add	r2, r3
 80060be:	4499      	add	r9, r3
 80060c0:	441f      	add	r7, r3
 80060c2:	9209      	str	r2, [sp, #36]	; 0x24
 80060c4:	e779      	b.n	8005fba <_dtoa_r+0x802>
 80060c6:	4603      	mov	r3, r0
 80060c8:	e7f6      	b.n	80060b8 <_dtoa_r+0x900>
 80060ca:	9b08      	ldr	r3, [sp, #32]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	dc34      	bgt.n	800613a <_dtoa_r+0x982>
 80060d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	dd31      	ble.n	800613a <_dtoa_r+0x982>
 80060d6:	9b08      	ldr	r3, [sp, #32]
 80060d8:	9306      	str	r3, [sp, #24]
 80060da:	9b06      	ldr	r3, [sp, #24]
 80060dc:	b963      	cbnz	r3, 80060f8 <_dtoa_r+0x940>
 80060de:	4621      	mov	r1, r4
 80060e0:	2205      	movs	r2, #5
 80060e2:	4628      	mov	r0, r5
 80060e4:	f000 faaa 	bl	800663c <__multadd>
 80060e8:	4601      	mov	r1, r0
 80060ea:	4604      	mov	r4, r0
 80060ec:	4650      	mov	r0, sl
 80060ee:	f000 fcbd 	bl	8006a6c <__mcmp>
 80060f2:	2800      	cmp	r0, #0
 80060f4:	f73f adbf 	bgt.w	8005c76 <_dtoa_r+0x4be>
 80060f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80060fa:	9f03      	ldr	r7, [sp, #12]
 80060fc:	ea6f 0b03 	mvn.w	fp, r3
 8006100:	f04f 0800 	mov.w	r8, #0
 8006104:	4621      	mov	r1, r4
 8006106:	4628      	mov	r0, r5
 8006108:	f000 fa76 	bl	80065f8 <_Bfree>
 800610c:	2e00      	cmp	r6, #0
 800610e:	f43f aead 	beq.w	8005e6c <_dtoa_r+0x6b4>
 8006112:	f1b8 0f00 	cmp.w	r8, #0
 8006116:	d005      	beq.n	8006124 <_dtoa_r+0x96c>
 8006118:	45b0      	cmp	r8, r6
 800611a:	d003      	beq.n	8006124 <_dtoa_r+0x96c>
 800611c:	4641      	mov	r1, r8
 800611e:	4628      	mov	r0, r5
 8006120:	f000 fa6a 	bl	80065f8 <_Bfree>
 8006124:	4631      	mov	r1, r6
 8006126:	4628      	mov	r0, r5
 8006128:	f000 fa66 	bl	80065f8 <_Bfree>
 800612c:	e69e      	b.n	8005e6c <_dtoa_r+0x6b4>
 800612e:	2400      	movs	r4, #0
 8006130:	4626      	mov	r6, r4
 8006132:	e7e1      	b.n	80060f8 <_dtoa_r+0x940>
 8006134:	46c3      	mov	fp, r8
 8006136:	4626      	mov	r6, r4
 8006138:	e59d      	b.n	8005c76 <_dtoa_r+0x4be>
 800613a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 80c8 	beq.w	80062d2 <_dtoa_r+0xb1a>
 8006142:	9b08      	ldr	r3, [sp, #32]
 8006144:	9306      	str	r3, [sp, #24]
 8006146:	2f00      	cmp	r7, #0
 8006148:	dd05      	ble.n	8006156 <_dtoa_r+0x99e>
 800614a:	4631      	mov	r1, r6
 800614c:	463a      	mov	r2, r7
 800614e:	4628      	mov	r0, r5
 8006150:	f000 fc20 	bl	8006994 <__lshift>
 8006154:	4606      	mov	r6, r0
 8006156:	f1b8 0f00 	cmp.w	r8, #0
 800615a:	d05b      	beq.n	8006214 <_dtoa_r+0xa5c>
 800615c:	4628      	mov	r0, r5
 800615e:	6871      	ldr	r1, [r6, #4]
 8006160:	f000 fa0a 	bl	8006578 <_Balloc>
 8006164:	4607      	mov	r7, r0
 8006166:	b928      	cbnz	r0, 8006174 <_dtoa_r+0x9bc>
 8006168:	4602      	mov	r2, r0
 800616a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800616e:	4b81      	ldr	r3, [pc, #516]	; (8006374 <_dtoa_r+0xbbc>)
 8006170:	f7ff bb36 	b.w	80057e0 <_dtoa_r+0x28>
 8006174:	6932      	ldr	r2, [r6, #16]
 8006176:	f106 010c 	add.w	r1, r6, #12
 800617a:	3202      	adds	r2, #2
 800617c:	0092      	lsls	r2, r2, #2
 800617e:	300c      	adds	r0, #12
 8006180:	f000 ff9e 	bl	80070c0 <memcpy>
 8006184:	2201      	movs	r2, #1
 8006186:	4639      	mov	r1, r7
 8006188:	4628      	mov	r0, r5
 800618a:	f000 fc03 	bl	8006994 <__lshift>
 800618e:	46b0      	mov	r8, r6
 8006190:	4606      	mov	r6, r0
 8006192:	9b03      	ldr	r3, [sp, #12]
 8006194:	9a03      	ldr	r2, [sp, #12]
 8006196:	3301      	adds	r3, #1
 8006198:	9308      	str	r3, [sp, #32]
 800619a:	9b06      	ldr	r3, [sp, #24]
 800619c:	4413      	add	r3, r2
 800619e:	930b      	str	r3, [sp, #44]	; 0x2c
 80061a0:	9b04      	ldr	r3, [sp, #16]
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	930a      	str	r3, [sp, #40]	; 0x28
 80061a8:	9b08      	ldr	r3, [sp, #32]
 80061aa:	4621      	mov	r1, r4
 80061ac:	3b01      	subs	r3, #1
 80061ae:	4650      	mov	r0, sl
 80061b0:	9304      	str	r3, [sp, #16]
 80061b2:	f7ff fa76 	bl	80056a2 <quorem>
 80061b6:	4641      	mov	r1, r8
 80061b8:	9006      	str	r0, [sp, #24]
 80061ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80061be:	4650      	mov	r0, sl
 80061c0:	f000 fc54 	bl	8006a6c <__mcmp>
 80061c4:	4632      	mov	r2, r6
 80061c6:	9009      	str	r0, [sp, #36]	; 0x24
 80061c8:	4621      	mov	r1, r4
 80061ca:	4628      	mov	r0, r5
 80061cc:	f000 fc6a 	bl	8006aa4 <__mdiff>
 80061d0:	68c2      	ldr	r2, [r0, #12]
 80061d2:	4607      	mov	r7, r0
 80061d4:	bb02      	cbnz	r2, 8006218 <_dtoa_r+0xa60>
 80061d6:	4601      	mov	r1, r0
 80061d8:	4650      	mov	r0, sl
 80061da:	f000 fc47 	bl	8006a6c <__mcmp>
 80061de:	4602      	mov	r2, r0
 80061e0:	4639      	mov	r1, r7
 80061e2:	4628      	mov	r0, r5
 80061e4:	920c      	str	r2, [sp, #48]	; 0x30
 80061e6:	f000 fa07 	bl	80065f8 <_Bfree>
 80061ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061ee:	9f08      	ldr	r7, [sp, #32]
 80061f0:	ea43 0102 	orr.w	r1, r3, r2
 80061f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061f6:	4319      	orrs	r1, r3
 80061f8:	d110      	bne.n	800621c <_dtoa_r+0xa64>
 80061fa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80061fe:	d029      	beq.n	8006254 <_dtoa_r+0xa9c>
 8006200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006202:	2b00      	cmp	r3, #0
 8006204:	dd02      	ble.n	800620c <_dtoa_r+0xa54>
 8006206:	9b06      	ldr	r3, [sp, #24]
 8006208:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800620c:	9b04      	ldr	r3, [sp, #16]
 800620e:	f883 9000 	strb.w	r9, [r3]
 8006212:	e777      	b.n	8006104 <_dtoa_r+0x94c>
 8006214:	4630      	mov	r0, r6
 8006216:	e7ba      	b.n	800618e <_dtoa_r+0x9d6>
 8006218:	2201      	movs	r2, #1
 800621a:	e7e1      	b.n	80061e0 <_dtoa_r+0xa28>
 800621c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800621e:	2b00      	cmp	r3, #0
 8006220:	db04      	blt.n	800622c <_dtoa_r+0xa74>
 8006222:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006224:	430b      	orrs	r3, r1
 8006226:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006228:	430b      	orrs	r3, r1
 800622a:	d120      	bne.n	800626e <_dtoa_r+0xab6>
 800622c:	2a00      	cmp	r2, #0
 800622e:	dded      	ble.n	800620c <_dtoa_r+0xa54>
 8006230:	4651      	mov	r1, sl
 8006232:	2201      	movs	r2, #1
 8006234:	4628      	mov	r0, r5
 8006236:	f000 fbad 	bl	8006994 <__lshift>
 800623a:	4621      	mov	r1, r4
 800623c:	4682      	mov	sl, r0
 800623e:	f000 fc15 	bl	8006a6c <__mcmp>
 8006242:	2800      	cmp	r0, #0
 8006244:	dc03      	bgt.n	800624e <_dtoa_r+0xa96>
 8006246:	d1e1      	bne.n	800620c <_dtoa_r+0xa54>
 8006248:	f019 0f01 	tst.w	r9, #1
 800624c:	d0de      	beq.n	800620c <_dtoa_r+0xa54>
 800624e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006252:	d1d8      	bne.n	8006206 <_dtoa_r+0xa4e>
 8006254:	2339      	movs	r3, #57	; 0x39
 8006256:	9a04      	ldr	r2, [sp, #16]
 8006258:	7013      	strb	r3, [r2, #0]
 800625a:	463b      	mov	r3, r7
 800625c:	461f      	mov	r7, r3
 800625e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006262:	3b01      	subs	r3, #1
 8006264:	2a39      	cmp	r2, #57	; 0x39
 8006266:	d06b      	beq.n	8006340 <_dtoa_r+0xb88>
 8006268:	3201      	adds	r2, #1
 800626a:	701a      	strb	r2, [r3, #0]
 800626c:	e74a      	b.n	8006104 <_dtoa_r+0x94c>
 800626e:	2a00      	cmp	r2, #0
 8006270:	dd07      	ble.n	8006282 <_dtoa_r+0xaca>
 8006272:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006276:	d0ed      	beq.n	8006254 <_dtoa_r+0xa9c>
 8006278:	9a04      	ldr	r2, [sp, #16]
 800627a:	f109 0301 	add.w	r3, r9, #1
 800627e:	7013      	strb	r3, [r2, #0]
 8006280:	e740      	b.n	8006104 <_dtoa_r+0x94c>
 8006282:	9b08      	ldr	r3, [sp, #32]
 8006284:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006286:	f803 9c01 	strb.w	r9, [r3, #-1]
 800628a:	4293      	cmp	r3, r2
 800628c:	d042      	beq.n	8006314 <_dtoa_r+0xb5c>
 800628e:	4651      	mov	r1, sl
 8006290:	2300      	movs	r3, #0
 8006292:	220a      	movs	r2, #10
 8006294:	4628      	mov	r0, r5
 8006296:	f000 f9d1 	bl	800663c <__multadd>
 800629a:	45b0      	cmp	r8, r6
 800629c:	4682      	mov	sl, r0
 800629e:	f04f 0300 	mov.w	r3, #0
 80062a2:	f04f 020a 	mov.w	r2, #10
 80062a6:	4641      	mov	r1, r8
 80062a8:	4628      	mov	r0, r5
 80062aa:	d107      	bne.n	80062bc <_dtoa_r+0xb04>
 80062ac:	f000 f9c6 	bl	800663c <__multadd>
 80062b0:	4680      	mov	r8, r0
 80062b2:	4606      	mov	r6, r0
 80062b4:	9b08      	ldr	r3, [sp, #32]
 80062b6:	3301      	adds	r3, #1
 80062b8:	9308      	str	r3, [sp, #32]
 80062ba:	e775      	b.n	80061a8 <_dtoa_r+0x9f0>
 80062bc:	f000 f9be 	bl	800663c <__multadd>
 80062c0:	4631      	mov	r1, r6
 80062c2:	4680      	mov	r8, r0
 80062c4:	2300      	movs	r3, #0
 80062c6:	220a      	movs	r2, #10
 80062c8:	4628      	mov	r0, r5
 80062ca:	f000 f9b7 	bl	800663c <__multadd>
 80062ce:	4606      	mov	r6, r0
 80062d0:	e7f0      	b.n	80062b4 <_dtoa_r+0xafc>
 80062d2:	9b08      	ldr	r3, [sp, #32]
 80062d4:	9306      	str	r3, [sp, #24]
 80062d6:	9f03      	ldr	r7, [sp, #12]
 80062d8:	4621      	mov	r1, r4
 80062da:	4650      	mov	r0, sl
 80062dc:	f7ff f9e1 	bl	80056a2 <quorem>
 80062e0:	9b03      	ldr	r3, [sp, #12]
 80062e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80062e6:	f807 9b01 	strb.w	r9, [r7], #1
 80062ea:	1afa      	subs	r2, r7, r3
 80062ec:	9b06      	ldr	r3, [sp, #24]
 80062ee:	4293      	cmp	r3, r2
 80062f0:	dd07      	ble.n	8006302 <_dtoa_r+0xb4a>
 80062f2:	4651      	mov	r1, sl
 80062f4:	2300      	movs	r3, #0
 80062f6:	220a      	movs	r2, #10
 80062f8:	4628      	mov	r0, r5
 80062fa:	f000 f99f 	bl	800663c <__multadd>
 80062fe:	4682      	mov	sl, r0
 8006300:	e7ea      	b.n	80062d8 <_dtoa_r+0xb20>
 8006302:	9b06      	ldr	r3, [sp, #24]
 8006304:	f04f 0800 	mov.w	r8, #0
 8006308:	2b00      	cmp	r3, #0
 800630a:	bfcc      	ite	gt
 800630c:	461f      	movgt	r7, r3
 800630e:	2701      	movle	r7, #1
 8006310:	9b03      	ldr	r3, [sp, #12]
 8006312:	441f      	add	r7, r3
 8006314:	4651      	mov	r1, sl
 8006316:	2201      	movs	r2, #1
 8006318:	4628      	mov	r0, r5
 800631a:	f000 fb3b 	bl	8006994 <__lshift>
 800631e:	4621      	mov	r1, r4
 8006320:	4682      	mov	sl, r0
 8006322:	f000 fba3 	bl	8006a6c <__mcmp>
 8006326:	2800      	cmp	r0, #0
 8006328:	dc97      	bgt.n	800625a <_dtoa_r+0xaa2>
 800632a:	d102      	bne.n	8006332 <_dtoa_r+0xb7a>
 800632c:	f019 0f01 	tst.w	r9, #1
 8006330:	d193      	bne.n	800625a <_dtoa_r+0xaa2>
 8006332:	463b      	mov	r3, r7
 8006334:	461f      	mov	r7, r3
 8006336:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800633a:	2a30      	cmp	r2, #48	; 0x30
 800633c:	d0fa      	beq.n	8006334 <_dtoa_r+0xb7c>
 800633e:	e6e1      	b.n	8006104 <_dtoa_r+0x94c>
 8006340:	9a03      	ldr	r2, [sp, #12]
 8006342:	429a      	cmp	r2, r3
 8006344:	d18a      	bne.n	800625c <_dtoa_r+0xaa4>
 8006346:	2331      	movs	r3, #49	; 0x31
 8006348:	f10b 0b01 	add.w	fp, fp, #1
 800634c:	e797      	b.n	800627e <_dtoa_r+0xac6>
 800634e:	4b0a      	ldr	r3, [pc, #40]	; (8006378 <_dtoa_r+0xbc0>)
 8006350:	f7ff ba9f 	b.w	8005892 <_dtoa_r+0xda>
 8006354:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006356:	2b00      	cmp	r3, #0
 8006358:	f47f aa77 	bne.w	800584a <_dtoa_r+0x92>
 800635c:	4b07      	ldr	r3, [pc, #28]	; (800637c <_dtoa_r+0xbc4>)
 800635e:	f7ff ba98 	b.w	8005892 <_dtoa_r+0xda>
 8006362:	9b06      	ldr	r3, [sp, #24]
 8006364:	2b00      	cmp	r3, #0
 8006366:	dcb6      	bgt.n	80062d6 <_dtoa_r+0xb1e>
 8006368:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800636a:	2b02      	cmp	r3, #2
 800636c:	f73f aeb5 	bgt.w	80060da <_dtoa_r+0x922>
 8006370:	e7b1      	b.n	80062d6 <_dtoa_r+0xb1e>
 8006372:	bf00      	nop
 8006374:	080078fa 	.word	0x080078fa
 8006378:	0800785a 	.word	0x0800785a
 800637c:	0800787e 	.word	0x0800787e

08006380 <_free_r>:
 8006380:	b538      	push	{r3, r4, r5, lr}
 8006382:	4605      	mov	r5, r0
 8006384:	2900      	cmp	r1, #0
 8006386:	d040      	beq.n	800640a <_free_r+0x8a>
 8006388:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800638c:	1f0c      	subs	r4, r1, #4
 800638e:	2b00      	cmp	r3, #0
 8006390:	bfb8      	it	lt
 8006392:	18e4      	addlt	r4, r4, r3
 8006394:	f000 f8e4 	bl	8006560 <__malloc_lock>
 8006398:	4a1c      	ldr	r2, [pc, #112]	; (800640c <_free_r+0x8c>)
 800639a:	6813      	ldr	r3, [r2, #0]
 800639c:	b933      	cbnz	r3, 80063ac <_free_r+0x2c>
 800639e:	6063      	str	r3, [r4, #4]
 80063a0:	6014      	str	r4, [r2, #0]
 80063a2:	4628      	mov	r0, r5
 80063a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063a8:	f000 b8e0 	b.w	800656c <__malloc_unlock>
 80063ac:	42a3      	cmp	r3, r4
 80063ae:	d908      	bls.n	80063c2 <_free_r+0x42>
 80063b0:	6820      	ldr	r0, [r4, #0]
 80063b2:	1821      	adds	r1, r4, r0
 80063b4:	428b      	cmp	r3, r1
 80063b6:	bf01      	itttt	eq
 80063b8:	6819      	ldreq	r1, [r3, #0]
 80063ba:	685b      	ldreq	r3, [r3, #4]
 80063bc:	1809      	addeq	r1, r1, r0
 80063be:	6021      	streq	r1, [r4, #0]
 80063c0:	e7ed      	b.n	800639e <_free_r+0x1e>
 80063c2:	461a      	mov	r2, r3
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	b10b      	cbz	r3, 80063cc <_free_r+0x4c>
 80063c8:	42a3      	cmp	r3, r4
 80063ca:	d9fa      	bls.n	80063c2 <_free_r+0x42>
 80063cc:	6811      	ldr	r1, [r2, #0]
 80063ce:	1850      	adds	r0, r2, r1
 80063d0:	42a0      	cmp	r0, r4
 80063d2:	d10b      	bne.n	80063ec <_free_r+0x6c>
 80063d4:	6820      	ldr	r0, [r4, #0]
 80063d6:	4401      	add	r1, r0
 80063d8:	1850      	adds	r0, r2, r1
 80063da:	4283      	cmp	r3, r0
 80063dc:	6011      	str	r1, [r2, #0]
 80063de:	d1e0      	bne.n	80063a2 <_free_r+0x22>
 80063e0:	6818      	ldr	r0, [r3, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	4408      	add	r0, r1
 80063e6:	6010      	str	r0, [r2, #0]
 80063e8:	6053      	str	r3, [r2, #4]
 80063ea:	e7da      	b.n	80063a2 <_free_r+0x22>
 80063ec:	d902      	bls.n	80063f4 <_free_r+0x74>
 80063ee:	230c      	movs	r3, #12
 80063f0:	602b      	str	r3, [r5, #0]
 80063f2:	e7d6      	b.n	80063a2 <_free_r+0x22>
 80063f4:	6820      	ldr	r0, [r4, #0]
 80063f6:	1821      	adds	r1, r4, r0
 80063f8:	428b      	cmp	r3, r1
 80063fa:	bf01      	itttt	eq
 80063fc:	6819      	ldreq	r1, [r3, #0]
 80063fe:	685b      	ldreq	r3, [r3, #4]
 8006400:	1809      	addeq	r1, r1, r0
 8006402:	6021      	streq	r1, [r4, #0]
 8006404:	6063      	str	r3, [r4, #4]
 8006406:	6054      	str	r4, [r2, #4]
 8006408:	e7cb      	b.n	80063a2 <_free_r+0x22>
 800640a:	bd38      	pop	{r3, r4, r5, pc}
 800640c:	200008ac 	.word	0x200008ac

08006410 <malloc>:
 8006410:	4b02      	ldr	r3, [pc, #8]	; (800641c <malloc+0xc>)
 8006412:	4601      	mov	r1, r0
 8006414:	6818      	ldr	r0, [r3, #0]
 8006416:	f000 b823 	b.w	8006460 <_malloc_r>
 800641a:	bf00      	nop
 800641c:	20000154 	.word	0x20000154

08006420 <sbrk_aligned>:
 8006420:	b570      	push	{r4, r5, r6, lr}
 8006422:	4e0e      	ldr	r6, [pc, #56]	; (800645c <sbrk_aligned+0x3c>)
 8006424:	460c      	mov	r4, r1
 8006426:	6831      	ldr	r1, [r6, #0]
 8006428:	4605      	mov	r5, r0
 800642a:	b911      	cbnz	r1, 8006432 <sbrk_aligned+0x12>
 800642c:	f000 fe38 	bl	80070a0 <_sbrk_r>
 8006430:	6030      	str	r0, [r6, #0]
 8006432:	4621      	mov	r1, r4
 8006434:	4628      	mov	r0, r5
 8006436:	f000 fe33 	bl	80070a0 <_sbrk_r>
 800643a:	1c43      	adds	r3, r0, #1
 800643c:	d00a      	beq.n	8006454 <sbrk_aligned+0x34>
 800643e:	1cc4      	adds	r4, r0, #3
 8006440:	f024 0403 	bic.w	r4, r4, #3
 8006444:	42a0      	cmp	r0, r4
 8006446:	d007      	beq.n	8006458 <sbrk_aligned+0x38>
 8006448:	1a21      	subs	r1, r4, r0
 800644a:	4628      	mov	r0, r5
 800644c:	f000 fe28 	bl	80070a0 <_sbrk_r>
 8006450:	3001      	adds	r0, #1
 8006452:	d101      	bne.n	8006458 <sbrk_aligned+0x38>
 8006454:	f04f 34ff 	mov.w	r4, #4294967295
 8006458:	4620      	mov	r0, r4
 800645a:	bd70      	pop	{r4, r5, r6, pc}
 800645c:	200008b0 	.word	0x200008b0

08006460 <_malloc_r>:
 8006460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006464:	1ccd      	adds	r5, r1, #3
 8006466:	f025 0503 	bic.w	r5, r5, #3
 800646a:	3508      	adds	r5, #8
 800646c:	2d0c      	cmp	r5, #12
 800646e:	bf38      	it	cc
 8006470:	250c      	movcc	r5, #12
 8006472:	2d00      	cmp	r5, #0
 8006474:	4607      	mov	r7, r0
 8006476:	db01      	blt.n	800647c <_malloc_r+0x1c>
 8006478:	42a9      	cmp	r1, r5
 800647a:	d905      	bls.n	8006488 <_malloc_r+0x28>
 800647c:	230c      	movs	r3, #12
 800647e:	2600      	movs	r6, #0
 8006480:	603b      	str	r3, [r7, #0]
 8006482:	4630      	mov	r0, r6
 8006484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006488:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800655c <_malloc_r+0xfc>
 800648c:	f000 f868 	bl	8006560 <__malloc_lock>
 8006490:	f8d8 3000 	ldr.w	r3, [r8]
 8006494:	461c      	mov	r4, r3
 8006496:	bb5c      	cbnz	r4, 80064f0 <_malloc_r+0x90>
 8006498:	4629      	mov	r1, r5
 800649a:	4638      	mov	r0, r7
 800649c:	f7ff ffc0 	bl	8006420 <sbrk_aligned>
 80064a0:	1c43      	adds	r3, r0, #1
 80064a2:	4604      	mov	r4, r0
 80064a4:	d155      	bne.n	8006552 <_malloc_r+0xf2>
 80064a6:	f8d8 4000 	ldr.w	r4, [r8]
 80064aa:	4626      	mov	r6, r4
 80064ac:	2e00      	cmp	r6, #0
 80064ae:	d145      	bne.n	800653c <_malloc_r+0xdc>
 80064b0:	2c00      	cmp	r4, #0
 80064b2:	d048      	beq.n	8006546 <_malloc_r+0xe6>
 80064b4:	6823      	ldr	r3, [r4, #0]
 80064b6:	4631      	mov	r1, r6
 80064b8:	4638      	mov	r0, r7
 80064ba:	eb04 0903 	add.w	r9, r4, r3
 80064be:	f000 fdef 	bl	80070a0 <_sbrk_r>
 80064c2:	4581      	cmp	r9, r0
 80064c4:	d13f      	bne.n	8006546 <_malloc_r+0xe6>
 80064c6:	6821      	ldr	r1, [r4, #0]
 80064c8:	4638      	mov	r0, r7
 80064ca:	1a6d      	subs	r5, r5, r1
 80064cc:	4629      	mov	r1, r5
 80064ce:	f7ff ffa7 	bl	8006420 <sbrk_aligned>
 80064d2:	3001      	adds	r0, #1
 80064d4:	d037      	beq.n	8006546 <_malloc_r+0xe6>
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	442b      	add	r3, r5
 80064da:	6023      	str	r3, [r4, #0]
 80064dc:	f8d8 3000 	ldr.w	r3, [r8]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d038      	beq.n	8006556 <_malloc_r+0xf6>
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	42a2      	cmp	r2, r4
 80064e8:	d12b      	bne.n	8006542 <_malloc_r+0xe2>
 80064ea:	2200      	movs	r2, #0
 80064ec:	605a      	str	r2, [r3, #4]
 80064ee:	e00f      	b.n	8006510 <_malloc_r+0xb0>
 80064f0:	6822      	ldr	r2, [r4, #0]
 80064f2:	1b52      	subs	r2, r2, r5
 80064f4:	d41f      	bmi.n	8006536 <_malloc_r+0xd6>
 80064f6:	2a0b      	cmp	r2, #11
 80064f8:	d917      	bls.n	800652a <_malloc_r+0xca>
 80064fa:	1961      	adds	r1, r4, r5
 80064fc:	42a3      	cmp	r3, r4
 80064fe:	6025      	str	r5, [r4, #0]
 8006500:	bf18      	it	ne
 8006502:	6059      	strne	r1, [r3, #4]
 8006504:	6863      	ldr	r3, [r4, #4]
 8006506:	bf08      	it	eq
 8006508:	f8c8 1000 	streq.w	r1, [r8]
 800650c:	5162      	str	r2, [r4, r5]
 800650e:	604b      	str	r3, [r1, #4]
 8006510:	4638      	mov	r0, r7
 8006512:	f104 060b 	add.w	r6, r4, #11
 8006516:	f000 f829 	bl	800656c <__malloc_unlock>
 800651a:	f026 0607 	bic.w	r6, r6, #7
 800651e:	1d23      	adds	r3, r4, #4
 8006520:	1af2      	subs	r2, r6, r3
 8006522:	d0ae      	beq.n	8006482 <_malloc_r+0x22>
 8006524:	1b9b      	subs	r3, r3, r6
 8006526:	50a3      	str	r3, [r4, r2]
 8006528:	e7ab      	b.n	8006482 <_malloc_r+0x22>
 800652a:	42a3      	cmp	r3, r4
 800652c:	6862      	ldr	r2, [r4, #4]
 800652e:	d1dd      	bne.n	80064ec <_malloc_r+0x8c>
 8006530:	f8c8 2000 	str.w	r2, [r8]
 8006534:	e7ec      	b.n	8006510 <_malloc_r+0xb0>
 8006536:	4623      	mov	r3, r4
 8006538:	6864      	ldr	r4, [r4, #4]
 800653a:	e7ac      	b.n	8006496 <_malloc_r+0x36>
 800653c:	4634      	mov	r4, r6
 800653e:	6876      	ldr	r6, [r6, #4]
 8006540:	e7b4      	b.n	80064ac <_malloc_r+0x4c>
 8006542:	4613      	mov	r3, r2
 8006544:	e7cc      	b.n	80064e0 <_malloc_r+0x80>
 8006546:	230c      	movs	r3, #12
 8006548:	4638      	mov	r0, r7
 800654a:	603b      	str	r3, [r7, #0]
 800654c:	f000 f80e 	bl	800656c <__malloc_unlock>
 8006550:	e797      	b.n	8006482 <_malloc_r+0x22>
 8006552:	6025      	str	r5, [r4, #0]
 8006554:	e7dc      	b.n	8006510 <_malloc_r+0xb0>
 8006556:	605b      	str	r3, [r3, #4]
 8006558:	deff      	udf	#255	; 0xff
 800655a:	bf00      	nop
 800655c:	200008ac 	.word	0x200008ac

08006560 <__malloc_lock>:
 8006560:	4801      	ldr	r0, [pc, #4]	; (8006568 <__malloc_lock+0x8>)
 8006562:	f7ff b88e 	b.w	8005682 <__retarget_lock_acquire_recursive>
 8006566:	bf00      	nop
 8006568:	200008a8 	.word	0x200008a8

0800656c <__malloc_unlock>:
 800656c:	4801      	ldr	r0, [pc, #4]	; (8006574 <__malloc_unlock+0x8>)
 800656e:	f7ff b889 	b.w	8005684 <__retarget_lock_release_recursive>
 8006572:	bf00      	nop
 8006574:	200008a8 	.word	0x200008a8

08006578 <_Balloc>:
 8006578:	b570      	push	{r4, r5, r6, lr}
 800657a:	69c6      	ldr	r6, [r0, #28]
 800657c:	4604      	mov	r4, r0
 800657e:	460d      	mov	r5, r1
 8006580:	b976      	cbnz	r6, 80065a0 <_Balloc+0x28>
 8006582:	2010      	movs	r0, #16
 8006584:	f7ff ff44 	bl	8006410 <malloc>
 8006588:	4602      	mov	r2, r0
 800658a:	61e0      	str	r0, [r4, #28]
 800658c:	b920      	cbnz	r0, 8006598 <_Balloc+0x20>
 800658e:	216b      	movs	r1, #107	; 0x6b
 8006590:	4b17      	ldr	r3, [pc, #92]	; (80065f0 <_Balloc+0x78>)
 8006592:	4818      	ldr	r0, [pc, #96]	; (80065f4 <_Balloc+0x7c>)
 8006594:	f000 fda2 	bl	80070dc <__assert_func>
 8006598:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800659c:	6006      	str	r6, [r0, #0]
 800659e:	60c6      	str	r6, [r0, #12]
 80065a0:	69e6      	ldr	r6, [r4, #28]
 80065a2:	68f3      	ldr	r3, [r6, #12]
 80065a4:	b183      	cbz	r3, 80065c8 <_Balloc+0x50>
 80065a6:	69e3      	ldr	r3, [r4, #28]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80065ae:	b9b8      	cbnz	r0, 80065e0 <_Balloc+0x68>
 80065b0:	2101      	movs	r1, #1
 80065b2:	fa01 f605 	lsl.w	r6, r1, r5
 80065b6:	1d72      	adds	r2, r6, #5
 80065b8:	4620      	mov	r0, r4
 80065ba:	0092      	lsls	r2, r2, #2
 80065bc:	f000 fdac 	bl	8007118 <_calloc_r>
 80065c0:	b160      	cbz	r0, 80065dc <_Balloc+0x64>
 80065c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80065c6:	e00e      	b.n	80065e6 <_Balloc+0x6e>
 80065c8:	2221      	movs	r2, #33	; 0x21
 80065ca:	2104      	movs	r1, #4
 80065cc:	4620      	mov	r0, r4
 80065ce:	f000 fda3 	bl	8007118 <_calloc_r>
 80065d2:	69e3      	ldr	r3, [r4, #28]
 80065d4:	60f0      	str	r0, [r6, #12]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1e4      	bne.n	80065a6 <_Balloc+0x2e>
 80065dc:	2000      	movs	r0, #0
 80065de:	bd70      	pop	{r4, r5, r6, pc}
 80065e0:	6802      	ldr	r2, [r0, #0]
 80065e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80065e6:	2300      	movs	r3, #0
 80065e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80065ec:	e7f7      	b.n	80065de <_Balloc+0x66>
 80065ee:	bf00      	nop
 80065f0:	0800788b 	.word	0x0800788b
 80065f4:	0800790b 	.word	0x0800790b

080065f8 <_Bfree>:
 80065f8:	b570      	push	{r4, r5, r6, lr}
 80065fa:	69c6      	ldr	r6, [r0, #28]
 80065fc:	4605      	mov	r5, r0
 80065fe:	460c      	mov	r4, r1
 8006600:	b976      	cbnz	r6, 8006620 <_Bfree+0x28>
 8006602:	2010      	movs	r0, #16
 8006604:	f7ff ff04 	bl	8006410 <malloc>
 8006608:	4602      	mov	r2, r0
 800660a:	61e8      	str	r0, [r5, #28]
 800660c:	b920      	cbnz	r0, 8006618 <_Bfree+0x20>
 800660e:	218f      	movs	r1, #143	; 0x8f
 8006610:	4b08      	ldr	r3, [pc, #32]	; (8006634 <_Bfree+0x3c>)
 8006612:	4809      	ldr	r0, [pc, #36]	; (8006638 <_Bfree+0x40>)
 8006614:	f000 fd62 	bl	80070dc <__assert_func>
 8006618:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800661c:	6006      	str	r6, [r0, #0]
 800661e:	60c6      	str	r6, [r0, #12]
 8006620:	b13c      	cbz	r4, 8006632 <_Bfree+0x3a>
 8006622:	69eb      	ldr	r3, [r5, #28]
 8006624:	6862      	ldr	r2, [r4, #4]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800662c:	6021      	str	r1, [r4, #0]
 800662e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006632:	bd70      	pop	{r4, r5, r6, pc}
 8006634:	0800788b 	.word	0x0800788b
 8006638:	0800790b 	.word	0x0800790b

0800663c <__multadd>:
 800663c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006640:	4607      	mov	r7, r0
 8006642:	460c      	mov	r4, r1
 8006644:	461e      	mov	r6, r3
 8006646:	2000      	movs	r0, #0
 8006648:	690d      	ldr	r5, [r1, #16]
 800664a:	f101 0c14 	add.w	ip, r1, #20
 800664e:	f8dc 3000 	ldr.w	r3, [ip]
 8006652:	3001      	adds	r0, #1
 8006654:	b299      	uxth	r1, r3
 8006656:	fb02 6101 	mla	r1, r2, r1, r6
 800665a:	0c1e      	lsrs	r6, r3, #16
 800665c:	0c0b      	lsrs	r3, r1, #16
 800665e:	fb02 3306 	mla	r3, r2, r6, r3
 8006662:	b289      	uxth	r1, r1
 8006664:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006668:	4285      	cmp	r5, r0
 800666a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800666e:	f84c 1b04 	str.w	r1, [ip], #4
 8006672:	dcec      	bgt.n	800664e <__multadd+0x12>
 8006674:	b30e      	cbz	r6, 80066ba <__multadd+0x7e>
 8006676:	68a3      	ldr	r3, [r4, #8]
 8006678:	42ab      	cmp	r3, r5
 800667a:	dc19      	bgt.n	80066b0 <__multadd+0x74>
 800667c:	6861      	ldr	r1, [r4, #4]
 800667e:	4638      	mov	r0, r7
 8006680:	3101      	adds	r1, #1
 8006682:	f7ff ff79 	bl	8006578 <_Balloc>
 8006686:	4680      	mov	r8, r0
 8006688:	b928      	cbnz	r0, 8006696 <__multadd+0x5a>
 800668a:	4602      	mov	r2, r0
 800668c:	21ba      	movs	r1, #186	; 0xba
 800668e:	4b0c      	ldr	r3, [pc, #48]	; (80066c0 <__multadd+0x84>)
 8006690:	480c      	ldr	r0, [pc, #48]	; (80066c4 <__multadd+0x88>)
 8006692:	f000 fd23 	bl	80070dc <__assert_func>
 8006696:	6922      	ldr	r2, [r4, #16]
 8006698:	f104 010c 	add.w	r1, r4, #12
 800669c:	3202      	adds	r2, #2
 800669e:	0092      	lsls	r2, r2, #2
 80066a0:	300c      	adds	r0, #12
 80066a2:	f000 fd0d 	bl	80070c0 <memcpy>
 80066a6:	4621      	mov	r1, r4
 80066a8:	4638      	mov	r0, r7
 80066aa:	f7ff ffa5 	bl	80065f8 <_Bfree>
 80066ae:	4644      	mov	r4, r8
 80066b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80066b4:	3501      	adds	r5, #1
 80066b6:	615e      	str	r6, [r3, #20]
 80066b8:	6125      	str	r5, [r4, #16]
 80066ba:	4620      	mov	r0, r4
 80066bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066c0:	080078fa 	.word	0x080078fa
 80066c4:	0800790b 	.word	0x0800790b

080066c8 <__hi0bits>:
 80066c8:	0c02      	lsrs	r2, r0, #16
 80066ca:	0412      	lsls	r2, r2, #16
 80066cc:	4603      	mov	r3, r0
 80066ce:	b9ca      	cbnz	r2, 8006704 <__hi0bits+0x3c>
 80066d0:	0403      	lsls	r3, r0, #16
 80066d2:	2010      	movs	r0, #16
 80066d4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80066d8:	bf04      	itt	eq
 80066da:	021b      	lsleq	r3, r3, #8
 80066dc:	3008      	addeq	r0, #8
 80066de:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80066e2:	bf04      	itt	eq
 80066e4:	011b      	lsleq	r3, r3, #4
 80066e6:	3004      	addeq	r0, #4
 80066e8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80066ec:	bf04      	itt	eq
 80066ee:	009b      	lsleq	r3, r3, #2
 80066f0:	3002      	addeq	r0, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	db05      	blt.n	8006702 <__hi0bits+0x3a>
 80066f6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80066fa:	f100 0001 	add.w	r0, r0, #1
 80066fe:	bf08      	it	eq
 8006700:	2020      	moveq	r0, #32
 8006702:	4770      	bx	lr
 8006704:	2000      	movs	r0, #0
 8006706:	e7e5      	b.n	80066d4 <__hi0bits+0xc>

08006708 <__lo0bits>:
 8006708:	6803      	ldr	r3, [r0, #0]
 800670a:	4602      	mov	r2, r0
 800670c:	f013 0007 	ands.w	r0, r3, #7
 8006710:	d00b      	beq.n	800672a <__lo0bits+0x22>
 8006712:	07d9      	lsls	r1, r3, #31
 8006714:	d421      	bmi.n	800675a <__lo0bits+0x52>
 8006716:	0798      	lsls	r0, r3, #30
 8006718:	bf49      	itett	mi
 800671a:	085b      	lsrmi	r3, r3, #1
 800671c:	089b      	lsrpl	r3, r3, #2
 800671e:	2001      	movmi	r0, #1
 8006720:	6013      	strmi	r3, [r2, #0]
 8006722:	bf5c      	itt	pl
 8006724:	2002      	movpl	r0, #2
 8006726:	6013      	strpl	r3, [r2, #0]
 8006728:	4770      	bx	lr
 800672a:	b299      	uxth	r1, r3
 800672c:	b909      	cbnz	r1, 8006732 <__lo0bits+0x2a>
 800672e:	2010      	movs	r0, #16
 8006730:	0c1b      	lsrs	r3, r3, #16
 8006732:	b2d9      	uxtb	r1, r3
 8006734:	b909      	cbnz	r1, 800673a <__lo0bits+0x32>
 8006736:	3008      	adds	r0, #8
 8006738:	0a1b      	lsrs	r3, r3, #8
 800673a:	0719      	lsls	r1, r3, #28
 800673c:	bf04      	itt	eq
 800673e:	091b      	lsreq	r3, r3, #4
 8006740:	3004      	addeq	r0, #4
 8006742:	0799      	lsls	r1, r3, #30
 8006744:	bf04      	itt	eq
 8006746:	089b      	lsreq	r3, r3, #2
 8006748:	3002      	addeq	r0, #2
 800674a:	07d9      	lsls	r1, r3, #31
 800674c:	d403      	bmi.n	8006756 <__lo0bits+0x4e>
 800674e:	085b      	lsrs	r3, r3, #1
 8006750:	f100 0001 	add.w	r0, r0, #1
 8006754:	d003      	beq.n	800675e <__lo0bits+0x56>
 8006756:	6013      	str	r3, [r2, #0]
 8006758:	4770      	bx	lr
 800675a:	2000      	movs	r0, #0
 800675c:	4770      	bx	lr
 800675e:	2020      	movs	r0, #32
 8006760:	4770      	bx	lr
	...

08006764 <__i2b>:
 8006764:	b510      	push	{r4, lr}
 8006766:	460c      	mov	r4, r1
 8006768:	2101      	movs	r1, #1
 800676a:	f7ff ff05 	bl	8006578 <_Balloc>
 800676e:	4602      	mov	r2, r0
 8006770:	b928      	cbnz	r0, 800677e <__i2b+0x1a>
 8006772:	f240 1145 	movw	r1, #325	; 0x145
 8006776:	4b04      	ldr	r3, [pc, #16]	; (8006788 <__i2b+0x24>)
 8006778:	4804      	ldr	r0, [pc, #16]	; (800678c <__i2b+0x28>)
 800677a:	f000 fcaf 	bl	80070dc <__assert_func>
 800677e:	2301      	movs	r3, #1
 8006780:	6144      	str	r4, [r0, #20]
 8006782:	6103      	str	r3, [r0, #16]
 8006784:	bd10      	pop	{r4, pc}
 8006786:	bf00      	nop
 8006788:	080078fa 	.word	0x080078fa
 800678c:	0800790b 	.word	0x0800790b

08006790 <__multiply>:
 8006790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006794:	4691      	mov	r9, r2
 8006796:	690a      	ldr	r2, [r1, #16]
 8006798:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800679c:	460c      	mov	r4, r1
 800679e:	429a      	cmp	r2, r3
 80067a0:	bfbe      	ittt	lt
 80067a2:	460b      	movlt	r3, r1
 80067a4:	464c      	movlt	r4, r9
 80067a6:	4699      	movlt	r9, r3
 80067a8:	6927      	ldr	r7, [r4, #16]
 80067aa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80067ae:	68a3      	ldr	r3, [r4, #8]
 80067b0:	6861      	ldr	r1, [r4, #4]
 80067b2:	eb07 060a 	add.w	r6, r7, sl
 80067b6:	42b3      	cmp	r3, r6
 80067b8:	b085      	sub	sp, #20
 80067ba:	bfb8      	it	lt
 80067bc:	3101      	addlt	r1, #1
 80067be:	f7ff fedb 	bl	8006578 <_Balloc>
 80067c2:	b930      	cbnz	r0, 80067d2 <__multiply+0x42>
 80067c4:	4602      	mov	r2, r0
 80067c6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80067ca:	4b43      	ldr	r3, [pc, #268]	; (80068d8 <__multiply+0x148>)
 80067cc:	4843      	ldr	r0, [pc, #268]	; (80068dc <__multiply+0x14c>)
 80067ce:	f000 fc85 	bl	80070dc <__assert_func>
 80067d2:	f100 0514 	add.w	r5, r0, #20
 80067d6:	462b      	mov	r3, r5
 80067d8:	2200      	movs	r2, #0
 80067da:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80067de:	4543      	cmp	r3, r8
 80067e0:	d321      	bcc.n	8006826 <__multiply+0x96>
 80067e2:	f104 0314 	add.w	r3, r4, #20
 80067e6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80067ea:	f109 0314 	add.w	r3, r9, #20
 80067ee:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80067f2:	9202      	str	r2, [sp, #8]
 80067f4:	1b3a      	subs	r2, r7, r4
 80067f6:	3a15      	subs	r2, #21
 80067f8:	f022 0203 	bic.w	r2, r2, #3
 80067fc:	3204      	adds	r2, #4
 80067fe:	f104 0115 	add.w	r1, r4, #21
 8006802:	428f      	cmp	r7, r1
 8006804:	bf38      	it	cc
 8006806:	2204      	movcc	r2, #4
 8006808:	9201      	str	r2, [sp, #4]
 800680a:	9a02      	ldr	r2, [sp, #8]
 800680c:	9303      	str	r3, [sp, #12]
 800680e:	429a      	cmp	r2, r3
 8006810:	d80c      	bhi.n	800682c <__multiply+0x9c>
 8006812:	2e00      	cmp	r6, #0
 8006814:	dd03      	ble.n	800681e <__multiply+0x8e>
 8006816:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800681a:	2b00      	cmp	r3, #0
 800681c:	d05a      	beq.n	80068d4 <__multiply+0x144>
 800681e:	6106      	str	r6, [r0, #16]
 8006820:	b005      	add	sp, #20
 8006822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006826:	f843 2b04 	str.w	r2, [r3], #4
 800682a:	e7d8      	b.n	80067de <__multiply+0x4e>
 800682c:	f8b3 a000 	ldrh.w	sl, [r3]
 8006830:	f1ba 0f00 	cmp.w	sl, #0
 8006834:	d023      	beq.n	800687e <__multiply+0xee>
 8006836:	46a9      	mov	r9, r5
 8006838:	f04f 0c00 	mov.w	ip, #0
 800683c:	f104 0e14 	add.w	lr, r4, #20
 8006840:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006844:	f8d9 1000 	ldr.w	r1, [r9]
 8006848:	fa1f fb82 	uxth.w	fp, r2
 800684c:	b289      	uxth	r1, r1
 800684e:	fb0a 110b 	mla	r1, sl, fp, r1
 8006852:	4461      	add	r1, ip
 8006854:	f8d9 c000 	ldr.w	ip, [r9]
 8006858:	0c12      	lsrs	r2, r2, #16
 800685a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800685e:	fb0a c202 	mla	r2, sl, r2, ip
 8006862:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006866:	b289      	uxth	r1, r1
 8006868:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800686c:	4577      	cmp	r7, lr
 800686e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006872:	f849 1b04 	str.w	r1, [r9], #4
 8006876:	d8e3      	bhi.n	8006840 <__multiply+0xb0>
 8006878:	9a01      	ldr	r2, [sp, #4]
 800687a:	f845 c002 	str.w	ip, [r5, r2]
 800687e:	9a03      	ldr	r2, [sp, #12]
 8006880:	3304      	adds	r3, #4
 8006882:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006886:	f1b9 0f00 	cmp.w	r9, #0
 800688a:	d021      	beq.n	80068d0 <__multiply+0x140>
 800688c:	46ae      	mov	lr, r5
 800688e:	f04f 0a00 	mov.w	sl, #0
 8006892:	6829      	ldr	r1, [r5, #0]
 8006894:	f104 0c14 	add.w	ip, r4, #20
 8006898:	f8bc b000 	ldrh.w	fp, [ip]
 800689c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80068a0:	b289      	uxth	r1, r1
 80068a2:	fb09 220b 	mla	r2, r9, fp, r2
 80068a6:	4452      	add	r2, sl
 80068a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80068ac:	f84e 1b04 	str.w	r1, [lr], #4
 80068b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80068b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80068b8:	f8be 1000 	ldrh.w	r1, [lr]
 80068bc:	4567      	cmp	r7, ip
 80068be:	fb09 110a 	mla	r1, r9, sl, r1
 80068c2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80068c6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80068ca:	d8e5      	bhi.n	8006898 <__multiply+0x108>
 80068cc:	9a01      	ldr	r2, [sp, #4]
 80068ce:	50a9      	str	r1, [r5, r2]
 80068d0:	3504      	adds	r5, #4
 80068d2:	e79a      	b.n	800680a <__multiply+0x7a>
 80068d4:	3e01      	subs	r6, #1
 80068d6:	e79c      	b.n	8006812 <__multiply+0x82>
 80068d8:	080078fa 	.word	0x080078fa
 80068dc:	0800790b 	.word	0x0800790b

080068e0 <__pow5mult>:
 80068e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068e4:	4615      	mov	r5, r2
 80068e6:	f012 0203 	ands.w	r2, r2, #3
 80068ea:	4606      	mov	r6, r0
 80068ec:	460f      	mov	r7, r1
 80068ee:	d007      	beq.n	8006900 <__pow5mult+0x20>
 80068f0:	4c25      	ldr	r4, [pc, #148]	; (8006988 <__pow5mult+0xa8>)
 80068f2:	3a01      	subs	r2, #1
 80068f4:	2300      	movs	r3, #0
 80068f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80068fa:	f7ff fe9f 	bl	800663c <__multadd>
 80068fe:	4607      	mov	r7, r0
 8006900:	10ad      	asrs	r5, r5, #2
 8006902:	d03d      	beq.n	8006980 <__pow5mult+0xa0>
 8006904:	69f4      	ldr	r4, [r6, #28]
 8006906:	b97c      	cbnz	r4, 8006928 <__pow5mult+0x48>
 8006908:	2010      	movs	r0, #16
 800690a:	f7ff fd81 	bl	8006410 <malloc>
 800690e:	4602      	mov	r2, r0
 8006910:	61f0      	str	r0, [r6, #28]
 8006912:	b928      	cbnz	r0, 8006920 <__pow5mult+0x40>
 8006914:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006918:	4b1c      	ldr	r3, [pc, #112]	; (800698c <__pow5mult+0xac>)
 800691a:	481d      	ldr	r0, [pc, #116]	; (8006990 <__pow5mult+0xb0>)
 800691c:	f000 fbde 	bl	80070dc <__assert_func>
 8006920:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006924:	6004      	str	r4, [r0, #0]
 8006926:	60c4      	str	r4, [r0, #12]
 8006928:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800692c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006930:	b94c      	cbnz	r4, 8006946 <__pow5mult+0x66>
 8006932:	f240 2171 	movw	r1, #625	; 0x271
 8006936:	4630      	mov	r0, r6
 8006938:	f7ff ff14 	bl	8006764 <__i2b>
 800693c:	2300      	movs	r3, #0
 800693e:	4604      	mov	r4, r0
 8006940:	f8c8 0008 	str.w	r0, [r8, #8]
 8006944:	6003      	str	r3, [r0, #0]
 8006946:	f04f 0900 	mov.w	r9, #0
 800694a:	07eb      	lsls	r3, r5, #31
 800694c:	d50a      	bpl.n	8006964 <__pow5mult+0x84>
 800694e:	4639      	mov	r1, r7
 8006950:	4622      	mov	r2, r4
 8006952:	4630      	mov	r0, r6
 8006954:	f7ff ff1c 	bl	8006790 <__multiply>
 8006958:	4680      	mov	r8, r0
 800695a:	4639      	mov	r1, r7
 800695c:	4630      	mov	r0, r6
 800695e:	f7ff fe4b 	bl	80065f8 <_Bfree>
 8006962:	4647      	mov	r7, r8
 8006964:	106d      	asrs	r5, r5, #1
 8006966:	d00b      	beq.n	8006980 <__pow5mult+0xa0>
 8006968:	6820      	ldr	r0, [r4, #0]
 800696a:	b938      	cbnz	r0, 800697c <__pow5mult+0x9c>
 800696c:	4622      	mov	r2, r4
 800696e:	4621      	mov	r1, r4
 8006970:	4630      	mov	r0, r6
 8006972:	f7ff ff0d 	bl	8006790 <__multiply>
 8006976:	6020      	str	r0, [r4, #0]
 8006978:	f8c0 9000 	str.w	r9, [r0]
 800697c:	4604      	mov	r4, r0
 800697e:	e7e4      	b.n	800694a <__pow5mult+0x6a>
 8006980:	4638      	mov	r0, r7
 8006982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006986:	bf00      	nop
 8006988:	08007a58 	.word	0x08007a58
 800698c:	0800788b 	.word	0x0800788b
 8006990:	0800790b 	.word	0x0800790b

08006994 <__lshift>:
 8006994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006998:	460c      	mov	r4, r1
 800699a:	4607      	mov	r7, r0
 800699c:	4691      	mov	r9, r2
 800699e:	6923      	ldr	r3, [r4, #16]
 80069a0:	6849      	ldr	r1, [r1, #4]
 80069a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80069a6:	68a3      	ldr	r3, [r4, #8]
 80069a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80069ac:	f108 0601 	add.w	r6, r8, #1
 80069b0:	42b3      	cmp	r3, r6
 80069b2:	db0b      	blt.n	80069cc <__lshift+0x38>
 80069b4:	4638      	mov	r0, r7
 80069b6:	f7ff fddf 	bl	8006578 <_Balloc>
 80069ba:	4605      	mov	r5, r0
 80069bc:	b948      	cbnz	r0, 80069d2 <__lshift+0x3e>
 80069be:	4602      	mov	r2, r0
 80069c0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80069c4:	4b27      	ldr	r3, [pc, #156]	; (8006a64 <__lshift+0xd0>)
 80069c6:	4828      	ldr	r0, [pc, #160]	; (8006a68 <__lshift+0xd4>)
 80069c8:	f000 fb88 	bl	80070dc <__assert_func>
 80069cc:	3101      	adds	r1, #1
 80069ce:	005b      	lsls	r3, r3, #1
 80069d0:	e7ee      	b.n	80069b0 <__lshift+0x1c>
 80069d2:	2300      	movs	r3, #0
 80069d4:	f100 0114 	add.w	r1, r0, #20
 80069d8:	f100 0210 	add.w	r2, r0, #16
 80069dc:	4618      	mov	r0, r3
 80069de:	4553      	cmp	r3, sl
 80069e0:	db33      	blt.n	8006a4a <__lshift+0xb6>
 80069e2:	6920      	ldr	r0, [r4, #16]
 80069e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80069e8:	f104 0314 	add.w	r3, r4, #20
 80069ec:	f019 091f 	ands.w	r9, r9, #31
 80069f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80069f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80069f8:	d02b      	beq.n	8006a52 <__lshift+0xbe>
 80069fa:	468a      	mov	sl, r1
 80069fc:	2200      	movs	r2, #0
 80069fe:	f1c9 0e20 	rsb	lr, r9, #32
 8006a02:	6818      	ldr	r0, [r3, #0]
 8006a04:	fa00 f009 	lsl.w	r0, r0, r9
 8006a08:	4310      	orrs	r0, r2
 8006a0a:	f84a 0b04 	str.w	r0, [sl], #4
 8006a0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a12:	459c      	cmp	ip, r3
 8006a14:	fa22 f20e 	lsr.w	r2, r2, lr
 8006a18:	d8f3      	bhi.n	8006a02 <__lshift+0x6e>
 8006a1a:	ebac 0304 	sub.w	r3, ip, r4
 8006a1e:	3b15      	subs	r3, #21
 8006a20:	f023 0303 	bic.w	r3, r3, #3
 8006a24:	3304      	adds	r3, #4
 8006a26:	f104 0015 	add.w	r0, r4, #21
 8006a2a:	4584      	cmp	ip, r0
 8006a2c:	bf38      	it	cc
 8006a2e:	2304      	movcc	r3, #4
 8006a30:	50ca      	str	r2, [r1, r3]
 8006a32:	b10a      	cbz	r2, 8006a38 <__lshift+0xa4>
 8006a34:	f108 0602 	add.w	r6, r8, #2
 8006a38:	3e01      	subs	r6, #1
 8006a3a:	4638      	mov	r0, r7
 8006a3c:	4621      	mov	r1, r4
 8006a3e:	612e      	str	r6, [r5, #16]
 8006a40:	f7ff fdda 	bl	80065f8 <_Bfree>
 8006a44:	4628      	mov	r0, r5
 8006a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006a4e:	3301      	adds	r3, #1
 8006a50:	e7c5      	b.n	80069de <__lshift+0x4a>
 8006a52:	3904      	subs	r1, #4
 8006a54:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a58:	459c      	cmp	ip, r3
 8006a5a:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a5e:	d8f9      	bhi.n	8006a54 <__lshift+0xc0>
 8006a60:	e7ea      	b.n	8006a38 <__lshift+0xa4>
 8006a62:	bf00      	nop
 8006a64:	080078fa 	.word	0x080078fa
 8006a68:	0800790b 	.word	0x0800790b

08006a6c <__mcmp>:
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	690a      	ldr	r2, [r1, #16]
 8006a70:	6900      	ldr	r0, [r0, #16]
 8006a72:	b530      	push	{r4, r5, lr}
 8006a74:	1a80      	subs	r0, r0, r2
 8006a76:	d10d      	bne.n	8006a94 <__mcmp+0x28>
 8006a78:	3314      	adds	r3, #20
 8006a7a:	3114      	adds	r1, #20
 8006a7c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006a80:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006a84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006a88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006a8c:	4295      	cmp	r5, r2
 8006a8e:	d002      	beq.n	8006a96 <__mcmp+0x2a>
 8006a90:	d304      	bcc.n	8006a9c <__mcmp+0x30>
 8006a92:	2001      	movs	r0, #1
 8006a94:	bd30      	pop	{r4, r5, pc}
 8006a96:	42a3      	cmp	r3, r4
 8006a98:	d3f4      	bcc.n	8006a84 <__mcmp+0x18>
 8006a9a:	e7fb      	b.n	8006a94 <__mcmp+0x28>
 8006a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa0:	e7f8      	b.n	8006a94 <__mcmp+0x28>
	...

08006aa4 <__mdiff>:
 8006aa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa8:	460d      	mov	r5, r1
 8006aaa:	4607      	mov	r7, r0
 8006aac:	4611      	mov	r1, r2
 8006aae:	4628      	mov	r0, r5
 8006ab0:	4614      	mov	r4, r2
 8006ab2:	f7ff ffdb 	bl	8006a6c <__mcmp>
 8006ab6:	1e06      	subs	r6, r0, #0
 8006ab8:	d111      	bne.n	8006ade <__mdiff+0x3a>
 8006aba:	4631      	mov	r1, r6
 8006abc:	4638      	mov	r0, r7
 8006abe:	f7ff fd5b 	bl	8006578 <_Balloc>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	b928      	cbnz	r0, 8006ad2 <__mdiff+0x2e>
 8006ac6:	f240 2137 	movw	r1, #567	; 0x237
 8006aca:	4b3a      	ldr	r3, [pc, #232]	; (8006bb4 <__mdiff+0x110>)
 8006acc:	483a      	ldr	r0, [pc, #232]	; (8006bb8 <__mdiff+0x114>)
 8006ace:	f000 fb05 	bl	80070dc <__assert_func>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006ad8:	4610      	mov	r0, r2
 8006ada:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ade:	bfa4      	itt	ge
 8006ae0:	4623      	movge	r3, r4
 8006ae2:	462c      	movge	r4, r5
 8006ae4:	4638      	mov	r0, r7
 8006ae6:	6861      	ldr	r1, [r4, #4]
 8006ae8:	bfa6      	itte	ge
 8006aea:	461d      	movge	r5, r3
 8006aec:	2600      	movge	r6, #0
 8006aee:	2601      	movlt	r6, #1
 8006af0:	f7ff fd42 	bl	8006578 <_Balloc>
 8006af4:	4602      	mov	r2, r0
 8006af6:	b918      	cbnz	r0, 8006b00 <__mdiff+0x5c>
 8006af8:	f240 2145 	movw	r1, #581	; 0x245
 8006afc:	4b2d      	ldr	r3, [pc, #180]	; (8006bb4 <__mdiff+0x110>)
 8006afe:	e7e5      	b.n	8006acc <__mdiff+0x28>
 8006b00:	f102 0814 	add.w	r8, r2, #20
 8006b04:	46c2      	mov	sl, r8
 8006b06:	f04f 0c00 	mov.w	ip, #0
 8006b0a:	6927      	ldr	r7, [r4, #16]
 8006b0c:	60c6      	str	r6, [r0, #12]
 8006b0e:	692e      	ldr	r6, [r5, #16]
 8006b10:	f104 0014 	add.w	r0, r4, #20
 8006b14:	f105 0914 	add.w	r9, r5, #20
 8006b18:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006b1c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006b20:	3410      	adds	r4, #16
 8006b22:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006b26:	f859 3b04 	ldr.w	r3, [r9], #4
 8006b2a:	fa1f f18b 	uxth.w	r1, fp
 8006b2e:	4461      	add	r1, ip
 8006b30:	fa1f fc83 	uxth.w	ip, r3
 8006b34:	0c1b      	lsrs	r3, r3, #16
 8006b36:	eba1 010c 	sub.w	r1, r1, ip
 8006b3a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006b3e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006b42:	b289      	uxth	r1, r1
 8006b44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006b48:	454e      	cmp	r6, r9
 8006b4a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006b4e:	f84a 1b04 	str.w	r1, [sl], #4
 8006b52:	d8e6      	bhi.n	8006b22 <__mdiff+0x7e>
 8006b54:	1b73      	subs	r3, r6, r5
 8006b56:	3b15      	subs	r3, #21
 8006b58:	f023 0303 	bic.w	r3, r3, #3
 8006b5c:	3515      	adds	r5, #21
 8006b5e:	3304      	adds	r3, #4
 8006b60:	42ae      	cmp	r6, r5
 8006b62:	bf38      	it	cc
 8006b64:	2304      	movcc	r3, #4
 8006b66:	4418      	add	r0, r3
 8006b68:	4443      	add	r3, r8
 8006b6a:	461e      	mov	r6, r3
 8006b6c:	4605      	mov	r5, r0
 8006b6e:	4575      	cmp	r5, lr
 8006b70:	d30e      	bcc.n	8006b90 <__mdiff+0xec>
 8006b72:	f10e 0103 	add.w	r1, lr, #3
 8006b76:	1a09      	subs	r1, r1, r0
 8006b78:	f021 0103 	bic.w	r1, r1, #3
 8006b7c:	3803      	subs	r0, #3
 8006b7e:	4586      	cmp	lr, r0
 8006b80:	bf38      	it	cc
 8006b82:	2100      	movcc	r1, #0
 8006b84:	440b      	add	r3, r1
 8006b86:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006b8a:	b189      	cbz	r1, 8006bb0 <__mdiff+0x10c>
 8006b8c:	6117      	str	r7, [r2, #16]
 8006b8e:	e7a3      	b.n	8006ad8 <__mdiff+0x34>
 8006b90:	f855 8b04 	ldr.w	r8, [r5], #4
 8006b94:	fa1f f188 	uxth.w	r1, r8
 8006b98:	4461      	add	r1, ip
 8006b9a:	140c      	asrs	r4, r1, #16
 8006b9c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006ba0:	b289      	uxth	r1, r1
 8006ba2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006ba6:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006baa:	f846 1b04 	str.w	r1, [r6], #4
 8006bae:	e7de      	b.n	8006b6e <__mdiff+0xca>
 8006bb0:	3f01      	subs	r7, #1
 8006bb2:	e7e8      	b.n	8006b86 <__mdiff+0xe2>
 8006bb4:	080078fa 	.word	0x080078fa
 8006bb8:	0800790b 	.word	0x0800790b

08006bbc <__d2b>:
 8006bbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bbe:	2101      	movs	r1, #1
 8006bc0:	4617      	mov	r7, r2
 8006bc2:	461c      	mov	r4, r3
 8006bc4:	9e08      	ldr	r6, [sp, #32]
 8006bc6:	f7ff fcd7 	bl	8006578 <_Balloc>
 8006bca:	4605      	mov	r5, r0
 8006bcc:	b930      	cbnz	r0, 8006bdc <__d2b+0x20>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	f240 310f 	movw	r1, #783	; 0x30f
 8006bd4:	4b22      	ldr	r3, [pc, #136]	; (8006c60 <__d2b+0xa4>)
 8006bd6:	4823      	ldr	r0, [pc, #140]	; (8006c64 <__d2b+0xa8>)
 8006bd8:	f000 fa80 	bl	80070dc <__assert_func>
 8006bdc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006be0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006be4:	bb24      	cbnz	r4, 8006c30 <__d2b+0x74>
 8006be6:	2f00      	cmp	r7, #0
 8006be8:	9301      	str	r3, [sp, #4]
 8006bea:	d026      	beq.n	8006c3a <__d2b+0x7e>
 8006bec:	4668      	mov	r0, sp
 8006bee:	9700      	str	r7, [sp, #0]
 8006bf0:	f7ff fd8a 	bl	8006708 <__lo0bits>
 8006bf4:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006bf8:	b1e8      	cbz	r0, 8006c36 <__d2b+0x7a>
 8006bfa:	f1c0 0320 	rsb	r3, r0, #32
 8006bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006c02:	430b      	orrs	r3, r1
 8006c04:	40c2      	lsrs	r2, r0
 8006c06:	616b      	str	r3, [r5, #20]
 8006c08:	9201      	str	r2, [sp, #4]
 8006c0a:	9b01      	ldr	r3, [sp, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	bf14      	ite	ne
 8006c10:	2102      	movne	r1, #2
 8006c12:	2101      	moveq	r1, #1
 8006c14:	61ab      	str	r3, [r5, #24]
 8006c16:	6129      	str	r1, [r5, #16]
 8006c18:	b1bc      	cbz	r4, 8006c4a <__d2b+0x8e>
 8006c1a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006c1e:	4404      	add	r4, r0
 8006c20:	6034      	str	r4, [r6, #0]
 8006c22:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c28:	6018      	str	r0, [r3, #0]
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	b003      	add	sp, #12
 8006c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c34:	e7d7      	b.n	8006be6 <__d2b+0x2a>
 8006c36:	6169      	str	r1, [r5, #20]
 8006c38:	e7e7      	b.n	8006c0a <__d2b+0x4e>
 8006c3a:	a801      	add	r0, sp, #4
 8006c3c:	f7ff fd64 	bl	8006708 <__lo0bits>
 8006c40:	9b01      	ldr	r3, [sp, #4]
 8006c42:	2101      	movs	r1, #1
 8006c44:	616b      	str	r3, [r5, #20]
 8006c46:	3020      	adds	r0, #32
 8006c48:	e7e5      	b.n	8006c16 <__d2b+0x5a>
 8006c4a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006c4e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8006c52:	6030      	str	r0, [r6, #0]
 8006c54:	6918      	ldr	r0, [r3, #16]
 8006c56:	f7ff fd37 	bl	80066c8 <__hi0bits>
 8006c5a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006c5e:	e7e2      	b.n	8006c26 <__d2b+0x6a>
 8006c60:	080078fa 	.word	0x080078fa
 8006c64:	0800790b 	.word	0x0800790b

08006c68 <__ssputs_r>:
 8006c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c6c:	461f      	mov	r7, r3
 8006c6e:	688e      	ldr	r6, [r1, #8]
 8006c70:	4682      	mov	sl, r0
 8006c72:	42be      	cmp	r6, r7
 8006c74:	460c      	mov	r4, r1
 8006c76:	4690      	mov	r8, r2
 8006c78:	680b      	ldr	r3, [r1, #0]
 8006c7a:	d82c      	bhi.n	8006cd6 <__ssputs_r+0x6e>
 8006c7c:	898a      	ldrh	r2, [r1, #12]
 8006c7e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c82:	d026      	beq.n	8006cd2 <__ssputs_r+0x6a>
 8006c84:	6965      	ldr	r5, [r4, #20]
 8006c86:	6909      	ldr	r1, [r1, #16]
 8006c88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c8c:	eba3 0901 	sub.w	r9, r3, r1
 8006c90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c94:	1c7b      	adds	r3, r7, #1
 8006c96:	444b      	add	r3, r9
 8006c98:	106d      	asrs	r5, r5, #1
 8006c9a:	429d      	cmp	r5, r3
 8006c9c:	bf38      	it	cc
 8006c9e:	461d      	movcc	r5, r3
 8006ca0:	0553      	lsls	r3, r2, #21
 8006ca2:	d527      	bpl.n	8006cf4 <__ssputs_r+0x8c>
 8006ca4:	4629      	mov	r1, r5
 8006ca6:	f7ff fbdb 	bl	8006460 <_malloc_r>
 8006caa:	4606      	mov	r6, r0
 8006cac:	b360      	cbz	r0, 8006d08 <__ssputs_r+0xa0>
 8006cae:	464a      	mov	r2, r9
 8006cb0:	6921      	ldr	r1, [r4, #16]
 8006cb2:	f000 fa05 	bl	80070c0 <memcpy>
 8006cb6:	89a3      	ldrh	r3, [r4, #12]
 8006cb8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cc0:	81a3      	strh	r3, [r4, #12]
 8006cc2:	6126      	str	r6, [r4, #16]
 8006cc4:	444e      	add	r6, r9
 8006cc6:	6026      	str	r6, [r4, #0]
 8006cc8:	463e      	mov	r6, r7
 8006cca:	6165      	str	r5, [r4, #20]
 8006ccc:	eba5 0509 	sub.w	r5, r5, r9
 8006cd0:	60a5      	str	r5, [r4, #8]
 8006cd2:	42be      	cmp	r6, r7
 8006cd4:	d900      	bls.n	8006cd8 <__ssputs_r+0x70>
 8006cd6:	463e      	mov	r6, r7
 8006cd8:	4632      	mov	r2, r6
 8006cda:	4641      	mov	r1, r8
 8006cdc:	6820      	ldr	r0, [r4, #0]
 8006cde:	f000 f9c5 	bl	800706c <memmove>
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	68a3      	ldr	r3, [r4, #8]
 8006ce6:	1b9b      	subs	r3, r3, r6
 8006ce8:	60a3      	str	r3, [r4, #8]
 8006cea:	6823      	ldr	r3, [r4, #0]
 8006cec:	4433      	add	r3, r6
 8006cee:	6023      	str	r3, [r4, #0]
 8006cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cf4:	462a      	mov	r2, r5
 8006cf6:	f000 fa35 	bl	8007164 <_realloc_r>
 8006cfa:	4606      	mov	r6, r0
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	d1e0      	bne.n	8006cc2 <__ssputs_r+0x5a>
 8006d00:	4650      	mov	r0, sl
 8006d02:	6921      	ldr	r1, [r4, #16]
 8006d04:	f7ff fb3c 	bl	8006380 <_free_r>
 8006d08:	230c      	movs	r3, #12
 8006d0a:	f8ca 3000 	str.w	r3, [sl]
 8006d0e:	89a3      	ldrh	r3, [r4, #12]
 8006d10:	f04f 30ff 	mov.w	r0, #4294967295
 8006d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d18:	81a3      	strh	r3, [r4, #12]
 8006d1a:	e7e9      	b.n	8006cf0 <__ssputs_r+0x88>

08006d1c <_svfiprintf_r>:
 8006d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d20:	4698      	mov	r8, r3
 8006d22:	898b      	ldrh	r3, [r1, #12]
 8006d24:	4607      	mov	r7, r0
 8006d26:	061b      	lsls	r3, r3, #24
 8006d28:	460d      	mov	r5, r1
 8006d2a:	4614      	mov	r4, r2
 8006d2c:	b09d      	sub	sp, #116	; 0x74
 8006d2e:	d50e      	bpl.n	8006d4e <_svfiprintf_r+0x32>
 8006d30:	690b      	ldr	r3, [r1, #16]
 8006d32:	b963      	cbnz	r3, 8006d4e <_svfiprintf_r+0x32>
 8006d34:	2140      	movs	r1, #64	; 0x40
 8006d36:	f7ff fb93 	bl	8006460 <_malloc_r>
 8006d3a:	6028      	str	r0, [r5, #0]
 8006d3c:	6128      	str	r0, [r5, #16]
 8006d3e:	b920      	cbnz	r0, 8006d4a <_svfiprintf_r+0x2e>
 8006d40:	230c      	movs	r3, #12
 8006d42:	603b      	str	r3, [r7, #0]
 8006d44:	f04f 30ff 	mov.w	r0, #4294967295
 8006d48:	e0d0      	b.n	8006eec <_svfiprintf_r+0x1d0>
 8006d4a:	2340      	movs	r3, #64	; 0x40
 8006d4c:	616b      	str	r3, [r5, #20]
 8006d4e:	2300      	movs	r3, #0
 8006d50:	9309      	str	r3, [sp, #36]	; 0x24
 8006d52:	2320      	movs	r3, #32
 8006d54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d58:	2330      	movs	r3, #48	; 0x30
 8006d5a:	f04f 0901 	mov.w	r9, #1
 8006d5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d62:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006f04 <_svfiprintf_r+0x1e8>
 8006d66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d6a:	4623      	mov	r3, r4
 8006d6c:	469a      	mov	sl, r3
 8006d6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d72:	b10a      	cbz	r2, 8006d78 <_svfiprintf_r+0x5c>
 8006d74:	2a25      	cmp	r2, #37	; 0x25
 8006d76:	d1f9      	bne.n	8006d6c <_svfiprintf_r+0x50>
 8006d78:	ebba 0b04 	subs.w	fp, sl, r4
 8006d7c:	d00b      	beq.n	8006d96 <_svfiprintf_r+0x7a>
 8006d7e:	465b      	mov	r3, fp
 8006d80:	4622      	mov	r2, r4
 8006d82:	4629      	mov	r1, r5
 8006d84:	4638      	mov	r0, r7
 8006d86:	f7ff ff6f 	bl	8006c68 <__ssputs_r>
 8006d8a:	3001      	adds	r0, #1
 8006d8c:	f000 80a9 	beq.w	8006ee2 <_svfiprintf_r+0x1c6>
 8006d90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d92:	445a      	add	r2, fp
 8006d94:	9209      	str	r2, [sp, #36]	; 0x24
 8006d96:	f89a 3000 	ldrb.w	r3, [sl]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 80a1 	beq.w	8006ee2 <_svfiprintf_r+0x1c6>
 8006da0:	2300      	movs	r3, #0
 8006da2:	f04f 32ff 	mov.w	r2, #4294967295
 8006da6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006daa:	f10a 0a01 	add.w	sl, sl, #1
 8006dae:	9304      	str	r3, [sp, #16]
 8006db0:	9307      	str	r3, [sp, #28]
 8006db2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006db6:	931a      	str	r3, [sp, #104]	; 0x68
 8006db8:	4654      	mov	r4, sl
 8006dba:	2205      	movs	r2, #5
 8006dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dc0:	4850      	ldr	r0, [pc, #320]	; (8006f04 <_svfiprintf_r+0x1e8>)
 8006dc2:	f7fe fc60 	bl	8005686 <memchr>
 8006dc6:	9a04      	ldr	r2, [sp, #16]
 8006dc8:	b9d8      	cbnz	r0, 8006e02 <_svfiprintf_r+0xe6>
 8006dca:	06d0      	lsls	r0, r2, #27
 8006dcc:	bf44      	itt	mi
 8006dce:	2320      	movmi	r3, #32
 8006dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dd4:	0711      	lsls	r1, r2, #28
 8006dd6:	bf44      	itt	mi
 8006dd8:	232b      	movmi	r3, #43	; 0x2b
 8006dda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dde:	f89a 3000 	ldrb.w	r3, [sl]
 8006de2:	2b2a      	cmp	r3, #42	; 0x2a
 8006de4:	d015      	beq.n	8006e12 <_svfiprintf_r+0xf6>
 8006de6:	4654      	mov	r4, sl
 8006de8:	2000      	movs	r0, #0
 8006dea:	f04f 0c0a 	mov.w	ip, #10
 8006dee:	9a07      	ldr	r2, [sp, #28]
 8006df0:	4621      	mov	r1, r4
 8006df2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006df6:	3b30      	subs	r3, #48	; 0x30
 8006df8:	2b09      	cmp	r3, #9
 8006dfa:	d94d      	bls.n	8006e98 <_svfiprintf_r+0x17c>
 8006dfc:	b1b0      	cbz	r0, 8006e2c <_svfiprintf_r+0x110>
 8006dfe:	9207      	str	r2, [sp, #28]
 8006e00:	e014      	b.n	8006e2c <_svfiprintf_r+0x110>
 8006e02:	eba0 0308 	sub.w	r3, r0, r8
 8006e06:	fa09 f303 	lsl.w	r3, r9, r3
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	46a2      	mov	sl, r4
 8006e0e:	9304      	str	r3, [sp, #16]
 8006e10:	e7d2      	b.n	8006db8 <_svfiprintf_r+0x9c>
 8006e12:	9b03      	ldr	r3, [sp, #12]
 8006e14:	1d19      	adds	r1, r3, #4
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	9103      	str	r1, [sp, #12]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	bfbb      	ittet	lt
 8006e1e:	425b      	neglt	r3, r3
 8006e20:	f042 0202 	orrlt.w	r2, r2, #2
 8006e24:	9307      	strge	r3, [sp, #28]
 8006e26:	9307      	strlt	r3, [sp, #28]
 8006e28:	bfb8      	it	lt
 8006e2a:	9204      	strlt	r2, [sp, #16]
 8006e2c:	7823      	ldrb	r3, [r4, #0]
 8006e2e:	2b2e      	cmp	r3, #46	; 0x2e
 8006e30:	d10c      	bne.n	8006e4c <_svfiprintf_r+0x130>
 8006e32:	7863      	ldrb	r3, [r4, #1]
 8006e34:	2b2a      	cmp	r3, #42	; 0x2a
 8006e36:	d134      	bne.n	8006ea2 <_svfiprintf_r+0x186>
 8006e38:	9b03      	ldr	r3, [sp, #12]
 8006e3a:	3402      	adds	r4, #2
 8006e3c:	1d1a      	adds	r2, r3, #4
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	9203      	str	r2, [sp, #12]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	bfb8      	it	lt
 8006e46:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e4a:	9305      	str	r3, [sp, #20]
 8006e4c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006f08 <_svfiprintf_r+0x1ec>
 8006e50:	2203      	movs	r2, #3
 8006e52:	4650      	mov	r0, sl
 8006e54:	7821      	ldrb	r1, [r4, #0]
 8006e56:	f7fe fc16 	bl	8005686 <memchr>
 8006e5a:	b138      	cbz	r0, 8006e6c <_svfiprintf_r+0x150>
 8006e5c:	2240      	movs	r2, #64	; 0x40
 8006e5e:	9b04      	ldr	r3, [sp, #16]
 8006e60:	eba0 000a 	sub.w	r0, r0, sl
 8006e64:	4082      	lsls	r2, r0
 8006e66:	4313      	orrs	r3, r2
 8006e68:	3401      	adds	r4, #1
 8006e6a:	9304      	str	r3, [sp, #16]
 8006e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e70:	2206      	movs	r2, #6
 8006e72:	4826      	ldr	r0, [pc, #152]	; (8006f0c <_svfiprintf_r+0x1f0>)
 8006e74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e78:	f7fe fc05 	bl	8005686 <memchr>
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	d038      	beq.n	8006ef2 <_svfiprintf_r+0x1d6>
 8006e80:	4b23      	ldr	r3, [pc, #140]	; (8006f10 <_svfiprintf_r+0x1f4>)
 8006e82:	bb1b      	cbnz	r3, 8006ecc <_svfiprintf_r+0x1b0>
 8006e84:	9b03      	ldr	r3, [sp, #12]
 8006e86:	3307      	adds	r3, #7
 8006e88:	f023 0307 	bic.w	r3, r3, #7
 8006e8c:	3308      	adds	r3, #8
 8006e8e:	9303      	str	r3, [sp, #12]
 8006e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e92:	4433      	add	r3, r6
 8006e94:	9309      	str	r3, [sp, #36]	; 0x24
 8006e96:	e768      	b.n	8006d6a <_svfiprintf_r+0x4e>
 8006e98:	460c      	mov	r4, r1
 8006e9a:	2001      	movs	r0, #1
 8006e9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ea0:	e7a6      	b.n	8006df0 <_svfiprintf_r+0xd4>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	f04f 0c0a 	mov.w	ip, #10
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	3401      	adds	r4, #1
 8006eac:	9305      	str	r3, [sp, #20]
 8006eae:	4620      	mov	r0, r4
 8006eb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006eb4:	3a30      	subs	r2, #48	; 0x30
 8006eb6:	2a09      	cmp	r2, #9
 8006eb8:	d903      	bls.n	8006ec2 <_svfiprintf_r+0x1a6>
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d0c6      	beq.n	8006e4c <_svfiprintf_r+0x130>
 8006ebe:	9105      	str	r1, [sp, #20]
 8006ec0:	e7c4      	b.n	8006e4c <_svfiprintf_r+0x130>
 8006ec2:	4604      	mov	r4, r0
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006eca:	e7f0      	b.n	8006eae <_svfiprintf_r+0x192>
 8006ecc:	ab03      	add	r3, sp, #12
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	462a      	mov	r2, r5
 8006ed2:	4638      	mov	r0, r7
 8006ed4:	4b0f      	ldr	r3, [pc, #60]	; (8006f14 <_svfiprintf_r+0x1f8>)
 8006ed6:	a904      	add	r1, sp, #16
 8006ed8:	f7fd fe6e 	bl	8004bb8 <_printf_float>
 8006edc:	1c42      	adds	r2, r0, #1
 8006ede:	4606      	mov	r6, r0
 8006ee0:	d1d6      	bne.n	8006e90 <_svfiprintf_r+0x174>
 8006ee2:	89ab      	ldrh	r3, [r5, #12]
 8006ee4:	065b      	lsls	r3, r3, #25
 8006ee6:	f53f af2d 	bmi.w	8006d44 <_svfiprintf_r+0x28>
 8006eea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006eec:	b01d      	add	sp, #116	; 0x74
 8006eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef2:	ab03      	add	r3, sp, #12
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	462a      	mov	r2, r5
 8006ef8:	4638      	mov	r0, r7
 8006efa:	4b06      	ldr	r3, [pc, #24]	; (8006f14 <_svfiprintf_r+0x1f8>)
 8006efc:	a904      	add	r1, sp, #16
 8006efe:	f7fe f8fb 	bl	80050f8 <_printf_i>
 8006f02:	e7eb      	b.n	8006edc <_svfiprintf_r+0x1c0>
 8006f04:	08007a64 	.word	0x08007a64
 8006f08:	08007a6a 	.word	0x08007a6a
 8006f0c:	08007a6e 	.word	0x08007a6e
 8006f10:	08004bb9 	.word	0x08004bb9
 8006f14:	08006c69 	.word	0x08006c69

08006f18 <__sflush_r>:
 8006f18:	898a      	ldrh	r2, [r1, #12]
 8006f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f1c:	4605      	mov	r5, r0
 8006f1e:	0710      	lsls	r0, r2, #28
 8006f20:	460c      	mov	r4, r1
 8006f22:	d457      	bmi.n	8006fd4 <__sflush_r+0xbc>
 8006f24:	684b      	ldr	r3, [r1, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	dc04      	bgt.n	8006f34 <__sflush_r+0x1c>
 8006f2a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	dc01      	bgt.n	8006f34 <__sflush_r+0x1c>
 8006f30:	2000      	movs	r0, #0
 8006f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f36:	2e00      	cmp	r6, #0
 8006f38:	d0fa      	beq.n	8006f30 <__sflush_r+0x18>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f40:	682f      	ldr	r7, [r5, #0]
 8006f42:	6a21      	ldr	r1, [r4, #32]
 8006f44:	602b      	str	r3, [r5, #0]
 8006f46:	d032      	beq.n	8006fae <__sflush_r+0x96>
 8006f48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f4a:	89a3      	ldrh	r3, [r4, #12]
 8006f4c:	075a      	lsls	r2, r3, #29
 8006f4e:	d505      	bpl.n	8006f5c <__sflush_r+0x44>
 8006f50:	6863      	ldr	r3, [r4, #4]
 8006f52:	1ac0      	subs	r0, r0, r3
 8006f54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f56:	b10b      	cbz	r3, 8006f5c <__sflush_r+0x44>
 8006f58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f5a:	1ac0      	subs	r0, r0, r3
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	4602      	mov	r2, r0
 8006f60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f62:	4628      	mov	r0, r5
 8006f64:	6a21      	ldr	r1, [r4, #32]
 8006f66:	47b0      	blx	r6
 8006f68:	1c43      	adds	r3, r0, #1
 8006f6a:	89a3      	ldrh	r3, [r4, #12]
 8006f6c:	d106      	bne.n	8006f7c <__sflush_r+0x64>
 8006f6e:	6829      	ldr	r1, [r5, #0]
 8006f70:	291d      	cmp	r1, #29
 8006f72:	d82b      	bhi.n	8006fcc <__sflush_r+0xb4>
 8006f74:	4a28      	ldr	r2, [pc, #160]	; (8007018 <__sflush_r+0x100>)
 8006f76:	410a      	asrs	r2, r1
 8006f78:	07d6      	lsls	r6, r2, #31
 8006f7a:	d427      	bmi.n	8006fcc <__sflush_r+0xb4>
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	6062      	str	r2, [r4, #4]
 8006f80:	6922      	ldr	r2, [r4, #16]
 8006f82:	04d9      	lsls	r1, r3, #19
 8006f84:	6022      	str	r2, [r4, #0]
 8006f86:	d504      	bpl.n	8006f92 <__sflush_r+0x7a>
 8006f88:	1c42      	adds	r2, r0, #1
 8006f8a:	d101      	bne.n	8006f90 <__sflush_r+0x78>
 8006f8c:	682b      	ldr	r3, [r5, #0]
 8006f8e:	b903      	cbnz	r3, 8006f92 <__sflush_r+0x7a>
 8006f90:	6560      	str	r0, [r4, #84]	; 0x54
 8006f92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f94:	602f      	str	r7, [r5, #0]
 8006f96:	2900      	cmp	r1, #0
 8006f98:	d0ca      	beq.n	8006f30 <__sflush_r+0x18>
 8006f9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f9e:	4299      	cmp	r1, r3
 8006fa0:	d002      	beq.n	8006fa8 <__sflush_r+0x90>
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	f7ff f9ec 	bl	8006380 <_free_r>
 8006fa8:	2000      	movs	r0, #0
 8006faa:	6360      	str	r0, [r4, #52]	; 0x34
 8006fac:	e7c1      	b.n	8006f32 <__sflush_r+0x1a>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	47b0      	blx	r6
 8006fb4:	1c41      	adds	r1, r0, #1
 8006fb6:	d1c8      	bne.n	8006f4a <__sflush_r+0x32>
 8006fb8:	682b      	ldr	r3, [r5, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d0c5      	beq.n	8006f4a <__sflush_r+0x32>
 8006fbe:	2b1d      	cmp	r3, #29
 8006fc0:	d001      	beq.n	8006fc6 <__sflush_r+0xae>
 8006fc2:	2b16      	cmp	r3, #22
 8006fc4:	d101      	bne.n	8006fca <__sflush_r+0xb2>
 8006fc6:	602f      	str	r7, [r5, #0]
 8006fc8:	e7b2      	b.n	8006f30 <__sflush_r+0x18>
 8006fca:	89a3      	ldrh	r3, [r4, #12]
 8006fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fd0:	81a3      	strh	r3, [r4, #12]
 8006fd2:	e7ae      	b.n	8006f32 <__sflush_r+0x1a>
 8006fd4:	690f      	ldr	r7, [r1, #16]
 8006fd6:	2f00      	cmp	r7, #0
 8006fd8:	d0aa      	beq.n	8006f30 <__sflush_r+0x18>
 8006fda:	0793      	lsls	r3, r2, #30
 8006fdc:	bf18      	it	ne
 8006fde:	2300      	movne	r3, #0
 8006fe0:	680e      	ldr	r6, [r1, #0]
 8006fe2:	bf08      	it	eq
 8006fe4:	694b      	ldreq	r3, [r1, #20]
 8006fe6:	1bf6      	subs	r6, r6, r7
 8006fe8:	600f      	str	r7, [r1, #0]
 8006fea:	608b      	str	r3, [r1, #8]
 8006fec:	2e00      	cmp	r6, #0
 8006fee:	dd9f      	ble.n	8006f30 <__sflush_r+0x18>
 8006ff0:	4633      	mov	r3, r6
 8006ff2:	463a      	mov	r2, r7
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	6a21      	ldr	r1, [r4, #32]
 8006ff8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006ffc:	47e0      	blx	ip
 8006ffe:	2800      	cmp	r0, #0
 8007000:	dc06      	bgt.n	8007010 <__sflush_r+0xf8>
 8007002:	89a3      	ldrh	r3, [r4, #12]
 8007004:	f04f 30ff 	mov.w	r0, #4294967295
 8007008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800700c:	81a3      	strh	r3, [r4, #12]
 800700e:	e790      	b.n	8006f32 <__sflush_r+0x1a>
 8007010:	4407      	add	r7, r0
 8007012:	1a36      	subs	r6, r6, r0
 8007014:	e7ea      	b.n	8006fec <__sflush_r+0xd4>
 8007016:	bf00      	nop
 8007018:	dfbffffe 	.word	0xdfbffffe

0800701c <_fflush_r>:
 800701c:	b538      	push	{r3, r4, r5, lr}
 800701e:	690b      	ldr	r3, [r1, #16]
 8007020:	4605      	mov	r5, r0
 8007022:	460c      	mov	r4, r1
 8007024:	b913      	cbnz	r3, 800702c <_fflush_r+0x10>
 8007026:	2500      	movs	r5, #0
 8007028:	4628      	mov	r0, r5
 800702a:	bd38      	pop	{r3, r4, r5, pc}
 800702c:	b118      	cbz	r0, 8007036 <_fflush_r+0x1a>
 800702e:	6a03      	ldr	r3, [r0, #32]
 8007030:	b90b      	cbnz	r3, 8007036 <_fflush_r+0x1a>
 8007032:	f7fe fa0f 	bl	8005454 <__sinit>
 8007036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d0f3      	beq.n	8007026 <_fflush_r+0xa>
 800703e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007040:	07d0      	lsls	r0, r2, #31
 8007042:	d404      	bmi.n	800704e <_fflush_r+0x32>
 8007044:	0599      	lsls	r1, r3, #22
 8007046:	d402      	bmi.n	800704e <_fflush_r+0x32>
 8007048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800704a:	f7fe fb1a 	bl	8005682 <__retarget_lock_acquire_recursive>
 800704e:	4628      	mov	r0, r5
 8007050:	4621      	mov	r1, r4
 8007052:	f7ff ff61 	bl	8006f18 <__sflush_r>
 8007056:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007058:	4605      	mov	r5, r0
 800705a:	07da      	lsls	r2, r3, #31
 800705c:	d4e4      	bmi.n	8007028 <_fflush_r+0xc>
 800705e:	89a3      	ldrh	r3, [r4, #12]
 8007060:	059b      	lsls	r3, r3, #22
 8007062:	d4e1      	bmi.n	8007028 <_fflush_r+0xc>
 8007064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007066:	f7fe fb0d 	bl	8005684 <__retarget_lock_release_recursive>
 800706a:	e7dd      	b.n	8007028 <_fflush_r+0xc>

0800706c <memmove>:
 800706c:	4288      	cmp	r0, r1
 800706e:	b510      	push	{r4, lr}
 8007070:	eb01 0402 	add.w	r4, r1, r2
 8007074:	d902      	bls.n	800707c <memmove+0x10>
 8007076:	4284      	cmp	r4, r0
 8007078:	4623      	mov	r3, r4
 800707a:	d807      	bhi.n	800708c <memmove+0x20>
 800707c:	1e43      	subs	r3, r0, #1
 800707e:	42a1      	cmp	r1, r4
 8007080:	d008      	beq.n	8007094 <memmove+0x28>
 8007082:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007086:	f803 2f01 	strb.w	r2, [r3, #1]!
 800708a:	e7f8      	b.n	800707e <memmove+0x12>
 800708c:	4601      	mov	r1, r0
 800708e:	4402      	add	r2, r0
 8007090:	428a      	cmp	r2, r1
 8007092:	d100      	bne.n	8007096 <memmove+0x2a>
 8007094:	bd10      	pop	{r4, pc}
 8007096:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800709a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800709e:	e7f7      	b.n	8007090 <memmove+0x24>

080070a0 <_sbrk_r>:
 80070a0:	b538      	push	{r3, r4, r5, lr}
 80070a2:	2300      	movs	r3, #0
 80070a4:	4d05      	ldr	r5, [pc, #20]	; (80070bc <_sbrk_r+0x1c>)
 80070a6:	4604      	mov	r4, r0
 80070a8:	4608      	mov	r0, r1
 80070aa:	602b      	str	r3, [r5, #0]
 80070ac:	f7fa fe26 	bl	8001cfc <_sbrk>
 80070b0:	1c43      	adds	r3, r0, #1
 80070b2:	d102      	bne.n	80070ba <_sbrk_r+0x1a>
 80070b4:	682b      	ldr	r3, [r5, #0]
 80070b6:	b103      	cbz	r3, 80070ba <_sbrk_r+0x1a>
 80070b8:	6023      	str	r3, [r4, #0]
 80070ba:	bd38      	pop	{r3, r4, r5, pc}
 80070bc:	200008a4 	.word	0x200008a4

080070c0 <memcpy>:
 80070c0:	440a      	add	r2, r1
 80070c2:	4291      	cmp	r1, r2
 80070c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80070c8:	d100      	bne.n	80070cc <memcpy+0xc>
 80070ca:	4770      	bx	lr
 80070cc:	b510      	push	{r4, lr}
 80070ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070d2:	4291      	cmp	r1, r2
 80070d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070d8:	d1f9      	bne.n	80070ce <memcpy+0xe>
 80070da:	bd10      	pop	{r4, pc}

080070dc <__assert_func>:
 80070dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070de:	4614      	mov	r4, r2
 80070e0:	461a      	mov	r2, r3
 80070e2:	4b09      	ldr	r3, [pc, #36]	; (8007108 <__assert_func+0x2c>)
 80070e4:	4605      	mov	r5, r0
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68d8      	ldr	r0, [r3, #12]
 80070ea:	b14c      	cbz	r4, 8007100 <__assert_func+0x24>
 80070ec:	4b07      	ldr	r3, [pc, #28]	; (800710c <__assert_func+0x30>)
 80070ee:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80070f2:	9100      	str	r1, [sp, #0]
 80070f4:	462b      	mov	r3, r5
 80070f6:	4906      	ldr	r1, [pc, #24]	; (8007110 <__assert_func+0x34>)
 80070f8:	f000 f870 	bl	80071dc <fiprintf>
 80070fc:	f000 f880 	bl	8007200 <abort>
 8007100:	4b04      	ldr	r3, [pc, #16]	; (8007114 <__assert_func+0x38>)
 8007102:	461c      	mov	r4, r3
 8007104:	e7f3      	b.n	80070ee <__assert_func+0x12>
 8007106:	bf00      	nop
 8007108:	20000154 	.word	0x20000154
 800710c:	08007a7f 	.word	0x08007a7f
 8007110:	08007a8c 	.word	0x08007a8c
 8007114:	08007aba 	.word	0x08007aba

08007118 <_calloc_r>:
 8007118:	b570      	push	{r4, r5, r6, lr}
 800711a:	fba1 5402 	umull	r5, r4, r1, r2
 800711e:	b934      	cbnz	r4, 800712e <_calloc_r+0x16>
 8007120:	4629      	mov	r1, r5
 8007122:	f7ff f99d 	bl	8006460 <_malloc_r>
 8007126:	4606      	mov	r6, r0
 8007128:	b928      	cbnz	r0, 8007136 <_calloc_r+0x1e>
 800712a:	4630      	mov	r0, r6
 800712c:	bd70      	pop	{r4, r5, r6, pc}
 800712e:	220c      	movs	r2, #12
 8007130:	2600      	movs	r6, #0
 8007132:	6002      	str	r2, [r0, #0]
 8007134:	e7f9      	b.n	800712a <_calloc_r+0x12>
 8007136:	462a      	mov	r2, r5
 8007138:	4621      	mov	r1, r4
 800713a:	f7fe fa24 	bl	8005586 <memset>
 800713e:	e7f4      	b.n	800712a <_calloc_r+0x12>

08007140 <__ascii_mbtowc>:
 8007140:	b082      	sub	sp, #8
 8007142:	b901      	cbnz	r1, 8007146 <__ascii_mbtowc+0x6>
 8007144:	a901      	add	r1, sp, #4
 8007146:	b142      	cbz	r2, 800715a <__ascii_mbtowc+0x1a>
 8007148:	b14b      	cbz	r3, 800715e <__ascii_mbtowc+0x1e>
 800714a:	7813      	ldrb	r3, [r2, #0]
 800714c:	600b      	str	r3, [r1, #0]
 800714e:	7812      	ldrb	r2, [r2, #0]
 8007150:	1e10      	subs	r0, r2, #0
 8007152:	bf18      	it	ne
 8007154:	2001      	movne	r0, #1
 8007156:	b002      	add	sp, #8
 8007158:	4770      	bx	lr
 800715a:	4610      	mov	r0, r2
 800715c:	e7fb      	b.n	8007156 <__ascii_mbtowc+0x16>
 800715e:	f06f 0001 	mvn.w	r0, #1
 8007162:	e7f8      	b.n	8007156 <__ascii_mbtowc+0x16>

08007164 <_realloc_r>:
 8007164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007168:	4680      	mov	r8, r0
 800716a:	4614      	mov	r4, r2
 800716c:	460e      	mov	r6, r1
 800716e:	b921      	cbnz	r1, 800717a <_realloc_r+0x16>
 8007170:	4611      	mov	r1, r2
 8007172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007176:	f7ff b973 	b.w	8006460 <_malloc_r>
 800717a:	b92a      	cbnz	r2, 8007188 <_realloc_r+0x24>
 800717c:	f7ff f900 	bl	8006380 <_free_r>
 8007180:	4625      	mov	r5, r4
 8007182:	4628      	mov	r0, r5
 8007184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007188:	f000 f841 	bl	800720e <_malloc_usable_size_r>
 800718c:	4284      	cmp	r4, r0
 800718e:	4607      	mov	r7, r0
 8007190:	d802      	bhi.n	8007198 <_realloc_r+0x34>
 8007192:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007196:	d812      	bhi.n	80071be <_realloc_r+0x5a>
 8007198:	4621      	mov	r1, r4
 800719a:	4640      	mov	r0, r8
 800719c:	f7ff f960 	bl	8006460 <_malloc_r>
 80071a0:	4605      	mov	r5, r0
 80071a2:	2800      	cmp	r0, #0
 80071a4:	d0ed      	beq.n	8007182 <_realloc_r+0x1e>
 80071a6:	42bc      	cmp	r4, r7
 80071a8:	4622      	mov	r2, r4
 80071aa:	4631      	mov	r1, r6
 80071ac:	bf28      	it	cs
 80071ae:	463a      	movcs	r2, r7
 80071b0:	f7ff ff86 	bl	80070c0 <memcpy>
 80071b4:	4631      	mov	r1, r6
 80071b6:	4640      	mov	r0, r8
 80071b8:	f7ff f8e2 	bl	8006380 <_free_r>
 80071bc:	e7e1      	b.n	8007182 <_realloc_r+0x1e>
 80071be:	4635      	mov	r5, r6
 80071c0:	e7df      	b.n	8007182 <_realloc_r+0x1e>

080071c2 <__ascii_wctomb>:
 80071c2:	4603      	mov	r3, r0
 80071c4:	4608      	mov	r0, r1
 80071c6:	b141      	cbz	r1, 80071da <__ascii_wctomb+0x18>
 80071c8:	2aff      	cmp	r2, #255	; 0xff
 80071ca:	d904      	bls.n	80071d6 <__ascii_wctomb+0x14>
 80071cc:	228a      	movs	r2, #138	; 0x8a
 80071ce:	f04f 30ff 	mov.w	r0, #4294967295
 80071d2:	601a      	str	r2, [r3, #0]
 80071d4:	4770      	bx	lr
 80071d6:	2001      	movs	r0, #1
 80071d8:	700a      	strb	r2, [r1, #0]
 80071da:	4770      	bx	lr

080071dc <fiprintf>:
 80071dc:	b40e      	push	{r1, r2, r3}
 80071de:	b503      	push	{r0, r1, lr}
 80071e0:	4601      	mov	r1, r0
 80071e2:	ab03      	add	r3, sp, #12
 80071e4:	4805      	ldr	r0, [pc, #20]	; (80071fc <fiprintf+0x20>)
 80071e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80071ea:	6800      	ldr	r0, [r0, #0]
 80071ec:	9301      	str	r3, [sp, #4]
 80071ee:	f000 f83d 	bl	800726c <_vfiprintf_r>
 80071f2:	b002      	add	sp, #8
 80071f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80071f8:	b003      	add	sp, #12
 80071fa:	4770      	bx	lr
 80071fc:	20000154 	.word	0x20000154

08007200 <abort>:
 8007200:	2006      	movs	r0, #6
 8007202:	b508      	push	{r3, lr}
 8007204:	f000 fa0a 	bl	800761c <raise>
 8007208:	2001      	movs	r0, #1
 800720a:	f7fa fd04 	bl	8001c16 <_exit>

0800720e <_malloc_usable_size_r>:
 800720e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007212:	1f18      	subs	r0, r3, #4
 8007214:	2b00      	cmp	r3, #0
 8007216:	bfbc      	itt	lt
 8007218:	580b      	ldrlt	r3, [r1, r0]
 800721a:	18c0      	addlt	r0, r0, r3
 800721c:	4770      	bx	lr

0800721e <__sfputc_r>:
 800721e:	6893      	ldr	r3, [r2, #8]
 8007220:	b410      	push	{r4}
 8007222:	3b01      	subs	r3, #1
 8007224:	2b00      	cmp	r3, #0
 8007226:	6093      	str	r3, [r2, #8]
 8007228:	da07      	bge.n	800723a <__sfputc_r+0x1c>
 800722a:	6994      	ldr	r4, [r2, #24]
 800722c:	42a3      	cmp	r3, r4
 800722e:	db01      	blt.n	8007234 <__sfputc_r+0x16>
 8007230:	290a      	cmp	r1, #10
 8007232:	d102      	bne.n	800723a <__sfputc_r+0x1c>
 8007234:	bc10      	pop	{r4}
 8007236:	f000 b933 	b.w	80074a0 <__swbuf_r>
 800723a:	6813      	ldr	r3, [r2, #0]
 800723c:	1c58      	adds	r0, r3, #1
 800723e:	6010      	str	r0, [r2, #0]
 8007240:	7019      	strb	r1, [r3, #0]
 8007242:	4608      	mov	r0, r1
 8007244:	bc10      	pop	{r4}
 8007246:	4770      	bx	lr

08007248 <__sfputs_r>:
 8007248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724a:	4606      	mov	r6, r0
 800724c:	460f      	mov	r7, r1
 800724e:	4614      	mov	r4, r2
 8007250:	18d5      	adds	r5, r2, r3
 8007252:	42ac      	cmp	r4, r5
 8007254:	d101      	bne.n	800725a <__sfputs_r+0x12>
 8007256:	2000      	movs	r0, #0
 8007258:	e007      	b.n	800726a <__sfputs_r+0x22>
 800725a:	463a      	mov	r2, r7
 800725c:	4630      	mov	r0, r6
 800725e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007262:	f7ff ffdc 	bl	800721e <__sfputc_r>
 8007266:	1c43      	adds	r3, r0, #1
 8007268:	d1f3      	bne.n	8007252 <__sfputs_r+0xa>
 800726a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800726c <_vfiprintf_r>:
 800726c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007270:	460d      	mov	r5, r1
 8007272:	4614      	mov	r4, r2
 8007274:	4698      	mov	r8, r3
 8007276:	4606      	mov	r6, r0
 8007278:	b09d      	sub	sp, #116	; 0x74
 800727a:	b118      	cbz	r0, 8007284 <_vfiprintf_r+0x18>
 800727c:	6a03      	ldr	r3, [r0, #32]
 800727e:	b90b      	cbnz	r3, 8007284 <_vfiprintf_r+0x18>
 8007280:	f7fe f8e8 	bl	8005454 <__sinit>
 8007284:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007286:	07d9      	lsls	r1, r3, #31
 8007288:	d405      	bmi.n	8007296 <_vfiprintf_r+0x2a>
 800728a:	89ab      	ldrh	r3, [r5, #12]
 800728c:	059a      	lsls	r2, r3, #22
 800728e:	d402      	bmi.n	8007296 <_vfiprintf_r+0x2a>
 8007290:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007292:	f7fe f9f6 	bl	8005682 <__retarget_lock_acquire_recursive>
 8007296:	89ab      	ldrh	r3, [r5, #12]
 8007298:	071b      	lsls	r3, r3, #28
 800729a:	d501      	bpl.n	80072a0 <_vfiprintf_r+0x34>
 800729c:	692b      	ldr	r3, [r5, #16]
 800729e:	b99b      	cbnz	r3, 80072c8 <_vfiprintf_r+0x5c>
 80072a0:	4629      	mov	r1, r5
 80072a2:	4630      	mov	r0, r6
 80072a4:	f000 f93a 	bl	800751c <__swsetup_r>
 80072a8:	b170      	cbz	r0, 80072c8 <_vfiprintf_r+0x5c>
 80072aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072ac:	07dc      	lsls	r4, r3, #31
 80072ae:	d504      	bpl.n	80072ba <_vfiprintf_r+0x4e>
 80072b0:	f04f 30ff 	mov.w	r0, #4294967295
 80072b4:	b01d      	add	sp, #116	; 0x74
 80072b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ba:	89ab      	ldrh	r3, [r5, #12]
 80072bc:	0598      	lsls	r0, r3, #22
 80072be:	d4f7      	bmi.n	80072b0 <_vfiprintf_r+0x44>
 80072c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072c2:	f7fe f9df 	bl	8005684 <__retarget_lock_release_recursive>
 80072c6:	e7f3      	b.n	80072b0 <_vfiprintf_r+0x44>
 80072c8:	2300      	movs	r3, #0
 80072ca:	9309      	str	r3, [sp, #36]	; 0x24
 80072cc:	2320      	movs	r3, #32
 80072ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072d2:	2330      	movs	r3, #48	; 0x30
 80072d4:	f04f 0901 	mov.w	r9, #1
 80072d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80072dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800748c <_vfiprintf_r+0x220>
 80072e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072e4:	4623      	mov	r3, r4
 80072e6:	469a      	mov	sl, r3
 80072e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072ec:	b10a      	cbz	r2, 80072f2 <_vfiprintf_r+0x86>
 80072ee:	2a25      	cmp	r2, #37	; 0x25
 80072f0:	d1f9      	bne.n	80072e6 <_vfiprintf_r+0x7a>
 80072f2:	ebba 0b04 	subs.w	fp, sl, r4
 80072f6:	d00b      	beq.n	8007310 <_vfiprintf_r+0xa4>
 80072f8:	465b      	mov	r3, fp
 80072fa:	4622      	mov	r2, r4
 80072fc:	4629      	mov	r1, r5
 80072fe:	4630      	mov	r0, r6
 8007300:	f7ff ffa2 	bl	8007248 <__sfputs_r>
 8007304:	3001      	adds	r0, #1
 8007306:	f000 80a9 	beq.w	800745c <_vfiprintf_r+0x1f0>
 800730a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800730c:	445a      	add	r2, fp
 800730e:	9209      	str	r2, [sp, #36]	; 0x24
 8007310:	f89a 3000 	ldrb.w	r3, [sl]
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 80a1 	beq.w	800745c <_vfiprintf_r+0x1f0>
 800731a:	2300      	movs	r3, #0
 800731c:	f04f 32ff 	mov.w	r2, #4294967295
 8007320:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007324:	f10a 0a01 	add.w	sl, sl, #1
 8007328:	9304      	str	r3, [sp, #16]
 800732a:	9307      	str	r3, [sp, #28]
 800732c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007330:	931a      	str	r3, [sp, #104]	; 0x68
 8007332:	4654      	mov	r4, sl
 8007334:	2205      	movs	r2, #5
 8007336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800733a:	4854      	ldr	r0, [pc, #336]	; (800748c <_vfiprintf_r+0x220>)
 800733c:	f7fe f9a3 	bl	8005686 <memchr>
 8007340:	9a04      	ldr	r2, [sp, #16]
 8007342:	b9d8      	cbnz	r0, 800737c <_vfiprintf_r+0x110>
 8007344:	06d1      	lsls	r1, r2, #27
 8007346:	bf44      	itt	mi
 8007348:	2320      	movmi	r3, #32
 800734a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800734e:	0713      	lsls	r3, r2, #28
 8007350:	bf44      	itt	mi
 8007352:	232b      	movmi	r3, #43	; 0x2b
 8007354:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007358:	f89a 3000 	ldrb.w	r3, [sl]
 800735c:	2b2a      	cmp	r3, #42	; 0x2a
 800735e:	d015      	beq.n	800738c <_vfiprintf_r+0x120>
 8007360:	4654      	mov	r4, sl
 8007362:	2000      	movs	r0, #0
 8007364:	f04f 0c0a 	mov.w	ip, #10
 8007368:	9a07      	ldr	r2, [sp, #28]
 800736a:	4621      	mov	r1, r4
 800736c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007370:	3b30      	subs	r3, #48	; 0x30
 8007372:	2b09      	cmp	r3, #9
 8007374:	d94d      	bls.n	8007412 <_vfiprintf_r+0x1a6>
 8007376:	b1b0      	cbz	r0, 80073a6 <_vfiprintf_r+0x13a>
 8007378:	9207      	str	r2, [sp, #28]
 800737a:	e014      	b.n	80073a6 <_vfiprintf_r+0x13a>
 800737c:	eba0 0308 	sub.w	r3, r0, r8
 8007380:	fa09 f303 	lsl.w	r3, r9, r3
 8007384:	4313      	orrs	r3, r2
 8007386:	46a2      	mov	sl, r4
 8007388:	9304      	str	r3, [sp, #16]
 800738a:	e7d2      	b.n	8007332 <_vfiprintf_r+0xc6>
 800738c:	9b03      	ldr	r3, [sp, #12]
 800738e:	1d19      	adds	r1, r3, #4
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	9103      	str	r1, [sp, #12]
 8007394:	2b00      	cmp	r3, #0
 8007396:	bfbb      	ittet	lt
 8007398:	425b      	neglt	r3, r3
 800739a:	f042 0202 	orrlt.w	r2, r2, #2
 800739e:	9307      	strge	r3, [sp, #28]
 80073a0:	9307      	strlt	r3, [sp, #28]
 80073a2:	bfb8      	it	lt
 80073a4:	9204      	strlt	r2, [sp, #16]
 80073a6:	7823      	ldrb	r3, [r4, #0]
 80073a8:	2b2e      	cmp	r3, #46	; 0x2e
 80073aa:	d10c      	bne.n	80073c6 <_vfiprintf_r+0x15a>
 80073ac:	7863      	ldrb	r3, [r4, #1]
 80073ae:	2b2a      	cmp	r3, #42	; 0x2a
 80073b0:	d134      	bne.n	800741c <_vfiprintf_r+0x1b0>
 80073b2:	9b03      	ldr	r3, [sp, #12]
 80073b4:	3402      	adds	r4, #2
 80073b6:	1d1a      	adds	r2, r3, #4
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	9203      	str	r2, [sp, #12]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	bfb8      	it	lt
 80073c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80073c4:	9305      	str	r3, [sp, #20]
 80073c6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007490 <_vfiprintf_r+0x224>
 80073ca:	2203      	movs	r2, #3
 80073cc:	4650      	mov	r0, sl
 80073ce:	7821      	ldrb	r1, [r4, #0]
 80073d0:	f7fe f959 	bl	8005686 <memchr>
 80073d4:	b138      	cbz	r0, 80073e6 <_vfiprintf_r+0x17a>
 80073d6:	2240      	movs	r2, #64	; 0x40
 80073d8:	9b04      	ldr	r3, [sp, #16]
 80073da:	eba0 000a 	sub.w	r0, r0, sl
 80073de:	4082      	lsls	r2, r0
 80073e0:	4313      	orrs	r3, r2
 80073e2:	3401      	adds	r4, #1
 80073e4:	9304      	str	r3, [sp, #16]
 80073e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ea:	2206      	movs	r2, #6
 80073ec:	4829      	ldr	r0, [pc, #164]	; (8007494 <_vfiprintf_r+0x228>)
 80073ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073f2:	f7fe f948 	bl	8005686 <memchr>
 80073f6:	2800      	cmp	r0, #0
 80073f8:	d03f      	beq.n	800747a <_vfiprintf_r+0x20e>
 80073fa:	4b27      	ldr	r3, [pc, #156]	; (8007498 <_vfiprintf_r+0x22c>)
 80073fc:	bb1b      	cbnz	r3, 8007446 <_vfiprintf_r+0x1da>
 80073fe:	9b03      	ldr	r3, [sp, #12]
 8007400:	3307      	adds	r3, #7
 8007402:	f023 0307 	bic.w	r3, r3, #7
 8007406:	3308      	adds	r3, #8
 8007408:	9303      	str	r3, [sp, #12]
 800740a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800740c:	443b      	add	r3, r7
 800740e:	9309      	str	r3, [sp, #36]	; 0x24
 8007410:	e768      	b.n	80072e4 <_vfiprintf_r+0x78>
 8007412:	460c      	mov	r4, r1
 8007414:	2001      	movs	r0, #1
 8007416:	fb0c 3202 	mla	r2, ip, r2, r3
 800741a:	e7a6      	b.n	800736a <_vfiprintf_r+0xfe>
 800741c:	2300      	movs	r3, #0
 800741e:	f04f 0c0a 	mov.w	ip, #10
 8007422:	4619      	mov	r1, r3
 8007424:	3401      	adds	r4, #1
 8007426:	9305      	str	r3, [sp, #20]
 8007428:	4620      	mov	r0, r4
 800742a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800742e:	3a30      	subs	r2, #48	; 0x30
 8007430:	2a09      	cmp	r2, #9
 8007432:	d903      	bls.n	800743c <_vfiprintf_r+0x1d0>
 8007434:	2b00      	cmp	r3, #0
 8007436:	d0c6      	beq.n	80073c6 <_vfiprintf_r+0x15a>
 8007438:	9105      	str	r1, [sp, #20]
 800743a:	e7c4      	b.n	80073c6 <_vfiprintf_r+0x15a>
 800743c:	4604      	mov	r4, r0
 800743e:	2301      	movs	r3, #1
 8007440:	fb0c 2101 	mla	r1, ip, r1, r2
 8007444:	e7f0      	b.n	8007428 <_vfiprintf_r+0x1bc>
 8007446:	ab03      	add	r3, sp, #12
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	462a      	mov	r2, r5
 800744c:	4630      	mov	r0, r6
 800744e:	4b13      	ldr	r3, [pc, #76]	; (800749c <_vfiprintf_r+0x230>)
 8007450:	a904      	add	r1, sp, #16
 8007452:	f7fd fbb1 	bl	8004bb8 <_printf_float>
 8007456:	4607      	mov	r7, r0
 8007458:	1c78      	adds	r0, r7, #1
 800745a:	d1d6      	bne.n	800740a <_vfiprintf_r+0x19e>
 800745c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800745e:	07d9      	lsls	r1, r3, #31
 8007460:	d405      	bmi.n	800746e <_vfiprintf_r+0x202>
 8007462:	89ab      	ldrh	r3, [r5, #12]
 8007464:	059a      	lsls	r2, r3, #22
 8007466:	d402      	bmi.n	800746e <_vfiprintf_r+0x202>
 8007468:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800746a:	f7fe f90b 	bl	8005684 <__retarget_lock_release_recursive>
 800746e:	89ab      	ldrh	r3, [r5, #12]
 8007470:	065b      	lsls	r3, r3, #25
 8007472:	f53f af1d 	bmi.w	80072b0 <_vfiprintf_r+0x44>
 8007476:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007478:	e71c      	b.n	80072b4 <_vfiprintf_r+0x48>
 800747a:	ab03      	add	r3, sp, #12
 800747c:	9300      	str	r3, [sp, #0]
 800747e:	462a      	mov	r2, r5
 8007480:	4630      	mov	r0, r6
 8007482:	4b06      	ldr	r3, [pc, #24]	; (800749c <_vfiprintf_r+0x230>)
 8007484:	a904      	add	r1, sp, #16
 8007486:	f7fd fe37 	bl	80050f8 <_printf_i>
 800748a:	e7e4      	b.n	8007456 <_vfiprintf_r+0x1ea>
 800748c:	08007a64 	.word	0x08007a64
 8007490:	08007a6a 	.word	0x08007a6a
 8007494:	08007a6e 	.word	0x08007a6e
 8007498:	08004bb9 	.word	0x08004bb9
 800749c:	08007249 	.word	0x08007249

080074a0 <__swbuf_r>:
 80074a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074a2:	460e      	mov	r6, r1
 80074a4:	4614      	mov	r4, r2
 80074a6:	4605      	mov	r5, r0
 80074a8:	b118      	cbz	r0, 80074b2 <__swbuf_r+0x12>
 80074aa:	6a03      	ldr	r3, [r0, #32]
 80074ac:	b90b      	cbnz	r3, 80074b2 <__swbuf_r+0x12>
 80074ae:	f7fd ffd1 	bl	8005454 <__sinit>
 80074b2:	69a3      	ldr	r3, [r4, #24]
 80074b4:	60a3      	str	r3, [r4, #8]
 80074b6:	89a3      	ldrh	r3, [r4, #12]
 80074b8:	071a      	lsls	r2, r3, #28
 80074ba:	d525      	bpl.n	8007508 <__swbuf_r+0x68>
 80074bc:	6923      	ldr	r3, [r4, #16]
 80074be:	b31b      	cbz	r3, 8007508 <__swbuf_r+0x68>
 80074c0:	6823      	ldr	r3, [r4, #0]
 80074c2:	6922      	ldr	r2, [r4, #16]
 80074c4:	b2f6      	uxtb	r6, r6
 80074c6:	1a98      	subs	r0, r3, r2
 80074c8:	6963      	ldr	r3, [r4, #20]
 80074ca:	4637      	mov	r7, r6
 80074cc:	4283      	cmp	r3, r0
 80074ce:	dc04      	bgt.n	80074da <__swbuf_r+0x3a>
 80074d0:	4621      	mov	r1, r4
 80074d2:	4628      	mov	r0, r5
 80074d4:	f7ff fda2 	bl	800701c <_fflush_r>
 80074d8:	b9e0      	cbnz	r0, 8007514 <__swbuf_r+0x74>
 80074da:	68a3      	ldr	r3, [r4, #8]
 80074dc:	3b01      	subs	r3, #1
 80074de:	60a3      	str	r3, [r4, #8]
 80074e0:	6823      	ldr	r3, [r4, #0]
 80074e2:	1c5a      	adds	r2, r3, #1
 80074e4:	6022      	str	r2, [r4, #0]
 80074e6:	701e      	strb	r6, [r3, #0]
 80074e8:	6962      	ldr	r2, [r4, #20]
 80074ea:	1c43      	adds	r3, r0, #1
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d004      	beq.n	80074fa <__swbuf_r+0x5a>
 80074f0:	89a3      	ldrh	r3, [r4, #12]
 80074f2:	07db      	lsls	r3, r3, #31
 80074f4:	d506      	bpl.n	8007504 <__swbuf_r+0x64>
 80074f6:	2e0a      	cmp	r6, #10
 80074f8:	d104      	bne.n	8007504 <__swbuf_r+0x64>
 80074fa:	4621      	mov	r1, r4
 80074fc:	4628      	mov	r0, r5
 80074fe:	f7ff fd8d 	bl	800701c <_fflush_r>
 8007502:	b938      	cbnz	r0, 8007514 <__swbuf_r+0x74>
 8007504:	4638      	mov	r0, r7
 8007506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007508:	4621      	mov	r1, r4
 800750a:	4628      	mov	r0, r5
 800750c:	f000 f806 	bl	800751c <__swsetup_r>
 8007510:	2800      	cmp	r0, #0
 8007512:	d0d5      	beq.n	80074c0 <__swbuf_r+0x20>
 8007514:	f04f 37ff 	mov.w	r7, #4294967295
 8007518:	e7f4      	b.n	8007504 <__swbuf_r+0x64>
	...

0800751c <__swsetup_r>:
 800751c:	b538      	push	{r3, r4, r5, lr}
 800751e:	4b2a      	ldr	r3, [pc, #168]	; (80075c8 <__swsetup_r+0xac>)
 8007520:	4605      	mov	r5, r0
 8007522:	6818      	ldr	r0, [r3, #0]
 8007524:	460c      	mov	r4, r1
 8007526:	b118      	cbz	r0, 8007530 <__swsetup_r+0x14>
 8007528:	6a03      	ldr	r3, [r0, #32]
 800752a:	b90b      	cbnz	r3, 8007530 <__swsetup_r+0x14>
 800752c:	f7fd ff92 	bl	8005454 <__sinit>
 8007530:	89a3      	ldrh	r3, [r4, #12]
 8007532:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007536:	0718      	lsls	r0, r3, #28
 8007538:	d422      	bmi.n	8007580 <__swsetup_r+0x64>
 800753a:	06d9      	lsls	r1, r3, #27
 800753c:	d407      	bmi.n	800754e <__swsetup_r+0x32>
 800753e:	2309      	movs	r3, #9
 8007540:	602b      	str	r3, [r5, #0]
 8007542:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007546:	f04f 30ff 	mov.w	r0, #4294967295
 800754a:	81a3      	strh	r3, [r4, #12]
 800754c:	e034      	b.n	80075b8 <__swsetup_r+0x9c>
 800754e:	0758      	lsls	r0, r3, #29
 8007550:	d512      	bpl.n	8007578 <__swsetup_r+0x5c>
 8007552:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007554:	b141      	cbz	r1, 8007568 <__swsetup_r+0x4c>
 8007556:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800755a:	4299      	cmp	r1, r3
 800755c:	d002      	beq.n	8007564 <__swsetup_r+0x48>
 800755e:	4628      	mov	r0, r5
 8007560:	f7fe ff0e 	bl	8006380 <_free_r>
 8007564:	2300      	movs	r3, #0
 8007566:	6363      	str	r3, [r4, #52]	; 0x34
 8007568:	89a3      	ldrh	r3, [r4, #12]
 800756a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800756e:	81a3      	strh	r3, [r4, #12]
 8007570:	2300      	movs	r3, #0
 8007572:	6063      	str	r3, [r4, #4]
 8007574:	6923      	ldr	r3, [r4, #16]
 8007576:	6023      	str	r3, [r4, #0]
 8007578:	89a3      	ldrh	r3, [r4, #12]
 800757a:	f043 0308 	orr.w	r3, r3, #8
 800757e:	81a3      	strh	r3, [r4, #12]
 8007580:	6923      	ldr	r3, [r4, #16]
 8007582:	b94b      	cbnz	r3, 8007598 <__swsetup_r+0x7c>
 8007584:	89a3      	ldrh	r3, [r4, #12]
 8007586:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800758a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800758e:	d003      	beq.n	8007598 <__swsetup_r+0x7c>
 8007590:	4621      	mov	r1, r4
 8007592:	4628      	mov	r0, r5
 8007594:	f000 f883 	bl	800769e <__smakebuf_r>
 8007598:	89a0      	ldrh	r0, [r4, #12]
 800759a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800759e:	f010 0301 	ands.w	r3, r0, #1
 80075a2:	d00a      	beq.n	80075ba <__swsetup_r+0x9e>
 80075a4:	2300      	movs	r3, #0
 80075a6:	60a3      	str	r3, [r4, #8]
 80075a8:	6963      	ldr	r3, [r4, #20]
 80075aa:	425b      	negs	r3, r3
 80075ac:	61a3      	str	r3, [r4, #24]
 80075ae:	6923      	ldr	r3, [r4, #16]
 80075b0:	b943      	cbnz	r3, 80075c4 <__swsetup_r+0xa8>
 80075b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80075b6:	d1c4      	bne.n	8007542 <__swsetup_r+0x26>
 80075b8:	bd38      	pop	{r3, r4, r5, pc}
 80075ba:	0781      	lsls	r1, r0, #30
 80075bc:	bf58      	it	pl
 80075be:	6963      	ldrpl	r3, [r4, #20]
 80075c0:	60a3      	str	r3, [r4, #8]
 80075c2:	e7f4      	b.n	80075ae <__swsetup_r+0x92>
 80075c4:	2000      	movs	r0, #0
 80075c6:	e7f7      	b.n	80075b8 <__swsetup_r+0x9c>
 80075c8:	20000154 	.word	0x20000154

080075cc <_raise_r>:
 80075cc:	291f      	cmp	r1, #31
 80075ce:	b538      	push	{r3, r4, r5, lr}
 80075d0:	4604      	mov	r4, r0
 80075d2:	460d      	mov	r5, r1
 80075d4:	d904      	bls.n	80075e0 <_raise_r+0x14>
 80075d6:	2316      	movs	r3, #22
 80075d8:	6003      	str	r3, [r0, #0]
 80075da:	f04f 30ff 	mov.w	r0, #4294967295
 80075de:	bd38      	pop	{r3, r4, r5, pc}
 80075e0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80075e2:	b112      	cbz	r2, 80075ea <_raise_r+0x1e>
 80075e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80075e8:	b94b      	cbnz	r3, 80075fe <_raise_r+0x32>
 80075ea:	4620      	mov	r0, r4
 80075ec:	f000 f830 	bl	8007650 <_getpid_r>
 80075f0:	462a      	mov	r2, r5
 80075f2:	4601      	mov	r1, r0
 80075f4:	4620      	mov	r0, r4
 80075f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075fa:	f000 b817 	b.w	800762c <_kill_r>
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d00a      	beq.n	8007618 <_raise_r+0x4c>
 8007602:	1c59      	adds	r1, r3, #1
 8007604:	d103      	bne.n	800760e <_raise_r+0x42>
 8007606:	2316      	movs	r3, #22
 8007608:	6003      	str	r3, [r0, #0]
 800760a:	2001      	movs	r0, #1
 800760c:	e7e7      	b.n	80075de <_raise_r+0x12>
 800760e:	2400      	movs	r4, #0
 8007610:	4628      	mov	r0, r5
 8007612:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007616:	4798      	blx	r3
 8007618:	2000      	movs	r0, #0
 800761a:	e7e0      	b.n	80075de <_raise_r+0x12>

0800761c <raise>:
 800761c:	4b02      	ldr	r3, [pc, #8]	; (8007628 <raise+0xc>)
 800761e:	4601      	mov	r1, r0
 8007620:	6818      	ldr	r0, [r3, #0]
 8007622:	f7ff bfd3 	b.w	80075cc <_raise_r>
 8007626:	bf00      	nop
 8007628:	20000154 	.word	0x20000154

0800762c <_kill_r>:
 800762c:	b538      	push	{r3, r4, r5, lr}
 800762e:	2300      	movs	r3, #0
 8007630:	4d06      	ldr	r5, [pc, #24]	; (800764c <_kill_r+0x20>)
 8007632:	4604      	mov	r4, r0
 8007634:	4608      	mov	r0, r1
 8007636:	4611      	mov	r1, r2
 8007638:	602b      	str	r3, [r5, #0]
 800763a:	f7fa fadc 	bl	8001bf6 <_kill>
 800763e:	1c43      	adds	r3, r0, #1
 8007640:	d102      	bne.n	8007648 <_kill_r+0x1c>
 8007642:	682b      	ldr	r3, [r5, #0]
 8007644:	b103      	cbz	r3, 8007648 <_kill_r+0x1c>
 8007646:	6023      	str	r3, [r4, #0]
 8007648:	bd38      	pop	{r3, r4, r5, pc}
 800764a:	bf00      	nop
 800764c:	200008a4 	.word	0x200008a4

08007650 <_getpid_r>:
 8007650:	f7fa baca 	b.w	8001be8 <_getpid>

08007654 <__swhatbuf_r>:
 8007654:	b570      	push	{r4, r5, r6, lr}
 8007656:	460c      	mov	r4, r1
 8007658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800765c:	4615      	mov	r5, r2
 800765e:	2900      	cmp	r1, #0
 8007660:	461e      	mov	r6, r3
 8007662:	b096      	sub	sp, #88	; 0x58
 8007664:	da0c      	bge.n	8007680 <__swhatbuf_r+0x2c>
 8007666:	89a3      	ldrh	r3, [r4, #12]
 8007668:	2100      	movs	r1, #0
 800766a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800766e:	bf0c      	ite	eq
 8007670:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007674:	2340      	movne	r3, #64	; 0x40
 8007676:	2000      	movs	r0, #0
 8007678:	6031      	str	r1, [r6, #0]
 800767a:	602b      	str	r3, [r5, #0]
 800767c:	b016      	add	sp, #88	; 0x58
 800767e:	bd70      	pop	{r4, r5, r6, pc}
 8007680:	466a      	mov	r2, sp
 8007682:	f000 f849 	bl	8007718 <_fstat_r>
 8007686:	2800      	cmp	r0, #0
 8007688:	dbed      	blt.n	8007666 <__swhatbuf_r+0x12>
 800768a:	9901      	ldr	r1, [sp, #4]
 800768c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007690:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007694:	4259      	negs	r1, r3
 8007696:	4159      	adcs	r1, r3
 8007698:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800769c:	e7eb      	b.n	8007676 <__swhatbuf_r+0x22>

0800769e <__smakebuf_r>:
 800769e:	898b      	ldrh	r3, [r1, #12]
 80076a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076a2:	079d      	lsls	r5, r3, #30
 80076a4:	4606      	mov	r6, r0
 80076a6:	460c      	mov	r4, r1
 80076a8:	d507      	bpl.n	80076ba <__smakebuf_r+0x1c>
 80076aa:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80076ae:	6023      	str	r3, [r4, #0]
 80076b0:	6123      	str	r3, [r4, #16]
 80076b2:	2301      	movs	r3, #1
 80076b4:	6163      	str	r3, [r4, #20]
 80076b6:	b002      	add	sp, #8
 80076b8:	bd70      	pop	{r4, r5, r6, pc}
 80076ba:	466a      	mov	r2, sp
 80076bc:	ab01      	add	r3, sp, #4
 80076be:	f7ff ffc9 	bl	8007654 <__swhatbuf_r>
 80076c2:	9900      	ldr	r1, [sp, #0]
 80076c4:	4605      	mov	r5, r0
 80076c6:	4630      	mov	r0, r6
 80076c8:	f7fe feca 	bl	8006460 <_malloc_r>
 80076cc:	b948      	cbnz	r0, 80076e2 <__smakebuf_r+0x44>
 80076ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076d2:	059a      	lsls	r2, r3, #22
 80076d4:	d4ef      	bmi.n	80076b6 <__smakebuf_r+0x18>
 80076d6:	f023 0303 	bic.w	r3, r3, #3
 80076da:	f043 0302 	orr.w	r3, r3, #2
 80076de:	81a3      	strh	r3, [r4, #12]
 80076e0:	e7e3      	b.n	80076aa <__smakebuf_r+0xc>
 80076e2:	89a3      	ldrh	r3, [r4, #12]
 80076e4:	6020      	str	r0, [r4, #0]
 80076e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ea:	81a3      	strh	r3, [r4, #12]
 80076ec:	9b00      	ldr	r3, [sp, #0]
 80076ee:	6120      	str	r0, [r4, #16]
 80076f0:	6163      	str	r3, [r4, #20]
 80076f2:	9b01      	ldr	r3, [sp, #4]
 80076f4:	b15b      	cbz	r3, 800770e <__smakebuf_r+0x70>
 80076f6:	4630      	mov	r0, r6
 80076f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076fc:	f000 f81e 	bl	800773c <_isatty_r>
 8007700:	b128      	cbz	r0, 800770e <__smakebuf_r+0x70>
 8007702:	89a3      	ldrh	r3, [r4, #12]
 8007704:	f023 0303 	bic.w	r3, r3, #3
 8007708:	f043 0301 	orr.w	r3, r3, #1
 800770c:	81a3      	strh	r3, [r4, #12]
 800770e:	89a3      	ldrh	r3, [r4, #12]
 8007710:	431d      	orrs	r5, r3
 8007712:	81a5      	strh	r5, [r4, #12]
 8007714:	e7cf      	b.n	80076b6 <__smakebuf_r+0x18>
	...

08007718 <_fstat_r>:
 8007718:	b538      	push	{r3, r4, r5, lr}
 800771a:	2300      	movs	r3, #0
 800771c:	4d06      	ldr	r5, [pc, #24]	; (8007738 <_fstat_r+0x20>)
 800771e:	4604      	mov	r4, r0
 8007720:	4608      	mov	r0, r1
 8007722:	4611      	mov	r1, r2
 8007724:	602b      	str	r3, [r5, #0]
 8007726:	f7fa fac4 	bl	8001cb2 <_fstat>
 800772a:	1c43      	adds	r3, r0, #1
 800772c:	d102      	bne.n	8007734 <_fstat_r+0x1c>
 800772e:	682b      	ldr	r3, [r5, #0]
 8007730:	b103      	cbz	r3, 8007734 <_fstat_r+0x1c>
 8007732:	6023      	str	r3, [r4, #0]
 8007734:	bd38      	pop	{r3, r4, r5, pc}
 8007736:	bf00      	nop
 8007738:	200008a4 	.word	0x200008a4

0800773c <_isatty_r>:
 800773c:	b538      	push	{r3, r4, r5, lr}
 800773e:	2300      	movs	r3, #0
 8007740:	4d05      	ldr	r5, [pc, #20]	; (8007758 <_isatty_r+0x1c>)
 8007742:	4604      	mov	r4, r0
 8007744:	4608      	mov	r0, r1
 8007746:	602b      	str	r3, [r5, #0]
 8007748:	f7fa fac2 	bl	8001cd0 <_isatty>
 800774c:	1c43      	adds	r3, r0, #1
 800774e:	d102      	bne.n	8007756 <_isatty_r+0x1a>
 8007750:	682b      	ldr	r3, [r5, #0]
 8007752:	b103      	cbz	r3, 8007756 <_isatty_r+0x1a>
 8007754:	6023      	str	r3, [r4, #0]
 8007756:	bd38      	pop	{r3, r4, r5, pc}
 8007758:	200008a4 	.word	0x200008a4

0800775c <_init>:
 800775c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775e:	bf00      	nop
 8007760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007762:	bc08      	pop	{r3}
 8007764:	469e      	mov	lr, r3
 8007766:	4770      	bx	lr

08007768 <_fini>:
 8007768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800776a:	bf00      	nop
 800776c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800776e:	bc08      	pop	{r3}
 8007770:	469e      	mov	lr, r3
 8007772:	4770      	bx	lr
